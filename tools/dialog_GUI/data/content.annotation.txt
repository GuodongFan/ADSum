[2015-05-22T18:31:44.403Z]	<RyanCavanaugh>	welcome to the chat everyone
[2015-05-22T18:32:03.180Z]	<DanielRosenwasser>	clap
--------------------------------------------------------------------------------------------------
[2015-05-22T18:35:35.305Z]	<DickvdBrink>	hi everyone
[2015-05-22T18:36:16.610Z]	<danquirk>	welcome to the future
[2015-05-22T18:39:24.728Z]	<zhengbli>	be -pron- like a slack variant
[2015-05-22T18:42:42.127Z]	<danquirk>	fyi -pron- configure github integration so the activity feed should show issue pull push as -pron- come in -pron- can make -pron- noisier with comment as well if -pron- want
[2015-05-22T18:42:46.498Z]	<zhengbli>	aewsome
[2015-05-25T14:32:40.216Z]	<DickvdBrink>	roslyn corefx and coreclr be  <user> on gitter so i guess -pron- just depend on the project if -pron- use jabbr or gitter
--------------------------------------------------------------------------------------------------
[2015-05-22T18:41:58.805Z]	<danquirk>	more just a public chatroom for anyone with a little github integration not quite sure how mention and notification work yet
--------------------------------------------------------------------------------------------------
[2015-05-22T22:59:45.883Z]	<danquirk>	be anybody out there
--------------------------------------------------------------------------------------------------
[2015-05-23T02:36:20.654Z]	<nycdotnet>
--------------------------------------------------------------------------------------------------
[2015-05-23T23:48:53.161Z]	<basarat>	yes a slack variant but the key diff be here signup be by github atmention be  <user> by github -pron- would
[2015-05-23T23:50:37.154Z]	<Diullei>
--------------------------------------------------------------------------------------------------
[2015-05-25T12:07:40.604Z]	<Ciantic>	oh ts open a chat though i think where other ms stuff be be well platform but -pron- be not as easily integrate with github
[2015-05-25T13:05:50.087Z]	<Ciantic>	anyone know what mean with think about syntax do -pron- mean -pron- consider xml like syntax this thread
[2015-05-25T13:07:36.835Z]	<Ciantic>	i mean what be the purpose of even think this weird syntax if xml syntax be not be think i suppose -pron- be but could find -pron- from the roadmap
[2015-05-25T13:09:16.097Z]	<Ciantic>	i see the issue be re open  <user> at the same time so -pron- be consider -pron- but -pron- die to know more about the plan
[2015-05-25T18:05:01.104Z]	<Ciantic>	interesting
[2015-05-25T18:05:47.844Z]	<Ciantic>	i think the tsc could have a option to use already instal jsx transformer
[2015-05-25T18:05:56.467Z]	<Ciantic>	if the tsx be implement
[2015-05-26T07:58:42.809Z]	<Ciantic>	i think the tsx could be use to explore other extension too which be not standard es -pron- one concern i have with ts -pron- try to be future proof es but es be too darn slow process
--------------------------------------------------------------------------------------------------
[2015-05-25T12:42:39.922Z]	<fdecampredon>	hello
[2015-05-25T13:32:27.748Z]	<nycdotnet>	likely related to this
--------------------------------------------------------------------------------------------------
[2015-05-26T08:34:48.797Z]	<tinganho>	i agree i think the ts compiler should be extendable or pluggable with new syntax -pron- already have a discussion on -pron- here
[2015-05-26T08:58:19.226Z]	<DickvdBrink>	really think -pron- should be carefull with pluggable syntax
[2015-05-26T09:04:28.434Z]	<fdecampredon>	the problem in general with pluggable syntax be the complexity that -pron- create on the compiler side
[2015-05-26T09:05:00.223Z]	<fdecampredon>	if -pron- look at sweetjs just for add a macro system to js the project be already pretty complex
[2015-05-26T09:05:52.273Z]	<fdecampredon>	something like jsx involve scanner parser and type checker add a mechanism that could handle something as complex as jsx be a big challenge and imo not worth the amount of sweat need
--------------------------------------------------------------------------------------------------
[2015-05-26T09:28:31.956Z]	<tinganho>	here be an example of acorn do -pron- with jsx -pron- have hook for the scanner and parser and then -pron- import acorn to do whatever -pron- want for ts -pron- mean extra hook for the type checker binder emitter etc -pron- do look that complex and -pron- be million hook -pron- be talk about maybe around hook for the whole ts project
--------------------------------------------------------------------------------------------------
[2015-05-26T15:59:52.824Z]	<jonathandturner>	couple of issue the focus for ts be on add a thin layer to js support upcoming feature of js and have a reasonable type system on top of this have a pluggable system that compose dsl be outside of scope and arguably  <user> blow the complexity budget for the parser
--------------------------------------------------------------------------------------------------
[2015-05-26T21:55:15.737Z]	<RyanCavanaugh>	new proposal post to could use some feedback there especially from non react jsx consumer if those exist
[2015-05-27T05:35:01.489Z]	<ejsmith>	anyone have any idea when the next beta be go to be release
[2015-05-27T05:39:33.144Z]	<ejsmith>	i really do understand why anyone think -pron- a good idea to mix javascript and html why not use an html fragment with string interpolation syntax to replace variable
[2015-05-27T06:38:07.779Z]	<basarat>
[2015-05-27T13:00:26.683Z]	<jonathandturner>	some info here not template literal
[2015-05-27T17:02:48.946Z]	<RyanCavanaugh>	so what -pron- hear be that when -pron- look up an element class type to determine the element attribute type -pron- should have a different process for determine the type of the element expression -pron-
[2015-05-27T17:15:07.695Z]	<RyanCavanaugh>	in an expression var x foo
[2015-05-27T17:15:28.887Z]	<RyanCavanaugh>	-pron- have a set of rule that say give foo be bar legal and if so what type do -pron- check y with
[2015-05-27T17:15:46.114Z]	<RyanCavanaugh>	in -pron- proposal that type from foo flow into x which be incorrect
[2015-05-27T17:16:05.254Z]	<RyanCavanaugh>	-pron- should have some other rule that produce a type for x give foo
[2015-05-27T17:16:38.999Z]	<fdecampredon>	one option be to be very react specific type -pron- as type foo prop bar y
[2015-05-27T17:16:46.393Z]	<RyanCavanaugh>	do that rule need to depend on foo at all from read react code in the wild i see that people do very little with these expression other than render -pron-
[2015-05-27T17:16:57.076Z]	<RyanCavanaugh>	or nest -pron-
[2015-05-27T17:18:28.575Z]	<RyanCavanaugh>	where component need to be a mycomponent not a div
[2015-05-27T17:18:46.541Z]	<RyanCavanaugh>	i see
[2015-05-27T17:19:21.384Z]	<RyanCavanaugh>	so if there be just one jsxelement type that all expression of the form foo have -pron- could type mymodal as prop component jsxelement
[2015-05-27T17:19:55.614Z]	<RyanCavanaugh>	rather component
[2015-05-27T17:20:11.538Z]	<RyanCavanaugh>	reactelement
[2015-05-27T17:20:49.769Z]	<fdecampredon>	-pron- could introduce a type that be use defacto for jsx expression
[2015-05-27T17:21:14.161Z]	<RyanCavanaugh>	hmm
[2015-05-27T17:21:42.316Z]	<fdecampredon>	for example module jsx interface jsxelement t p
[2015-05-27T17:23:04.310Z]	<RyanCavanaugh>	probably need to include child in there somehow
[2015-05-27T17:23:22.908Z]	<RyanCavanaugh>	but that seem very doable
[2015-05-27T17:23:51.005Z]	<RyanCavanaugh>	be that jsxelement foo or jsxelement typeof foo
[2015-05-27T17:24:27.498Z]	<RyanCavanaugh>	ref key seem ok since can augment jsxelement
[2015-05-27T17:24:38.346Z]	<RyanCavanaugh>	or
[2015-05-27T17:24:53.484Z]	<RyanCavanaugh>	be -pron- or
--------------------------------------------------------------------------------------------------
[2015-05-27T06:42:44.768Z]	<basarat>	html fragment with string interpolation syntax be a good idea if -pron- be literally replace innerhtml
[2015-05-27T06:45:43.059Z]	<tinganho>	-pron- time for -pron- to think the jsx syntax as a view literal typescript var obj a b object literal var view div literal
--------------------------------------------------------------------------------------------------
[2015-05-27T13:46:59.696Z]	<markrendle>	hi thank for set this room up
[2015-05-27T13:50:08.833Z]	<markrendle>	so any news on when a new beta with system may be show up shipit smile
--------------------------------------------------------------------------------------------------
[2015-05-27T15:35:12.681Z]	<fdecampredon>	-pron- still not quite fond of the jsx typing proposal
[2015-05-27T15:36:50.687Z]	<fdecampredon>	just for info what be the problem of typing base on factory similar to what i propose in -pron- pr
[2015-05-27T15:41:00.982Z]	<RyanCavanaugh>	i do see any typing in that pr the checker only do grammar base checking as far as i could tell
[2015-05-27T15:45:41.922Z]	<RyanCavanaugh>	one issue with the proposal as describe in the comment be that -pron- have to hardcode in react semantic about upper vs low meaning value or stre
[2015-05-27T15:45:54.617Z]	<RyanCavanaugh>	the comment in the pr not the comment in
[2015-05-27T16:33:38.169Z]	<fdecampredon>	initially the pr have some type checking but suggest that -pron- only start with parsing which be a good idea p i can understand the problem of string vs value -pron- true than in this aspect -pron- be far superior
[2015-05-27T16:34:56.000Z]	<fdecampredon>	however i still would like to get the freedom of define what be the return type of jsxelement idk how and if -pron- possible however
[2015-05-27T17:14:38.614Z]	<fdecampredon>	sorry do not understood
[2015-05-27T17:15:37.848Z]	<fdecampredon>	yes
[2015-05-27T17:16:13.429Z]	<fdecampredon>	yes
[2015-05-27T17:17:43.809Z]	<fdecampredon>	yes and know quite often some attribute require a reactelement as type
[2015-05-27T17:18:08.476Z]	<fdecampredon>	for example mymodal
[2015-05-27T17:18:40.398Z]	<fdecampredon>	no -pron- need to be a reactelement
[2015-05-27T17:19:33.620Z]	<fdecampredon>	with react -pron- generally never nee to use the type of the element -pron- but the information that -pron- be a reactelement may be usefull
[2015-05-27T17:22:26.937Z]	<fdecampredon>	and for var x foo bar x be foo bar true
[2015-05-27T17:23:18.569Z]	<fdecampredon>	yup
[2015-05-27T17:23:48.482Z]	<fdecampredon>	the last problem be ref key
[2015-05-27T17:24:00.674Z]	<fdecampredon>	typeof foo sorry
[2015-05-27T17:25:04.618Z]	<fdecampredon>	unfortunatly
[2015-05-27T17:25:38.050Z]	<fdecampredon>	oh yes
--------------------------------------------------------------------------------------------------
[2015-05-27T17:24:26.064Z]	<fdecampredon>	but ref key be too react specific and consider that -pron- a part of prop be not so much a problem
[2015-05-27T17:25:21.169Z]	<RyanCavanaugh>	that good can augment the jsxelement
[2015-05-27T17:25:27.405Z]	<RyanCavanaugh>	augment the jsxelement interface
[2015-05-27T17:25:41.740Z]	<fdecampredon>	perfect
[2015-05-27T17:26:27.885Z]	<fdecampredon>	child however be a part of prop
[2015-05-27T17:26:39.548Z]	<RyanCavanaugh>	hrmm
[2015-05-27T17:26:55.856Z]	<fdecampredon>	but jsxelement t p c should be enough
[2015-05-27T17:27:28.248Z]	<RyanCavanaugh>	interface jsxelement elemclass attribs child prop child
[2015-05-27T17:27:36.036Z]	<fdecampredon>	yes
[2015-05-27T17:27:39.678Z]	<RyanCavanaugh>	assume -pron- get type operator smiley
--------------------------------------------------------------------------------------------------
[2015-05-27T17:28:31.102Z]	<RyanCavanaugh>	-pron- have some other scenario show up for so maybe -pron- can push that forward
[2015-05-27T17:28:56.812Z]	<fdecampredon>	yes i make an issue some month ago for that one
[2015-05-27T17:29:25.341Z]	<RyanCavanaugh>	ok i think -pron- have a good path forward for this
[2015-05-27T17:29:28.631Z]	<fdecampredon>	anyway from a react user perspective i think -pron- just define thing like that
[2015-05-27T17:29:40.901Z]	<RyanCavanaugh>	what should be do about child
[2015-05-27T17:30:04.105Z]	<RyanCavanaugh>	oh before that and
[2015-05-27T17:30:16.234Z]	<fdecampredon>	interface jsxelement elemclass attribs child jsxelementbrand prop attribs
[2015-05-27T17:30:35.277Z]	<RyanCavanaugh>	specialattributeprefixe be pretty bad
[2015-05-27T17:31:09.866Z]	<RyanCavanaugh>	ander be suggest that attribute name that would not be legal identifier be consider special
[2015-05-27T17:31:23.432Z]	<fdecampredon>	be really not need for react usage -pron- just want to be able to tell i expect an reactelement here
[2015-05-27T17:32:20.896Z]	<fdecampredon>	most of the time special attribute like be not use at all for react
[2015-05-27T17:32:51.284Z]	<fdecampredon>	i seriously would not mind if there be not type check
[2015-05-27T17:33:00.424Z]	<fdecampredon>	-pron- be not
--------------------------------------------------------------------------------------------------
[2015-05-27T17:33:19.009Z]	<RyanCavanaugh>	i agree typechecke -pron- be very useful in general
[2015-05-27T17:33:43.302Z]	<RyanCavanaugh>	be there much danger that people write div accept and -pron- allow that when -pron- should
[2015-05-27T17:34:10.617Z]	<RyanCavanaugh>	-pron- seem  <user> to -pron- and would be a runtime warn anyway
[2015-05-27T17:34:16.818Z]	<fdecampredon>	honestly not really
[2015-05-27T17:34:50.031Z]	<RyanCavanaugh>	ok that eliminate a big piece of magic then very good
[2015-05-27T17:35:34.538Z]	<fdecampredon>	the typechecker could just completely ignore -pron- and that would be fine
[2015-05-27T17:35:46.674Z]	<RyanCavanaugh>	microsoft typescript bqvu thumb microsoft typescript bqvu blob
[2015-05-27T17:36:08.919Z]	<fdecampredon>	haha can wait to play with -pron-
[2015-05-27T17:36:31.616Z]	<RyanCavanaugh>	alright thank for -pron- feedback super useful i  <user> work on another revision
[2015-05-27T17:37:06.813Z]	<RyanCavanaugh>	do -pron- want to pick up the as operator pr and do the parse work on that pr branch i do like that -pron- block -pron- but i want to finish the type system design here before i go back to address dan comment
[2015-05-27T17:37:11.372Z]	<fdecampredon>	thank to -pron- have react typescript would definitely speedup -pron- productivity
[2015-05-27T17:37:42.922Z]	<fdecampredon>	i have already start to work on that and -pron- not block -pron-
[2015-05-27T17:38:01.901Z]	<RyanCavanaugh>	ok great
[2015-05-27T17:38:07.880Z]	<fdecampredon>	all i have to do be remove all the disambiguation work so there be not so much problem
[2015-05-27T17:44:38.715Z]	<RyanCavanaugh>	var x foo x the react desugar be null x
--------------------------------------------------------------------------------------------------
[2015-05-27T17:44:09.940Z]	<RyanCavanaugh>	one problem i have with how the parse scanning work be in react emit
--------------------------------------------------------------------------------------------------
[2015-05-27T17:44:59.460Z]	<RyanCavanaugh>	i have to re synthesize the intervene whitespace string base on node position
--------------------------------------------------------------------------------------------------
[2015-05-27T17:45:38.083Z]	<RyanCavanaugh>	if -pron- at all possible to make those show up as jsxtext node that would be really nice though base on read the scanner code -pron- not sure if -pron- be possible without a lot of invasive change
[2015-05-27T17:46:31.090Z]	<fdecampredon>	normally foo x be transform to openingelment jsxtext jsxexpression jsxtext openingelement
[2015-05-27T17:46:59.335Z]	<fdecampredon>	if that not the case -pron- a bug from -pron- parser
[2015-05-27T17:47:08.749Z]	<fdecampredon>	-pron- try to give a look at -pron-
--------------------------------------------------------------------------------------------------
[2015-05-27T17:53:29.345Z]	<fdecampredon>	ok i think i understand since i remove the state from the scanner and delegate parsing of jsx child to the parser when foo x be parse the parser skip the trivia
--------------------------------------------------------------------------------------------------
[2015-05-27T18:03:46.787Z]	<fdecampredon>	should i reintroduce the injsxchild state in the scanner or use a rescanjsxchild the problem with the rescan be that -pron-  <user> be call a lot
--------------------------------------------------------------------------------------------------
[2015-05-27T18:08:19.105Z]	<RyanCavanaugh>	-pron- should be here soonish usually get in in about minute
[2015-05-27T18:10:45.990Z]	<fdecampredon>	 <user>
[2015-05-27T18:14:41.289Z]	<fdecampredon>	btw for what other example would -pron- need i state a certain number of well know library do -pron- want usage example
[2015-05-27T18:15:57.970Z]	<RyanCavanaugh>	yea some specific function example would be useful
[2015-05-27T18:16:20.745Z]	<RyanCavanaugh>	which one from underscore be -pron- refer to
[2015-05-27T18:17:52.789Z]	<fdecampredon>	let -pron- check can remember but something like zip if i can remember correctly
[2015-05-27T18:24:11.000Z]	<RyanCavanaugh>	hrm
[2015-05-27T18:24:22.071Z]	<fdecampredon>	in fact i should update -pron- comment any type work as list but just return incoherent result if -pron- pass stre
[2015-05-27T18:24:46.517Z]	<RyanCavanaugh>
[2015-05-27T18:26:48.915Z]	<fdecampredon>	wow fast implementation of the suggestion
[2015-05-27T18:27:18.614Z]	<RyanCavanaugh>	 <user> a good compiler testcase as the apparent type of all primitive be now infinitely expand
[2015-05-27T18:29:15.277Z]	<fdecampredon>	thank a lot -pron-  <user> help d
[2015-05-27T18:29:35.870Z]	<RyanCavanaugh>	post a comment there if that lead to any weird behavior i have no idea what  <user> happen
[2015-05-27T18:46:40.382Z]	<DanielRosenwasser>	may microsoft -pron- should be in beta if -pron- interested
--------------------------------------------------------------------------------------------------
[2015-05-27T18:48:58.020Z]	<DanielRosenwasser>	jspm support for -pron- be apparently in -pron- master branch
--------------------------------------------------------------------------------------------------
[2015-05-27T19:14:06.613Z]	<CyrusNajmabadi>	test
[2015-05-27T19:16:38.845Z]	<CyrusNajmabadi>	hey -pron- there
[2015-05-27T19:22:53.906Z]	<CyrusNajmabadi>	i chat with and i think i have a decent grasp of the issue imo -pron- would make sense for re add the scanner mode for scanning out these jsxtext section properly
[2015-05-27T19:23:49.986Z]	<CyrusNajmabadi>	one thing that i be realize be how important whitespace be in a jsxtext section and that -pron- definitely should not be consider trivia
[2015-05-27T19:25:42.334Z]	<CyrusNajmabadi>	imo ideally -pron- would have state in the scanner tell -pron- be mode -pron- be in but rather there would be an entirely new entry point into the scanner call something like scanxmltoken this would effectively return only one of jsxtext opencurly lessthan lessthanslash and maybe a couple additional one i do remember i would hand write this scanner and not really attempt to mix -pron- in with the core complicated scanning logic for ts what do -pron- think
[2015-05-27T19:54:49.845Z]	<fdecampredon>	sorry i be afk
[2015-05-27T19:55:43.348Z]	<fdecampredon>	so basicly i create a special scan function for child of jsxelement
[2015-05-27T19:57:21.575Z]	<CyrusNajmabadi>	i believe so yes
[2015-05-27T19:57:34.296Z]	<CyrusNajmabadi>	can -pron- enumerate the set of token -pron- would expect to get as a child of a jsxelement
[2015-05-27T19:57:39.993Z]	<CyrusNajmabadi>	just so -pron- on the same page
[2015-05-27T19:57:46.393Z]	<CyrusNajmabadi>	i do want to lead -pron- down the wrong path
[2015-05-27T19:58:00.988Z]	<CyrusNajmabadi>	and no need to be sorry
--------------------------------------------------------------------------------------------------
[2015-05-27T19:58:21.021Z]	<fdecampredon>	now that -pron- do have to disambiguate there be token
[2015-05-27T19:58:39.565Z]	<fdecampredon>	text
[2015-05-27T19:59:36.024Z]	<fdecampredon>	or perhaps i could remove the rescanlesserthantoken and  <user> return
[2015-05-27T20:08:16.920Z]	<fdecampredon>	be right back
--------------------------------------------------------------------------------------------------
[2015-05-27T20:00:43.290Z]	<fdecampredon>	but anyway i  <user> have to introuce a injsxchild flag on the parser to prevent -pron- for invoke the normal scanning function
--------------------------------------------------------------------------------------------------
[2015-05-27T20:03:04.536Z]	<fdecampredon>	 <user> i should perhaps return and because even if -pron- do really need to catch -pron- for parsing i think that the jsxtransformer  <user> error on those token
--------------------------------------------------------------------------------------------------
[2015-05-27T22:25:12.141Z]	<RyanCavanaugh>	whitespace in jsx element be crazy than i expect
[2015-05-27T22:29:38.736Z]	<RyanCavanaugh>
[2015-05-27T22:30:00.102Z]	<RyanCavanaugh>	so lead and trail whitespace per line should be ignore
[2015-05-27T22:31:31.674Z]	<RyanCavanaugh>	i do know if that suppose to be a react rule or a jsx rule
[2015-05-27T22:31:50.101Z]	<RyanCavanaugh>	i guess jsx
[2015-05-27T22:40:07.917Z]	<fdecampredon>	after react remove some whitespace when render
[2015-05-27T22:40:16.026Z]	<fdecampredon>	but yes jsx emit every whitespace
[2015-05-27T23:17:38.802Z]	<fdecampredon>	oops yup sorry forget about line stuff
[2015-05-29T01:49:19.655Z]	<RyanCavanaugh>	yea
--------------------------------------------------------------------------------------------------
[2015-05-29T01:37:31.822Z]	<ronnross>	hi -pron- try to use typescript to build an app -pron- have an issue build the project i get can not compile external module unless the flag be provide -pron- not sure why i would need a flag when -pron- already define the module type in the
[2015-05-29T01:37:56.048Z]	<RyanCavanaugh>	what the content of
[2015-05-29T01:40:35.648Z]	<ronnross>	compileroption target module commonjs
[2015-05-29T01:43:59.000Z]	<RyanCavanaugh>	hrm -pron- work for -pron-
[2015-05-29T01:44:47.052Z]	<RyanCavanaugh>	do -pron- get an error if -pron- make the file unparseable
[2015-05-29T01:46:22.675Z]	<RyanCavanaugh>	if -pron- pass any filename on the commandline the file be ignore
[2015-05-29T01:46:54.013Z]	<ronnross>	oh i do know that
[2015-05-29T01:47:41.014Z]	<ronnross>	so then -pron- would have to add commonjs
[2015-05-29T01:48:00.840Z]	<RyanCavanaugh>	-pron- either a put all -pron- option on the commandline or b put all -pron- option in the
[2015-05-29T01:48:27.523Z]	<RyanCavanaugh>	note that the default behavior be to compile all file if -pron- do have a file entry which be usually convenient
[2015-05-29T01:48:38.572Z]	<ronnross>	so i would add the file i need in the tsconfig
[2015-05-29T01:50:44.146Z]	<ronnross>	awesome thank
--------------------------------------------------------------------------------------------------
[2015-05-29T13:40:18.243Z]	<LabEG>	hi all
[2015-05-29T13:41:04.210Z]	<LabEG>	how to make this construction function use strict in type script
[2015-05-29T13:43:55.859Z]	<markrendle>	either just do that -pron- totally valid typescript or with a lambda
[2015-05-29T13:43:57.016Z]	<markrendle>	use strict
[2015-05-29T13:44:23.242Z]	<markrendle>	or use a throwaway module as in
[2015-05-29T13:44:59.406Z]	<markrendle>	module foo use strict
[2015-05-29T13:46:58.762Z]	<LabEG>
[2015-05-29T13:47:08.599Z]	<LabEG>	not work
[2015-05-29T13:50:02.680Z]	<LabEG>	i need isolate scope
[2015-05-29T13:56:20.301Z]	<Diullei>	the import and class declaration must be at the top level -pron- can not use -pron- inside a function
[2015-05-29T13:58:37.873Z]	<markrendle>	-pron- in a commonjs module isolated scope be implicit
[2015-05-29T13:59:50.941Z]	<LabEG>	var test submodule var main function function main return main
[2015-05-29T13:59:57.967Z]	<LabEG>	-pron- compile next code
[2015-05-29T14:00:12.188Z]	<LabEG>	test and main be now global variable
[2015-05-29T14:00:24.648Z]	<LabEG>	i do not want this
[2015-05-29T14:04:30.136Z]	<markrendle>	test and main be local to the module which be whatever this file be
[2015-05-29T14:05:07.947Z]	<markrendle>	that how commonjs work
[2015-05-29T14:05:52.796Z]	<markrendle>	if -pron- specify amd as the module type then -pron- get everything wrap in a function
[2015-05-29T14:05:53.218Z]	<LabEG>	hmm ok thank
[2015-05-29T14:40:26.442Z]	<LabEG>	and second question
[2015-05-29T14:40:29.423Z]	<LabEG>	how to prevent non typed code
--------------------------------------------------------------------------------------------------
[2015-05-29T15:56:26.387Z]	<RyanCavanaugh>	 <user> prevent thing from be of type any unless -pron- explicitly have a type annotation
[2015-05-29T15:56:50.018Z]	<RyanCavanaugh>	that say there be an option that  <user> make all use of any an error
[2015-05-29T16:16:54.693Z]	<nycdotnet>	if -pron- want to ban any check out and the no any rule however be usually good enough combine with the new switch to let -pron- occasionally fudge where necessary
--------------------------------------------------------------------------------------------------
[2015-05-29T22:10:53.066Z]	<RyanCavanaugh>
[2015-05-29T22:10:58.890Z]	<RyanCavanaugh>	some relevant note on the parse work there
[2015-05-30T06:16:56.585Z]	<fdecampredon>	yup
[2015-05-30T06:17:06.259Z]	<fdecampredon>	just see that thank
--------------------------------------------------------------------------------------------------
[2015-05-30T21:21:11.969Z]	<neermitt>	i be try to build angular app with typescript compiler but i be face one issue
[2015-05-30T21:21:18.655Z]	<neermitt>	reference be consider relative external module
[2015-05-30T21:21:30.869Z]	<neermitt>	can anybody help
[2015-05-31T21:33:50.376Z]	<MicahZoltu>	what technique if any do people have for debug typescript compiler bug
[2015-05-31T21:34:02.904Z]	<MicahZoltu>	-pron- try to prep a pr but -pron- be work and -pron- not sure where to begin
--------------------------------------------------------------------------------------------------
[2015-05-30T21:41:54.253Z]	<dcharbonnier>	hi i do understand why the file mention and the package available on npm be
[2015-05-31T01:11:46.740Z]	<basarat>	the on npm be a snapshot of a commit find in release the one on master other branch be plan stuff
[2015-05-31T21:34:33.094Z]	<MicahZoltu>	slightly related be -pron- expect that test be fail on master at the moment
[2015-05-31T22:37:46.478Z]	<basarat>	should be no failure suspect -pron- test failure be due crlf setting see readme
[2015-05-31T22:38:20.605Z]	<MicahZoltu>	thank for the tip -pron- check i do a clone follow by build build test test and receive error
[2015-05-31T22:38:35.667Z]	<basarat>	i use and comment out describe call for unimportant case
[2015-05-31T22:39:07.233Z]	<basarat>	-pron- need to set crlf before clone
[2015-05-31T22:39:09.612Z]	<MicahZoltu>	and then just run the compiler manually
[2015-05-31T22:39:52.370Z]	<MicahZoltu>	i should submit a pr to remove that requirement
[2015-05-31T22:40:00.485Z]	<basarat>	no to run manually use jake runtest test project etc
[2015-05-31T22:40:32.140Z]	<basarat>	people have try and fail -pron- can try again
[2015-05-31T22:40:58.211Z]	<MicahZoltu>	really should be pretty simple just set -pron- for the project
[2015-05-31T22:41:49.464Z]	<MicahZoltu>
[2015-05-31T22:42:42.779Z]	<MicahZoltu>	-pron- guess the repo need to be set to binary since i presume there be test case that depend on certain line ending
[2015-05-31T22:46:43.454Z]	<basarat>	i try that but with binary why -pron- no give diff
[2015-05-31T22:47:06.091Z]	<MicahZoltu>	hmm interesting -pron- fiddle briefly then give up
[2015-05-31T22:59:48.191Z]	<MicahZoltu>	should be fix now
[2015-05-31T23:01:39.461Z]	<MicahZoltu>	thank for the help
[2015-05-31T23:08:29.664Z]	<basarat>
[2015-06-01T01:30:36.999Z]	<basarat>	run jake runtest test project and modify with the follow right before the describe call ts if return
[2015-06-01T01:33:00.714Z]	<basarat>	i have this stash from when i send the last pr
[2015-06-01T02:13:09.255Z]	<basarat>
[2015-06-01T02:15:11.479Z]	<MicahZoltu>	when run the test what be the small set of jake command i need to run
[2015-06-01T02:15:28.418Z]	<MicahZoltu>	currently i be do build build test runtest
[2015-06-01T03:32:55.136Z]	<basarat>	yes that be intentional just runtest rise
[2015-06-01T03:34:19.829Z]	<MicahZoltu>	be -pron- allow to import a relative file outside of a typescript project root
[2015-06-01T03:34:32.597Z]	<MicahZoltu>	import from
[2015-06-01T03:35:23.444Z]	<basarat>	yes although i do like -pron- -pron- have the potential to mess up commonrootdir which can be fix with a further hacky command line flag i think -pron- call
[2015-06-01T03:36:24.087Z]	<MicahZoltu>	since -pron- can reference a file like that and then that file can reference something relative to -pron- that file can realistically walk up the tree look for something like a or other
[2015-06-01T03:36:27.985Z]	<basarat>	yes fwiw if chain -pron- build be not an issue -pron- can compile with
[2015-06-01T03:36:53.002Z]	<basarat>	yes tconfig discovery would not be possible
[2015-06-01T03:36:54.482Z]	<MicahZoltu>	sorry not source map try to create a pr for the other half of
[2015-06-01T03:37:26.159Z]	<MicahZoltu>	but the whole relative thing have -pron- stump since -pron- directory be one of the more likely thing to be outside of project root
[2015-06-01T03:37:55.722Z]	<MicahZoltu>	yet import from need to be able to import thing of -pron- own and -pron- need to be the one that define where those dependency be
[2015-06-01T03:38:10.032Z]	<MicahZoltu>	otherwise -pron- can have dependency with dependency
[2015-06-01T03:38:25.321Z]	<basarat>	yes first half of that i do be incomplete in that -pron- really need support for file that be not a part of the project but still a part of the compilation validation context this be miss
[2015-06-01T03:38:47.767Z]	<MicahZoltu>	yeah i have -pron- mostly do except for that one little piece
[2015-06-01T03:40:09.955Z]	<MicahZoltu>	i guess i can at least finish the pr for everything be part of the project leave out of project for later
[2015-06-01T19:15:46.082Z]	<danquirk>	use the runtest browser task instead of runtest and -pron- can use -pron- browser of choice ex add b chrome along with t project to debug the compiler as -pron- work
--------------------------------------------------------------------------------------------------
[2015-06-01T01:27:43.465Z]	<MicahZoltu>	how do i run just one project test jake runtest test project run -pron- all jake runtest test project do appear to run anything
[2015-06-01T01:31:12.317Z]	<basarat>	this be purely what i end up with and perhaps not how the typescript team intend rise
[2015-06-01T01:32:56.339Z]	<basarat>	microsoft thumb microsoft blob
[2015-06-01T01:42:40.063Z]	<MicahZoltu>	thank again
[2015-06-01T02:12:52.573Z]	<MicahZoltu>	attach a debugger to the typescript compiler would be so amazing right now
[2015-06-01T02:13:46.354Z]	<MicahZoltu>	have to write log line recompile rerun repeat remind -pron- of debug in the
[2015-06-01T02:14:11.382Z]	<MicahZoltu>	i have be spoil by visual studio debugger never write log line again just set a breakpoint and hit go
[2015-06-01T02:53:06.864Z]	<MicahZoltu>	look like one can just runtest
[2015-06-01T03:35:52.730Z]	<MicahZoltu>	-pron- severely complicate locate mapping file
--------------------------------------------------------------------------------------------------
[2015-06-02T01:06:03.701Z]	<MicahZoltu>	thank would have save -pron- a ton of work last night
--------------------------------------------------------------------------------------------------
[2015-06-02T11:13:46.615Z]	<ericmdantas>	hello
[2015-06-02T11:14:58.804Z]	<ericmdantas>	quick question if i have which  <user> import all -pron- dependency can i only map in -pron- file to transpile this file and all -pron- dependency  <user> be transpile too
[2015-06-02T11:17:20.365Z]	<ericmdantas>	well look like -pron- do thank anyway
[2015-06-02T14:34:48.389Z]	<Ciantic>	-pron- import ts module only with ts before now -pron- get problem
[2015-06-02T14:35:06.840Z]	<Ciantic>	if i compile -pron- module normally the other module use -pron- can find -pron-
[2015-06-02T14:35:33.817Z]	<Ciantic>	apparently i should be able to wrap whole generate with declare -pron- module but be there easy way use tsconfig
[2015-06-02T14:37:41.958Z]	<Ciantic>	basically -pron- problem be exactly this one
[2015-06-02T14:37:51.084Z]	<Ciantic>	some one resort to writing by hand
[2015-06-02T14:38:25.463Z]	<Ciantic>	-pron- write a npm module with ts and the generate be not module friendly
[2015-06-02T14:41:18.785Z]	<ericmdantas>	could -pron- show some code
[2015-06-02T14:42:35.253Z]	<Ciantic>	too much code i must create a simple case
[2015-06-02T14:43:14.019Z]	<ericmdantas>	but let -pron- see if i get what -pron- mean
[2015-06-02T14:43:26.071Z]	<ericmdantas>	-pron- create a npm module
[2015-06-02T14:43:40.023Z]	<ericmdantas>	and -pron- want the user developer to be able to use -pron- typing
[2015-06-02T14:43:43.294Z]	<ericmdantas>	correct
[2015-06-02T14:44:29.824Z]	<Ciantic>	i want to import -pron- normally
[2015-06-02T14:44:38.315Z]	<Ciantic>	just a moment
[2015-06-02T14:56:36.761Z]	<Ciantic>	problem be the generation there be no way to say i want to define module with a name just upload this simple example
[2015-06-02T14:59:31.213Z]	<Ciantic>	here be the example
[2015-06-02T14:59:31.899Z]	<Ciantic>
[2015-06-02T14:59:46.136Z]	<Ciantic>	tsc error can not find external module other module
[2015-06-02T15:00:15.043Z]	<Ciantic>	but -pron- do find the some other module cause -pron- laboriously type the declare module some other module
[2015-06-02T15:00:26.533Z]	<Ciantic>	tsconfig should have a switch to generate this
[2015-06-02T15:00:46.917Z]	<Ciantic>	there be no way in other module to make ts generate this line that i know of
[2015-06-02T15:02:52.911Z]	<ericmdantas>	i see what -pron- mean now
[2015-06-02T15:03:15.301Z]	<ericmdantas>	i do know how to accomplish that either since -pron- not -pron- module
[2015-06-02T15:05:06.068Z]	<Ciantic>	there should be a way to define a name module this be require always when create a npm package with ts
[2015-06-02T15:06:00.970Z]	<Ciantic>	root of the problem be here
[2015-06-02T15:06:14.275Z]	<Ciantic>	this file define other module but there be no syntax to say -pron- do so
[2015-06-02T15:10:35.594Z]	<ericmdantas>	yeah just simulate this
[2015-06-02T15:11:39.210Z]	<ericmdantas>	today i have this something like js module x export class x constructor x
[2015-06-02T15:12:09.077Z]	<ericmdantas>	this  <user> create the declaration thing just fine
[2015-06-02T15:12:24.935Z]	<Ciantic>
[2015-06-02T15:13:28.752Z]	<ericmdantas>	yeah that pretty much -pron-
--------------------------------------------------------------------------------------------------
[2015-06-03T17:09:31.104Z]	<ejsmith>	ugh i really wish -pron- could get a more recent drop of ts -pron- know -pron- not do but there have be a lot of progress since the last release
[2015-06-03T17:09:46.724Z]	<ejsmith>	how about a beta drop
--------------------------------------------------------------------------------------------------
[2015-06-03T18:09:54.847Z]	<RyanCavanaugh>	any status update on parse
--------------------------------------------------------------------------------------------------
[2015-06-03T18:50:40.436Z]	<mitranim>	question be there an option to supress warning during compilation i transpile concatenate view and do want to include a file with -pron-
[2015-06-03T18:54:37.065Z]	<mhegazy>	-pron- be work on a stable typescript release soon -pron- be currently in the stabilization stage so stay tune
[2015-06-03T19:01:26.099Z]	<mitranim>	okay nevermind just modify the html transpiler to use
[2015-06-03T19:02:32.954Z]	<mitranim>	another question ts now warn about decorator be subject to change in future release i understand that -pron- a super early feature but be there any actual plan to change -pron-
[2015-06-03T19:02:50.201Z]	<mitranim>	just to know if -pron- need to prepare to rewrite -pron- exist decorator later on
[2015-06-03T19:03:06.378Z]	<mitranim>	would be nice to know what an upcoming change if any could be
[2015-06-03T19:04:22.580Z]	<ericmdantas>	i think -pron- depend on where the proposal and the actual implementation be head
[2015-06-03T19:07:31.011Z]	<ericmdantas>	i guess this be the one
[2015-06-03T19:37:20.874Z]	<mhegazy>	there be no plan as of now the proposal be at stage now in the feature life cycle this mean that be be likely to change -pron-  <user> be announce any change plan as early as -pron- know -pron- but at this point -pron- be not really in -pron- hand since -pron- have commit to always honor es standard
[2015-06-03T19:37:54.930Z]	<mitranim>	yes great to hear
[2015-06-03T20:53:34.315Z]	<fdecampredon>	shoul be able to finish the refactoring by the end of week
[2015-06-03T20:53:40.905Z]	<fdecampredon>	i should
[2015-06-03T20:53:46.231Z]	<RyanCavanaugh>	great
[2015-06-03T20:53:59.159Z]	<RyanCavanaugh>	one thing that come up yesterday be generic arrow function t x
[2015-06-03T20:54:40.622Z]	<RyanCavanaugh>	-pron- think that should be parse as a jsx element in tsx file
[2015-06-03T20:55:00.866Z]	<RyanCavanaugh>	but t extend t x would be parse as a generic function expression
[2015-06-03T20:55:14.862Z]	<fdecampredon>	oh yes do not think about those
[2015-06-03T20:55:18.755Z]	<RyanCavanaugh>	that way -pron- only have to do one token of lookahead and people can write t extend if -pron- do want any actual constraint
[2015-06-03T20:55:38.936Z]	<RyanCavanaugh>	two token i guess
[2015-06-03T20:56:04.175Z]	<fdecampredon>	hmmm
[2015-06-03T20:56:41.493Z]	<fdecampredon>	problem be that mycomp extend t
[2015-06-03T20:56:50.306Z]	<fdecampredon>	be valid jsx in a way
[2015-06-03T20:56:59.452Z]	<RyanCavanaugh>	do attribute require initializer
[2015-06-03T20:57:10.150Z]	<fdecampredon>	nop without initializer -pron- be boolean
[2015-06-03T20:57:18.504Z]	<RyanCavanaugh>	ugh
[2015-06-03T20:57:25.282Z]	<fdecampredon>	div disabled be valid
[2015-06-03T20:58:27.083Z]	<fdecampredon>	should i keep the disambiguation logic in the parser
[2015-06-03T20:58:43.489Z]	<RyanCavanaugh>	consult with ander
[2015-06-03T21:00:54.398Z]	<RyanCavanaugh>	yea -pron- ok with have t extend x be parse incorrectly
[2015-06-03T21:01:49.032Z]	<fdecampredon>	ok so i just lookup for extend to check if -pron- not a generic function
[2015-06-03T21:02:04.541Z]	<fdecampredon>	an if not treat -pron- as an jsx element
[2015-06-03T21:02:12.547Z]	<RyanCavanaugh>	eat one more token after that to see if -pron- follow by
[2015-06-03T21:02:30.954Z]	<fdecampredon>	ok
[2015-06-03T21:02:36.714Z]	<RyanCavanaugh>	so t be jsx t extend any token that not be generic list
[2015-06-03T21:02:49.135Z]	<RyanCavanaugh>	that way t be the workaround for user
[2015-06-03T21:03:02.637Z]	<fdecampredon>	yup seem reasonable
--------------------------------------------------------------------------------------------------
[2015-06-03T21:03:23.441Z]	<fdecampredon>	especially since i doubt that a lot of person use extend as prop
[2015-06-03T21:03:54.816Z]	<fdecampredon>	from what i understand that will have any impact with incremental parsing
[2015-06-03T21:04:35.314Z]	<fdecampredon>	but just to check do -pron- see something special to do
[2015-06-03T21:06:22.588Z]	<CyrusNajmabadi>	-pron- shoudl be fine
[2015-06-03T21:08:01.175Z]	<fdecampredon>	ok like i say i try to finish that by the end of the week -pron- keep -pron- informed if i face any problem
--------------------------------------------------------------------------------------------------
[2015-06-04T03:45:04.187Z]	<tinganho>	be there someone out there that have successfully use vscode with ts debugging
[2015-06-04T04:00:37.229Z]	<basarat>	vscode do support ts debugging just js debug at the moment
[2015-06-04T04:00:55.126Z]	<basarat>	this be base on original release do know if -pron- change since then
[2015-06-04T04:01:03.058Z]	<tinganho>
[2015-06-04T04:01:35.636Z]	<basarat>	cool -pron- suppose to then d
[2015-06-04T04:02:03.146Z]	<tinganho>	-pron- say there that if -pron- have compile -pron- with source map though -pron- do seem to work
[2015-06-04T04:55:00.248Z]	<tinganho>	-pron- just curious what benefit there be between use vs vsc now that -pron- have ts debug support
[2015-06-04T05:03:14.319Z]	<tinganho>	what the good ide for ts smile
--------------------------------------------------------------------------------------------------
[2015-06-04T04:55:26.225Z]	<MicahZoltu>	i wish vs would provide first class typescript spa support
[2015-06-04T04:55:40.761Z]	<MicahZoltu>	the whole just have a c library project with ts file be lame imo
[2015-06-04T04:55:58.715Z]	<MicahZoltu>	though i can appreciate that create project type in vs be super painful
[2015-06-04T04:58:08.453Z]	<ejsmith>	thank for the update i be impatiently wait
--------------------------------------------------------------------------------------------------
[2015-06-04T04:56:23.395Z]	<MicahZoltu>	vs be still the way to go if -pron- be build an application with typescript for the front end language
--------------------------------------------------------------------------------------------------
[2015-06-04T05:25:29.700Z]	<lee-elenbaas>	-pron- a matter of taste
[2015-06-04T05:26:42.887Z]	<lee-elenbaas>	with the proper plugin vs bracket webstorm be equal
[2015-06-04T05:27:16.912Z]	<lee-elenbaas>	add sublime to that list too
[2015-06-04T05:28:15.974Z]	<lee-elenbaas>	there be one difference between vs and the other gulp grunt integration be less natural in vs
[2015-06-04T05:28:38.225Z]	<MicahZoltu>	and syntax highlighting
[2015-06-04T05:28:39.224Z]	<lee-elenbaas>	but -pron- offer -pron- own integration
--------------------------------------------------------------------------------------------------
[2015-06-04T05:28:30.127Z]	<MicahZoltu>	how be sublime auto complete
--------------------------------------------------------------------------------------------------
[2015-06-04T05:29:17.146Z]	<basarat>	can give an unbiased opinion but -pron- biased reply be atom typescript
[2015-06-04T05:29:52.102Z]	<MicahZoltu>	i do like atom typescript though i be begin to hate atom lock up on -pron- periodically and the ux for a number of plugin need some work
[2015-06-04T05:30:32.877Z]	<lee-elenbaas>	last i test sublime ago autocomplete be problematic especially for late language addition there be type info
[2015-06-04T05:31:04.768Z]	<basarat>	if all -pron- do be typescript then atom be awesome
[2015-06-04T05:31:16.359Z]	<MicahZoltu>	heh
[2015-06-04T05:31:25.526Z]	<MicahZoltu>	atom lock up for -pron- in ts too
[2015-06-04T05:31:40.037Z]	<lee-elenbaas>	-pron- current preference be bracket and webstorm but -pron- may change in a month
[2015-06-04T05:31:50.794Z]	<MicahZoltu>	and some of the plugin with ux problem atom typescript depend on like the lint thing that do the pop up
[2015-06-04T05:31:57.253Z]	<tinganho>	atom typescript be good but not atom
[2015-06-04T05:32:09.785Z]	<MicahZoltu>	in short i have be spoil by visual studio over the year
[2015-06-04T05:32:30.343Z]	<MicahZoltu>	i just wish there be a typescript ide that have as much money throw at -pron- as
[2015-06-04T05:33:05.848Z]	<lee-elenbaas>	vs be a good tool for typescript assume -pron- use -pron- build for development
[2015-06-04T05:33:23.674Z]	<MicahZoltu>	what do -pron- mean
[2015-06-04T05:33:43.957Z]	<MicahZoltu>	i get annoy by vs force -pron- to have a c project when i want to write just a browser ts app no server side component
[2015-06-04T05:33:56.150Z]	<MicahZoltu>	i probably should have be as annoyed as i be
[2015-06-04T05:34:24.090Z]	<basarat>	elenbaas atom typescript do build too  <user> -pron- have great compile on save support if -pron- use external module
[2015-06-04T05:34:37.274Z]	<MicahZoltu>	i do try intellij for a bit the problem i have with -pron- be similar to -pron- feel like ts be tack on to -pron- java ide i have flyout for maven and gradle and whatnot that i could make go away
[2015-06-04T05:34:47.045Z]	<lee-elenbaas>	the typescript extention know to throw the tfs file into the compiler and run dependency between project -pron- be not as flexible as grunt gulp but for development -pron- be ok
[2015-06-04T05:34:59.362Z]	<basarat>	-pron- can get around that by use node tool for visual studio and then use a node tool project instead of a c project
[2015-06-04T05:35:23.391Z]	<MicahZoltu>	hmm i have hear of this technique i may have to look into -pron-
[2015-06-04T05:36:10.500Z]	<lee-elenbaas>	i have try -pron- either
[2015-06-04T05:36:46.879Z]	<MicahZoltu>	annoy that i still have to do command prompt work and vs be a bit harder to mod than atom
[2015-06-04T05:37:12.667Z]	<lee-elenbaas>	the build be -pron- response why vs be not -pron- preference i want to run a single build process use the search tool
[2015-06-04T05:37:26.659Z]	<MicahZoltu>	use the search tool
[2015-06-04T05:37:55.019Z]	<lee-elenbaas>	i agree about command line most other take a offer that fairly easily
[2015-06-04T05:38:02.566Z]	<tinganho>	elenbaas why not gulp
[2015-06-04T05:38:20.392Z]	<lee-elenbaas>	use the same build tool
[2015-06-04T05:38:35.891Z]	<lee-elenbaas>	-pron- phone autocorrect -pron- too much
[2015-06-04T05:39:05.721Z]	<MicahZoltu>	yeah even though i use atom typescript i still use gulp for -pron- build process
[2015-06-04T05:39:06.351Z]	<lee-elenbaas>	i be use gulp just move over from grunt
[2015-06-04T05:39:16.321Z]	<MicahZoltu>	-pron- can do the same in vs i believe
[2015-06-04T05:40:47.043Z]	<lee-elenbaas>	i use gulp even in vs but this force build event
[2015-06-04T05:40:59.445Z]	<lee-elenbaas>	not intuitive
[2015-06-04T05:41:05.375Z]	<MicahZoltu>	force build event
[2015-06-04T05:42:08.070Z]	<lee-elenbaas>	-pron- need to trigger the gulp somehow
[2015-06-04T05:42:46.416Z]	<lee-elenbaas>	the nodejs project may help there -pron- take a look
[2015-06-04T05:43:09.220Z]	<MicahZoltu>	do -pron- use the gulp integration
[2015-06-04T05:43:39.454Z]	<lee-elenbaas>	nop still
[2015-06-04T06:13:58.636Z]	<Ciantic>	-pron- like pr way of say -pron- f up the auto updater be not work and -pron- have to redownload
--------------------------------------------------------------------------------------------------
[2015-06-04T06:13:19.521Z]	<Ciantic>	new version of vs code
[2015-06-04T06:13:33.105Z]	<Ciantic>	-pron- favorite part for this first update -pron- be not use -pron- auto update mechanism as -pron- be ask user to re install code
--------------------------------------------------------------------------------------------------
[2015-06-04T07:52:59.027Z]	<Aaike>	hi guy quick question do ts support
[2015-06-04T07:54:09.833Z]	<fdecampredon>	ts be just a compiler
[2015-06-04T07:54:18.152Z]	<fdecampredon>	-pron- support output
[2015-06-04T07:54:38.563Z]	<fdecampredon>	which be the version support by ie
[2015-06-04T07:54:43.207Z]	<Aaike>	i mean do the result code work in because compile with either tracuer or babel do not work in so i be wonder
[2015-06-04T07:54:48.169Z]	<fdecampredon>	after -pron- do not have any runtime
[2015-06-04T07:54:54.509Z]	<fdecampredon>	yup
[2015-06-04T07:54:58.304Z]	<fdecampredon>	with output
[2015-06-04T07:55:31.104Z]	<Aaike>	do -pron- happen to know what exactly be -pron- that make not transpilable to code that work with and below but ts do
[2015-06-04T07:57:36.671Z]	<fdecampredon>	some part of be not transpilable
[2015-06-04T07:57:40.146Z]	<fdecampredon>	like getter setter
[2015-06-04T07:57:43.591Z]	<fdecampredon>	and other
[2015-06-04T07:57:47.968Z]	<Aaike>	ah ok ok now -pron- be make sense
[2015-06-04T07:57:49.828Z]	<fdecampredon>	for ts -pron- just  <user> error
[2015-06-04T07:58:03.337Z]	<fdecampredon>	when -pron- try to compile those feature with output
[2015-06-04T07:58:15.512Z]	<Aaike>	right so -pron- have to stick with very basic stuff
[2015-06-04T07:58:20.913Z]	<fdecampredon>	not really
[2015-06-04T07:58:30.883Z]	<fdecampredon>	of ts can be compile
[2015-06-04T07:58:49.377Z]	<fdecampredon>	the remain yes -pron-  <user> have to avoid -pron-
[2015-06-04T07:59:14.899Z]	<Aaike>	so use the module system an import etc be fine
[2015-06-04T07:59:29.281Z]	<fdecampredon>	i think
[2015-06-04T07:59:31.019Z]	<Aaike>	and class
[2015-06-04T07:59:33.558Z]	<fdecampredon>	yup
[2015-06-04T07:59:51.460Z]	<fdecampredon>	from what i remember only getter setter be not supporte
[2015-06-04T07:59:54.308Z]	<fdecampredon>	support
[2015-06-04T08:00:06.958Z]	<fdecampredon>	may have some other feature that i do remember
[2015-06-04T08:00:25.955Z]	<Aaike>	allright thx
[2015-06-04T08:00:30.473Z]	<fdecampredon>	 <user>
--------------------------------------------------------------------------------------------------
[2015-06-04T13:41:08.835Z]	<markrendle>	-pron- currently work in sublime for -pron- c code and get -pron- client side ts code in a completely separate folder that i work on in webstorm with a gulp task that push the relevant js to the various js folder
--------------------------------------------------------------------------------------------------
[2015-06-04T18:34:20.593Z]	<robertbaker>	error can not find name audiocontext
[2015-06-04T18:34:32.120Z]	<robertbaker>	the def be in the what s the deal
--------------------------------------------------------------------------------------------------
[2015-06-04T20:14:23.317Z]	<pixelshaded>	i feel silly i have typescript instal via npm i have a in the root directory of -pron- project when i run tsc i get the help menu when i try to provide a path to the project i get unknown option project be there some way to update tsc feel like -pron- not handle tsconfig at all
[2015-06-04T20:14:49.881Z]	<danquirk>	what version of tsc run tsc from there
[2015-06-04T20:15:08.893Z]	<pixelshaded>
[2015-06-04T20:15:16.785Z]	<danquirk>	yeah exactly
[2015-06-04T20:15:23.372Z]	<pixelshaded>	this be outdate -pron- be guess
[2015-06-04T20:15:34.955Z]	<danquirk>	yeah should say when -pron- do
[2015-06-04T20:15:46.534Z]	<danquirk>	likely -pron- have multiple version of tsc in -pron- path environment variable
[2015-06-04T20:15:59.981Z]	<pixelshaded>	thank for the lead -pron- take a look
[2015-06-04T20:16:02.380Z]	<danquirk>	and the old one be list first so -pron- take precendence
[2015-06-04T20:16:21.110Z]	<danquirk>	-pron- have an issue log to fix this so new version end up as the default for -pron- command line experience
[2015-06-04T20:16:25.715Z]	<danquirk>	since this behavior be obviously dumb confusing
[2015-06-04T20:19:05.953Z]	<pixelshaded>	look like a bunch be come from file
[2015-06-04T20:19:24.416Z]	<danquirk>	yeah that the default install location
[2015-06-04T20:19:34.273Z]	<danquirk>	just edit -pron- path and remove all the old one
[2015-06-04T20:21:15.947Z]	<pixelshaded>	those must have come from visual studio
[2015-06-04T20:21:24.914Z]	<danquirk>	right
[2015-06-04T20:21:25.914Z]	<pixelshaded>	-pron- be all update thank for the help
[2015-06-04T20:21:30.832Z]	<danquirk>	 <user>
[2015-06-04T20:21:41.164Z]	<pixelshaded>	google be give -pron- nothing on -pron-
--------------------------------------------------------------------------------------------------
[2015-06-04T22:21:01.867Z]	<delaman>	 <user> the version of typescript have support to resolve javascript promise via the yield keyword
--------------------------------------------------------------------------------------------------
[2015-06-04T22:22:02.019Z]	<DanielRosenwasser>	-pron- be lean on the await keyword
[2015-06-04T22:22:16.599Z]	<DanielRosenwasser>
[2015-06-04T22:23:23.569Z]	<delaman>	k so  <user> await resolve a javascript promise be there something i can reference as to what exactly await  <user> entail since there be no github issue on the topic
[2015-06-04T22:24:28.849Z]	<delaman>	 <user> this async await be similar to c async await
[2015-06-04T22:24:33.617Z]	<DanielRosenwasser>	-pron- can reference this github issue on the topic
[2015-06-04T22:25:11.873Z]	<delaman>	ahhh maybe someone could update the roadmap to include that link
[2015-06-04T22:25:30.393Z]	<DanielRosenwasser>	-pron- can  <user> see luke proposal for on -pron-
[2015-06-04T22:25:48.139Z]	<DanielRosenwasser>	good call -pron- take care of that now
[2015-06-04T22:26:54.037Z]	<delaman>
[2015-06-04T22:30:00.442Z]	<DanielRosenwasser>	do
--------------------------------------------------------------------------------------------------
[2015-06-04T23:02:05.224Z]	<robertbaker>	anyone have an idea why audio context be be find
[2015-06-04T23:02:58.825Z]	<DanielRosenwasser>	which version of typescript be -pron- use
[2015-06-04T23:04:29.683Z]	<DanielRosenwasser>	-pron- in beta if -pron- on -pron- may not see -pron-
[2015-06-04T23:32:15.568Z]	<robertbaker>	-pron- in the beta i just remove the path but i do think that -pron- because -pron- use gulp typescript and i add the ts master as a dev dep
[2015-06-04T23:48:58.676Z]	<robertbaker>	never mind i figure -pron- out
[2015-06-04T23:49:07.379Z]	<robertbaker>	i  <user> have to modify the task typescript
[2015-06-04T23:49:17.807Z]	<robertbaker>
[2015-06-05T08:09:58.596Z]	<mitranim>	question be -pron- possible that ts  <user> add support for the iterator protocol in for of loop ask because -pron- paranoid about use -pron- for fear of performance loss if this feature be add
[2015-06-05T09:22:06.021Z]	<basarat>	i be sure -pron-  <user> be make to add iterator support as soon as generator support be add in
[2015-06-05T09:22:33.593Z]	<mitranim>	okay this make sense thank -pron-
[2015-06-05T09:22:51.295Z]	<mitranim>	i guess -pron- for loop for -pron- then
[2015-06-05T09:22:56.840Z]	<basarat>	i would over worry about performance i be sure there be other slow part of the app
[2015-06-05T09:23:19.432Z]	<mitranim>	yes -pron- never go to be a performance bottleneck -pron- just a  <user>
[2015-06-05T09:23:42.221Z]	<basarat>	i prefer foreach and map over for
[2015-06-05T09:23:51.482Z]	<mitranim>	after a run in with babel where -pron- require a symbol polyfill for for of to work and do tell -pron- right away
[2015-06-05T09:24:45.509Z]	<mitranim>	yeah for consumer code functional loop method be awesome -pron- just that when write a library sometimes -pron- want to micro optimise or ensure no surprise or avoid a closure etc
[2015-06-05T09:24:51.551Z]	<mitranim>	all sort of edge case
[2015-06-05T16:53:04.655Z]	<jonathandturner>	-pron- do need the file section just to get rid of the error just add a module set for compileroption
--------------------------------------------------------------------------------------------------
[2015-06-05T10:58:08.202Z]	<Pepeye>	anybody solve this -pron- get the following in vs code when i try and make reference to a library can not compile external module unless the flag be provide
[2015-06-05T10:59:22.741Z]	<tinganho>	just define a save close and open
[2015-06-05T11:03:16.750Z]	<Pepeye>	 <user> try that
[2015-06-05T11:05:35.436Z]	<Pepeye>	do code fill out the file property automatically if one define a glob
[2015-06-05T11:17:39.065Z]	<Pepeye>	-pron- use to work in atom but -pron- seem the file slightly different schema specify on here
--------------------------------------------------------------------------------------------------
[2015-06-06T05:46:18.898Z]	<robertdp>	so class expression be support anymore in -pron- seem to work fine on the ts playground
[2015-06-06T06:15:06.943Z]	<tinganho>	why should -pron- be
[2015-06-06T08:56:28.900Z]	<robertdp>	-pron- compile a project with and -pron- throw error class expression be not currently support these be not class declaration btw
[2015-06-06T17:41:36.092Z]	<mhegazy>	be the class inside a function
[2015-06-06T17:43:58.114Z]	<mhegazy>	if so local type should be support on the late drop from master but not in
[2015-06-07T09:22:10.362Z]	<mitranim>	when use for of on nodelist ts complain -pron- not an array type or a string type even though -pron- array like have a number index and a length intentional or bug
--------------------------------------------------------------------------------------------------
[2015-06-06T18:26:33.895Z]	<mhegazy>	and if and when -pron- support generator downlevel i would think -pron- be under a flag the reason for of only work on array be performance as -pron- mention -pron- do not want a normal looking loop in ts code to suddenly incur a huge perf overhead in the emit js
[2015-06-06T19:29:13.452Z]	<mitranim>	that awesome to hear
--------------------------------------------------------------------------------------------------
[2015-06-07T12:14:33.014Z]	<muhasturk>	hello be open source i mean website not typescript core code
[2015-06-07T12:19:47.499Z]	<fdecampredon>	honestly even if i love generator -pron- not so sure i want downlevel
[2015-06-07T12:20:15.961Z]	<fdecampredon>	the fact that ts  <user> have to generate horrible state machine code like regenerator to support -pron- be quite problematic
[2015-06-07T13:08:44.608Z]	<fdecampredon>	why there be not decorator on const let var declartion
[2015-06-07T13:09:40.102Z]	<fdecampredon>	i can understand the problem of function and hoist
[2015-06-07T13:09:59.697Z]	<fdecampredon>	but at least const myfunc dosomething could be usefull
[2015-06-07T13:22:47.617Z]	<ejsmith>	i really wish the typescript team would do small release every time a new feature or bug be fix i see simple thing that be fix already but -pron- get push back to because -pron- have already freeze what be go to be in be there any logical reason that on open source project should be batch upbig release like this
[2015-06-07T13:45:52.654Z]	<muhasturk>	i want to contribute website how can i do
[2015-06-08T15:09:05.257Z]	<jonathandturner>	not currently open what kind of thing would -pron- like to contribute
[2015-06-08T15:09:54.272Z]	<jonathandturner>	-pron- work on decorate function directly now -pron- a little tricky so -pron- work with other people on the js committee
[2015-06-08T15:10:49.589Z]	<jonathandturner>	-pron- work on get back to a fast release cycle get a bit too big and end up take longer than -pron- want would be well to do small release more often
[2015-06-08T15:21:29.563Z]	<ejsmith>	yeah i see all these small little thing that be do but -pron- get batch into a big release and -pron- have to wait month for -pron-
[2015-06-08T16:08:08.729Z]	<jonathandturner>	exactly why -pron- want to speed thing up a little
[2015-06-09T05:12:34.319Z]	<mhegazy>	this be fix by in pr
[2015-06-09T06:01:20.194Z]	<mitranim>	nice
[2015-06-09T12:03:46.759Z]	<mitranim>	little question be decorator for property in object literal support yet
[2015-06-09T12:05:08.551Z]	<mitranim>	i mean in the master branch
[2015-06-09T14:06:50.951Z]	<jonathandturner>	not yet i do think but -pron- talk about -pron-
[2015-06-09T15:20:06.624Z]	<mitranim>	good to know thank
--------------------------------------------------------------------------------------------------
[2015-06-09T09:02:35.372Z]	<chicoxyzzy>	where can i find definition file for event emitter in -pron- case
[2015-06-09T09:18:48.779Z]	<chicoxyzzy>	i know i can take -pron- from but i ask if there be some way to install for eventemitter use tsd
[2015-06-09T09:25:57.862Z]	<chicoxyzzy>	ok actually there be i file an issue
--------------------------------------------------------------------------------------------------
[2015-06-09T18:15:26.480Z]	<unional>	visual studio code provide excellent support on auto complete how and where in the typescript source produce those type information or if -pron- be from how to link -pron- to
[2015-06-09T18:27:06.513Z]	<xdansmith>	have -pron- guy try use typescript with react
[2015-06-09T19:05:27.468Z]	<RyanCavanaugh>	-pron- work on add jsx support to the compiler
[2015-06-09T19:15:44.987Z]	<unional>	comment one thing i do like about the source be that the function be not srp and make -pron- hard to reuse for example i want to get the identifier string value but the logic be embed in the emitidentifier function in big scale have amd umd check in individual emit function be quite messy an alternative be that there be a map that emit  <user> pick up which be fill in base on those condition not from compiler transpiler background so do know if that make sense
--------------------------------------------------------------------------------------------------
[2015-06-09T19:16:41.792Z]	<ggarek>	i have several react project write in typescript here be the public repo of a simple project which be write as part of typescript course on edx
[2015-06-09T19:28:10.459Z]	<xdansmith>	ill check -pron- out
[2015-06-09T19:29:03.363Z]	<xdansmith>	just instal the vs rc and notice -pron- do not have support for syntax yet but curious if use typescript instead would work that s clearly not the reason to use typescript but that be a minor benefit
--------------------------------------------------------------------------------------------------
[2015-06-09T22:27:38.780Z]	<DanielRosenwasser>	hey -pron- work fairly closely with the js language service team as a note some support be include in there
[2015-06-09T22:28:23.752Z]	<DanielRosenwasser>	but yes i believe typescript may support some more feature right now
[2015-06-09T22:30:22.399Z]	<DanielRosenwasser>	see -pron- microsoft typescript wiki roadmap for more detail
[2015-06-09T22:31:24.947Z]	<DanielRosenwasser>	and that not an invalid reason to use typescript -pron- definitely recognize the value of have certain upcoming feature sooner
--------------------------------------------------------------------------------------------------
[2015-06-09T22:50:15.880Z]	<vinkaga>	hello be this the right place to ask tsd related question
[2015-06-09T22:50:30.972Z]	<DanielRosenwasser>	not really
[2015-06-09T22:50:45.768Z]	<DanielRosenwasser>	someone may be able to help though
[2015-06-09T22:50:48.965Z]	<DanielRosenwasser>	one moment
[2015-06-09T22:51:13.899Z]	<basarat>	what the question
[2015-06-09T22:52:53.072Z]	<DanielRosenwasser>	sorry i be try to determine whether there be an analogous gitter for definitelytype or tsd since there be this be a sufficiently appropriate place
[2015-06-09T22:52:58.868Z]	<vinkaga>	newb q be the import stmt in file need for compilation or just ide help
[2015-06-09T22:53:20.418Z]	<vinkaga>	thank
[2015-06-09T22:54:19.376Z]	<vinkaga>	newb what be reference path in really do
[2015-06-09T22:55:09.195Z]	<DanielRosenwasser>	newb be easy a reference comment be almost like an include in c
[2015-06-09T22:55:25.393Z]	<DanielRosenwasser>	but a bit more controlled
[2015-06-09T22:56:16.921Z]	<vinkaga>	that clarify some stuff
[2015-06-09T22:56:19.851Z]	<DanielRosenwasser>	if the file have be reference -pron- source  <user> be process before continue to process the rest of the file and if use -pron-  <user> be concatenate before the rtest of the file
[2015-06-09T22:56:48.030Z]	<DanielRosenwasser>	if the file have be previously reference nothing happen
[2015-06-09T22:57:07.509Z]	<vinkaga>	partially like of php
[2015-06-09T22:57:18.006Z]	<DanielRosenwasser>	yeah -pron- sound like -pron-
[2015-06-09T22:57:39.541Z]	<DanielRosenwasser>	but there no resolution do at runtime -pron- purely compile time
[2015-06-09T22:57:49.307Z]	<vinkaga>	get -pron-
[2015-06-09T22:58:00.581Z]	<DanielRosenwasser>	the dual of that be import those be runtime and depend on -pron- module loader
[2015-06-09T22:58:42.904Z]	<vinkaga>	so be import like requirejs module require
[2015-06-09T22:58:54.887Z]	<DanielRosenwasser>	-pron- sometimes use information from an import to inform -pron- emit for instance if -pron- know that a module only expose type no js runtime value -pron- will actually load the module
[2015-06-09T22:59:02.112Z]	<DanielRosenwasser>	yes exactly
[2015-06-09T22:59:32.084Z]	<vinkaga>	that answer -pron- first q
[2015-06-09T22:59:51.413Z]	<DanielRosenwasser>	sure what else be on -pron- mind
[2015-06-09T23:00:10.790Z]	<vinkaga>	should the tool typing be commit to repo or should -pron- be generate by a build tool like gulp
[2015-06-09T23:02:17.854Z]	<DanielRosenwasser>	-pron- may choose for -pron- file to be as up to date as possible but if -pron- feel -pron- consumer want to have a stable api for certain point in time i would probably snapshot those file periodically
[2015-06-09T23:02:34.874Z]	<DanielRosenwasser>	similarly to how typescript have a last know good version of the compiler check in
[2015-06-09T23:04:38.649Z]	<vinkaga>	another q in library be specify by a specific commit hash be there a way to set -pron- to late
[2015-06-09T23:06:58.854Z]	<DanielRosenwasser>	-pron- not sure -pron- try set -pron- to head and see if that work or may have some useful input on this
[2015-06-09T23:07:38.698Z]	<vinkaga>	thank for all the answer -pron- try -pron-
[2015-06-09T23:11:10.758Z]	<vinkaga>	head do work give commit fail to match require pattern
[2015-06-10T00:13:54.767Z]	<basarat>	be there a way to set -pron- to late no and -pron- do recommend -pron- either -pron- recommend -pron- commit the typing into -pron- repo to update to late there be command tsd update
[2015-06-10T00:15:04.979Z]	<basarat>	not intutive i know dtsm by have an easy command line intutive for an npm other user dtsm update
[2015-06-10T00:29:51.769Z]	<vinkaga>	thank
--------------------------------------------------------------------------------------------------
[2015-06-10T05:07:45.513Z]	<mitranim>	question since -pron- already emit param metadata be -pron- plan to  <user> emit class property metadata
[2015-06-10T08:54:17.388Z]	<mitranim>	oh nevermind -pron- in the same issue
--------------------------------------------------------------------------------------------------
[2015-06-10T12:12:23.063Z]	<basarat>	be ther a link to the work -pron- do for
[2015-06-11T00:30:52.287Z]	<ericmdantas>	question how would i import say express in a node enviroment
[2015-06-11T00:31:54.471Z]	<ericmdantas>	i have try js import express from express but that fail with var app typeerror be not a function
[2015-06-11T00:32:49.882Z]	<ericmdantas>	i have try js import express from express but thet fail with js var app typeerror be not a function
[2015-06-11T00:33:44.697Z]	<ericmdantas>	the only way i get -pron- to work be do js import express be i miss something or be that the only way to get -pron- to work so far
--------------------------------------------------------------------------------------------------
[2015-06-11T00:35:14.013Z]	<RyanCavanaugh>	i think -pron- want import as express from express
[2015-06-11T00:35:58.640Z]	<ericmdantas>	that do the trick
[2015-06-11T00:36:05.438Z]	<ericmdantas>	thank -pron-
[2015-06-11T00:36:08.523Z]	<RyanCavanaugh>	 <user>
[2015-06-11T00:36:41.421Z]	<RyanCavanaugh>	module import syntax seem to have be design to confuse people
[2015-06-11T00:37:11.398Z]	<ericmdantas>	haha -pron- pretty sure i try something like import as express or something
[2015-06-11T00:37:42.853Z]	<ericmdantas>	that obviously would even transpile without an error so
--------------------------------------------------------------------------------------------------
[2015-06-11T01:45:38.843Z]	<MicahZoltu>
[2015-06-13T02:24:09.629Z]	<MicahZoltu>	-pron- can put on a line before and after -pron- code to get -pron- format in gitter  <user> -pron- can edit old message if -pron- forget fyi
--------------------------------------------------------------------------------------------------
[2015-06-11T05:23:32.132Z]	<Ciantic>	now i have a long wind use case in -pron- issue
[2015-06-11T05:30:47.641Z]	<Ciantic>	 <user> i leave the arrayfield away -pron- use case be even more thunderous imagine iterate array in jsx
[2015-06-11T05:31:28.521Z]	<Ciantic>	one get fully type iterator and all part of the path as type check -pron- really amazing thing
[2015-06-11T05:34:15.577Z]	<Ciantic>	and with this syntax one can do something like and get stre back the use case of that be even more amazing
[2015-06-11T05:35:25.621Z]	<Ciantic>	hint fully type form input creation with all name check with control react form
[2015-06-11T05:37:21.274Z]	<Ciantic>	no need to write input when one can just write input and typescript fully check this part
[2015-06-11T05:46:27.413Z]	<Ciantic>	if one detest write input at all -pron- pretty easy to come up a html element creator from stringfield input but -pron- see that as a difficult thing to maintain in django so i highly prefer type -pron- input -pron-
[2015-06-11T05:51:40.057Z]	<Ciantic>	i think -pron- rest -pron- case
--------------------------------------------------------------------------------------------------
[2015-06-11T16:02:38.097Z]	<vinkaga>	hello in -pron- vscode on mac have this statement mark as error import component view bootstrap from error message say can not compile module unless flag be provide import bootstrap how do i fix -pron-
[2015-06-11T16:05:59.262Z]	<tinganho>	-pron- must add file with at least typescript compileroption module commonjs
[2015-06-11T16:06:47.032Z]	<vinkaga>	i have that contain compileroption emitdecoratormetadata true module commonjs target sourcemap true file
[2015-06-11T16:07:45.682Z]	<tinganho>	open and close vscode that work for -pron- the first time
[2015-06-11T16:08:16.525Z]	<vinkaga>	i do that too i have version and update to the error persist
[2015-06-11T16:08:32.887Z]	<tinganho>	i think the file property do take globbe too
[2015-06-11T16:11:48.712Z]	<vinkaga>	i try remove -pron- still do fix -pron- -pron- just let -pron- be
[2015-06-11T16:25:47.348Z]	<vinkaga>	that do -pron-
[2015-06-11T16:29:07.052Z]	<vinkaga>	thank
[2015-06-12T13:34:04.148Z]	<pixelshaded>	-pron- be have to use gulp batch to source of debounce this event so i only process the file once
[2015-06-13T02:24:56.247Z]	<MicahZoltu>	in order to resolve -pron- issue -pron- good bet be to output -pron- generate ts file into a separate location -pron- can  <user> have -pron- js file go elsewhere on build
--------------------------------------------------------------------------------------------------
[2015-06-11T16:16:44.150Z]	<kube>	i be just go to ask the same question have the same error
[2015-06-11T16:20:25.622Z]	<tinganho>	be the emitdecoratormetadata a valid option do see -pron- on the compiler
[2015-06-11T16:21:32.692Z]	<vinkaga>	i copy -pron- from somewhere not sure from where
[2015-06-11T16:23:30.193Z]	<kube>	just remove file and -pron- work
[2015-06-11T16:25:56.872Z]	<vinkaga>	why do -pron- need file there in the first place
[2015-06-11T16:28:15.986Z]	<tinganho>	when -pron- remove file then the compiler  <user> compile all ts file in -pron- project
[2015-06-11T16:28:46.178Z]	<tinganho>	when -pron- define file -pron-  <user> map directly to the compiler file argument
--------------------------------------------------------------------------------------------------
[2015-06-11T19:30:53.169Z]	<jonathandturner>	if -pron- in vs code -pron- may need to close -pron- and reopen
--------------------------------------------------------------------------------------------------
[2015-06-11T21:59:15.313Z]	<pixelshaded>	i be use to watch javascript file if i run the tsc command and -pron- compile one file the watcher get a change event twice any clue why
[2015-06-12T13:31:22.054Z]	<pixelshaded>	var gulp var gutil util function
[2015-06-12T13:31:51.251Z]	<pixelshaded>	and when i run tsc -pron- get the change event twice on the same js file
--------------------------------------------------------------------------------------------------
[2015-06-12T04:35:23.429Z]	<akoenig>	could -pron- paste the respective part of the
--------------------------------------------------------------------------------------------------
[2015-06-13T10:52:03.225Z]	<jrobertsgb>	be -pron- possible to use a new compiler than the one that visual studio come with -pron- get error like can not find name dataview that i know be fix in new version of tsc
--------------------------------------------------------------------------------------------------
[2015-06-13T13:07:52.921Z]	<DickvdBrink>	be -pron- look for this
--------------------------------------------------------------------------------------------------
[2015-06-14T10:37:31.507Z]	<tinganho>	-pron- wonder the same thing but for vscode
--------------------------------------------------------------------------------------------------
[2015-06-15T12:18:40.306Z]	<bobbobsond>	if i want a function to take a simple object as a parameter do i write object or be there a well way
[2015-06-15T12:19:03.775Z]	<bobbobsond>	-pron- talk about the type
[2015-06-15T12:21:48.994Z]	<ericmdantas>	-pron- say there nothing wrong with that
[2015-06-15T12:22:30.933Z]	<ericmdantas>	-pron- can either do that or specify a type like js type myspecificobject stre boolean
[2015-06-15T12:23:37.961Z]	<ericmdantas>	and then have -pron- in a param like js myspecificobject
[2015-06-15T12:26:30.222Z]	<bobbobsond>	i think i can do the same with an interface instead of type be there a difference in this case
[2015-06-15T12:27:41.959Z]	<ericmdantas>	well -pron- only use interface when i have function to be map implement not prop
[2015-06-15T12:28:37.163Z]	<bobbobsond>	yea ok thank
[2015-06-15T13:06:48.141Z]	<ericmdantas>	 <user>
[2015-06-15T20:43:16.046Z]	<bobbobsond>	can i add a directory to tsconfig instead of add file one by one
[2015-06-15T20:51:10.905Z]	<bobbobsond>	oh ok thank so -pron- filesglob instead of file in tsconfig
[2015-06-15T20:57:03.863Z]	<bobbobsond>	oh now i get -pron-
--------------------------------------------------------------------------------------------------
[2015-06-15T20:44:48.803Z]	<pixelshaded>	atom handle add file automatically by use a glob in -pron- tsconfig file depend on -pron- environment -pron- could implement something to handle this for -pron- -pron- create grunt task to update the tsconfig file when the file system change
[2015-06-15T20:45:12.736Z]	<pixelshaded>	-pron- may  <user> be able to simply use tsc
[2015-06-15T20:45:24.188Z]	<pixelshaded>	but -pron- be not sure if -pron- update the tsconfig file
[2015-06-15T20:45:39.708Z]	<pixelshaded>	that may only be for watch file in the file property
[2015-06-15T20:45:57.826Z]	<pixelshaded>	and by atom i mean atom typescript
[2015-06-15T20:46:00.711Z]	<pixelshaded>	atom be the ide
[2015-06-15T20:46:12.485Z]	<pixelshaded>	atom typescript be a plugin for that ide
[2015-06-15T20:51:23.563Z]	<pixelshaded>	if -pron- be use atom
[2015-06-15T20:51:30.490Z]	<bobbobsond>	yes -pron- use visual studio code
[2015-06-15T20:51:56.273Z]	<pixelshaded>	-pron- be say that filesglob be not support by the typescript compiler
[2015-06-15T20:52:11.137Z]	<pixelshaded>	if visual studio code use support -pron- then -pron- may be fine
[2015-06-15T20:53:15.304Z]	<pixelshaded>	filesglob can be use by program to add and remove file from the file array in tsconfig but the typescript compiler ignore this glob
[2015-06-15T21:50:29.973Z]	<jonathandturner>	-pron- be talk about add glob support though -pron- not in yet
--------------------------------------------------------------------------------------------------
[2015-06-16T09:07:55.919Z]	<Mig1st4ck>	hi
[2015-06-16T09:08:24.846Z]	<Mig1st4ck>	i have typescript beta instal on -pron- with resharper instal
[2015-06-16T09:09:51.903Z]	<Mig1st4ck>	all work fine but wheni use decoartor like class test the char give -pron- an error with unexpected token
[2015-06-16T09:10:07.819Z]	<Mig1st4ck>	be that resharper or typescript
[2015-06-16T09:35:59.498Z]	<akoenig>	do -pron- have any information about the type declaration could not find anything about -pron- in the handbook or be this a new construct
[2015-06-16T12:04:37.245Z]	<akoenig>	ah cool thank
[2015-06-16T12:26:41.589Z]	<akoenig>	do -pron- know if there be any plan to support define a type which extend another type
[2015-06-16T12:31:50.250Z]	<ericmdantas>	the former already work and the first one -pron- have to use class instead i guess
[2015-06-16T12:32:58.380Z]	<akoenig>	i mean something like type configuration stre type specificconfiguration extend configuration string
[2015-06-16T12:33:46.019Z]	<ericmdantas>	no idea if -pron- ever implement this
[2015-06-16T12:34:39.862Z]	<akoenig>	sure fair enough think that would be a nice lightweight mechanism for define something like configuration object literal
[2015-06-16T12:36:31.076Z]	<ericmdantas>	-pron- do get much different for class though typescript class configuration static string something in static string something in instance
[2015-06-16T12:41:48.001Z]	<akoenig>	the problem be that -pron- can not declare that those attribute be mandatory this one work as well where -pron- should function somefn x configuration somefn
[2015-06-16T12:43:50.648Z]	<akoenig>	hm strange vs code do not complain but cool thank for the discussion
--------------------------------------------------------------------------------------------------
[2015-06-16T10:25:36.704Z]	<ericmdantas>	i guess that new in since the book cover the version that make sense not to exist there
[2015-06-16T10:38:38.006Z]	<ericmdantas>	-pron- probably do the same validation though example typescript type x a string interface a string class foo a x class a new foo b b do work different type new foo a a work new b b do work different type new work
[2015-06-16T12:31:13.605Z]	<ericmdantas>	do -pron- mean to call explictly extend or something like typescript type something s boolean type x a something
[2015-06-16T12:33:51.660Z]	<ericmdantas>	-pron- have to use class for that
[2015-06-16T12:37:44.829Z]	<ericmdantas>	and then typescript function somefn x configuration somefn a work a do work
[2015-06-16T12:43:12.538Z]	<ericmdantas>	actually if -pron- try -pron- in the playground -pron- tell -pron- this argument of type be not assignable to parameter of type configuration property be miss in type
[2015-06-16T12:43:43.220Z]	<ericmdantas>	try -pron- playground
[2015-06-16T12:44:03.069Z]	<ericmdantas>	 <user>
[2015-06-16T13:06:27.207Z]	<ericmdantas>	oh yeah that true
--------------------------------------------------------------------------------------------------
[2015-06-16T12:55:51.260Z]	<akoenig>	one more thing the downside of use class be that -pron-  <user> have an actual representation in the compile js whereas a lightweight extendable type declaration would be go after transpile
--------------------------------------------------------------------------------------------------
[2015-06-16T15:22:41.636Z]	<aleksey-bykov>	lady and gentleman be there a way to detect a bi variant assignment via public compiler api -pron- situation interface a x string interface b x string y string function b b return undefined var value a unsound assigment i manage to get the ast and a type checker i be hold a reference to the argument copyb from above object if anyone can outline the step that need to be take to determine that the assignment from the example be unsound use the public compiler api -pron- really appreciate that thank -pron-
[2015-06-16T18:34:31.470Z]	<aleksey-bykov>	crossposte
[2015-06-17T00:44:12.684Z]	<MicahZoltu>	i think -pron- can do something like
[2015-06-17T00:44:27.181Z]	<MicahZoltu>	function foo bar
[2015-06-17T00:44:38.095Z]	<MicahZoltu>	-pron- not sure on the exact syntax but i have see something like that before
[2015-06-17T00:44:51.960Z]	<ericmdantas>	that correct
[2015-06-17T00:45:31.088Z]	<MicahZoltu>	i believe -pron- can do the same sort of thing
[2015-06-17T00:45:48.092Z]	<MicahZoltu>	export interface foo blah stre boolean
[2015-06-17T00:45:57.329Z]	<MicahZoltu>	though that assume both be name blah
[2015-06-17T00:46:46.975Z]	<mohsen1>	right but i do want to do -pron- for a property of foo i want foo to be one of string or boolean
[2015-06-17T00:46:58.688Z]	<mohsen1>	here be exact real world scenatio
[2015-06-17T00:47:21.977Z]	<mohsen1>	i would like to have a security interface which be equal to
[2015-06-17T00:48:03.761Z]	<MicahZoltu>	export interface operation security basicauthenticationsecurity apikeysecurity
[2015-06-17T00:48:10.420Z]	<MicahZoltu>	i believe that be the good that -pron- can do
[2015-06-17T00:48:34.966Z]	<MicahZoltu>	-pron- be say that the security field can be one of thing undefined be an option due to the
[2015-06-17T00:48:41.389Z]	<mohsen1>	that what -pron- do right now -pron- ugly specially when i need to repeat that line
[2015-06-17T00:48:49.873Z]	<MicahZoltu>	as far as i know there be a way to alias that union to a single new type
[2015-06-17T00:49:11.735Z]	<MicahZoltu>	yeah this be a fundamental problem with legacy javascript library -pron- have a tendency to use union everywhere
[2015-06-17T00:49:31.742Z]	<MicahZoltu>	i assume -pron- be define an interface for a legacy javascript library
[2015-06-17T00:49:43.799Z]	<mohsen1>	nope -pron- for a json schema
[2015-06-17T00:50:00.641Z]	<mohsen1>	btw someone should write a json schema to ts interface convertor
[2015-06-17T00:50:16.208Z]	<MicahZoltu>	if -pron- have control of the schema i recommend rethink -pron- design to avoid the union if -pron- do then i think -pron- just have to deal with -pron-
[2015-06-17T00:51:23.489Z]	<mohsen1>	-pron- can be a feature request
[2015-06-17T00:52:08.263Z]	<MicahZoltu>	i can see value in aliase a union primarily for this sort of situation where -pron- be try to add static typing to a legacy system
[2015-06-17T00:52:51.035Z]	<MicahZoltu>	export union authenticationtype
[2015-06-17T22:17:27.417Z]	<mohsen1>	angular trick npm by use incorrect date for alpha beta version
--------------------------------------------------------------------------------------------------
[2015-06-16T23:04:16.333Z]	<mohsen1>	hi be -pron- possible to aggregate multiple interface into a union interface typescript interface baseparameter name string in string require boolean description stre export interface bodyparameter extend baseparameter schema schema export interface queryparameter extend baseparameter export interface pathparameter extend baseparameter export interface headerparameter extend baseparameter export interface parameter
[2015-06-16T23:06:39.704Z]	<mohsen1>	i know i can do extend with multiple interface but i want or not and export interface parameter extend bodyparameter queryparameter pathparameter headerparameter
[2015-06-17T00:45:15.517Z]	<mohsen1>	-pron- define an interface -pron- not implement anything
[2015-06-17T22:15:56.747Z]	<mohsen1>	npm i typescript install should -pron- install latest stable
--------------------------------------------------------------------------------------------------
[2015-06-17T01:05:05.071Z]	<mohsen1>	turn out ts have this feautre already
--------------------------------------------------------------------------------------------------
[2015-06-17T01:05:44.401Z]	<MicahZoltu>	oh sweet
--------------------------------------------------------------------------------------------------
[2015-06-17T01:06:22.989Z]	<ericmdantas>	that nice thank
--------------------------------------------------------------------------------------------------
[2015-06-18T01:17:01.595Z]	<DanielRosenwasser>	hey i think -pron- want to look at while -pron- not sure whether this  <user> continue to be the policy go forward make a decent argument for why -pron- publish untagged prerelease
[2015-06-18T11:53:43.221Z]	<mitranim>	question be there a polyfill for reflect metadata
[2015-06-18T11:53:59.836Z]	<mitranim>	a google search do reveal one but maybe -pron- miss something
[2015-06-18T11:55:24.570Z]	<mitranim>	ah wait a minute the proposal actually have a polyfill on npm
[2015-06-18T17:23:32.687Z]	<DanielRosenwasser>	yup for detail see
--------------------------------------------------------------------------------------------------
[2015-06-19T13:20:18.303Z]	<xdansmith>	there need to be an azure website node chatroom worried
--------------------------------------------------------------------------------------------------
[2015-06-19T15:50:18.223Z]	<xdansmith>	i think this be unrelated to typescript directly but -pron- guy may know the answer still so i appreciate any input be -pron- possible for a i realize typescript get transpile into javascript to co exist in the same app and work alongside an wonder for migrate an exist app if -pron- could be migrate in section vs have to convert of the app at once
[2015-06-19T22:46:16.865Z]	<dcharbonnier>	not release all the beta on npm look very strange why release one hope this project  <user> adopt a well release model release many new feature at the same time do not look very useful if a feature be ready why wait for unrelated stuff ti ship -pron-
--------------------------------------------------------------------------------------------------
[2015-06-19T15:56:21.050Z]	<park9140>	-pron- not exactly sure how to implement on azure however the most straight forward way be to run -pron- on different port then use nginx or a load balancer to separate domain url to the different service -pron- would need to have a share component for verify authentication but there be alot of option out there
--------------------------------------------------------------------------------------------------
[2015-06-19T16:38:39.949Z]	<NoelAbrahams>	one solution may be tjanczuk iisnode this would permit run both and node on an azure cloud service host on iis
--------------------------------------------------------------------------------------------------
[2015-06-19T17:43:54.641Z]	<xdansmith>	yep -pron- look at iisnode -pron- lack of error detail when something go wrong can be annoying though i do not think that a fault of iisnode -pron- -pron- think -pron- stick with for now
--------------------------------------------------------------------------------------------------
[2015-06-22T19:17:55.993Z]	<lilred>	be -pron- possible to have import notification that be local to the file -pron- work with like in c f etc
[2015-06-22T19:18:00.512Z]	<lilred>	sorry import statement
[2015-06-22T20:20:46.171Z]	<DanielRosenwasser>	hey -pron- depend on if -pron- compile with module
[2015-06-22T20:20:51.448Z]	<DanielRosenwasser>	sorry for the delay
[2015-06-22T20:21:09.970Z]	<DanielRosenwasser>	modules i mean
[2015-06-22T21:51:32.972Z]	<basarat>	-pron- start work on this as a temp build process
[2015-06-23T00:56:41.446Z]	<MicahZoltu>	-pron- typescript file look something like import foo bar from somepackage export class myclass foo foo public bar bar
[2015-06-23T00:57:58.862Z]	<MicahZoltu>	in this case foo and bar be only available in this file every file that want access to -pron- must import -pron- like that
[2015-06-23T00:58:12.843Z]	<MicahZoltu>	and if some other file need access to myclass -pron- have to import -pron-
[2015-06-23T00:58:27.818Z]	<MicahZoltu>	i personally do use any internal module
[2015-06-23T18:40:34.205Z]	<mhegazy>	would ntypescript be something -pron- would be willing to push under
[2015-06-23T21:48:31.941Z]	<basarat>	definitely that would be a pleasure
[2015-06-23T21:52:03.991Z]	<DickvdBrink>	can someone get on gitter if -pron- want to join this offcourse
[2015-06-23T21:53:17.673Z]	<DickvdBrink>	i mean maybe or van ak -pron-
[2015-06-23T21:56:41.401Z]	<DickvdBrink>	sorry for the typo dutch keyboard and autocorrect be really annoy -pron- xd
[2015-06-23T22:19:51.689Z]	<danquirk>	-pron- not at -pron- desk atm but i send -pron- an -pron- be so -pron- should get on here once -pron- back
[2015-06-23T22:36:24.374Z]	<DickvdBrink>	thank i may be go by the time though -pron- be be here
[2015-06-24T08:14:57.655Z]	<mitranim>	quick question be async await usable with or do -pron- need an experimental fork
[2015-06-24T09:48:50.943Z]	<mhegazy>	async await support be still not available -pron- be work on -pron- now -pron- be plan on check in type system support and the full support after that so stay tune
[2015-06-24T09:49:16.453Z]	<mitranim>	great thank
[2015-06-24T15:12:53.749Z]	<MFFoX>	i have a definition that have interface that  <user> be use for basic type check in a templating system i be struggle with how to share type between the internal and external module how can the implementation type and the definition type share enum type here be a simplified example
[2015-06-24T16:22:39.320Z]	<DanielRosenwasser>	hey what exactly be the issue that -pron- run into in that example
[2015-06-24T16:27:59.445Z]	<MFFoX>	if i try to import enumeration into i get the follow internal declaration in an ambient external module declaration can not reference external module through relative external module name
[2015-06-24T16:31:29.609Z]	<DanielRosenwasser>	do need to be a file seem like -pron- could just keep -pron- as a file
[2015-06-24T16:32:04.008Z]	<DanielRosenwasser>	alternatively -pron- could make iapplication generic and parameterize -pron- with documenttype
[2015-06-24T16:34:10.912Z]	<MFFoX>
[2015-06-24T16:35:36.107Z]	<MFFoX>	that be a very simple example i  <user> be use multiple enum type so the generic suggestion be feasible -pron- do have to be a definition file but -pron-  <user> only contain interface so -pron- seem like a workaround i can definitely do that but i be wonder if i be go about this the wrong way
[2015-06-24T17:37:56.567Z]	<mhegazy>	thank let -pron- talk with -pron- be look into this a while back and get back to -pron-
[2015-06-24T17:48:27.425Z]	<mhegazy>	internal module namespace can not use external module declaration so -pron-  <user> need to define the enum in then -pron- can just export -pron- later on as export documenttype -pron- would run into issue which should be fix in latest
[2015-06-24T17:48:56.109Z]	<mhegazy>	 <user> -pron-  <user> need to make a ts file to generate the enum or use a const enum
[2015-06-24T18:09:19.617Z]	<mhegazy>	glad -pron- help
[2015-06-24T21:21:14.805Z]	<DickvdBrink>	just want to ask if -pron- already look into the format issue i find during testing of abstract class
[2015-06-24T21:22:45.682Z]	<DickvdBrink>	if -pron- do i want to do -pron- but as -pron- point out today -pron- be an issue with the abstract keyword
[2015-06-24T21:50:28.782Z]	<DanielRosenwasser>	be -pron- something that need to be debug and figure out
[2015-06-24T22:27:08.184Z]	<aozgaa>	the issue be that format code that have the protect keyword do remove excess space after the keyword the fix be modify a rule in the formatter
[2015-06-24T22:27:41.603Z]	<aozgaa>	-pron- appear to be a sin of omission
[2015-06-25T09:43:42.714Z]	<DickvdBrink>	sorry do see -pron- message yesterday but as -pron- merge -pron- pr -pron- probably already now -pron- be resolve thank
--------------------------------------------------------------------------------------------------
[2015-06-24T17:44:44.487Z]	<aozgaa>	-pron- apology i have leave for the  <user> at that point what up
--------------------------------------------------------------------------------------------------
[2015-06-24T18:04:19.013Z]	<MFFoX>	okay i know i could do what i be try to do i just do know how to achieve what i be after this look to be exactly what i be after thank for the help
--------------------------------------------------------------------------------------------------
[2015-06-25T01:37:08.884Z]	<robertdp>	do typescript have some option to remove lead whitespace from template string -pron- try to use -pron- for html but find there a large amount of waste space
[2015-06-25T01:43:37.746Z]	<MicahZoltu>	run -pron- string through a minimizer
[2015-06-25T01:49:13.760Z]	<robertdp>	i think -pron- would be a pretty common problem so perhaps ts have something build in
--------------------------------------------------------------------------------------------------
[2015-06-25T01:54:11.150Z]	<MicahZoltu>	typescript be just a compiler not a framework even the most common problem will be solve by -pron- if -pron- be a framework problem rather than a compiler problem
--------------------------------------------------------------------------------------------------
[2015-06-25T12:30:46.208Z]	<Yellowmat>	hi guy
[2015-06-25T12:33:26.280Z]	<Yellowmat>	can anyone tell -pron- how the getoutliningspan suppose to work i think -pron- could return -pron- the outline of a javascript file content
[2015-06-25T13:20:50.221Z]	<DanielRosenwasser>	that depend what -pron- mean by outline
[2015-06-25T13:20:59.923Z]	<DanielRosenwasser>	but
[2015-06-25T13:21:24.795Z]	<DanielRosenwasser>	outline span be use in visual studio for code fold
[2015-06-25T13:21:49.624Z]	<DanielRosenwasser>	if -pron- look for a skeleton of the program what nest in what maybe what -pron- really want be getnavigationbaritem
[2015-06-25T13:22:56.974Z]	<DanielRosenwasser>
[2015-06-25T13:24:26.026Z]	<DanielRosenwasser>	getoutliningspan basically give relevant span that -pron- think be appropriate to be foldable
[2015-06-25T13:24:47.174Z]	<DanielRosenwasser>	usually these be class function interface and recently comment that precede any of these declaration
[2015-06-25T13:34:03.673Z]	<Yellowmat>	ok what i need be to get the skeleton of the program thank
[2015-06-25T13:35:32.005Z]	<DanielRosenwasser>	no problemo
[2015-06-25T13:42:05.887Z]	<Yellowmat>	-pron- work but i wonder if i be not miss something because a call to getnavigationbaritem on a file contain the follow code var o aprop function myfunction return do give -pron- aprop as a child of o be -pron- a bug i do use the late version of typescript perhaps should i do the update first no
[2015-06-25T13:53:35.850Z]	<DanielRosenwasser>	no that correct -pron- only give -pron- name declaration
[2015-06-25T13:53:56.009Z]	<DanielRosenwasser>	though i forget what the behavior be for a name function expression i believe -pron-  <user> be ignore
[2015-06-25T13:54:43.596Z]	<DanielRosenwasser>	the use for these function be primarily editor drive
[2015-06-25T13:55:10.521Z]	<DanielRosenwasser>	however if -pron- like to tailor -pron- own -pron- would be fairly easy to do use foreachchild
[2015-06-25T13:56:12.571Z]	<DanielRosenwasser>	typescript function visit
[2015-06-25T13:57:12.960Z]	<Yellowmat>	thank for -pron- help
[2015-06-25T13:57:14.249Z]	<DanielRosenwasser>	-pron- logic for handle a node go in the comment and then visit be call recursively on each of node child
[2015-06-25T13:57:42.926Z]	<DanielRosenwasser>	-pron- very welcome glad to be able to help
--------------------------------------------------------------------------------------------------
[2015-06-25T14:47:55.874Z]	<ErjanGavalji>	hi anybody use the language service i want to get a build instance of the syntax tree of a program but can find information of how to do that
[2015-06-25T15:01:58.197Z]	<DanielRosenwasser>	when -pron- mean build instance -pron- mean a typechecke ast or just a syntactic ast
[2015-06-25T15:03:06.461Z]	<DanielRosenwasser>	here a good first start
[2015-06-25T15:03:28.667Z]	<DanielRosenwasser>	-pron- may want to eventually look into createprogram for multiple file though
[2015-06-25T15:32:55.291Z]	<ErjanGavalji>	yes i mean a typechecke ast thank i check the example already but i can get to a type base class locate in a different file
[2015-06-25T15:34:51.477Z]	<ErjanGavalji>	the thing be i can create a program and i can get to the classdeclaration of myinheritorclass
[2015-06-25T15:35:05.694Z]	<ErjanGavalji>	i can find the heritageclause of that class as well
[2015-06-25T15:35:42.812Z]	<ErjanGavalji>	but how do i get to the base class which be actually define in a different file module and pick -pron- own member
[2015-06-25T15:36:00.616Z]	<ErjanGavalji>	and drill down all the way to object
--------------------------------------------------------------------------------------------------
[2015-06-25T15:40:31.541Z]	<DanielRosenwasser>	from a heritage clause i think -pron- can use a typechecker gettypeatlocation
[2015-06-25T15:40:43.335Z]	<DanielRosenwasser>	a type checker instance  <user> have getpropertiesoftype and getpropertyoftype
[2015-06-25T15:41:47.654Z]	<ErjanGavalji>	but  <user> the gettypeatlocation resolve to the actual type declare in the other file -pron- check anyways
[2015-06-25T15:42:00.752Z]	<ErjanGavalji>	thank a lot  <user> keep post
[2015-06-25T15:42:06.913Z]	<DanielRosenwasser>	i believe so yes
[2015-06-25T15:42:59.223Z]	<DanielRosenwasser>	but make sure sorry i can say -pron- on that
[2015-06-25T15:43:07.672Z]	<DanielRosenwasser>	 <user> if -pron- get a language service set up -pron- can potentially take advantage of -pron- getdefinitionatposition if that do work
--------------------------------------------------------------------------------------------------
[2015-06-25T19:03:18.698Z]	<mhegazy>	-pron- have a node identifier node from the heritage clause use getsymbolatlocation to get the corresponding symbol from the symbol object -pron- can get all and these can span multiple file be just node so -pron- have pos and end and a getsourcefile that would give -pron- the source file object which -pron- self have a filename
[2015-06-25T22:21:09.309Z]	<dcharbonnier>	i know that there be many approach and people have concern on test private and protect method property but i believe -pron- not the only one that would like to be able to access private property in the context of test
[2015-06-25T22:24:13.808Z]	<dcharbonnier>	thank i  <user> check
--------------------------------------------------------------------------------------------------
[2015-06-25T22:23:22.585Z]	<dcharbonnier>	one solution that would make -pron- happy would be just to be able to compile ignore the access modifier and a more complicated but nice solution would be something like do -pron- know if there be an issue on github relate to this question i can find one
--------------------------------------------------------------------------------------------------
[2015-06-26T06:58:53.187Z]	<ErjanGavalji>	thank i be hope -pron- avoid jump through string position by have a strongly type ast tree build up in the memory which i would walk via the respective api be look for confirmation there be no such a tree yet so that i can get back to position
[2015-06-26T06:59:01.019Z]	<ErjanGavalji>	thank a lot for -pron- help
[2015-06-26T15:37:07.704Z]	<DanielRosenwasser>	specifically in the report function
--------------------------------------------------------------------------------------------------
[2015-06-26T08:29:07.621Z]	<Yellowmat>	hi guy
[2015-06-26T08:29:40.669Z]	<Yellowmat>	-pron- like to talk about symbol definition
[2015-06-26T08:29:53.710Z]	<Yellowmat>	assume i have a file with the follow content function myfunction return var d myfunction var e d
[2015-06-26T08:31:37.097Z]	<Yellowmat>	what should i do to get definition of d i try use getdefinitionsatposition but i do get expect result
[2015-06-26T08:31:50.843Z]	<Yellowmat>	should i set the position just after d before
[2015-06-26T08:33:30.850Z]	<Yellowmat>	finally i use the wrong character position sorry
[2015-06-26T08:33:37.833Z]	<Yellowmat>	but i still have a question
[2015-06-26T08:34:11.192Z]	<Yellowmat>	i get all definition of d but how can i get more information such as the line number where -pron- be
[2015-06-26T08:44:16.163Z]	<Yellowmat>	i guess i can walkthrough the ast of each file a definition have be find and stop at every node where type and name match but maybe there be another more efficient way
[2015-06-26T15:36:19.923Z]	<DanielRosenwasser>	hey -pron- may want to look into getlineandcharacterofposition
[2015-06-26T15:36:52.757Z]	<DanielRosenwasser>	look into -pron- little microsoft typescript wiki use the compiler the ast with a little linter example
--------------------------------------------------------------------------------------------------
[2015-06-26T19:38:55.633Z]	<mhegazy>	i be not sure i understand -pron- comment the tree and the type do exist the tree do not point to symbol or type as type have a different lifetime but the symbol and type point to the tree to get a match symbol for a tree node call
--------------------------------------------------------------------------------------------------
[2015-06-26T19:43:35.406Z]	<ErjanGavalji>	thanks have use the good type system of the dotnet framework for ten year make -pron- want a strongly type class hierarchy could turn out to a nice project
[2015-06-26T20:25:16.755Z]	<DanielRosenwasser>	-pron- can still enforce -pron- class hierarchy use a private tag in each class
[2015-06-26T20:27:16.553Z]	<DanielRosenwasser>	typescript class c private tag class d private tag
[2015-06-26T20:27:43.538Z]	<DanielRosenwasser>	now neither c nor d be assignable to each other
[2015-06-27T19:45:50.894Z]	<MicahZoltu>	be there any cloud ide that support typescript syntax highlighting auto complete and error squiggle
[2015-06-27T19:46:40.611Z]	<MicahZoltu>	the typescript playground have all of these feature i believe but -pron- be as far as i know a full ide
[2015-06-27T19:47:53.010Z]	<MicahZoltu>	ideally one that let -pron- supply the version of typescript i want rather than be bind to a specific typescript release
[2015-06-29T11:01:38.779Z]	<ErjanGavalji>	okay sorry -pron- take -pron- too much time to get into the matter well give -pron- an undefined value the heritageclause -pron- be an extend one if i try use the i always have one type i again get an undefined value
[2015-06-29T13:44:59.367Z]	<ErjanGavalji>	nope use
[2015-06-29T14:01:06.946Z]	<ErjanGavalji>	thank
--------------------------------------------------------------------------------------------------
[2015-06-28T08:34:23.950Z]	<namngo>	i hear about monaco from mssft i do know the status of -pron-
[2015-06-28T08:34:34.516Z]	<namngo>	but afaik -pron- have to use vso to use -pron-
[2015-06-28T15:33:49.931Z]	<mike-morr>	monaco be the editor use on vso typescript playground and vs code as well as a few other like onedrive
[2015-06-28T17:42:54.622Z]	<MicahZoltu>	hmm i wonder why monaco be so hard to find be microsoft not ready to go prime time with -pron- or be -pron- a technology that be get kill before get start
[2015-06-28T19:10:18.960Z]	<MicahZoltu>	-pron- not sure i understand what the problem be printlabel expect a label to be pass in but -pron- be instead pass -pron- in a text object which do match the interface for label
[2015-06-28T21:28:20.534Z]	<DickvdBrink>	-pron- not aware of monaco be opensource so maybe that be why -pron- can find -pron-
[2015-06-28T21:30:23.697Z]	<MicahZoltu>	heh microsoft be treat all closed source project as -pron- ugly duckle now
[2015-06-28T23:40:09.719Z]	<namngo>	i think monica make into vs code
[2015-06-28T23:43:52.706Z]	<MicahZoltu>	i specifically want a cloud base ide not a desktop one
[2015-06-28T23:44:28.222Z]	<MicahZoltu>	-pron- surprised that company be still develop new desktop ide microsoft vsc github atom etc
[2015-06-28T23:44:58.619Z]	<MicahZoltu>	i can appreciate continue to support exist ide like visual studio intellij etc but if i be to go out and build an ide from scratch i would definitely make -pron- a web application not a desktop one
[2015-06-28T23:46:07.903Z]	<MicahZoltu>	etc leverage exist simple ide and make -pron- available in the browser i want to see someone build a full featured ide visual studio entirely for the web just like office and google doc do for desktop word processing
[2015-06-29T01:03:53.199Z]	<sluijs>	why do typescript do know of the getattribute method error property getattribute do not exist on type node
[2015-06-29T01:08:16.674Z]	<sluijs>	throw this error
[2015-06-29T03:10:41.123Z]	<namngo>	i do not think -pron- return the same type as getelementbyid
[2015-06-29T07:03:40.778Z]	<sluijs>	be -pron- a bug
[2015-06-29T07:14:30.600Z]	<Ciantic>	as a developer would -pron- use closed source cloud base ide as primary tool
[2015-06-29T07:27:42.326Z]	<Ciantic>	i do think there be a great difference with atom and a cloud base ide as long as the auto update mechanism work
[2015-06-29T07:28:39.720Z]	<Ciantic>	desktop version be almost like have cache version of the program always available
[2015-06-29T11:12:31.601Z]	<ErjanGavalji>	and that be because in the getsymbolinfo -pron- node be of kind which be not take into consideration in the switch statement
[2015-06-29T13:14:14.072Z]	<ErjanGavalji>	okay get to somewhere the symbol return by call getsymbolatlocation be not enough i need a different symbol
[2015-06-29T13:27:36.522Z]	<ErjanGavalji>	the other thing i discover be that -pron- be really important to use sourcefile return by the instead of directly create -pron- via as write in every example
[2015-06-29T13:41:41.072Z]	<DanielRosenwasser>	the core of vs code and the playground be monaco which be build into window azure as an editor i do have a lot of personal experience with -pron- on there though
[2015-06-29T13:42:20.477Z]	<DanielRosenwasser>	class expression  <user> be support by work soon
[2015-06-29T13:42:46.529Z]	<DanielRosenwasser>	-pron- be  <user> not support in typescript
[2015-06-29T13:42:56.910Z]	<DanielRosenwasser>	or -pron- be but just kinda sorta
[2015-06-29T13:43:02.501Z]	<DanielRosenwasser>
[2015-06-29T13:43:10.289Z]	<DanielRosenwasser>	-pron- slate for
[2015-06-29T13:43:40.934Z]	<DanielRosenwasser>	be -pron- use the late from master though
[2015-06-29T13:45:15.052Z]	<DanielRosenwasser>	what would -pron- prefer the message be maybe -pron- can open a bug
[2015-06-29T13:45:38.197Z]	<DanielRosenwasser>	gotcha yeah -pron- may work for -pron- in proper but -pron- not actually sure
[2015-06-29T13:45:46.724Z]	<DanielRosenwasser>	be -pron- safe bet
[2015-06-29T13:46:45.503Z]	<ErjanGavalji>	i see i still need the information hence -pron- continue with the current type system do -pron- expect break change there or be -pron- only add value
[2015-06-29T14:00:04.159Z]	<DanielRosenwasser>	i do think -pron- ever break that part of the api and i do think there a probability -pron-  <user> make change that be not just additive
[2015-06-29T14:00:20.593Z]	<DanielRosenwasser>	but -pron- try to document anything like that here
[2015-06-29T14:08:54.599Z]	<pixelshaded>	be there any way to define in a generic interface that the interface extend the type -pron- wrap
[2015-06-29T14:55:27.595Z]	<MicahZoltu>	yes i would pay for a closed source cloud base ide if -pron- have enough of the feature i want i currently pay for a visual studio professional subscription out of -pron- own pocket for c development because i appreciate the feature set i  <user> own an intellij license for the same reason for java development and hopefully kotlin soon
--------------------------------------------------------------------------------------------------
[2015-06-28T16:14:36.802Z]	<olso>	anyone have similiar trouble with ts
[2015-06-28T17:11:44.409Z]	<sluijs>	be there a way to use the tsc in combination with browserify while preserve source map and not use tsify or minify unfortunately there be no for browserify be there another way to achieve the same thing -pron- use the command line version because i want to use npm scripts as a build tool
[2015-06-28T17:13:42.980Z]	<sluijs>	i think these smrq tsify blob master lib in package be responsible javascript var sourcemap normalized return but -pron- not sure what -pron- be exactly do
--------------------------------------------------------------------------------------------------
[2015-06-29T14:57:10.928Z]	<DanielRosenwasser>	i think i know what -pron- ask but can -pron- give a concrete example of what -pron- mean
[2015-06-29T14:57:20.725Z]	<DanielRosenwasser>	or syntax that would imply -pron-
[2015-06-29T14:59:25.981Z]	<MicahZoltu>	the reason i want in the cloud be for several reason none of which atom provide the first be an isolate development environment if i be work on two project each one be effectively on -pron- own host when develop with something like nitrous or this mean if one project be use python for example and another be use python i do have to deal with make sure each point at the correct thing similarly a lot of development environment require global tool this be especially common in javascript and i would prefer not to have that global state share most importantly though be that a cloud ide would store everything in the cloud so -pron- environment would be anywhere that i have a browser right now when i get a new machine re install -pron- os etc i have to spend a few day get -pron- whole environment back i  <user> can access -pron- home environment from work etc
[2015-06-29T14:59:55.126Z]	<DanielRosenwasser>	do -pron- mean something like
--------------------------------------------------------------------------------------------------
[2015-06-29T16:18:43.285Z]	<marce155>	quick question how far away be version i have to decide if -pron- can go with ts for a new project or have to stay on -pron- love async await yeah but that too far out anyway even if  <user> be a perfectly compatible upgrade change during the project  <user> be difficult because reason so if  <user> release in a few day i can get away with -pron- otherwise -pron- have to settle on any educate guess available
[2015-06-29T16:39:11.180Z]	<DickvdBrink>	-pron- not on the ts team but -pron- a bit afraid -pron- have to wait for the rtm which be schedule at july
[2015-06-29T16:39:17.081Z]	<DickvdBrink>	i hope this be the case though
[2015-06-29T16:47:48.961Z]	<marce155>	i see be hope -pron- would be out soon now well be well than nothing i guess
[2015-06-29T17:02:27.815Z]	<DanielRosenwasser>	-pron- can  <user> use the beta
[2015-06-29T17:03:04.626Z]	<DanielRosenwasser>	this may give -pron- an easy transitioning point
[2015-06-29T17:08:58.669Z]	<marce155>	beta be not allow because insert enterprisey buzzwords here i try that thank anyway
--------------------------------------------------------------------------------------------------
[2015-06-29T17:09:14.673Z]	<Ciantic>	i think -pron- say -pron- well i would prefer such ide now too -pron- spend countless hour fight with development environment too vs eclipse mostly try to come up a virtual machine base only find out vm need to be upgrade etc i have not try any cloud base ide seriously so perhaps -pron- skepticism and  <user> the ever green problem of freedom
[2015-06-29T17:11:48.392Z]	<Ciantic>	i think cloud base ide could survive as open source yet keep the cloud service as price
[2015-06-29T18:40:29.555Z]	<danquirk>	regard restore -pron- environment i hope -pron- sign in to vs so -pron- setting be save in the cloud -pron- may  <user> want to look at ninite for general re installation pain relief
[2015-06-30T00:53:30.090Z]	<MicahZoltu>	yeah i be sign into visual studio which be very nice -pron- hope vs continue down that path eventually sync extension plugin etc like chrome do that be say in a perfect world i would even have to install the ide i would just navigate to a page instead
[2015-06-30T00:55:05.444Z]	<MicahZoltu>	-pron- definitely not against an open source option but in -pron- experience open source ide have historically not have the feature richness of pay ide and for -pron- a feature rich ide be worth the money
[2015-06-30T07:28:43.282Z]	<namngo>	be -pron- dev env window or linux
[2015-06-30T07:28:50.602Z]	<namngo>	nix
[2015-06-30T07:57:50.626Z]	<Ciantic>	have anyone try to implement type safe orm in typescript
[2015-06-30T07:58:05.589Z]	<Ciantic>	i wonder what be the addition require for the language
[2015-06-30T07:58:28.935Z]	<Ciantic>	symbol stre literal type have potential to make -pron- possible
[2015-06-30T08:00:10.539Z]	<Ciantic>	though i get the sense -pron- require more advanced type trickery such as build type from expression on compile time edit time
[2015-06-30T10:55:40.562Z]	<Ciantic>	thank interesting while i do understand yet what -pron- allow
[2015-06-30T10:56:48.269Z]	<Ciantic>	to create a orm like thing i think -pron- be  <user> require to be able to splice interface do a sql sub select on query which return only few column
[2015-06-30T10:58:57.981Z]	<Ciantic>	basically more set operation on interface member
[2015-07-01T02:24:49.214Z]	<MicahZoltu>	how be -pron- get typescript
--------------------------------------------------------------------------------------------------
[2015-06-30T08:41:30.789Z]	<mitranim>
[2015-06-30T08:44:51.045Z]	<mitranim>	work pretty well with
[2015-06-30T14:19:39.535Z]	<MicahZoltu>	window primarily
--------------------------------------------------------------------------------------------------
[2015-06-30T18:58:49.122Z]	<calclavia>	i keep receive error like this error expect use ts
[2015-06-30T19:14:45.410Z]	<danquirk>	be -pron- sure tsc be what run that sound like a parse error due to an old version of tsc run and not understand union type in
[2015-06-30T19:15:28.824Z]	<danquirk>	if -pron- have an early version of tsc instal then -pron- path variable likely have the old version of tsc in path before later version so simply invoke from the command line use the first version of tsc -pron- ever instal
[2015-06-30T19:15:35.152Z]	<danquirk>	and yes this behavior be terrible
[2015-07-01T02:23:11.246Z]	<calclavia>	hmm -pron- say when i do tsc that do seem right -pron- not sure how to force install a specific version
[2015-07-01T02:25:43.191Z]	<calclavia>	npm i typescript
[2015-07-01T02:40:25.097Z]	<calclavia>	the typescript compiler tsc version be the same as the actual typescript version right
[2015-07-01T02:53:23.792Z]	<MicahZoltu>	not sure
[2015-07-01T03:25:38.733Z]	<calclavia>	how would -pron- find out the version of ts the compiler be use then
[2015-07-01T03:32:17.012Z]	<MicahZoltu>	tsc
[2015-07-01T03:40:17.390Z]	<calclavia>	oh i do have vs instal how would i change -pron- to use the npm version of ts
[2015-07-01T03:41:17.559Z]	<MicahZoltu>	-pron-  <user> have something that point at file
[2015-07-01T03:41:21.635Z]	<MicahZoltu>	possibly multiple item
[2015-07-01T03:41:24.636Z]	<MicahZoltu>	-pron- need to remove -pron- all
[2015-07-01T03:41:34.538Z]	<namngo>	or -pron- can grab the late installer for ts for vs
[2015-07-01T03:41:36.813Z]	<MicahZoltu>	there may be a clean way
[2015-07-01T03:41:40.129Z]	<MicahZoltu>	like that
[2015-07-01T03:41:56.644Z]	<calclavia>	ah i see thank be bang -pron- head on this problem for an hour
[2015-07-01T03:42:25.799Z]	<namngo>
[2015-07-01T03:42:29.357Z]	<namngo>	for
[2015-07-01T03:42:38.913Z]	<namngo>
[2015-07-01T03:42:45.120Z]	<calclavia>	be still rather unstable currently
[2015-07-01T03:42:58.100Z]	<MicahZoltu>	i do think so
[2015-07-01T03:43:05.174Z]	<namngo>	-pron- use -pron- now pretty stable
[2015-07-01T03:43:24.548Z]	<MicahZoltu>	most people be use i believe since that be what be on npm
[2015-07-01T03:43:34.453Z]	<MicahZoltu>	so -pron- have pretty regular feedback and -pron- can glance through the issue to see what be outstanding
[2015-07-01T03:43:37.240Z]	<calclavia>	ok and -pron- backwards compatible
[2015-07-01T03:43:43.247Z]	<MicahZoltu>	i believe so
[2015-07-01T03:43:51.624Z]	<MicahZoltu>	i start around so i can say for sure
[2015-07-01T03:43:52.254Z]	<calclavia>	hmm -pron- see if any source code break
[2015-07-01T03:44:08.078Z]	<calclavia>	i start few day ago
[2015-07-01T03:53:43.263Z]	<calclavia>	thank d now the version be work
--------------------------------------------------------------------------------------------------
[2015-06-30T19:29:53.081Z]	<sandermak>	be there any description on resolve of non relative external module name that be a bit less opaque than this snippet from the spec if the import declaration specify a top level external module name and the program contain no ambientexternalmoduledeclaration section with a string literal that specify that exact name the name be resolve in a host dependent manner for example by consider the name relative to a module name space root if a match module can not be find an error occur
[2015-07-01T03:32:27.644Z]	<MicahZoltu>	message version
[2015-07-01T03:32:54.425Z]	<MicahZoltu>	in -pron- case tsc should be right -pron- sound like the version of tsc that be on -pron- path be very old
[2015-07-01T03:33:11.157Z]	<MicahZoltu>	do where tsc from a command prompt
[2015-07-01T03:33:36.692Z]	<MicahZoltu>	-pron- be probably use the version visual studio install which be age old
[2015-07-01T03:40:34.847Z]	<MicahZoltu>	simplest solution be to update -pron- path environment variable
[2015-07-01T03:42:42.845Z]	<namngo>	this be for
--------------------------------------------------------------------------------------------------
[2015-07-01T06:34:27.933Z]	<DanielRosenwasser>	see -pron- break microsoft typescript wiki break list
--------------------------------------------------------------------------------------------------
[2015-07-01T08:52:50.414Z]	<JeroenVinke>	hi i have file both contain a global declaration for the variable expect how do i specify which one i want to use
[2015-07-01T09:06:45.628Z]	<Yellowmat>	hi guy
[2015-07-01T09:07:09.794Z]	<Yellowmat>	thank -pron- really help -pron-
[2015-07-01T09:08:00.094Z]	<Yellowmat>	i have a few question about jsdoc and how -pron- can use
[2015-07-01T09:09:23.342Z]	<Yellowmat>	first be the any documentation describe what jsdoc tags typescript support
[2015-07-01T09:14:48.835Z]	<Yellowmat>	i want to write lightweight javascript file to describe a framework api and i want to use jsdoc to tell typescript some specific information to be use for code completion such as what type a function declaration may return type of function parameter be -pron- possible
[2015-07-01T09:19:07.734Z]	<Yellowmat>	there be another thing i be really interested in find a way to tell typescript the this type to use for code completion there be some specific callback and function declaration in the framework i use for which i know for sure who be this and -pron- would be really helpful to have code completion on this
[2015-07-01T09:19:19.032Z]	<Yellowmat>	thank in advance for -pron- help guy
[2015-07-01T15:06:50.061Z]	<calclavia>	for example there be bunch of file in here i want to use three orbitcontrol but that file do not export any module -pron- instead seem to extend the three module define in the thre file
[2015-07-01T18:16:50.330Z]	<CyrusNajmabadi>	why not use a file for this thank
[2015-07-01T18:18:32.093Z]	<DanielRosenwasser>	regard -pron- question on code completion with this i think be an issue of interest for -pron-
[2015-07-01T18:26:28.493Z]	<jonathandturner>	funny i be just brainstorm how to do that
[2015-07-01T18:26:44.892Z]	<jonathandturner>	i should post that at some point
[2015-07-01T18:30:18.578Z]	<jonathandturner>	and -pron- post
[2015-07-01T21:38:22.108Z]	<mitranim>	funny i just run into a use case for this route handler callback in iron router for meteor to the issue
[2015-07-02T07:47:09.541Z]	<Yellowmat>	yep i can use file but as i plan to code in javascript i would prefer jsdoc style
[2015-07-02T07:48:39.608Z]	<Yellowmat>	in a previous attempt to code javascript language analysis tool i use to add a fake symbol in the ast like var this -pron- work pretty well
[2015-07-02T07:49:42.001Z]	<Yellowmat>	thank for -pron- answer i usually take a look in issue before post a question but i totally forget to for the this problem sorry about that
[2015-07-02T08:10:39.608Z]	<Ciantic>	i wonder if this issue be only specific of object literal if that be the case maybe some special var out object string number b could suffice
--------------------------------------------------------------------------------------------------
[2015-07-01T15:05:49.380Z]	<calclavia>	anyone know how to use definitelytype when there be multiple file
[2015-07-01T15:06:10.584Z]	<calclavia>
--------------------------------------------------------------------------------------------------
[2015-07-02T07:56:51.290Z]	<Ciantic>	be there a way to say for inferrence engine that right hand side of object literal should be of particular type
[2015-07-02T07:57:38.958Z]	<Ciantic>	without loose the key
[2015-07-02T07:58:04.326Z]	<Ciantic>	if i do this
[2015-07-02T07:58:06.458Z]	<Ciantic>	var out name string number a b
[2015-07-02T07:58:11.298Z]	<Ciantic>	var out name string number a b
[2015-07-02T07:58:16.003Z]	<Ciantic>	-pron- loose the key
[2015-07-02T07:58:25.659Z]	<Ciantic>	do not auto complete or check or anything
[2015-07-02T08:02:23.101Z]	<Ciantic>	maybe new syntax be require like var out implement name string number a b which signify to inference engine that -pron- should keep the shape of -pron- object literal or something
[2015-07-02T08:11:50.646Z]	<Ciantic>	but the inference engine should recgonize this object a b differently than other generic so -pron- would be really special case indee
--------------------------------------------------------------------------------------------------
[2015-07-02T08:31:18.108Z]	<Ciantic>	i open an issue for this
[2015-07-02T12:17:10.765Z]	<mitranim>	npm i dev microsoft typescript
--------------------------------------------------------------------------------------------------
[2015-07-02T10:02:54.854Z]	<grofit>	hey i be sure -pron- be hear this a lot at the moment but be there any unofficial eta on release not beta
[2015-07-02T10:03:27.566Z]	<grofit>	i only ask as atm i be have some issue in aurelia where i can not use the target system and -pron- mean some module import via jspm in ts script blow up
[2015-07-02T12:17:00.392Z]	<mitranim>	-pron- can do this by instal from master
[2015-07-02T12:22:13.295Z]	<grofit>	ok great
[2015-07-02T12:22:16.502Z]	<grofit>	 <user> give that a try
--------------------------------------------------------------------------------------------------
[2015-07-02T13:42:46.016Z]	<xDreamCoding>	-pron- have somewhat of a meta question to pass callback around in typescript i often end up cascade arrow notation to preserve this context where in plain javascript i would just pass the function var somefunc vs var somefunc thatfunc be there another way to do that in typescript sth like var somefunc thatfunc to preserve this context without have to repeat all parameter in an arrow notation
--------------------------------------------------------------------------------------------------
[2015-07-02T16:32:55.314Z]	<AbubakerB>	hi guy i be wonder if i want to test some change to the compiler in an editor how would i go around do that -pron- replace -pron- under to a custom build one and run cmd tsc run fine no error but when i test -pron- in vs code vs premium -pron- do recognise -pron- change be there something stupid that -pron- do missing
--------------------------------------------------------------------------------------------------
[2015-07-02T17:37:45.917Z]	<DanielRosenwasser>	hey i think -pron- may be interested in
[2015-07-02T17:38:14.686Z]	<DanielRosenwasser>	but if -pron- want tsc to work differently that may very well have to do with -pron- path variable
[2015-07-02T17:40:53.306Z]	<DanielRosenwasser>	open up and type in where tsc
[2015-07-02T17:41:29.386Z]	<DanielRosenwasser>	-pron- should be lose any this context in -pron- example unless -pron- an invocation of a property access
[2015-07-02T17:41:39.588Z]	<DanielRosenwasser>	vs a
--------------------------------------------------------------------------------------------------
[2015-07-02T19:41:47.442Z]	<AbubakerB>	i have tsc work differently already but when open in vs -pron- not pick up the new change -pron- make -pron- try dev mode tmrw hopefully that help -pron- figure out the issue thank a bunch
[2015-07-02T19:53:24.131Z]	<DanielRosenwasser>	no prob
[2015-07-02T20:07:44.635Z]	<DanielRosenwasser>	hey have experimentally be work on leverage typescript language service core to provide a nice js authoring experience
[2015-07-02T20:09:18.271Z]	<DanielRosenwasser>	-pron- have be put on the backburner for a bit but the branch be jsinference
[2015-07-02T20:31:27.083Z]	<calclavia>	how would i use a lib like this
[2015-07-02T20:31:53.632Z]	<calclavia>	use amd module system
[2015-07-02T20:32:15.901Z]	<calclavia>	if i need to use more than one file some of those file have no export
[2015-07-02T20:35:43.544Z]	<danquirk>	-pron- not super familar with but look around -pron- look like the library be mean to be load with amd
[2015-07-02T20:36:05.301Z]	<danquirk>	the reflect this -pron- just reference -pron- and concat with -pron- ts output
[2015-07-02T23:42:25.491Z]	<danquirk>	-pron- would generally have -pron- build task do -pron- ex
[2015-07-02T23:43:55.277Z]	<danquirk>	-pron- can have -pron- typescript output either in many file or use the option to concat -pron- ts output into one js output
[2015-07-02T23:44:07.732Z]	<danquirk>	but then -pron- need to concat that with any js library -pron- depend on
[2015-07-02T23:44:17.147Z]	<danquirk>	or else in a website just put -pron- in separate script tag
[2015-07-03T03:40:35.226Z]	<calclavia>	hmm -pron-  <user> use amd dependency though not sure if that  <user> work with concat
[2015-07-03T12:58:10.684Z]	<ericmdantas>	be -pron- close to yet smiley
[2015-07-03T20:08:08.347Z]	<calclavia>	that only in ts
[2015-07-03T20:08:21.427Z]	<calclavia>	i only use external module  <user>
--------------------------------------------------------------------------------------------------
[2015-07-02T21:28:58.865Z]	<calclavia>	how would -pron- concat with the output
--------------------------------------------------------------------------------------------------
[2015-07-03T18:46:42.553Z]	<calclavia>	hmm why when i do path and i have a class in the other ts file -pron- ts file say the class do exist
[2015-07-03T18:46:49.372Z]	<calclavia>	i do export classname at the end of the ts file
[2015-07-03T19:31:08.811Z]	<MicahZoltu>	path be for non export class
[2015-07-03T19:31:26.208Z]	<MicahZoltu>	personally i do use internal module at all external only for -pron-
[2015-07-03T19:32:02.245Z]	<MicahZoltu>	export class foo  <user> result in foo be an external module which mean -pron- bring -pron- in to -pron- other package like import foo from foo
[2015-07-03T19:32:55.940Z]	<MicahZoltu>	class foo  <user> result in foo be an internal module which mean -pron- bring -pron- in with path
[2015-07-03T20:57:39.114Z]	<MicahZoltu>	-pron- currently use ts and do ever use path
[2015-07-03T20:57:42.530Z]	<MicahZoltu>
--------------------------------------------------------------------------------------------------
[2015-07-03T21:26:55.566Z]	<spencerwi>	what the general statement feeling on the stability of beta -pron- get an app at -pron- employer and some of the feature look preeeeetty nice to have
[2015-07-03T21:31:23.986Z]	<spencerwi>	think mostly of destructure be nice to be able to write destructure assignment param without have to nervously check browser support table
[2015-07-03T21:34:07.986Z]	<spencerwi>	nevermind read back through the thread seem like be consider fairly stable nice
[2015-07-03T22:23:27.716Z]	<MicahZoltu>	be pretty stable for -pron- though be careful with master
[2015-07-03T22:23:41.408Z]	<MicahZoltu>	the version on npm be a couple month old and i do think -pron- have any show stopper bug
--------------------------------------------------------------------------------------------------
[2015-07-04T17:47:42.602Z]	<debuuu>	be there any plan to ever have -pron- possible to call static method on generic type parameter
[2015-07-04T18:00:41.876Z]	<debuuu>	or be that something that be perhaps not possible to convert to javascript
--------------------------------------------------------------------------------------------------
[2015-07-04T21:25:16.697Z]	<DanielRosenwasser>	type be not necessarily intrinsically tie to a class definition so -pron- not straightforward to do that
[2015-07-04T21:26:20.244Z]	<DanielRosenwasser>	-pron- take a look at basically the solution i give be to take a constructor function as a parameter
[2015-07-04T21:29:39.059Z]	<DanielRosenwasser>	typescript class c static a number static b string x number y string function f t extend typeof t var instanceofc new constructorfunction
[2015-07-04T21:30:00.238Z]	<DanielRosenwasser>	in the above -pron- can access the static off of constructorfunction
[2015-07-04T21:30:07.141Z]	<DanielRosenwasser>	and -pron- can even instantiate -pron-
[2015-07-04T21:30:53.484Z]	<DanielRosenwasser>	but at that point -pron- may not even need to make -pron- generic
[2015-07-04T21:31:13.276Z]	<DanielRosenwasser>	typescript class c static a number static b string x number y string function typeof c var instanceofc new constructorfunction
[2015-07-04T23:29:11.521Z]	<DanielRosenwasser>	-pron- not familiar with the underscore def but perhaps the follow be really what -pron- want typescript import underscore as from underscore
--------------------------------------------------------------------------------------------------
[2015-07-04T23:04:48.443Z]	<MicahZoltu>	i have some code like this import underscore from underscore export class foo number number return of course typescript complain about underscore not exist so i instal the definitelytype definition file and add -pron- to -pron- now typescript complain that module underscore have no default export highlight the literal underscore not the string
[2015-07-04T23:05:53.553Z]	<MicahZoltu>	i can change the string underscore because i be do runtime transpilation with systemjs and -pron- use the key underscore to lookup and load the correct module
[2015-07-04T23:09:41.300Z]	<MicahZoltu>	i can do this but -pron- seem like a really crappy solution import underscore var underscore export class foo number number return
[2015-07-04T23:10:44.224Z]	<MicahZoltu>	even without the rename from to underscore why be underscore throw stuff into the global namespace i do want globally available in why entire application only in file that i have explicitly import -pron- be all of the definitelytype thing like this
[2015-07-04T23:13:39.025Z]	<MicahZoltu>	-pron- use systemjs so be globally available i have to do import underscore from underscore how can i make -pron- so typescript will complain do i have to author -pron- own file that be more sane
[2015-07-04T23:29:21.547Z]	<DanielRosenwasser>	sorry
[2015-07-04T23:29:35.431Z]	<DanielRosenwasser>	i mean typescript import as underscore from underscore
--------------------------------------------------------------------------------------------------
[2015-07-04T23:42:10.900Z]	<MicahZoltu>	module underscore have no export member
[2015-07-04T23:43:00.210Z]	<MicahZoltu>	declare module declare var underscorestatic declare module underscore export
[2015-07-04T23:44:47.066Z]	<MicahZoltu>	i believe the can be break down as such either i get a compiler error with this import from underscore or i get a runtime error with this
[2015-07-04T23:48:01.512Z]	<DanielRosenwasser>	the ts import x from blah syntax be purely for if there be a default export basically when an export value should represent the module
[2015-07-04T23:48:16.598Z]	<MicahZoltu>	that work any idea off hand what that compile to in systemjs module the same as import from underscore
--------------------------------------------------------------------------------------------------
[2015-07-04T23:45:47.548Z]	<MicahZoltu>	in the first case the definition file pollute the global namespace and -pron- do appear to work as an external module however if i teat -pron- like an internal module -pron- get a runtime error because underscore be bring in as an external at runtime no global namespace pollution
--------------------------------------------------------------------------------------------------
[2015-07-04T23:46:31.757Z]	<DanielRosenwasser>	okay give that -pron- define that way what -pron- want be typescript import as from underscore
[2015-07-04T23:46:56.078Z]	<DanielRosenwasser>
[2015-07-04T23:48:37.700Z]	<MicahZoltu>	be there a way to do the syntaxt import from underscore
[2015-07-04T23:48:45.630Z]	<MicahZoltu>	the above do work but -pron- be what i would like
[2015-07-04T23:49:27.511Z]	<MicahZoltu>	 <user> be there a way to unpollute -pron- global namespace -pron- guess not without modify the file
[2015-07-04T23:49:46.841Z]	<MicahZoltu>	at the moment typescript think that be globally available but that be true
[2015-07-04T23:53:45.366Z]	<DanielRosenwasser>	-pron- may need to discuss that on definitelytype -pron- not certain what the semantic be of import underscore
[2015-07-04T23:54:35.424Z]	<DanielRosenwasser>
--------------------------------------------------------------------------------------------------
[2015-07-04T23:54:37.933Z]	<MicahZoltu>	more generally speak how do one create a file that have no global export
[2015-07-04T23:54:38.146Z]	<DanielRosenwasser>	javascript var return setter function execute function code go here
[2015-07-04T23:55:06.255Z]	<MicahZoltu>	that is i want a file i do mind do -pron- by hand that do pollute -pron- global namespace
[2015-07-04T23:56:44.878Z]	<MicahZoltu>	actually i may have figure -pron- out
[2015-07-05T00:24:09.815Z]	<MicahZoltu>	the trick appear to be this declare module underscore export interface export interface interface underscorestatic export var underscoretype underscorestatic export function underscoremethod array t underscore t export function underscoremethod t underscore t
[2015-07-05T00:24:30.424Z]	<MicahZoltu>	i do have to touch the downloaded file unfortunately
[2015-07-05T00:24:57.118Z]	<MicahZoltu>	i wonder if there be a way to auto magically do this
[2015-07-05T00:25:13.200Z]	<MicahZoltu>	i can at least now do import underscoremethod as underscore from underscore
[2015-07-05T00:25:19.271Z]	<MicahZoltu>	and i do have any global namespace pollution
[2015-07-05T00:26:45.679Z]	<MicahZoltu>	i have yet to see if this end up be compatible at runtime though
[2015-07-05T01:21:23.727Z]	<MicahZoltu>	the problem here be that t be undefined normally -pron- method signature would be methodname t underscore t but i do have a method name
--------------------------------------------------------------------------------------------------
[2015-07-05T01:16:48.180Z]	<MicahZoltu>	be -pron- possible to have a generic parameter in a callable
[2015-07-05T01:19:05.941Z]	<MicahZoltu>	export default var underscore value t underscore t each list t iterator listiterator t void context any list t
[2015-07-05T01:22:50.297Z]	<MicahZoltu>	ah i think i figure -pron- out
[2015-07-05T01:23:04.257Z]	<MicahZoltu>	t underscore t
--------------------------------------------------------------------------------------------------
[2015-07-05T03:14:03.579Z]	<Keats>	hey how do people write definition file for -pron- own project i be use an internal module in a file but i now need to reference external module like immutable in -pron- which do work since -pron- an internal module the code -pron- be stick as close as possible to so -pron- not sure how to write a definition file for that case can put -pron- in the file directly as i need to reuse stuff all around
[2015-07-05T03:14:46.595Z]	<MicahZoltu>	personally i recommend only use external module
[2015-07-05T03:15:47.268Z]	<MicahZoltu>	if all of -pron- module be external -pron- should have the problem of internal and external mix
[2015-07-05T03:16:19.687Z]	<Keats>	yeah -pron- like to do that but not sure how to represent -pron- own code as external module ie -pron- file may be importeed as etc
[2015-07-05T03:16:22.205Z]	<Keats>	-pron- a bit confused
[2015-07-05T03:18:11.554Z]	<MicahZoltu>	export class foo import foo from foo export class bar foo foo new foo
[2015-07-05T03:18:59.505Z]	<MicahZoltu>	file
[2015-07-05T03:19:42.755Z]	<MicahZoltu>	fix
[2015-07-05T03:20:25.733Z]	<MicahZoltu>	all import be relative to not relative to each other
[2015-07-05T03:20:41.108Z]	<Keats>	-pron- use webpack -pron- have to check
[2015-07-05T03:21:13.272Z]	<MicahZoltu>	module resolution be get improve in microsoft
[2015-07-05T03:21:57.530Z]	<MicahZoltu>	once that happen i do see any reason to have file be internal
[2015-07-05T03:25:31.274Z]	<Keats>	cool thank
[2015-07-05T03:26:10.326Z]	<Keats>	yeah most libs should be external agree
--------------------------------------------------------------------------------------------------
[2015-07-05T19:05:18.735Z]	<sluijs>	-pron- use the ts plugin for sublimetext when use the import export syntax -pron- say can not compile unless be specify in the left bottom corner however -pron- tsconfig contain this how can i get rid of the error
--------------------------------------------------------------------------------------------------
[2015-07-05T19:33:06.043Z]	<mitranim>	-pron- need to restart the editor after change the tsconfig
[2015-07-05T19:39:53.717Z]	<sluijs>	unfortunately that do help exist in the rootmap and be in do that have something to do with -pron- should i inform sublime where the config file could be find
[2015-07-05T20:32:34.408Z]	<mitranim>	normally -pron- want to keep in src scripts or something like that
[2015-07-05T20:33:46.393Z]	<mitranim>	unless -pron- miss something
[2015-07-05T21:33:14.456Z]	<MicahZoltu>	in -pron- i have to in the file section the file have a declare module foo in -pron- in one of -pron- other file i do import from foo but i get an error can not find module foo if i edit the file and put quote around foo then -pron- start work
[2015-07-05T21:43:16.998Z]	<MicahZoltu>	ah -pron- appear to be relate to whether -pron- be use a module loader or not if -pron- be use a module loader and be instead throw everything into the global namespace old js style then without quote if -pron- be use a module loader then with quote
--------------------------------------------------------------------------------------------------
[2015-07-05T20:10:23.980Z]	<sluijs>	after upgrade to version of the ts compiler this error be suddenly go thank anyhow
[2015-07-05T20:32:40.523Z]	<mitranim>	-pron- not like
[2015-07-05T20:32:52.918Z]	<mitranim>	the role of tsconfig be to specify the root of a ts project module plus optional compiler flag
--------------------------------------------------------------------------------------------------
[2015-07-05T21:30:57.685Z]	<MicahZoltu>	why do -pron- typing file have to have a quote module name in order to work
--------------------------------------------------------------------------------------------------
[2015-07-06T06:16:19.592Z]	<Gaelan>	quick question be there a way to require a parameter to a function to be a class implement a certain interface
--------------------------------------------------------------------------------------------------
[2015-07-06T10:10:45.993Z]	<romanroe>	i try to send a mail to but the delivery fail because -pron- mail address be outside of the group organization obviously i do not belong to microsoft what be the good way to get in contact with the ts team
--------------------------------------------------------------------------------------------------
[2015-07-06T13:46:50.604Z]	<jonathandturner>	if -pron- want -pron- can shoot an email to -pron- what kind of thing be -pron- look for
[2015-07-06T13:49:36.723Z]	<romanroe>	-pron- be plan to create a website for typescript user with typescript in the domain name and i want to make sure that there be no trademark and that this be nothing unwanted from the ms team side
[2015-07-06T14:00:54.926Z]	<jonathandturner>	-pron- do really enforce the name usage thing so feel free
[2015-07-06T14:01:27.949Z]	<jonathandturner>	what kind of website tutorial kind of thing
[2015-07-06T14:09:31.378Z]	<jonathandturner>	cool sound good
--------------------------------------------------------------------------------------------------
[2015-07-06T14:07:47.702Z]	<romanroe>	yes sometime for the start -pron- want to create a community hub enable regional dev to come together etc
[2015-07-06T14:08:48.440Z]	<romanroe>	maybe a project exchange etc hope this make sense to -pron-
--------------------------------------------------------------------------------------------------
[2015-07-06T14:59:07.686Z]	<MicahZoltu>	-pron- should just be able to do interface ifoo foomethod void class foo implement ifoo foomethod foo foo
--------------------------------------------------------------------------------------------------
[2015-07-07T00:26:11.803Z]	<LordJZ>	hi guy regard still be there any plan to release ts for vs as an installer extension before vs release in week if not  <user>  <user> out on july with vs
[2015-07-07T19:55:41.321Z]	<DanielRosenwasser>	-pron-  <user> be go out at the same time as vs
[2015-07-07T21:57:49.945Z]	<DanielRosenwasser>	hey long time no speak i hear -pron- be work with connor right
[2015-07-07T23:46:48.558Z]	<duncanmak>	yeah -pron- an intern in -pron- team
[2015-07-07T23:47:13.010Z]	<duncanmak>	-pron- guy have be busy finish up the release when be -pron- go to be do
[2015-07-08T01:31:29.085Z]	<MicahZoltu>	week last i hear
[2015-07-08T01:31:33.478Z]	<MicahZoltu>	rumor of course
[2015-07-08T01:32:04.710Z]	<MicahZoltu>	look at the issue list -pron- look like the ts team be intentionally push everything that be absolutely critical to imply that -pron- want to close out
[2015-07-08T01:51:44.745Z]	<DanielRosenwasser>	be basically cool on the windowsill branch be effectively what go to be ship at this point
[2015-07-08T01:52:01.528Z]	<DanielRosenwasser>	no major feature be go to be go in
[2015-07-08T01:52:21.675Z]	<DanielRosenwasser>	take a look at
[2015-07-08T01:56:02.413Z]	<DanielRosenwasser>	but -pron- understand be a relatively big release and i think -pron- go to be aim for small more frequent release in the future
[2015-07-08T02:04:45.169Z]	<tinganho>	seem to b very big too but i do mind
[2015-07-08T02:13:14.301Z]	<DanielRosenwasser>	well then -pron- be get somewhat big more frequent release smile
[2015-07-08T02:14:42.188Z]	<DanielRosenwasser>	really though -pron- mainly hope to reduce the latency between release for user -pron-  <user> be learn what work best as -pron- go along
[2015-07-08T02:49:23.197Z]	<duncanmak>	i think a lot of people be wait for async await to land in
[2015-07-08T10:17:21.810Z]	<tinganho>	try set outdir option
[2015-07-08T10:19:14.216Z]	<serhiisol>	as far as i understand outdir be not correct option cause outdir description redirect output structure to the directory type string format uri
[2015-07-08T10:20:43.786Z]	<tinganho>	outdir be the setting -pron- be look for and try set sourceroot to
[2015-07-08T10:22:48.582Z]	<tinganho>	-pron- need to set exclude option too exclude
[2015-07-08T10:22:54.888Z]	<serhiisol>	i need to compile only typescript from src folder
[2015-07-08T10:23:17.402Z]	<serhiisol>	there be no such option in the
[2015-07-08T10:23:43.252Z]	<tinganho>	which tsc version do -pron- use
[2015-07-08T10:24:36.093Z]	<tinganho>	either -pron- need manually set all file with file property or update the compiler
[2015-07-08T10:25:35.594Z]	<tinganho>	if the src folder have one root file that import all file just set -pron- in file option
[2015-07-08T10:27:48.653Z]	<tinganho>	good way be to update the compiler then
[2015-07-08T10:28:17.382Z]	<tinganho>	i think have the exclude option
[2015-07-08T10:29:21.736Z]	<serhiisol>	but there be no version
[2015-07-08T10:38:35.592Z]	<tinganho>	-pron- right -pron- have not be publish if -pron- do mind bleed edge
--------------------------------------------------------------------------------------------------
[2015-07-07T21:37:37.355Z]	<duncanmak>	hey
--------------------------------------------------------------------------------------------------
[2015-07-08T03:12:01.464Z]	<MicahZoltu>	do tease -pron-
[2015-07-08T04:01:28.524Z]	<duncanmak>	i think if -pron- wanna get a taste -pron- can try flow i think -pron- have something implement
[2015-07-08T04:20:36.538Z]	<MicahZoltu>	flow do have a window compiler nor any real tooling that i be aware of
--------------------------------------------------------------------------------------------------
[2015-07-08T10:10:12.397Z]	<serhiisol>	hi guy -pron- find some strange thing and i can figure out where be the problem -pron- compileroption module commonjs noimplicitany true preserveconstenum true sourceroot sourcemap true target but tsc ignore sourceroot and compile every single file in the top of the project who know why
[2015-07-08T10:21:27.290Z]	<serhiisol>	nope at all
[2015-07-08T10:21:53.540Z]	<serhiisol>	-pron- compile every single file in the project folder even the
[2015-07-08T10:22:31.415Z]	<serhiisol>	outdir option give -pron- option to copy all structure of original file to specific folder
[2015-07-08T10:23:56.038Z]	<serhiisol>	error unknown compiler option exclude
[2015-07-08T10:24:00.653Z]	<serhiisol>
[2015-07-08T10:26:56.025Z]	<serhiisol>	file -pron- be not an option cause -pron- have a lot of file
[2015-07-08T10:27:59.362Z]	<serhiisol>	but i have the late one
[2015-07-08T10:28:03.320Z]	<serhiisol>	or not
[2015-07-08T10:29:22.290Z]	<serhiisol>
[2015-07-08T10:29:35.758Z]	<serhiisol>	-pron- find only
--------------------------------------------------------------------------------------------------
[2015-07-08T10:40:14.543Z]	<serhiisol>	-pron- find another solution
[2015-07-08T10:40:21.338Z]	<serhiisol>	-pron- use the grunt
[2015-07-08T10:40:30.526Z]	<tinganho>	yes that work too
[2015-07-08T10:40:34.257Z]	<serhiisol>	and -pron- use grunt typescript
[2015-07-08T10:40:36.331Z]	<tinganho>	or gulp
[2015-07-08T10:40:40.565Z]	<serhiisol>	with option typescript base src option module commonjs target sourcemap true
[2015-07-08T10:41:29.912Z]	<serhiisol>	anyway thank for help
--------------------------------------------------------------------------------------------------
[2015-07-08T18:59:17.271Z]	<scottwio>	how do -pron- get system work in i always seem to get argument for option must be commonjs or amd
[2015-07-08T19:01:01.106Z]	<serhiisol>	first of all -pron- a grunt task grunt typescript and what be wrong with module
[2015-07-08T19:04:14.452Z]	<serhiisol>	maybe -pron- just forgot to add this option
[2015-07-08T19:06:59.432Z]	<scottwio>	sorry as in system
[2015-07-08T19:07:01.837Z]	<scottwio>	for systemjs
[2015-07-08T19:07:45.770Z]	<serhiisol>	systemjs work well with commonjs
[2015-07-08T19:07:58.750Z]	<serhiisol>	typescript compile into commonjs
[2015-07-08T19:08:06.647Z]	<serhiisol>	and systemjs load everything
[2015-07-08T19:08:45.003Z]	<serhiisol>	script defaultjsextension true path template src app myapp
[2015-07-08T22:28:32.819Z]	<dcharbonnier>	the release cycle be really too slow -pron- be work to make this language more popular but those kind of problem be very bad and -pron- not a question of effort -pron- just a question of organization why do -pron- put that much effort on a release this be not agile
--------------------------------------------------------------------------------------------------
[2015-07-08T23:32:08.984Z]	<DanielRosenwasser>	july microsoft
--------------------------------------------------------------------------------------------------
[2015-07-09T00:05:48.349Z]	<bb>	hi -pron- try to use a nodelist in a for of loop but -pron- get this error message error type nodelist be not an array type or a string type would -pron- be adequate to add nodelist to the list of allow type for for of loop
[2015-07-09T00:06:52.837Z]	<MicahZoltu>	systemjs be system i do believe -pron- work with the current release version of typescript either wait for the next version or use master or one of the bleed edge release
[2015-07-09T00:14:30.298Z]	<DanielRosenwasser>	hi discussion on that matter can be find on support  <user> be in for typescript but -pron- figure thing for out on the issue i just link -pron- to
[2015-07-09T00:17:41.039Z]	<bb>	ah live list be the reason that sound very reasonable thank for the prompt answer
[2015-07-09T10:37:24.913Z]	<grofit>	not sure if -pron- be mention but beta do not support system type
[2015-07-09T10:37:30.224Z]	<grofit>	-pron- need to pull down master
[2015-07-09T10:37:38.244Z]	<grofit>	npm install microsoft typescript
[2015-07-09T10:37:53.207Z]	<grofit>	even then -pron- seem a bit ropey with jspm
[2015-07-09T21:36:22.014Z]	<ejsmith>	ugh month later and still no update build seem pretty ridiculous that all this awesome work be go on and -pron- just sit in the repo being waste
[2015-07-09T21:36:49.389Z]	<ejsmith>	why not release each feature bug fix as -pron- complete and test
[2015-07-09T21:58:40.322Z]	<DanielRosenwasser>	feature and bug fix often affect other part of the compiler and -pron- often not clear when a feature be good enough to be consider do internal testing often catch this though -pron- hope to work with on make nightlie something user can easily pick up
[2015-07-09T21:59:02.198Z]	<DanielRosenwasser>	specifically see
[2015-07-09T22:23:13.118Z]	<ejsmith>	the github flow would work great for the project work on feature in a branch pull in any update to master only merge to master when the feature be complete test and ready to be release any commit to master get release automatically
[2015-07-09T22:23:55.579Z]	<ejsmith>	should say merge to master push to master since there would be any merge since -pron- would always test -pron- branch with the late code from master merge in
--------------------------------------------------------------------------------------------------
[2015-07-09T06:52:53.592Z]	<SergioMorchon>	i have the same situation and that work for -pron- put the inside the src folder call from the project root tsc src tell the typescript compiler to compile a project tsconfig inside the src folder and of course -pron- be able to redirect the entire output single multiple file with out outdir option
--------------------------------------------------------------------------------------------------
[2015-07-09T22:21:20.521Z]	<ejsmith>	i would argue that the project seem to have a pretty good automate test base and that -pron- should trust -pron- and then continue to improve -pron- when -pron- fail
--------------------------------------------------------------------------------------------------
[2015-07-09T22:35:30.922Z]	<wholroyd>	-pron- new to typescript as of last week and have find update to be slow as well at least with beta moniker people  <user> understand issue may exist software be only as good as those who have write -pron- and everyone be claim by the human condition of imperfection a timetable would be useful too all -pron- have be a roadmap today
[2015-07-09T22:37:59.202Z]	<wholroyd>	typescript be  <user> mean to be cross platform and the only issue still open be for visual studio  <user> in preview
[2015-07-09T22:38:45.247Z]	<wholroyd>	use webstorm or code -pron- block by unrelated issue affect one ide
[2015-07-09T22:39:10.590Z]	<wholroyd>	nightlie would shut -pron- up
[2015-07-09T22:41:18.038Z]	<danquirk>	do worry guy -pron- hear -pron- and agree -pron- -pron- be both get something like nightly build online as well as put out official release faster than the time between and
[2015-07-09T22:41:29.944Z]	<wholroyd>	i think i see something like unit test for typescript that insane if those pass why block fix
[2015-07-09T22:45:01.115Z]	<danquirk>	those test generally do cover the actual ide integration vs sublime etc as well as make sure those editor do thing like install the new bit correctly
[2015-07-09T22:45:47.584Z]	<danquirk>	that say -pron- certainly true that -pron- have enough compiler baseline and such that nightly build be fairly stable save for feature that have literally just be check in
[2015-07-09T22:51:41.895Z]	<wholroyd>	where be the vs sublime integration code i do see -pron- in the typescript repo i imagine those bit be all private still
[2015-07-09T22:52:45.966Z]	<danquirk>	the vs code be yeah
[2015-07-09T22:53:09.255Z]	<danquirk>	the sublime stuff be just in -pron- own repo
[2015-07-09T22:53:09.624Z]	<danquirk>
[2015-07-09T22:58:09.667Z]	<wholroyd>	do -pron- guy see -pron- move out from the microsoft org on github to -pron- own org
[2015-07-09T22:59:45.982Z]	<danquirk>	no but what github org -pron- under really will affect -pron- release schedule mechanism
[2015-07-09T23:08:59.945Z]	<ejsmith>	seem like the vs integration need to be completely decouple from the compiler service and allow -pron- to be release on a different schedule
[2015-07-09T23:09:13.417Z]	<ejsmith>	i think -pron- be already like that
--------------------------------------------------------------------------------------------------
[2015-07-09T23:09:36.876Z]	<DanielRosenwasser>	-pron- hope to accomplish that at some point soon
[2015-07-09T23:09:43.571Z]	<danquirk>	thing get a little entangled again but yeah that the plan
[2015-07-09T23:10:16.098Z]	<ejsmith>	i guess that be the main reason for infrequent ts release
[2015-07-09T23:10:25.717Z]	<ejsmith>	since the tooling would break
[2015-07-09T23:14:21.654Z]	<danquirk>	-pron- depend on the scope of the change -pron- can update vs to use the late typescript bit -pron- but when change be require in the vs side then yeah -pron- need to distribute a new vs package
[2015-07-09T23:15:22.659Z]	<danquirk>	the intention be for -pron- to be easy for -pron- to release those vs package as well so both typescript the language and the vs plugin  <user> hopefully get more frequent update
[2015-07-09T23:15:42.527Z]	<DanielRosenwasser>	yes see
--------------------------------------------------------------------------------------------------
[2015-07-10T00:05:30.169Z]	<duncanmak>	hey
[2015-07-10T00:06:03.431Z]	<duncanmak>	with the import syntax be be possible to do destructuring and as glob
[2015-07-10T00:06:03.489Z]	<DanielRosenwasser>	hey what up
[2015-07-10T00:06:18.747Z]	<DanielRosenwasser>	-pron- not quite destructuring
[2015-07-10T00:06:18.750Z]	<duncanmak>	like import as rx component dom from rx
[2015-07-10T00:06:18.793Z]	<duncanmak>	like import as rx component dom from rx
[2015-07-10T00:07:04.229Z]	<duncanmak>	eek
[2015-07-10T00:07:04.252Z]	<duncanmak>	i get -pron- name mix up
[2015-07-10T00:07:19.399Z]	<duncanmak>	import as react component dom from react that do compile
[2015-07-10T00:07:49.562Z]	<DanielRosenwasser>	i do believe -pron- be able to actually though i think -pron- can do two separate import statement
[2015-07-10T00:08:04.727Z]	<duncanmak>	but i think i see some post that say babel support that
[2015-07-10T00:08:04.822Z]	<duncanmak>	ahh
[2015-07-10T00:12:08.743Z]	<DanielRosenwasser>	so specify -pron- as namedimports importeddefaultbinde namespaceimport importeddefaultbinde namedimport
[2015-07-10T00:12:16.134Z]	<DanielRosenwasser>	so -pron- one or the other
[2015-07-10T00:12:16.932Z]	<DanielRosenwasser>	bugt
[2015-07-10T00:12:17.922Z]	<DanielRosenwasser>	but
[2015-07-10T00:13:01.981Z]	<DanielRosenwasser>	i suppose -pron- could file a proposal for this
[2015-07-10T00:13:27.927Z]	<duncanmak>	ahh this be where i see -pron-
[2015-07-10T00:13:31.252Z]	<duncanmak>	import each from underscore
[2015-07-10T00:13:37.205Z]	<duncanmak>
[2015-07-10T00:13:42.412Z]	<DanielRosenwasser>	that a default export
[2015-07-10T00:13:56.770Z]	<duncanmak>	under section
[2015-07-10T00:14:05.045Z]	<duncanmak>	ahh
[2015-07-10T00:14:23.181Z]	<duncanmak>	but default export be not backwards compatible with commonjs modules right
[2015-07-10T00:14:32.801Z]	<duncanmak>	i do think old module have a default
[2015-07-10T00:14:35.894Z]	<DanielRosenwasser>	well that  <user> something -pron- look into
[2015-07-10T00:14:49.712Z]	<duncanmak>	right i see a discussion with ander in one of the issue
[2015-07-10T00:15:11.064Z]	<DanielRosenwasser>	right
[2015-07-10T00:15:23.717Z]	<duncanmak>	haha -pron- know all the issue by heart
[2015-07-10T00:15:48.923Z]	<DanielRosenwasser>
[2015-07-10T00:16:14.604Z]	<DanielRosenwasser>	-pron- just -pron- ninja like github skill smile
[2015-07-10T00:26:31.750Z]	<duncanmak>	i see this happening with
--------------------------------------------------------------------------------------------------
[2015-07-10T00:26:54.405Z]	<duncanmak>	let -pron- gist this
--------------------------------------------------------------------------------------------------
[2015-07-10T09:52:29.534Z]	<Yellowmat>	hi guy
[2015-07-10T09:53:25.768Z]	<Yellowmat>	i have a question about how to filter code completion result
[2015-07-10T09:53:41.133Z]	<Yellowmat>	assume i have write the follow code
[2015-07-10T09:53:41.670Z]	<Yellowmat>	function myfunction return var d myfunction
[2015-07-10T09:53:54.700Z]	<Yellowmat>	and -pron- cursor be position at the very end
[2015-07-10T09:55:01.633Z]	<Yellowmat>	thank in advance for -pron- help
[2015-07-10T09:55:02.029Z]	<Yellowmat>	be there any api i could use to get or just what follow the last dot to filter code completion result
--------------------------------------------------------------------------------------------------
[2015-07-10T18:05:51.173Z]	<OlegDokuka>	hi guy
[2015-07-10T18:06:20.011Z]	<OlegDokuka>	how can i install late snapshot of typescript where exist support for abstraction etc
[2015-07-10T18:06:52.520Z]	<serhiisol>	try ntypescript
[2015-07-10T18:07:32.522Z]	<OlegDokuka>	thank alottttttt
[2015-07-10T18:07:46.908Z]	<serhiisol>	-pron- welcome
[2015-07-10T18:08:08.055Z]	<OlegDokuka>	do -pron- integrate with vs
[2015-07-10T18:08:31.791Z]	<serhiisol>	-pron- a npm package
[2015-07-10T18:09:16.266Z]	<OlegDokuka>	mean that integration possible
[2015-07-10T18:09:25.180Z]	<serhiisol>	i do know
[2015-07-10T18:09:32.440Z]	<serhiisol>	-pron- workign with webstorm
[2015-07-10T18:09:39.946Z]	<serhiisol>	sublime
[2015-07-10T18:16:16.802Z]	<OlegDokuka>	thank alot again
[2015-07-10T18:16:30.550Z]	<serhiisol>	-pron- welcome again
[2015-07-10T18:36:41.260Z]	<pixelshaded>	-pron- have trouble find this in node i be try to inject module like f and path in to -pron- service so when -pron- unit test the service -pron- can easily mock -pron- however in typescript -pron- not find a way to set the typedef of the constructor parameter to those module like -pron- can do import fs to get typing info but put f as the type in the function param do compile
[2015-07-10T18:37:15.540Z]	<pixelshaded>	aka fs
[2015-07-10T18:38:26.841Z]	<ericmdantas>	-pron- mean have the
[2015-07-10T18:39:45.959Z]	<pixelshaded>	i do have in -pron- project and -pron- in the file property of the
[2015-07-10T18:39:58.069Z]	<pixelshaded>	which make import fs compile
[2015-07-10T18:41:09.744Z]	<pixelshaded>	but i do not actually need to require the fs module i just be import -pron- for typedefs
[2015-07-10T18:41:43.401Z]	<pixelshaded>	like the class take the fs module as a constructor parameter but i have find a way to define the type for that parameter
[2015-07-10T18:44:13.431Z]	<pixelshaded>	like if this be just pure javascript i would have a main file that have all -pron- require and pass -pron- in to constructor or factory method
[2015-07-10T18:49:19.051Z]	<DanielRosenwasser>	where would -pron- completion result get a from
[2015-07-10T18:49:22.789Z]	<DanielRosenwasser>
[2015-07-10T18:56:26.757Z]	<pixelshaded>	browse through close issue see if i could get lucky would look like this import fsmodule typeof fsmodule
[2015-07-10T19:21:56.427Z]	<ericmdantas>	hmm i do know then sorry
[2015-07-10T19:44:12.417Z]	<danquirk>	-pron- use of typeof sound like what -pron- want
[2015-07-10T19:49:04.112Z]	<danquirk>	ts reference import fs class mock typeof fs var thing ok var badthing error
[2015-07-10T19:49:57.534Z]	<danquirk>	and in the emit for this file there no because fs be only ever use in type position
--------------------------------------------------------------------------------------------------
[2015-07-10T19:51:04.288Z]	<ericmdantas>	i do know i could use typeof in the constructor like that interesting thank
--------------------------------------------------------------------------------------------------
[2015-07-10T22:20:03.441Z]	<duncanmak>	heya
[2015-07-10T22:31:04.257Z]	<DanielRosenwasser>	heya what up
[2015-07-11T15:23:06.157Z]	<duncanmak>	morning
--------------------------------------------------------------------------------------------------
[2015-07-12T00:38:00.411Z]	<pitosalas>	newbie here i have a conceptual question about typescript project be here a good place
[2015-07-12T00:39:24.584Z]	<duncanmak>	i think so
[2015-07-12T00:42:53.721Z]	<pitosalas>	so -pron- understanding be that all the file that be give to tsc directly or via tsconfig form one top level name space so that a top level defn in  <user> conflict with the same name in
[2015-07-12T00:43:32.217Z]	<pitosalas>	and yet a series of separate be emit which -pron- be tell -pron- should not concatenate via into one big one this feel inconsistent
[2015-07-12T00:43:51.525Z]	<MicahZoltu>	i do believe what -pron- describe be the case
[2015-07-12T00:44:18.193Z]	<MicahZoltu>	i only use external module and foo define in file be not available in without a bit of extra work
[2015-07-12T00:44:55.116Z]	<pitosalas>	external module be where -pron- do use the module keyword right
[2015-07-12T00:45:14.449Z]	<MicahZoltu>	in particular i need to export class foo in and in i have to do import foo from foo
[2015-07-12T00:45:32.092Z]	<pitosalas>	yeah -pron- right
[2015-07-12T00:45:37.738Z]	<MicahZoltu>	i believe so i only use external module so -pron- not familiar with how to do internal module i believe -pron- have to do with declare and module keyword though
[2015-07-12T00:45:40.562Z]	<pitosalas>	hmm need to go play some more
[2015-07-12T00:46:40.464Z]	<pitosalas>	can -pron- describe how -pron- organize a multi file program in general principle or be -pron- write up somewhere -pron- see in other word good practice
[2015-07-12T00:49:09.964Z]	<MicahZoltu>	import zip from sub zip import bar from bar export class foo zip let bar new bar zip
[2015-07-12T00:49:27.519Z]	<MicahZoltu>	all import be relative to root directory
[2015-07-12T00:49:48.800Z]	<MicahZoltu>	in particular relative to
[2015-07-12T00:50:59.327Z]	<MicahZoltu>	stuff that i want available to other part of the system be export like foo be above when i want to bring -pron- in to another file i import -pron- like zip be above
[2015-07-12T00:51:16.843Z]	<MicahZoltu>	as far as where i actually put file that be a matter of taste i often start with everything flat and then as the project grow i take time periodically to re arrange everything once i have a well idea of what axi to group -pron- file along
[2015-07-12T00:51:49.060Z]	<pitosalas>	i see and do -pron- have a build directory at the same level as source
[2015-07-12T00:51:50.763Z]	<MicahZoltu>	i personally do use relative path import like import zap from
[2015-07-12T00:52:16.063Z]	<MicahZoltu>	for -pron- current project i be actually do runtime transpilation in the browser so i do have an output directory
[2015-07-12T00:52:48.444Z]	<pitosalas>	cool useful to see what other be do what -pron- project by the way if -pron- can share
[2015-07-12T00:52:51.419Z]	<MicahZoltu>	previously though when i have a compile step the output directory be a sibling to source
[2015-07-12T00:53:03.709Z]	<MicahZoltu>	just a web application not do or release yet
[2015-07-12T00:53:25.145Z]	<MicahZoltu>	unfortunately the ts compiler be mb so -pron- be too big to ship with a web application
[2015-07-12T00:53:27.638Z]	<pitosalas>	have -pron- write a lot of ts js in the past
[2015-07-12T00:53:33.300Z]	<MicahZoltu>	i have a bundling step but -pron- be work at the moment
[2015-07-12T00:53:41.598Z]	<MicahZoltu>	almost no js js be too insane for -pron-
[2015-07-12T00:53:46.777Z]	<pitosalas>
[2015-07-12T00:54:15.907Z]	<pitosalas>	-pron- writtten a ton of ruby always think js be an important lang to learn but -pron- be too insane for -pron- now i be use ts as a bridge into that world
[2015-07-12T00:54:25.897Z]	<MicahZoltu>	only reason i be willing to finally take the plunge to write browser code be due to typescript and jspm without -pron- i would have shoot -pron- in the face month ago
[2015-07-12T00:55:11.795Z]	<pitosalas>	jspm should i learn that
[2015-07-12T00:55:32.918Z]	<MicahZoltu>	i think -pron- be the future of browser project dependency management
[2015-07-12T00:55:43.251Z]	<MicahZoltu>	if -pron- be write ts for use in a browser i would recommend look into -pron-
[2015-07-12T00:56:13.573Z]	<MicahZoltu>	though i be use aurelia as a framework which support -pron- out of the box so that help a lot
[2015-07-12T00:56:57.308Z]	<duncanmak>	-pron- be just use browserify
[2015-07-12T00:57:54.452Z]	<MicahZoltu>	there be many option for dependency management i like jspm systemjs because there be no compile time step necessary
--------------------------------------------------------------------------------------------------
[2015-07-12T01:41:23.098Z]	<wholroyd>	be there a way to define -pron- own file to extend a module declare in another package
[2015-07-12T01:43:12.343Z]	<wholroyd>	the scenario be that the tsd package for node be miss optional parameter for a bunch of method i put in a pr for -pron- but until -pron- take which look like -pron- could be week can i define -pron- own custom one
[2015-07-12T01:43:43.641Z]	<wholroyd>	i update -pron- local copy but -pron- keep get clobber for some reason somewhere and end up with what the package originally have
[2015-07-12T01:48:17.954Z]	<wholroyd>	i guess -pron- just check in -pron- typing folder which suck
--------------------------------------------------------------------------------------------------
[2015-07-12T06:40:17.588Z]	<Fincodr>	not really solution but as a workaround -pron- can fork the definitelytype repo in github and point to -pron- fork from that way -pron- can migrate upstream change to -pron- fork easily and keep -pron- change effective until official fix be available -pron- just have to remember to update -pron- fork from time to time
[2015-07-12T19:43:30.764Z]	<MicahZoltu>	be -pron- possible to export an alia under another name
[2015-07-12T19:44:16.995Z]	<MicahZoltu>	export interface foo import foo as bar from foo export bar
[2015-07-12T19:44:26.976Z]	<MicahZoltu>	the above do work but i believe -pron- get across the idea of what i be look for
--------------------------------------------------------------------------------------------------
[2015-07-12T19:45:26.365Z]	<DanielRosenwasser>	typescript export bar
[2015-07-12T19:45:40.307Z]	<DanielRosenwasser>	but really what -pron- want to do be cut out the import statement altogether typescript export foo as bar from foo
[2015-07-12T19:45:55.196Z]	<MicahZoltu>	ah thank
[2015-07-12T19:47:07.120Z]	<DanielRosenwasser>	no problem and language service completion support in that export clause be in review in
[2015-07-12T19:56:47.552Z]	<duncanmak>	so be there no way to rename thing with the import statement
[2015-07-12T19:59:04.386Z]	<MicahZoltu>	-pron- can import foo as bar from foo
[2015-07-12T19:59:16.735Z]	<MicahZoltu>	i be look for a way to re export under the new name
[2015-07-13T01:03:41.033Z]	<pitosalas>	yeah unfortunately -pron- app be not a browser app -pron- a local app
[2015-07-13T01:04:20.807Z]	<MicahZoltu>	-pron- sorry
[2015-07-13T01:04:32.669Z]	<MicahZoltu>	use c
[2015-07-13T01:04:43.462Z]	<MicahZoltu>	i know not very helpful
[2015-07-13T01:14:22.187Z]	<pitosalas>	ruby
[2015-07-13T01:14:24.400Z]	<pitosalas>	mac
[2015-07-13T01:14:27.485Z]	<pitosalas>
[2015-07-13T07:54:19.065Z]	<DanielRosenwasser>	hey -pron- can still use c
[2015-07-13T07:54:42.691Z]	<DanielRosenwasser>	in any case node inspector be pretty decent
[2015-07-13T07:55:28.011Z]	<DanielRosenwasser>	i do have an overwhelmingly good experience use -pron- but -pron- have get the job do
[2015-07-13T07:57:34.474Z]	<DanielRosenwasser>	an interface introduce an entity into the type space a class introduce both a type entity for the instance and a value entity the constructor function -pron- basically what -pron- call the static side in other language
--------------------------------------------------------------------------------------------------
[2015-07-12T21:44:53.890Z]	<pitosalas>	be interface exactly the same as class without any contractor or method definition
[2015-07-12T21:45:36.247Z]	<MicahZoltu>	interface do contain any definition just declaration
[2015-07-12T21:45:53.445Z]	<pitosalas>	contractor constructor
[2015-07-12T21:46:11.462Z]	<MicahZoltu>	interface foo method string number class bar method string number todo
[2015-07-12T21:47:11.688Z]	<pitosalas>	ah
[2015-07-12T21:47:55.213Z]	<pitosalas>	by the way do -pron- use some client to post so fast in this thread or just the browser interface
[2015-07-12T21:53:03.062Z]	<MicahZoltu>	just the browser
[2015-07-12T21:53:21.202Z]	<MicahZoltu>	sometimes i notice someone post quickly other time not so much
[2015-07-12T21:54:09.436Z]	<MicahZoltu>	i keep gitter up on a second monitor
--------------------------------------------------------------------------------------------------
[2015-07-13T00:55:22.117Z]	<pitosalas>	anyone use any kind of debug tool for
[2015-07-13T00:55:32.474Z]	<pitosalas>	there be a bunch just want to figure out which one to try
--------------------------------------------------------------------------------------------------
[2015-07-13T01:02:20.898Z]	<MicahZoltu>	-pron- experience have be that a browser be the good way to debug javascript there be some node tool that plug into a browser but the experience be weird
--------------------------------------------------------------------------------------------------
[2015-07-13T15:48:57.390Z]	<wholroyd>	true -pron- ponder on that option thank
--------------------------------------------------------------------------------------------------
[2015-07-14T01:31:20.832Z]	<cobywhite>	with not release yet can someone tell -pron- if there be any difference between what be in vs the plan release
[2015-07-14T01:35:57.348Z]	<MicahZoltu>	many bug fix
[2015-07-14T01:36:26.473Z]	<MicahZoltu>	some feature as well i think decorator metadata may not be in release version
[2015-07-14T01:41:27.122Z]	<cobywhite>	have there be any update on a timeline look at the issue and milestone -pron- look like be do
[2015-07-14T01:41:45.037Z]	<danquirk>	real soon now
[2015-07-14T01:41:55.681Z]	<cobywhite>	alrighty
--------------------------------------------------------------------------------------------------
[2015-07-14T16:03:48.217Z]	<DickvdBrink>	epic xd
--------------------------------------------------------------------------------------------------
[2015-07-14T16:42:24.618Z]	<pitosalas>	can anyone recommend -pron- a javascript typescript template engine from ruby land i like erb but i be flexible -pron- need be pretty basic i have a bunch of html and js boilerplate i want to tweak certain part of -pron- and generate output i think basic back tick template in typescript may be a little too little but close suggestion
[2015-07-14T17:25:17.608Z]	<mitranim>	if -pron- want string base template with javascript lodash method be plenty enough -pron- can  <user> a site generato with -pron-  <user> gulp statil if -pron- want static validation with typescript then use react jsx with ts -pron- recently land jsx support in master
[2015-07-14T18:14:23.589Z]	<pixelshaded>	any idea why include an import in a definition file would hide interface in the file aka i define an interface in a file and everything compile i add another interface that use type from express and as soon as i add import express the compiler can see the same interface that be work before
[2015-07-14T18:14:25.428Z]	<pitosalas>	thank both never hear of lodash -pron- new here be -pron- one of the standard library people use
[2015-07-14T18:14:32.768Z]	<pixelshaded>	yeah
[2015-07-14T18:14:45.610Z]	<pixelshaded>	lodash and underscore do a lot of the same stuff
[2015-07-14T18:14:50.703Z]	<pixelshaded>	if -pron- be familiar with underscore
[2015-07-14T18:15:06.742Z]	<pitosalas>	hear of underscore but never know what -pron- really be
[2015-07-14T18:15:17.420Z]	<pixelshaded>	utility library
[2015-07-14T18:15:22.313Z]	<pixelshaded>	search through collection etc
[2015-07-14T18:15:50.863Z]	<pitosalas>	i do want to spend time learn a library that a dead end be -pron- worth -pron- time investment that is be -pron- consider part of the basic tool kit by many
[2015-07-14T18:16:23.512Z]	<pixelshaded>	well think of -pron- like jquery
[2015-07-14T18:16:27.424Z]	<pixelshaded>	-pron- do not have to use jquery
[2015-07-14T18:16:35.056Z]	<pixelshaded>	-pron- could use mootool or prototype for the same functionality
[2015-07-14T18:17:15.266Z]	<pixelshaded>	or none at all
[2015-07-14T18:18:07.713Z]	<pixelshaded>	backbone be a basic tool kit for many and -pron- have a dependency on underscore
[2015-07-14T18:18:22.859Z]	<pixelshaded>	i do not think learn underscore or lodash  <user> be fruitless
--------------------------------------------------------------------------------------------------
[2015-07-14T17:03:48.133Z]	<MicahZoltu>	if -pron- want a full fledged client side framework then i like aurelia
[2015-07-14T17:03:52.575Z]	<MicahZoltu>	but maybe that be overkill for -pron- need
[2015-07-15T17:25:05.696Z]	<RichiCoder1>	be on gitter for age and only just find out have a channel
--------------------------------------------------------------------------------------------------
[2015-07-14T18:19:42.472Z]	<pitosalas>	i know jquery so i understand the analogy and bet lodash and underscore any tip
[2015-07-14T18:20:19.860Z]	<pixelshaded>	-pron- bet
[2015-07-14T18:21:30.659Z]	<pitosalas>	between
[2015-07-14T18:22:34.201Z]	<pixelshaded>	lodash and underscore be fairly small library compare to jquery -pron- can just glance at -pron- doc and get a general idea of what -pron- can do with -pron-
[2015-07-14T18:22:50.125Z]	<pitosalas>	ok thank
[2015-07-14T18:23:36.573Z]	<pixelshaded>	and i do not mean filesize i just mean all the different way -pron- can use -pron-
[2015-07-14T18:24:47.284Z]	<pixelshaded>	handlebars be a popular templating engine
[2015-07-14T18:25:08.969Z]	<pixelshaded>	lol since i read up a bit on what -pron- be need
[2015-07-14T18:25:23.136Z]	<pitosalas>	i know that one from the ruby world the one i use in ruby land be erb
[2015-07-14T18:37:27.021Z]	<pixelshaded>	any idea why an import in a definition file would hide other interface definition normally i only import inside a module but the interface i want to merge with be inside a module
[2015-07-14T18:58:32.306Z]	<DanielRosenwasser>	what do -pron- mean by hide other interface definition
[2015-07-14T18:58:42.983Z]	<pixelshaded>
[2015-07-14T18:58:52.525Z]	<pixelshaded>	just create an issue hopefully that -pron- explain -pron- better
--------------------------------------------------------------------------------------------------
[2015-07-14T19:52:55.544Z]	<delaman>	be a prerelease of come soon
[2015-07-14T21:03:23.943Z]	<DanielRosenwasser>	-pron- investigate make a nightly release available
--------------------------------------------------------------------------------------------------
[2015-07-14T21:36:01.782Z]	<delaman>	thank i look forward to that
--------------------------------------------------------------------------------------------------
[2015-07-15T18:32:20.123Z]	<DickvdBrink>	can i take
--------------------------------------------------------------------------------------------------
[2015-07-15T20:19:59.264Z]	<NoelAbrahams>	hi -pron- condense a problem to the follow typescript function getbartype var bar bar function function return bar return bar const bar getbartype class foo extend bar error can not find name bar const foo new foo print bar this be valid javascript and the compiled output work correctly print bar however -pron- do not seem possible to get typescript to compile how do i get past the error can not find name bar
[2015-07-15T20:22:10.353Z]	<RyanCavanaugh>	ts interface bar getbar any const bar new bar getbartype compile with late compiler from master to get class expr support
[2015-07-15T20:23:19.034Z]	<NoelAbrahams>	wonderful in term of official release how long do i have to wait
[2015-07-15T20:26:18.543Z]	<DickvdBrink>	please let -pron- be july xd with the vs release p
[2015-07-15T20:27:42.260Z]	<DickvdBrink>	ow wait classexpression be quick beta
[2015-07-15T20:28:23.449Z]	<NoelAbrahams>	or nightly i think -pron- can work off nightly if that be go to happen
[2015-07-15T20:30:49.909Z]	<RyanCavanaugh>	nightly build  <user> be happen soon
[2015-07-15T20:31:18.053Z]	<RyanCavanaugh>	as usual i can be helpful on date for other release
[2015-07-15T20:31:56.656Z]	<NoelAbrahams>	thank for the tip -pron- glad class expression would fix -pron- because -pron- can at least hack -pron- while wait
[2015-07-16T08:11:41.354Z]	<tinganho>	i wonder if -pron- have any plan for conditional compilation this be block -pron- from use ts in a project cry
[2015-07-16T21:05:08.723Z]	<RyanCavanaugh>	how be -pron- block -pron-
--------------------------------------------------------------------------------------------------
[2015-07-16T12:18:55.391Z]	<spencerwi>	-pron- get a question about destructure assignment and object -pron- current employer main webapp make pretty heavy use of the dto eaacatalog to help ensure a clean api between server and client this mean -pron- have code that look like this pretty often class something public any void etc this seem like a good use case for destructure assignment something like name age location foo bar someotherattr dto would be nice and succinct be there some real syntax that enable that sort of thing
[2015-07-16T12:41:06.455Z]	<spencerwi>	in think about this alternatively something like public -pron- would name age location void may work just as well but then -pron- still just dartboarde idea for now
[2015-07-16T21:31:24.371Z]	<DanielRosenwasser>	-pron- could do -pron- like this typescript a b x
[2015-07-16T21:33:05.135Z]	<DanielRosenwasser>	i originally have a pr such that bind element could be use as parameter property but other feel -pron- be too complex if -pron- like to suggest -pron- again on a new issue -pron- be open to that
[2015-07-17T00:26:28.698Z]	<tinganho>	i can do conditional import now i share the same file for the client and server with amd and commonjs i could just have an if statement
[2015-07-17T00:27:05.848Z]	<RyanCavanaugh>
[2015-07-17T00:31:33.532Z]	<tinganho>	i think that actually handle one of -pron- scenario i guee import zip be not be compile
[2015-07-17T00:32:01.408Z]	<RyanCavanaugh>	that only emit code if -pron- actually use zip as a value not a type or typeof zip
[2015-07-17T00:37:14.274Z]	<tinganho>	ok i think -pron- handle on of -pron- scenario i  <user> only use require zip inside the if statement but there be one another problem i have in the server i have different import path for same libs i need to have import rendertostre from react in the server and on the client -pron- should have import rendertostre from vendor react
[2015-07-17T00:38:01.734Z]	<RyanCavanaugh>	amd or commonjs
[2015-07-17T00:38:49.812Z]	<tinganho>	both -pron- do matter i use systemjs -pron- wrap cjs like -pron- be amd i think
[2015-07-17T00:39:07.980Z]	<RyanCavanaugh>	so if -pron- be write this in javascript what would -pron- write
[2015-07-17T00:39:25.073Z]	<RyanCavanaugh>	let x
[2015-07-17T00:40:30.731Z]	<tinganho>	i use a ternary operator right now in -pron- old js framework var react inserver vendor react
[2015-07-17T00:41:47.540Z]	<RyanCavanaugh>	so -pron- write ts in some file declare module react in -pron- file import reactmod var react typeof reactmod inserver vendor react
[2015-07-17T00:45:29.949Z]	<tinganho>	thank i think that would work do know the trick with not use the value of the import module and the type assertion
[2015-07-17T00:47:22.931Z]	<tinganho>	i still hope though that conditional compilation be in -pron- plan so i can get a more cleanly outputted js file
[2015-07-17T00:47:32.830Z]	<RyanCavanaugh>	-pron- really not
[2015-07-17T00:48:15.147Z]	<RyanCavanaugh>	-pron- have see compelling use for -pron- and -pron- massively complicate everything else parsing configure editor command line etc
[2015-07-17T00:49:11.431Z]	<tinganho>	ok i understand i think i can live without -pron-
[2015-07-17T05:18:22.544Z]	<Ciantic>	be the playground open source would be cool to have a ts library page with the playground
[2015-07-17T05:20:50.865Z]	<Ciantic>	 <user> the not typescript could benefit from -pron-
[2015-07-17T05:21:12.685Z]	<RyanCavanaugh>	unfortunately the playground be open source
[2015-07-17T05:21:58.056Z]	<Ciantic>	i keep google be -pron- the monaco
[2015-07-17T05:22:35.328Z]	<RyanCavanaugh>	yep
[2015-07-17T05:23:35.981Z]	<Ciantic>	-pron- on the mercy of the vs code team then
[2015-07-17T12:31:28.164Z]	<Ciantic>	what do -pron- ever rest great work
--------------------------------------------------------------------------------------------------
[2015-07-16T17:27:35.364Z]	<duncanmak>	morning
--------------------------------------------------------------------------------------------------
[2015-07-17T05:57:00.905Z]	<basarat>	i recently update in  <user> so code quality be meh
--------------------------------------------------------------------------------------------------
[2015-07-17T06:00:12.073Z]	<tinganho>	very nice -pron- would be good if i could embed -pron- too
--------------------------------------------------------------------------------------------------
[2015-07-17T13:08:45.811Z]	<ericmdantas>	awesome
--------------------------------------------------------------------------------------------------
[2015-07-17T13:36:43.487Z]	<ntilwalli>	be there a way to forward declare function that be dynamically add to object of a give type -pron- use a third party javascript library which dynamically append method to an object the class declaration do indicate the existence of the method but by the time -pron- code get execute -pron- do exist the third party library do something like function foo function inc number inc let randomvar new foo function number dec the declaration file show the shape of the class as class foo count number number but in fact by the time i get the variable in -pron- typescript code the object have the countdown method attach to the object print work fine print cause tsc warning error property countdown do not exist on type foo w be -pron- possible to forward declare the countdown method in -pron- application code
[2015-07-17T13:45:32.156Z]	<tinganho>	how about declare class foo count number number declare class extend foo number let randomvar new foo
[2015-07-17T13:59:08.893Z]	<Yellowmat>	the meaning of -pron- question be not clear enough excuse -pron- about that i want to filter completion result and wonder if there be an api to get the name or dot name expression that precede a give position assume the follow example function myfunction return var d myfunction when i type d i want to get completion and filter result to keep only what begin with then when i type i want to get completion and do not filter result finally when i type i want to get completion and filter filter result to keep only property of d beginning with
[2015-07-17T14:01:08.775Z]	<Yellowmat>	perhaps the getnameordottednamespan function can help -pron- to get the name or dot name precede a give position perhaps not perhaps there be a good practice to do that
[2015-07-17T14:17:58.623Z]	<ntilwalli>	yes that solve -pron- thank
[2015-07-17T19:52:58.157Z]	<DanielRosenwasser>	just look into the logic for getcompletionsatposition -pron- effectively have to calculate all of this -pron- the idea be figure -pron- what the precede token be the token whose start precede -pron- position calculate a context token base on that the token prior to the precede token otherwise the precede token if the context token belong to a propertyaccessexpression -pron- want the expression if -pron- belong to a qualifiedname -pron- want the left
[2015-07-17T21:56:25.784Z]	<DanielRosenwasser>	though really getcompletionsatposition be really what -pron- want
[2015-07-17T21:58:23.594Z]	<DanielRosenwasser>	then -pron- could find the identifier at -pron- current position on -pron- own and get the text of that identifier
--------------------------------------------------------------------------------------------------
[2015-07-17T23:48:20.606Z]	<renataogarcia>	-pron- try to use the rootdir compiler option on but -pron- do seem to have any effect i have a src dir at the root of -pron- project with -pron- file and even though i set the rootdir -pron- still lookup the file from the root of -pron- project
[2015-07-17T23:49:33.258Z]	<renataogarcia>	compileroption module amd rootdir src sourceroot src outdir target js sourcemap true target
[2015-07-18T00:16:48.788Z]	<renataogarcia>	ok i think i figure -pron- out should be on the src dir
[2015-07-18T17:47:35.332Z]	<MicahZoltu>	let bar string for let foo of bar
[2015-07-18T17:47:52.326Z]	<MicahZoltu>	-pron-  <user> infer the type from the right side
--------------------------------------------------------------------------------------------------
[2015-07-18T06:45:22.349Z]	<aicioara>	hello
[2015-07-18T06:48:49.329Z]	<aicioara>	i have a performance question i notice that run bash tsc tsc take significantly longer than bash tsc that i believe be because there be an overhead for load the tsc -pron- since -pron- be javascript this can be prove by use the watch option compilation after change a file take way less than start the compiler and compile that file what i want to do be improve -pron- incremental build compilation time by reduce the tsc loading time do -pron- think that be possible
[2015-07-18T06:49:06.775Z]	<aicioara>	currently use grunt ts and grunt contrib watch
[2015-07-18T06:50:53.360Z]	<aicioara>	basically cache the script somehow
[2015-07-18T06:51:23.232Z]	<aicioara>	sorry if this be more of a nodejs rather than a typescript kind of question
[2015-07-18T06:52:54.685Z]	<tinganho>	typescript compiler need to parse definition file like everytime -pron- run tsc
[2015-07-18T06:53:34.813Z]	<tinganho>	i think the good option be to use tsc then -pron- watch for file change and do need to parse every time
--------------------------------------------------------------------------------------------------
[2015-07-18T13:20:33.564Z]	<ElanHasson>	hi
[2015-07-18T13:24:50.246Z]	<ElanHasson>	i have multiple module over multiple file and be compile all to one file -pron- include the in -pron- html file and -pron- get error that state -pron- module be find
[2015-07-18T13:26:05.581Z]	<ElanHasson>	in browser console should i be use amd for -pron- or use external module
[2015-07-18T13:27:06.566Z]	<ElanHasson>	or both
[2015-07-18T13:27:07.382Z]	<ElanHasson>	heh
[2015-07-18T13:38:35.374Z]	<ElanHasson>	in
[2015-07-18T13:39:21.494Z]	<ElanHasson>	hrm should i be see in generate js if i enable amd output
[2015-07-18T13:51:06.369Z]	<ElanHasson>	ahh need xport module
[2015-07-18T14:06:26.214Z]	<ElanHasson>	for export module and use amd be there no support for have a module spread out over multiple file
--------------------------------------------------------------------------------------------------
[2015-07-18T17:37:09.932Z]	<roganov>	hi all -pron- sorry for ask such basic stuff but be i right that -pron- not possible to specify variable type inside a for of loop -pron- really prefer to do for let node node of instead of var node node for node of
[2015-07-18T17:49:20.429Z]	<roganov>	oh nice thank
--------------------------------------------------------------------------------------------------
[2015-07-20T08:36:37.949Z]	<boogunote>	hello all how to define a name in which both work as a variable and a function
[2015-07-20T08:37:31.692Z]	<boogunote>	and window
[2015-07-20T08:38:41.819Z]	<boogunote>	typescript always complain error duplicate identifier
[2015-07-20T08:53:50.805Z]	<sluijs>	do anyone use tdd bdd to write typescript app if so what test framework do -pron- use and be there any information out there how to use -pron- while not be integrate to vs
--------------------------------------------------------------------------------------------------
[2015-07-20T09:47:21.072Z]	<Yellowmat>	hi guy
[2015-07-20T09:51:27.195Z]	<Yellowmat>	thank for -pron- answer i now know for sure that i have to compute context on -pron- own
[2015-07-20T14:33:39.066Z]	<Yellowmat>	i find how to solve -pron- problem use the source file and the current position -pron- able to get the associate token from this token i can go backward and evaluate each previous token if the current token be a dottoken no need to filter completion result if the current token be an identifier i have to filter use -pron- text value -pron- work
[2015-07-21T01:32:53.876Z]	<MicahZoltu>	-pron- use typescript to do runtime transpilation i upgrade from to by copy the lkg bin from microsoft typescript into the bin folder overwrite what be in  <user> repo
[2015-07-21T01:33:18.841Z]	<MicahZoltu>	as soon as i do that i start see request from -pron- browser for fs os and path all piece of node
[2015-07-21T01:34:00.392Z]	<MicahZoltu>	i think typescript be runtime agnostic look at the generate code the require for these be there previously i can only assume that previously the codepath that require -pron- simply be exercise in -pron- browser application and now be
[2015-07-21T01:34:11.921Z]	<MicahZoltu>	-pron- not quite sure how to troubleshoot this further if anyone have suggestion -pron- open
[2015-07-21T01:42:10.822Z]	<MicahZoltu>	nothing stand out -pron- start bisect to see if i can figure out which lkg break thing
[2015-07-22T09:10:38.950Z]	<grofit>	a query about the late update with the system module type
[2015-07-22T09:11:04.818Z]	<grofit>	i be try to use -pron- with aurelia but -pron- seem to do some odd stuff when compile decorator
[2015-07-22T09:12:41.537Z]	<grofit>	be there anything special i need to do other than set the module to system and the target to i have try set emitdecoratormetadata and experimentaldecorator but aurelia just blow up say be not a function which i guess be -pron- try to resolve to a method in the world
--------------------------------------------------------------------------------------------------
[2015-07-21T01:34:53.040Z]	<RyanCavanaugh>	code emit from typescript be runtime agnostic the typescript compiler -pron- can possibly function without file system access
[2015-07-21T01:35:35.867Z]	<MicahZoltu>	that make sense i wonder why this use to work then
[2015-07-21T01:35:57.161Z]	<RyanCavanaugh>	-pron- try to run this in the browser
[2015-07-21T01:36:02.583Z]	<MicahZoltu>	yeah
[2015-07-21T01:36:28.236Z]	<MicahZoltu>	this version work i believe the bit be copy straight from lkg of beta
[2015-07-21T01:36:51.118Z]	<RyanCavanaugh>	-pron- not sure what the meaningful difference between those two be
[2015-07-21T01:36:53.905Z]	<MicahZoltu>	i suppose -pron- be possible that do some tweaking to make -pron- browser friendly i have assume not
[2015-07-21T01:37:08.722Z]	<RyanCavanaugh>	have -pron- diffe the file for anything obvious
[2015-07-21T01:37:42.213Z]	<MicahZoltu>	nothing around the require show as significantly different but there be a lot of change between and
[2015-07-21T01:37:59.242Z]	<MicahZoltu>	oh -pron- diff vs what be in that repo
[2015-07-21T01:38:02.282Z]	<MicahZoltu>	maybe that be what -pron- mean
[2015-07-21T01:38:10.963Z]	<RyanCavanaugh>	yea that seem most useful
[2015-07-21T01:42:17.612Z]	<MicahZoltu>	that  <user> hopefully narrow -pron- down
[2015-07-21T01:45:47.463Z]	<RyanCavanaugh>	be -pron- create -pron- own compilerhost or go through some other codepath
[2015-07-21T01:47:37.162Z]	<RyanCavanaugh>	may be a good reference if -pron- have see -pron- already
[2015-07-21T01:47:41.158Z]	<MicahZoltu>	-pron- not sure -pron- use systemjs transpiler -pron- not sure how -pron- be all hook up
[2015-07-21T01:47:42.265Z]	<MicahZoltu>
[2015-07-21T01:48:11.981Z]	<MicahZoltu>	look like -pron- have a imply -pron- be create -pron- own
[2015-07-21T01:48:12.635Z]	<MicahZoltu>
[2015-07-21T01:49:06.088Z]	<RyanCavanaugh>	if this guy use typescript -pron- could compile -pron- to see if there be any api break bulb
[2015-07-21T01:49:43.818Z]	<MicahZoltu>
[2015-07-21T01:50:00.460Z]	<MicahZoltu>	-pron- be a bit odd that -pron- be write in javascript
[2015-07-21T02:03:01.554Z]	<MicahZoltu>	bleh false alarm sorry
[2015-07-21T02:03:34.983Z]	<MicahZoltu>	-pron- be jspm systemjs apparently -pron- mutate the file slightly on the way in drop a snippet of code at the top of each file and that be miss when i swap out the file with a new version
--------------------------------------------------------------------------------------------------
[2015-07-21T13:01:02.186Z]	<mitranim>	question be there a compiler option to warn about unused variable -pron- a handy feature to have and i can seem to find this in the option reference
[2015-07-21T14:13:15.849Z]	<pixelshaded>	be not that normally do with linte
[2015-07-21T14:13:22.136Z]	<pixelshaded>	like -pron- can definitely do this with tslint
--------------------------------------------------------------------------------------------------
[2015-07-21T15:14:30.131Z]	<serhiisol>	maybe this  <user> help for -pron- but -pron- not a tsc option
--------------------------------------------------------------------------------------------------
[2015-07-21T15:51:55.108Z]	<duncanmak>	woohoo congrat on the release
--------------------------------------------------------------------------------------------------
[2015-07-21T17:49:40.447Z]	<mitranim>	thank for the suggestion yes -pron- can validate unused variable with linter but -pron- would be nice to have in the compiler for folk who do use -pron-
--------------------------------------------------------------------------------------------------
[2015-07-22T12:55:38.246Z]	<serhiisol>	another cool tool
--------------------------------------------------------------------------------------------------
[2015-07-22T14:44:43.189Z]	<mitranim>	good to know thank
--------------------------------------------------------------------------------------------------
[2015-07-22T14:51:33.933Z]	<sluijs>	do anyone here test -pron- typescript code with jasmine karma be -pron- useful
[2015-07-22T14:56:11.881Z]	<mitranim>	yes test be important the compiler can catch error in -pron- logic or intent
--------------------------------------------------------------------------------------------------
[2015-07-22T19:51:28.190Z]	<LabEG>	declare enum requestmode same origin no cor cor declare enum requestcredential omit same origin include declare enum requestcache default no store reload no cache force cache only if cached can i use this enum in -pron- code
--------------------------------------------------------------------------------------------------
[2015-07-22T19:51:57.612Z]	<RyanCavanaugh>	not yet see
--------------------------------------------------------------------------------------------------
[2015-07-22T20:03:20.692Z]	<LabEG>	for what write this enum same origin this be unreal variable name
[2015-07-22T20:03:52.851Z]	<LabEG>
[2015-07-22T20:03:59.706Z]	<LabEG>	this file
--------------------------------------------------------------------------------------------------
[2015-07-22T20:04:28.390Z]	<RyanCavanaugh>	oh right i misread
[2015-07-22T20:04:35.337Z]	<RyanCavanaugh>	that enum be allow
[2015-07-22T20:04:55.426Z]	<RyanCavanaugh>	-pron- mean origin cor
[2015-07-22T20:05:05.699Z]	<RyanCavanaugh>	i doubt this have any runtime meaning
[2015-07-22T20:14:01.417Z]	<LabEG>	yep -pron- bug
[2015-07-22T20:14:20.606Z]	<RyanCavanaugh>	a bug in the definition file yea
[2015-07-22T20:14:31.905Z]	<RyanCavanaugh>	or at least an unclear intent
[2015-07-22T20:15:01.486Z]	<LabEG>	thank
--------------------------------------------------------------------------------------------------
[2015-07-23T06:34:31.883Z]	<boogunote>	-pron- write be there any way to define a attribute and a function to a same name like and
[2015-07-23T06:35:25.107Z]	<DanielRosenwasser>	do have property on -pron- as well
[2015-07-23T06:35:38.537Z]	<DanielRosenwasser>	be that the issue -pron- run into
[2015-07-23T06:36:07.082Z]	<DanielRosenwasser>	like -pron- can do as well as
[2015-07-23T06:37:30.531Z]	<boogunote>	please refer to this link
[2015-07-23T06:38:17.105Z]	<boogunote>	code snippet hide event this be trigger when the dialog be hide function dialog be hide global show event this be trigger when any dialog be show function dialog be show
[2015-07-23T06:39:07.666Z]	<DanielRosenwasser>	yup sound like what i be describe
[2015-07-23T06:39:35.892Z]	<boogunote>	yes how to write the interface under such situation
[2015-07-23T06:40:33.295Z]	<DanielRosenwasser>	basically typescript x string number be actually shorthand for typescript x string number
[2015-07-23T06:40:45.059Z]	<DanielRosenwasser>	that a call signature
[2015-07-23T06:41:10.894Z]	<DanielRosenwasser>	so -pron- can add more property to that type
[2015-07-23T06:42:02.086Z]	<DanielRosenwasser>	typescript x string number on msg string callback void void
[2015-07-23T06:42:29.556Z]	<boogunote>	how to define in ajs
[2015-07-23T06:42:43.117Z]	<DanielRosenwasser>	in short -pron- can do something like typescript interface ajsstatic msg string void on msg string callback void void
[2015-07-23T06:42:57.626Z]	<DanielRosenwasser>	whoops i just edit fix that
[2015-07-23T06:44:51.904Z]	<DanielRosenwasser>	do that help
[2015-07-23T06:45:24.392Z]	<boogunote>	maybe msg string void to msg string ajsstatic
[2015-07-23T06:46:23.333Z]	<DanielRosenwasser>	yup that look accurate from the example
[2015-07-23T06:46:38.808Z]	<DanielRosenwasser>	sorry not that familiar with the framework
[2015-07-23T06:47:02.114Z]	<boogunote>	i be try in -pron- code
[2015-07-23T06:48:22.201Z]	<boogunote>	and how to deal with this one seem do accept
[2015-07-23T06:49:45.649Z]	<DanielRosenwasser>	-pron- should be able to apply the same technique to
[2015-07-23T06:52:18.503Z]	<DanielRosenwasser>	-pron- not sure what -pron- mean by do accept
[2015-07-23T06:57:51.066Z]	<boogunote>	the return type of should be the type of msg string type
[2015-07-23T06:58:19.438Z]	<boogunote>	the type be hard to define
[2015-07-23T06:58:46.340Z]	<boogunote>	there should be a name for the type of
[2015-07-23T07:03:09.203Z]	<boogunote>	this problem do relate to
[2015-07-23T07:03:51.086Z]	<DanielRosenwasser>	-pron- may be good to add an interface describe
[2015-07-23T07:05:08.359Z]	<DanielRosenwasser>	typescript interface msg string string callback void
[2015-07-23T07:21:38.325Z]	<boogunote>	all error be solve thank a lot lol
--------------------------------------------------------------------------------------------------
[2015-07-23T07:33:33.284Z]	<LabEG>
[2015-07-23T07:33:51.804Z]	<LabEG>
[2015-07-23T07:35:20.034Z]	<LabEG>	funny tslint
[2015-07-23T08:30:40.555Z]	<grofit>	a query about the late update with the system module type i be try to use -pron- with aurelia but -pron- seem to do some odd stuff when compile decorator be there anything special i need to do other than set the module to system and the target to i have try set emitdecoratormetadata and experimentaldecorator but aurelia just blow up say be not a function which i guess be -pron- try to resolve to a method in the world
--------------------------------------------------------------------------------------------------
[2015-07-23T12:43:59.588Z]	<sluijs>	when -pron- try to dynamically load an iframe content the typescript compiler throw an error be this a ts bug and how could i solve -pron- typescript var iframe source of the iframe be load error argument of type void be not assignable to parameter of type event property bubble be miss in type void
[2015-07-23T12:46:04.602Z]	<serhiisol>	maybe try with addeventlistener
[2015-07-23T12:48:06.004Z]	<serhiisol>	 <user> if -pron- not mistaken onload -pron- can specify via expression declaraion function put -pron- awesome code here
[2015-07-23T12:49:13.264Z]	<sluijs>	ah that do the trick indeed thank
[2015-07-23T12:49:41.370Z]	<serhiisol>	-pron- be welcome
--------------------------------------------------------------------------------------------------
[2015-07-23T13:50:48.590Z]	<ntilwalli>	all -pron- pull in the definition file for jquery from definitelytyped and i be try to import -pron- into an module but -pron- see this compilation error src error module jquery have no default export at the top of -pron- module i be import -pron- with import from jquery the file have this at the bottom declare module jquery export declare var jquery jquerystatic declare var jquerystatic clearly there be no explicit default export for jquery since -pron- use the legacy export syntax but do that translate to a default export what be the proper way to import jquery
[2015-07-23T13:57:25.609Z]	<serhiisol>	try this one import as from jquery
[2015-07-23T14:35:20.758Z]	<grofit>	still no comment on the system module issue
[2015-07-23T14:36:13.211Z]	<grofit>	a query about the late update with the system module type i be try to use -pron- with aurelia but -pron- seem to do some odd stuff when compile decorator be there anything special i need to do other than set the module to system and the target to i have try set emitdecoratormetadata and experimentaldecorator but aurelia just blow up say be not a function which i guess be -pron- try to resolve to a method in the world
[2015-07-23T14:37:12.952Z]	<grofit>	as -pron- seem to build fine for common module
[2015-07-23T14:37:48.401Z]	<serhiisol>	i have use module system yet but -pron- can use module commonjs and use with -pron- i know this be not the answer on -pron- question but maybe quick workaround
[2015-07-23T14:38:51.915Z]	<grofit>	but no one else seem to have do so
[2015-07-23T14:39:11.288Z]	<serhiisol>	i can try a bit later
[2015-07-23T14:39:20.299Z]	<serhiisol>	and -pron- tell -pron- the result
[2015-07-23T14:41:23.558Z]	<serhiisol>	but if -pron- work with typescript and systemjs i guess -pron- not an issue to use commonjs because -pron- only compile stuff and basically -pron- not important what to have at the end
--------------------------------------------------------------------------------------------------
[2015-07-23T14:00:40.965Z]	<ntilwalli>	perfect thank
[2015-07-23T14:01:18.329Z]	<serhiisol>	-pron- be welcome
[2015-07-23T14:35:40.037Z]	<serhiisol>	which one
[2015-07-23T14:35:40.924Z]	<serhiisol>
[2015-07-23T14:36:06.233Z]	<grofit>	the one i have be copy and paste for like day in the hope of someone know what be go wrong
[2015-07-23T14:36:45.161Z]	<grofit>	long story short -pron- just do not seem to be cope with system that contain decorator or something else be awry
[2015-07-23T14:38:25.861Z]	<grofit>	that s what i be do at the moment i be just want to use the proper syntax go forward
[2015-07-23T14:38:47.302Z]	<grofit>	but i assume if i be have problem and -pron- be a typescript issue other who be try to use system module would have issue too
[2015-07-23T14:39:27.047Z]	<grofit>	kk thx
--------------------------------------------------------------------------------------------------
[2015-07-23T14:42:02.950Z]	<grofit>	-pron- not a blocker or anything
[2015-07-23T14:42:22.635Z]	<grofit>	-pron- just as i use jspm i be want to see how well typescript would work with -pron-
[2015-07-23T14:42:52.679Z]	<grofit>	i mean work with system module
[2015-07-23T14:43:15.824Z]	<serhiisol>	-pron- seem not work
[2015-07-23T14:43:25.217Z]	<grofit>	lol
[2015-07-23T14:43:54.032Z]	<serhiisol>	-pron- just kid -pron- test -pron- soon and let u know
[2015-07-23T14:44:51.189Z]	<serhiisol>	agree
[2015-07-23T14:45:02.146Z]	<grofit>	as there be a few benefit to use system module
[2015-07-23T14:46:44.229Z]	<serhiisol>
[2015-07-23T14:46:52.705Z]	<serhiisol>	-pron- can do -pron- as well with commonjs
--------------------------------------------------------------------------------------------------
[2015-07-23T14:44:10.128Z]	<grofit>	well like i say no rush -pron- just if there be an issue well to get a bug raise soon
--------------------------------------------------------------------------------------------------
[2015-07-23T14:45:36.542Z]	<grofit>	or at least to -pron- knowledge with system module -pron- can do import foo bar from blah whereas with common -pron- only get a root object import foobar from blah
--------------------------------------------------------------------------------------------------
[2015-07-23T14:47:38.136Z]	<serhiisol>	import component controller view routeconfig bootstrap from ng decor ng decor
--------------------------------------------------------------------------------------------------
[2015-07-23T14:47:52.245Z]	<serhiisol>	-pron- -pron- own decorator and import work correctly
--------------------------------------------------------------------------------------------------
[2015-07-23T14:48:27.891Z]	<grofit>	oh right whenever i be use commonjs stuff before i be only able to use -pron- with single import if i try to import use curly bracket or multiple -pron- blow up
--------------------------------------------------------------------------------------------------
[2015-07-23T14:49:04.050Z]	<grofit>	i can not remember any specific example off top of -pron- head so take -pron- with a pinch of salt
[2015-07-23T14:51:37.396Z]	<serhiisol>	-pron- be welcome
[2015-07-23T14:51:45.686Z]	<serhiisol>	but -pron- still test -pron-
--------------------------------------------------------------------------------------------------
[2015-07-23T14:49:28.117Z]	<serhiisol>	-pron- work with all nice feature of typescript and just compile -pron- to commonjs and load -pron- with systemjs and everything work correctly
[2015-07-23T14:51:27.407Z]	<grofit>	hmm well that s good to know at least
[2015-07-23T14:51:29.535Z]	<grofit>	thank for -pron- help
--------------------------------------------------------------------------------------------------
[2015-07-23T14:58:02.755Z]	<avielfedida>	hi guy i have a client side framework the source i write in typescript and i wonder about where to upload the declaration file should i upload to both reposetory add -pron- to the framework reposetory or only add -pron- to definitelytype and add to the framework reposetory something like tsd install
[2015-07-23T14:58:59.944Z]	<serhiisol>	i guess -pron- can download to definitelytype
[2015-07-23T14:59:20.124Z]	<serhiisol>	and if the dev  <user> use typescript -pron- just download -pron-
[2015-07-23T14:59:38.155Z]	<avielfedida>	i understand thank -pron-
[2015-07-23T14:59:43.758Z]	<serhiisol>	if not -pron- repo project structure or whatever  <user> be clean
[2015-07-23T15:00:18.141Z]	<serhiisol>	-pron- be welcome
[2015-07-23T16:04:04.267Z]	<LabEG>	can i import js module to typescript file
[2015-07-23T16:07:00.702Z]	<serhiisol>	yes why not typescript  <user> be compile to js anyways
[2015-07-23T16:12:49.887Z]	<LabEG>	error can not find name require oke can i prevent this error
[2015-07-23T16:13:25.873Z]	<serhiisol>	i guess -pron- need to load module in proper way
[2015-07-23T16:14:19.615Z]	<serhiisol>	import or import as from jquery
[2015-07-23T16:14:32.281Z]	<serhiisol>	but i guess exclude js file from compilation
[2015-07-23T16:22:48.835Z]	<LabEG>	import as globusservice from globusservice import as config from not work
[2015-07-23T16:22:55.373Z]	<LabEG>	error can not find module
[2015-07-23T16:23:31.657Z]	<LabEG>	var config config
[2015-07-23T16:36:45.880Z]	<serhiisol>	can -pron- share compile configuration
[2015-07-23T17:10:14.928Z]	<LabEG>	var b browserify cache packagecache fullpath true target module commonjs noimplicitany true true global true uglifyify
[2015-07-23T17:10:39.422Z]	<LabEG>	this
[2015-07-23T17:13:58.995Z]	<serhiisol>	i guess -pron- need to specify something like basepath for -pron- script to create bundle
[2015-07-23T17:14:20.999Z]	<serhiisol>	because trouble -pron- face with -pron- not relate to typescript
[2015-07-23T17:15:04.806Z]	<serhiisol>	because browserify wrap ts into own ecosystem and do something behind the scene
[2015-07-23T17:15:39.737Z]	<serhiisol>	-pron- can try to build source with plain typescript compiler and see what happen
[2015-07-23T17:15:48.329Z]	<LabEG>	yep browserify use compile ts code
[2015-07-23T17:16:59.412Z]	<serhiisol>	so
[2015-07-23T17:17:13.479Z]	<serhiisol>	-pron- need to specify correctly root for typesccript
[2015-07-23T17:17:22.854Z]	<serhiisol>	and basepath for browserify
[2015-07-23T17:17:33.502Z]	<serhiisol>	-pron- should be the same folder path basically
--------------------------------------------------------------------------------------------------
[2015-07-23T17:27:14.374Z]	<LabEG>	hmmm thank  <user> thing
[2015-07-23T17:34:22.030Z]	<serhiisol>	 <user>
[2015-07-23T17:55:40.464Z]	<nycdotnet>	-pron- just about do add support for use babel as an alternate transpiler with typescript in atom typescript hopefully include doubly map source map the source map functionality rely on the language service to return the file before the correspond file when be call be this sequencing guarantee thank
--------------------------------------------------------------------------------------------------
[2015-07-23T18:48:22.480Z]	<ntilwalli>	issue may address -pron- problem there be a bug with that be schedule to be fix in mean the fix be not a part of the new release i get around -pron- by build typescript manually from master where the fix be check in and the use the result tsc to do -pron- build
--------------------------------------------------------------------------------------------------
[2015-07-23T19:43:51.152Z]	<grofit>	ok good to know
[2015-07-23T19:43:52.337Z]	<grofit>	thank
[2015-07-23T23:07:09.582Z]	<ntilwalli>	what be the proper way to include jquery in a typescript module the jquery declaration file be specify use the old external module syntax like below declare module jquery export declare var jquery jquerystatic declare var jquerystatic in -pron- application code when i use this import statement import from jquery be ready tsc complain that src error module jquery have no default export when i switch to this style import as from jquery be ready the compiler error go away but i get an error in chrome which say that be not a function like so uncaught in promise error be not a function error loading src at execute src at u at at y at s at p at h at what the right way to do this
--------------------------------------------------------------------------------------------------
[2015-07-23T23:21:50.154Z]	<DanielRosenwasser>	do typescript import from jquery work
[2015-07-23T23:25:50.433Z]	<DanielRosenwasser>	actually i realize that the only thing in -pron- declare module
[2015-07-23T23:25:51.259Z]	<DanielRosenwasser>	hm
[2015-07-23T23:31:44.032Z]	<ntilwalli>	lol i just notice -pron- follow up comment
[2015-07-23T23:32:20.069Z]	<DanielRosenwasser>	i believe -pron- either need to use the old style typescript import
[2015-07-23T23:33:47.830Z]	<DanielRosenwasser>	the problem be that the concept of a default between and commonjs be fundamentally different and -pron- up to the consumer to distinguish -pron-
[2015-07-23T23:48:03.474Z]	<ntilwalli>	that be helpful thank -pron-
[2015-07-23T23:52:09.182Z]	<ntilwalli>	actually that do fix the problem worried
[2015-07-23T23:52:47.500Z]	<ntilwalli>	when i use that syntax i get the same error as -pron- original one uncaught in promise error be not a function error loading src at execute src at u at at y at s at p at h at
[2015-07-24T00:17:20.932Z]	<ntilwalli>	-pron- tempt to just deal with the compiler error associate with the import from jquery syntax but -pron- concern the reason this work be incidental and not an engineer effect so -pron- could break -pron- notice that this syntax only work when the module style be system this approach do not work use amd
[2015-07-24T01:15:23.872Z]	<DanielRosenwasser>	the fact that -pron- do not work with amd be exactly why -pron- can consider -pron- the same but if -pron- can deal with the compiler error this should continue to work as long as systemjs continue work the same way as far as i understand
[2015-07-24T01:25:19.687Z]	<ntilwalli>	or neither
[2015-07-24T06:21:12.517Z]	<DanielRosenwasser>	but that do necessarily work -pron- depend how the library -pron- be write
[2015-07-24T06:25:11.862Z]	<DanielRosenwasser>	right unless -pron- be sure that jquery or a relevant library do something like js then hack the file may not be appropriate
--------------------------------------------------------------------------------------------------
[2015-07-23T23:26:57.798Z]	<ntilwalli>	no i get both a compile and run time error compile src error module jquery have no export member run time uncaught in promise error be not a function error loading src at execute src at u at at y at s at p at h at
--------------------------------------------------------------------------------------------------
[2015-07-24T01:24:11.428Z]	<ntilwalli>	get -pron- consider the legacy syntax -pron- suggest use do not work either what the proper way to manage this be this on the declaration file creator consumer to declare the module export in the new syntax compatible format or could this be consider a bug which i should submit
--------------------------------------------------------------------------------------------------
[2015-07-24T06:05:35.081Z]	<mitranim>	i tend to hack the file for the give library lodash jquery etc and replace -pron- import declaration with a default export
[2015-07-24T06:05:43.424Z]	<mitranim>	beat deal with compiler error
[2015-07-24T06:23:39.393Z]	<mitranim>	yes i mean that i do this for library with commonjs style default export lodash
--------------------------------------------------------------------------------------------------
[2015-07-24T11:13:38.145Z]	<LabEG>	good dya
[2015-07-24T11:13:41.499Z]	<LabEG>	i need help
[2015-07-24T11:13:47.165Z]	<LabEG>	i have this controller
[2015-07-24T11:13:59.612Z]	<LabEG>	export class applicationcontroller string void app newapp newapp
[2015-07-24T11:14:19.614Z]	<LabEG>	-pron- tranpile to this code
[2015-07-24T11:14:44.907Z]	<LabEG>	var applicationcontroller function function applicationcontroller function newapp app newapp newapp return applicationcontroller applicationcontroller
[2015-07-24T11:15:49.152Z]	<LabEG>	and after write this code in console
[2015-07-24T11:15:59.207Z]	<LabEG>	function applicationcontroller
[2015-07-24T11:16:17.166Z]	<LabEG>	where be problem
[2015-07-24T11:17:41.741Z]	<LabEG>	var applicationcontroller function function applicationcontroller function newapp app newapp newapp return applicationcontroller function applicationcontroller function newapp app newapp newapp
[2015-07-24T11:17:50.678Z]	<LabEG>	if method  <user> in js class constructer then all fine
[2015-07-24T11:51:56.574Z]	<LabEG>	new component
--------------------------------------------------------------------------------------------------
[2015-07-24T11:49:50.001Z]	<ntilwalli>	a cursory glance at the jquery library do show any assignment to
[2015-07-24T11:49:55.254Z]	<ntilwalli>	do -pron- actually successfully hack the jquery file to get the new import syntax to work
[2015-07-24T11:56:46.771Z]	<ntilwalli>
[2015-07-24T12:08:58.559Z]	<ntilwalli>	-pron- seem like import jquery with syntax be not possible so the two possible approach be to add a global script tag as detail on the typescript page microsoft typescriptsample tree master jquery or rely on the require function provide by systemjs and include jquery by add var be i right
[2015-07-24T12:14:03.459Z]	<LabEG>	function n r function u if if var a typeof require function require if u if var f new find module o throw f var l export function e var n return n e l e t n r return var i typeof require function require for var o o return s this browserify code break -pron- code
--------------------------------------------------------------------------------------------------
[2015-07-24T12:07:08.921Z]	<serhiisol>	-pron- constructor be clean tostre cover prototype method
[2015-07-24T12:07:33.247Z]	<LabEG>	yep bug in browserify
[2015-07-24T12:08:30.560Z]	<LabEG>	var b browserify cache packagecache fullpath true target module commonjs noimplicitany true true global true
[2015-07-24T12:09:00.034Z]	<serhiisol>	why be that everything seem to be correct
[2015-07-24T12:09:00.167Z]	<LabEG>	this be main build system browserify break logic
[2015-07-24T12:09:29.605Z]	<serhiisol>	if -pron- put some logic to constructor than this code appera in tostring method
[2015-07-24T12:16:38.711Z]	<serhiisol>	use webpack
[2015-07-24T12:20:23.081Z]	<LabEG>	webpack do not have need -pron- loader
[2015-07-24T12:20:29.776Z]	<LabEG>	example preprocessor
[2015-07-24T12:48:02.937Z]	<mitranim>	replace export with export default jquery and -pron- can import -pron- like so import from jquery
[2015-07-24T12:49:16.397Z]	<mitranim>	kind of annoying but work
--------------------------------------------------------------------------------------------------
[2015-07-24T16:31:35.373Z]	<LabEG>	-pron- be not browserif -pron- be bug in framework
--------------------------------------------------------------------------------------------------
[2015-07-24T16:48:07.885Z]	<LPGhatguy>	there  <user> import as from jquery which work without change the definition file
[2015-07-24T17:16:41.456Z]	<ntilwalli>	i try that -pron- solve the compile time problem but at run time -pron- fail because the generate code after see that the declaration have a default export assume the require module have a default property which jquery do not
[2015-07-24T17:17:55.667Z]	<ntilwalli>	-pron- fail with a can not find default property error in the browser
[2015-07-24T17:20:12.650Z]	<ntilwalli>	i actually try that which -pron- can see if -pron- scroll up to where this convo start last night and -pron- cause a run time error say be not a function
[2015-07-24T17:21:29.820Z]	<LPGhatguy>	interesting that what -pron- get work in -pron- codebase
[2015-07-24T17:22:53.131Z]	<ntilwalli>	hmm that be interesting what module format be -pron- use
[2015-07-24T17:26:11.031Z]	<LPGhatguy>	output to commonjs
[2015-07-24T17:26:51.547Z]	<LPGhatguy>	i use that same style to import lodash and handlebar too with no issue generally
[2015-07-24T17:36:58.630Z]	<ntilwalli>	-pron- investigate that -pron- only try with amd and system
--------------------------------------------------------------------------------------------------
[2015-07-24T19:02:52.180Z]	<DanielRosenwasser>	i think the bottom line be -pron- need to do ts import
[2015-07-24T19:06:03.885Z]	<DanielRosenwasser>	nightly build hey guy while -pron- only publish a few time now -pron- like to encourage people to try use -pron- nightly build -pron- can try -pron- out with shell npm install let -pron- know how -pron- work out for -pron- all
[2015-07-24T19:13:48.128Z]	<DickvdBrink>	cool
[2015-07-24T19:20:19.574Z]	<DickvdBrink>	probably go to use -pron- for personal project for work project -pron- go to stay on the late available version but i may add build with the nightly to -pron- ci to make sure upgrade go smooth smile
[2015-07-24T21:57:06.758Z]	<DanielRosenwasser>	great that definitely the intent in addition to let people try out new feature fix -pron- want to know when and how user be affect by -pron- change so keep -pron- post on that
--------------------------------------------------------------------------------------------------
[2015-07-24T23:43:00.053Z]	<park9140>	anyone have any lead for a project that auto convert from old style typescript import to ecma style module import
[2015-07-24T23:45:02.570Z]	<park9140>	for example convert the simple case of import blah to import as blah from blah
[2015-07-24T23:46:07.495Z]	<park9140>	i  <user> need to convert default export to the new style class blah export blah to export default class blah
[2015-07-24T23:46:35.678Z]	<park9140>	i could just write a script but -pron- lazy and be wonder if -pron- be a solve problem
[2015-07-24T23:49:26.580Z]	<park9140>	-pron- occur to -pron- that i need to do some reflection on import blah to import as blah from blah since -pron- could  <user> be import blah from blah in case where i need to convert the old style default export
[2015-07-25T00:03:19.805Z]	<wwwsevolod>	hello devs i really need help with anoye thing with module system i use webpack on -pron- project and just start to try migrate to typescript in javascript part i have set resolve root in -pron- webpack config and -pron- be work as i expect import someclass from folder folder file  <user> import file folder folder and i want to make -pron- source resolve work with typescript but -pron- ide atom typescript say that -pron- can resolve dependency in this way and i can find right compiler set to do -pron- may be -pron- can say which one i should use or maybe -pron- be impossible right now
[2015-07-25T00:18:59.231Z]	<park9140>	in atom typescript -pron- need to create a
[2015-07-25T00:19:02.852Z]	<park9140>	have -pron- do that
[2015-07-25T00:19:57.359Z]	<park9140>
[2015-07-25T00:20:00.746Z]	<wwwsevolod>	yes in root of -pron- project folder structure like this projectroot src where src be source root
[2015-07-25T00:20:34.175Z]	<park9140>	and -pron- have set -pron- filesglob property to include -pron- src directory
[2015-07-25T00:20:35.062Z]	<park9140>
[2015-07-25T00:20:50.477Z]	<wwwsevolod>	filesglob
[2015-07-25T00:21:12.717Z]	<park9140>	hmm
[2015-07-25T00:21:41.627Z]	<park9140>	seem like what i use
[2015-07-25T00:21:56.729Z]	<park9140>	compileroption target module commonjs declaration false noimplicitany false removecomment true nolib false preserveconstenum true suppressimplicitanyindexerror true outdir null ts filesglob
[2015-07-25T00:22:23.067Z]	<wwwsevolod>	yeah
[2015-07-25T00:23:03.378Z]	<wwwsevolod>	i do not check if -pron- already work correctly in webpack build but in editor i can use import without juggle with dot
[2015-07-25T00:25:00.352Z]	<park9140>	so just to check -pron- have a file like src folder and src and -pron- want to use import blah from folder in the file folder
[2015-07-25T00:25:01.734Z]	<park9140>
[2015-07-25T00:25:28.628Z]	<park9140>	i do think i use reference like that anymore so i may just not have this problem
[2015-07-25T00:25:34.116Z]	<wwwsevolod>	in the file
[2015-07-25T00:25:56.943Z]	<wwwsevolod>	and which type of reference -pron- use now
[2015-07-25T00:26:01.114Z]	<wwwsevolod>	with dot
[2015-07-25T00:27:02.715Z]	<park9140>	import bla from file
[2015-07-25T00:27:14.503Z]	<wwwsevolod>
[2015-07-25T00:27:39.532Z]	<park9140>	the autcomplete automatically find the correct file though when type
[2015-07-25T00:27:42.128Z]	<wwwsevolod>	-pron- be really annoying
[2015-07-25T00:30:00.381Z]	<wwwsevolod>	hope anyone could make -pron- work
[2015-07-25T00:30:31.674Z]	<park9140>	have -pron- try set rootdir in -pron- option
[2015-07-25T00:30:38.470Z]	<wwwsevolod>	yeah
[2015-07-25T00:31:17.784Z]	<park9140>	seem to work for -pron- that way at least go up a directory let -pron- try across
[2015-07-25T00:32:01.387Z]	<wwwsevolod>	-pron-  <user> use if -pron- matter
[2015-07-25T00:32:26.156Z]	<park9140>	what be that
[2015-07-25T00:32:47.614Z]	<wwwsevolod>	dev version of typescript to use jsx in typescript
[2015-07-25T00:32:54.005Z]	<park9140>	-pron- version be typescript right now
[2015-07-25T00:33:03.225Z]	<wwwsevolod>	bcz this feature be only in
[2015-07-25T00:33:36.384Z]	<wwwsevolod>	and -pron- project need to be release at september october and typescript and react be requirement lol
[2015-07-25T00:33:38.718Z]	<park9140>	ah that would be a problem i think -pron- need to turn on jsx support use a flag or something
[2015-07-25T00:33:53.618Z]	<wwwsevolod>	nono jsx work just fine
[2015-07-25T00:34:04.811Z]	<wwwsevolod>	just module resolving be annoy
[2015-07-25T00:34:29.495Z]	<park9140>	so if -pron- use the style -pron- work
[2015-07-25T00:34:38.300Z]	<wwwsevolod>	yeah
[2015-07-25T00:35:25.880Z]	<park9140>	do atom typescript generate all -pron- file into the file list automatically
[2015-07-25T00:35:36.834Z]	<wwwsevolod>	yes
[2015-07-25T00:37:10.153Z]	<park9140>	check out the bug on the atom typescript repo and see if anything be there  <user> if -pron- want more direct support there be an atom typescript channel on gitter
[2015-07-25T00:37:22.491Z]	<wwwsevolod>	thank -pron-
[2015-07-25T00:37:40.217Z]	<park9140>	-pron- do seem to be work for -pron- right now without tsx file
[2015-07-25T00:37:57.641Z]	<park9140>	i do just update tot -pron- latest this afternoon though after typescript come out
[2015-07-25T00:38:17.684Z]	<park9140>	more to the point after i notice -pron- come out
[2015-07-25T00:39:23.110Z]	<wwwsevolod>	may be -pron-  <user> know how to get function name in typescript like in js function asd asd how to get -pron- in ts i think -pron- like in js but ide say -pron- that -pron- be wrong and property name do not exist on type function
[2015-07-25T00:41:22.638Z]	<park9140>	the ts defininition do include the function name because -pron- be mostly unsafe to use however if -pron- want to get -pron- -pron- can still
[2015-07-25T00:41:36.643Z]	<park9140>	why do -pron- need the function name
--------------------------------------------------------------------------------------------------
[2015-07-25T00:43:13.922Z]	<park9140>	be the first question i would ask if i be write the code and then find a way around need -pron- however if -pron- really need -pron- just use the object accessor to get -pron- should compile
--------------------------------------------------------------------------------------------------
[2015-07-25T00:43:29.951Z]	<wwwsevolod>	some wierd meta programming with name of class of instance i understand all risk and know where and how i can use -pron- reliable may be any hint to how disable this warning or add definition for -pron-
[2015-07-25T00:44:06.637Z]	<park9140>	or -pron- can cast the function to any then get the name any
[2015-07-25T00:44:23.873Z]	<wwwsevolod>	thank
[2015-07-25T00:45:16.495Z]	<park9140>	or -pron- can extend the function definition interface function name string
[2015-07-25T00:45:29.147Z]	<wwwsevolod>	thank
[2015-07-25T00:45:42.376Z]	<park9140>	which would then allow
[2015-07-25T00:47:53.889Z]	<park9140>	-pron- personal favorite method to make sure everyone understand that the meta programming be happen be to create a secondary interface for function that extend function and just use that everywhere -pron- do meta programming
--------------------------------------------------------------------------------------------------
[2015-07-25T03:57:30.061Z]	<ericwooley>	-pron- be try to figure out how to use typescript with jest have anyone do -pron- already
[2015-07-25T03:58:07.502Z]	<ericwooley>	or really any unit test
[2015-07-25T04:01:40.350Z]	<ericwooley>	actually i would really like to just be able to import something from npm to start be i do something wrong here reference jasmine import jasmine from jasmine function string return hello person var user jane user
[2015-07-25T04:01:53.746Z]	<ericwooley>	sorry reference jasmine import jasmine from jasmine function string return hello person var user jane user
[2015-07-25T10:20:22.616Z]	<grofit>	quick question about description file and module
[2015-07-25T10:20:42.769Z]	<grofit>	so let say i have a module which have many source file and -pron- be use the import export style syntax in ts
[2015-07-25T10:21:14.212Z]	<grofit>	when i go to compile -pron- currently i be use tsc without a project file be there any way to just get a single file out or any good practice around this
[2015-07-25T10:21:41.598Z]	<grofit>	as currently i get a for each source code file which seem like a pain to distribute
[2015-07-25T11:23:27.232Z]	<DanielRosenwasser>	-pron- want
[2015-07-25T11:49:09.489Z]	<grofit>	thanks  <user> look into -pron-
[2015-07-25T16:06:00.740Z]	<roganov>	as i understand have be release but the language specification on be still for be -pron- change soon
[2015-07-25T16:52:48.263Z]	<ericwooley>	i be not really sure i be just try to get -pron- to work
[2015-07-25T16:54:30.019Z]	<ericwooley>	this one
[2015-07-25T16:55:08.681Z]	<ericwooley>	-pron- be reference the file which be what i be try to copy
[2015-07-25T16:56:52.645Z]	<ericwooley>	i just get no output to the console from main or the class so now i be wonder if -pron- -pron- build process
[2015-07-25T16:59:11.173Z]	<ericwooley>	alright thanks so i fix something in -pron- build process i be try to use browserify and i get error module test not find from  <user> dropbox project yodel client ts user  <user> dropbox project yodel client ts at notfound  <user> dropbox project yodel gulp browserify browserify at  <user> dropbox project yodel gulp browserify browserify at  <user> dropbox project yodel gulp browserify browserify browser resolve at  <user> dropbox project yodel gulp browserify browserify resolve lib
[2015-07-25T16:59:19.503Z]	<ericwooley>	btc
[2015-07-25T17:00:37.534Z]	<ericwooley>	i have be try to get a typescript workflow work for hour and be about to go back to babel
[2015-07-25T17:09:53.835Z]	<ericwooley>	haha alright well thank for the help
--------------------------------------------------------------------------------------------------
[2015-07-25T16:49:53.310Z]	<ericwooley>	anyone use typescript without visual studio the setup seem really painful i can even get -pron- project to import a module can anyone take a look at what i be do wrong
[2015-07-25T16:51:44.556Z]	<jomeier>	why do -pron- use the name for -pron- module  <user> in the typing reference i would expect
[2015-07-25T17:05:01.268Z]	<ericwooley>	lol i do see the big purple button for -pron- platform
--------------------------------------------------------------------------------------------------
[2015-07-25T16:53:31.315Z]	<jomeier>	do the sample from the official website work for -pron-
[2015-07-25T16:57:25.289Z]	<jomeier>	remove the typing from the first line cause -pron- not type definition but -pron- source code what -pron- be reference
[2015-07-25T16:58:51.431Z]	<jomeier>	what do -pron- pay -pron- if i tell -pron- what -pron- make wrong
[2015-07-25T17:00:08.419Z]	<jomeier>	-pron- misspell reactclass in as reactcalss
[2015-07-25T17:01:10.000Z]	<jomeier>	correct the typo of the misspell class vs work great for typescript
--------------------------------------------------------------------------------------------------
[2015-07-25T16:56:04.054Z]	<jomeier>	in -pron- opinion -pron- be do -pron- right what s the error message
--------------------------------------------------------------------------------------------------
[2015-07-25T17:01:50.513Z]	<ericwooley>	-pron- problem be that vs be not great for -pron- i like -pron- editor a lot more lightweight
[2015-07-25T17:01:58.932Z]	<jomeier>	try vs code do -pron- sample run now
[2015-07-25T17:02:59.020Z]	<ericwooley>	nope no change still get the react test not find error from browserify i think that be where -pron- real issue be
[2015-07-25T17:03:31.706Z]	<ericwooley>	vs code do seem available for os x
[2015-07-25T17:04:18.188Z]	<jomeier>	visual studio code be free and available on -pron- favorite platform linux os x and window
[2015-07-25T17:09:17.841Z]	<jomeier>	this be a joke
--------------------------------------------------------------------------------------------------
[2015-07-25T17:08:58.864Z]	<ericwooley>	alright thank for the help i give up switch back to typescript look really cool but -pron- seem like there be just too much overhead and i do need to use a specific ide to make thing work what s -pron- btc address
--------------------------------------------------------------------------------------------------
[2015-07-25T17:20:55.593Z]	<ericwooley>	i actually make progress just before give up by switch to one more question be i import react correctly -pron- say -pron- can find the module reference import react export default class reactclass extend any any constructor super
--------------------------------------------------------------------------------------------------
[2015-07-25T17:22:22.138Z]	<jomeier>	i do know react but have a look in -pron- if there a type definition for -pron- have -pron- instal -pron- with npm
[2015-07-25T17:30:10.084Z]	<jomeier>	do -pron- see a reference in the definition file for react
[2015-07-25T17:31:38.199Z]	<ericwooley>	yep -pron- there and i have code completion for all the react stuff
[2015-07-25T17:32:55.489Z]	<jomeier>	what be -pron- miss then why do -pron- think -pron- do work
[2015-07-25T18:03:53.875Z]	<ericwooley>	sorry step away for a few minute -pron- do work because -pron- would compile because -pron- could find the react plugin -pron- turn out that gulp plugin do work i end up switch to tsify and -pron- work now
[2015-07-25T18:04:23.065Z]	<ericwooley>	thank a ton for the help -pron- be really helpful to know that -pron- be -pron- code that be screw up but the build process
--------------------------------------------------------------------------------------------------
[2015-07-25T17:23:35.918Z]	<ericwooley>	yea i instal -pron- with npm and instal the react definitelytype definition
--------------------------------------------------------------------------------------------------
[2015-07-25T18:46:39.763Z]	<wwwsevolod>	hello again -pron- still lookin for solution for absolute path relative to source root say i need module resolver to resolve module in import something from another something anywhere from project without juggling may be some compiler option or may be issue on github
[2015-07-25T18:52:43.684Z]	<MicahZoltu>	that should work as long as something be another module be compile
[2015-07-25T18:54:28.439Z]	<wwwsevolod>	hm just try src folder another something and -pron- be work may be -pron- be possible to set folder to use -pron- without part
[2015-07-25T18:54:51.323Z]	<MicahZoltu>	what be -pron- source root
[2015-07-25T18:55:38.447Z]	<wwwsevolod>	bcz as many project -pron- have some file with setting in root of project and folder src in root of project with application code
[2015-07-25T18:55:54.573Z]	<wwwsevolod>	project be -pron- source root
[2015-07-25T18:56:48.671Z]	<MicahZoltu>	src
[2015-07-25T18:57:18.484Z]	<MicahZoltu>	or rootdir src in compiler option object
[2015-07-25T18:57:41.305Z]	<wwwsevolod>	lol yes thank -pron- i try to set -pron- like etc and -pron- didnot work
--------------------------------------------------------------------------------------------------
[2015-07-25T18:56:38.784Z]	<MicahZoltu>	do help
[2015-07-25T18:57:49.547Z]	<wwwsevolod>	great
[2015-07-25T18:59:37.506Z]	<wwwsevolod>	webpack awesome typescript loader
[2015-07-25T18:59:54.264Z]	<wwwsevolod>	say
[2015-07-25T19:00:08.490Z]	<wwwsevolod>	 <user> -pron- be use in atom typescript
--------------------------------------------------------------------------------------------------
[2015-07-25T18:58:12.163Z]	<wwwsevolod>	 <user> be i able to set default typing file do not want to copypaste reference in all file
--------------------------------------------------------------------------------------------------
[2015-07-25T18:59:19.825Z]	<MicahZoltu>	how be -pron- build from command line via via gulp typescript
--------------------------------------------------------------------------------------------------
[2015-07-25T19:00:42.707Z]	<MicahZoltu>	hmm -pron- not familiar with webpack however with i recommend list -pron- definition file in the file array and not include the reference line in -pron- file
[2015-07-25T19:01:09.049Z]	<wwwsevolod>	thank
[2015-07-25T19:01:18.222Z]	<MicahZoltu>	i  <user> do recommend combine -pron- definition file i personally believe that be a stop gap before the come about
[2015-07-25T19:01:47.320Z]	<MicahZoltu>	just like the reference thing be a stop gap before and typescript or maybe -pron- be
[2015-07-25T19:02:35.858Z]	<wwwsevolod>	sorry do not understand what -pron- mean talkin about of combine -pron- definition file
--------------------------------------------------------------------------------------------------
[2015-07-25T19:14:46.122Z]	<wwwsevolod>	 <user> anyone be use typescript with react how can i cast type in file bcz someinterface be treat as react jsx not as cast operation
--------------------------------------------------------------------------------------------------
[2015-07-25T19:16:19.251Z]	<ldrews1>	could -pron- share a copy of one of -pron- tsconfig file
[2015-07-25T19:19:21.379Z]	<DanielRosenwasser>	-pron- introduce the as assertion operator
[2015-07-25T19:19:45.361Z]	<DanielRosenwasser>	typescript foo xyz become xyz as foo
[2015-07-25T19:19:56.446Z]	<DanielRosenwasser>	both  <user> continue to work in regular file
[2015-07-25T19:20:14.213Z]	<wwwsevolod>	thank
[2015-07-25T19:20:16.663Z]	<wwwsevolod>	great
[2015-07-25T19:20:25.857Z]	<DanielRosenwasser>	-pron- welcome
[2015-07-25T19:20:58.448Z]	<wwwsevolod>
[2015-07-25T19:22:34.522Z]	<MicahZoltu>	-pron- do really need that anymore with and definitely do need -pron- anymore once be merge
[2015-07-25T19:23:08.189Z]	<MicahZoltu>	however if -pron- want to continue use -pron- -pron- can just add -pron- to -pron- file array in -pron-
[2015-07-25T19:23:38.263Z]	<MicahZoltu>	since -pron- be use atom typescript -pron- can tell atom to automatically add all -pron- typing file individually to the file array this be a stop gap until be merge
[2015-07-25T19:27:57.630Z]	<wwwsevolod>	 <user> i have one more thing i can not understand be -pron- possible say i have generic class class test p p defaultprop p and do interface someinterface size number class anothertest extend test someinterface defaultprop size str asdasd and i be expect type error but -pron- seem that antohert class be rewrite type of defaultprop may be i be do something wrong be -pron- possible to do this type of typing
[2015-07-25T19:35:17.343Z]	<MicahZoltu>	someinterface be any object that expose a size that be of type number
[2015-07-25T19:38:33.187Z]	<wwwsevolod>	actually no when i set type explicitly for defaultprop -pron- be warn -pron- about not suitable value
[2015-07-25T19:40:14.669Z]	<MicahZoltu>	oh -pron- be probably hide defaultprop
--------------------------------------------------------------------------------------------------
[2015-07-25T19:21:28.384Z]	<MicahZoltu>	typing that be the output file from the tsd toll when -pron- combine -pron- definition file into one
[2015-07-25T19:24:14.937Z]	<wwwsevolod>	ah understand thank
[2015-07-25T19:31:32.555Z]	<wwwsevolod>	i understand that i be able to declare type explicit every time but -pron- would be cool not to
[2015-07-25T19:31:35.658Z]	<MicahZoltu>	what error do -pron- expect
[2015-07-25T19:32:00.308Z]	<wwwsevolod>	that size number str string be not suitable for someinterface
[2015-07-25T19:32:08.149Z]	<wwwsevolod>	or something like that
[2015-07-25T19:35:00.310Z]	<MicahZoltu>	-pron- be though
[2015-07-25T19:35:48.758Z]	<MicahZoltu>	size str asdasd implement the interface size number
[2015-07-25T19:39:48.682Z]	<MicahZoltu>	like this defaultprop someinterface size str asd
[2015-07-25T19:39:55.832Z]	<wwwsevolod>	yes
[2015-07-25T19:40:18.479Z]	<MicahZoltu>	if i have to guess
[2015-07-25T19:40:51.709Z]	<MicahZoltu>	class anothertest extend test someinterface constructor size str asd
--------------------------------------------------------------------------------------------------
[2015-07-25T19:40:01.477Z]	<MicahZoltu>	that surprise -pron-
[2015-07-25T19:40:27.105Z]	<wwwsevolod>	example
[2015-07-25T19:41:27.013Z]	<wwwsevolod>	sadly i need -pron- to be on prototype
[2015-07-25T19:41:36.179Z]	<MicahZoltu>	what do -pron- mean
[2015-07-25T19:42:03.870Z]	<MicahZoltu>	oh i think i understand i suspect -pron- will be able to do that
[2015-07-25T19:42:06.098Z]	<wwwsevolod>	define on prototype do not look on static keyword -pron- be just example code
[2015-07-25T19:42:14.284Z]	<wwwsevolod>	sad
[2015-07-25T19:42:20.109Z]	<wwwsevolod>	thank
--------------------------------------------------------------------------------------------------
[2015-07-26T03:55:27.195Z]	<douglas-mason>	-pron- try a few method i find by search this chat history and i can seem to get npm to show typescript version high than no matter what -pron- like -pron- stick at this version and tsc which apparently be pretty old
[2015-07-26T03:55:41.661Z]	<douglas-mason>	anyone know of anything i should try
[2015-07-26T03:56:07.156Z]	<douglas-mason>	this be on window
[2015-07-26T04:38:32.825Z]	<MicahZoltu>	mason be -pron- try to update an exist install of npm to
[2015-07-26T04:39:34.106Z]	<MicahZoltu>	if so try npm update typescript
[2015-07-26T04:39:40.557Z]	<MicahZoltu>	if this be a new project -pron- not sure what the cause would be
[2015-07-26T04:46:56.893Z]	<douglas-mason>	yeah i be try to get npm to install typescript to and explicitly pass the version and -pron- do seem to work npm update do seem to work either
[2015-07-26T04:47:21.435Z]	<douglas-mason>	-pron- return when i check the version
[2015-07-26T04:50:32.625Z]	<MicahZoltu>	hmm sound like a caching issue of some kind
[2015-07-26T04:52:35.710Z]	<MicahZoltu>	mason there be no release version of typescript that be on npm
[2015-07-26T04:52:41.392Z]	<MicahZoltu>	npm view typescript
[2015-07-26T04:52:52.969Z]	<MicahZoltu>
[2015-07-26T04:57:29.486Z]	<douglas-mason>	lol well then
[2015-07-26T04:58:42.148Z]	<douglas-mason>	-pron- see if i can clean up all the reference i can find and install again
[2015-07-26T04:58:59.712Z]	<douglas-mason>	thank for look into -pron-
[2015-07-26T05:06:44.201Z]	<MicahZoltu>	good luck
[2015-07-26T07:34:24.483Z]	<DanielRosenwasser>	property initializer do get attach to the prototype -pron- get attach to the instance
[2015-07-26T07:34:51.738Z]	<DanielRosenwasser>	 <user> with respect to the type annotation -pron- run with a non stable build right
[2015-07-26T07:36:52.407Z]	<DanielRosenwasser>	mason make sure that -pron- system path be not resolve to the wrong tsc -pron- likely that -pron- use a tsc instal by visual studio or a different directory and -pron- get resolve to that one instead of the one in npm
[2015-07-26T07:37:26.113Z]	<DanielRosenwasser>	if -pron- on a windows machine open up the command prompt and type in where tsc if -pron- on a unix like machine try which tsc
[2015-07-26T10:34:43.177Z]	<ggarek>
[2015-07-26T15:19:08.644Z]	<douglas-mason>	that do -pron- thank so much
[2015-07-26T15:33:24.270Z]	<DanielRosenwasser>	no prob
[2015-07-27T18:39:15.749Z]	<avielfedida>	hi guy i have a node module with typescript source i use import x for all the module i need there be a class module an arrays module and interfaces module i have that produce that and finally that produce an empty due to the fact that the export only interface that  <user> be use in type position typescript will include a require for within the main file that use import interface pathy so should i include an empty in the github repository for symmetry or not
[2015-07-27T18:50:18.990Z]	<DanielRosenwasser>	-pron- be a matter of preference at that point a js consumer be go to be use -pron- type so i do really see -pron- as a problem
[2015-07-27T18:50:51.798Z]	<DanielRosenwasser>	omit -pron- that is
[2015-07-27T18:51:46.785Z]	<avielfedida>	thank -pron-
[2015-07-28T16:03:08.038Z]	<DanielRosenwasser>	yup try -pron- out
[2015-07-28T16:04:38.697Z]	<DanielRosenwasser>	no -pron- not mutually exclusive because of the confusion -pron- decide to rename internal module to namespace and external module to just module
[2015-07-28T16:05:31.075Z]	<DanielRosenwasser>	in typescript -pron- can use the namespace keyword to clarify
[2015-07-28T16:42:05.472Z]	<LabEG>	array array new array  <user> by realise this syntax
[2015-07-28T19:08:20.823Z]	<LabEG>	this syntax have dublicate of declaration first be var second be type
[2015-07-28T19:17:29.677Z]	<ericmdantas>	well as far as i know that the way to say a variable have a certain type and then receive something
[2015-07-29T01:50:26.990Z]	<DanielRosenwasser>	that tuple type be effectively equivalent to an interface define in the following way typescript interface numberstringpair extend array number string number string
[2015-07-29T01:51:12.239Z]	<DanielRosenwasser>	-pron- still not sure what -pron- question be
[2015-07-29T15:26:56.008Z]	<DanielRosenwasser>	one be an alias of the other and -pron- never use the reverse mapping -pron- only there for debug purpose
--------------------------------------------------------------------------------------------------
[2015-07-28T02:37:19.796Z]	<jamesxv7>	hello guy -pron- start to experiment with the tuple type and i have a quick question maybe -pron- miss something from the spec doc in the follow example the line use the method should display a compiler error since array be not type number string typescript var roominfo number string
[2015-07-28T18:54:32.986Z]	<ericmdantas>	-pron- mean ts var array array new array
--------------------------------------------------------------------------------------------------
[2015-07-28T12:27:43.111Z]	<faradaytrs>	hello there do compilation of tsx work already in
--------------------------------------------------------------------------------------------------
[2015-07-28T13:58:32.071Z]	<darrencrossley>	be typescript internal and external module mutually exclusive can i mix -pron- in a project
--------------------------------------------------------------------------------------------------
[2015-07-29T08:22:30.988Z]	<Yellowmat>	hi guy
[2015-07-29T08:23:14.287Z]	<Yellowmat>	i find something weird in
[2015-07-29T08:25:44.100Z]	<Yellowmat>	equalstoken firstassignment how be -pron- possible to make the difference between those entry when try to resolve a token kind after a call to gettokenatposition or any method return a token
[2015-07-30T12:29:30.534Z]	<Yellowmat>	thank for the explanation
--------------------------------------------------------------------------------------------------
[2015-07-29T10:32:28.597Z]	<DominicBoettger>	i want to develop a module in typescript but i fail to create the unit test for -pron- module i try different thing one thing be to simply in -pron- unit test but this fail as unknown module then i try to create a ts file do -pron- have any example or be this not possible
[2015-07-29T10:34:14.248Z]	<ErjanGavalji>	what engine do -pron- use for run -pron- unit test mocha
[2015-07-29T10:34:36.297Z]	<ErjanGavalji>	and as -pron- module be write in typescript why not have the unit test write in typescript as well
[2015-07-29T10:36:54.946Z]	<ErjanGavalji>	i use mocha and shouldjs i get -pron- test in file under a test folder i reference the module file under the lib folder as import exportedclass from export module
[2015-07-29T10:47:21.980Z]	<DominicBoettger>	i try to write -pron- in typescript i  <user> use mocha and now i try the following in -pron- module i have a loader function which be export for nodejs via function init this init function load the need class myclass in the module and return the instance should i now additional do a export myclass
[2015-07-29T11:00:38.403Z]	<ErjanGavalji>	have try that
[2015-07-29T11:01:39.720Z]	<DominicBoettger>	thank i try to solve the issue but i think -pron-  <user> only work if i add a additional definition file for the module
[2015-07-29T13:40:02.872Z]	<ErjanGavalji>	hm not the case on -pron- side
--------------------------------------------------------------------------------------------------
[2015-07-30T14:02:24.471Z]	<radpet>	hello be there any good code quality tool for typescript except the default one tslint code coverage i see sonar plugin for ts but be -pron- okey
[2015-07-30T17:27:18.460Z]	<DanielRosenwasser>	may know an answer to -pron- question
--------------------------------------------------------------------------------------------------
[2015-07-30T18:07:05.370Z]	<scottwio>	hi how do -pron- get tsc to recognise when a new file have be add
[2015-07-30T18:07:31.709Z]	<scottwio>	at the moment i have to stop and restart -pron- which seem a little backwards
[2015-07-30T18:07:55.999Z]	<DanielRosenwasser>	add a reference comment i do think -pron- currently have support for
[2015-07-30T18:08:46.770Z]	<scottwio>	tsconfig do have watch support just do pick up newly create file
[2015-07-30T18:11:24.256Z]	<LPGhatguy>	do typescript support export of variable
[2015-07-30T18:13:28.194Z]	<LPGhatguy>	from what -pron- see this should be valid but typescript do like -pron- export somevariable export default myenum
[2015-07-30T18:14:42.900Z]	<LPGhatguy>	or do i have to name -pron- variable export like a b
[2015-07-30T18:15:02.960Z]	<scottwio>	second one should be valid
[2015-07-30T18:15:37.230Z]	<scottwio>	import default as myenum from filename
[2015-07-30T18:15:44.328Z]	<LPGhatguy>	well -pron- try to use both in one file so the default export be the enum but i can  <user> import the useful variable which happen to be a map myenum number
[2015-07-30T18:15:46.505Z]	<scottwio>	-pron- need typescript by the way
[2015-07-30T18:15:53.295Z]	<LPGhatguy>	of course
[2015-07-30T18:16:12.753Z]	<DanielRosenwasser>	first one should be typescript export somevariable
[2015-07-30T18:16:32.750Z]	<LPGhatguy>	fantastic thank
[2015-07-30T18:16:43.070Z]	<LPGhatguy>	any reason why -pron- choose that syntax be -pron- just to match destructuring stuff
[2015-07-30T18:17:19.185Z]	<DanielRosenwasser>	-pron- wish -pron- be to match destructure syntax smile typescript export somevariable as anothervariable
[2015-07-30T18:17:53.354Z]	<DanielRosenwasser>	i think -pron- be more to match the import syntax
[2015-07-30T18:18:09.276Z]	<LPGhatguy>	but the import syntax be design to match destructure syntax be -pron-
[2015-07-30T18:18:32.346Z]	<DanielRosenwasser>	yeah slightly the as throw -pron- off
[2015-07-30T18:18:55.455Z]	<DanielRosenwasser>	i do recall the exact rationale
[2015-07-30T18:19:20.296Z]	<LPGhatguy>	at least es development have a rationale now
[2015-07-30T18:22:07.413Z]	<DanielRosenwasser>	smile there a lot of discipline that need to go into -pron- now
[2015-07-30T18:28:24.847Z]	<LPGhatguy>	alright one more for -pron- how can i import the default export of a module and another export of that module can i do that in the same import statement
[2015-07-30T18:28:46.574Z]	<LPGhatguy>	answer -pron- own question look at the spec i think derp
[2015-07-30T18:30:41.906Z]	<DanielRosenwasser>	shuck sorry i be away from gitter
[2015-07-30T18:31:56.259Z]	<DanielRosenwasser>	for anyone else who wonder the same thing -pron- typescript import defaultexport foo as bar baz from
--------------------------------------------------------------------------------------------------
[2015-07-30T18:42:48.913Z]	<danquirk>	what kind of code quality analysis be -pron- look for more robust static analysis or just cleanliness or
--------------------------------------------------------------------------------------------------
[2015-07-30T18:46:13.481Z]	<shovon>	any way to use class as type so for instance i have a function foo that return a class which i can then initialize a new instance of by run new foo or const cls foo new cls do typescript allow that
[2015-07-30T18:46:38.243Z]	<RyanCavanaugh>	certainly
[2015-07-30T18:48:01.759Z]	<shovon>
[2015-07-30T18:48:21.012Z]	<shovon>	disregard last message
[2015-07-30T18:49:58.054Z]	<shovon>	what about type check against that javascript interface widget interface widgetslist name string what go here class implement widget class implement widget const widgettypemap widgetslist foo bar
[2015-07-30T18:50:45.151Z]	<RyanCavanaugh>	name string new widget
[2015-07-30T18:50:58.140Z]	<shovon>	thank a lot
--------------------------------------------------------------------------------------------------
[2015-07-30T21:07:11.191Z]	<scottwio>	anyone able to answer this
[2015-07-30T21:07:23.581Z]	<scottwio>	be i right in think -pron- not possible
[2015-07-30T21:09:49.482Z]	<danquirk>	filesglob be not a property -pron- actually support that atom typescript specific
[2015-07-30T21:10:20.861Z]	<danquirk>	the supported property be file which require an explicit list of file
[2015-07-30T21:10:40.556Z]	<danquirk>	so as -pron- may imagine if -pron- add a new file -pron- then need to update file
[2015-07-30T21:10:53.697Z]	<danquirk>	unless -pron- do have a file property and then the compiler just grab everything
[2015-07-30T21:11:12.895Z]	<RyanCavanaugh>	note that if -pron- add or module import the compiler  <user> pick up the new file that way as well
[2015-07-30T21:13:54.368Z]	<scottwio>	thank guy be -pron- plan at all with a lot of people come over to typescript for angular react etc this seem like a huge gap
[2015-07-30T21:14:11.500Z]	<RyanCavanaugh>	specifically file glob in
[2015-07-30T21:14:41.733Z]	<scottwio>	something that  <user> catch new file add and compile -pron- without have to restart tsc
[2015-07-30T21:15:49.976Z]	<scottwio>	or add a file reference somewhere
[2015-07-30T21:16:47.235Z]	<RyanCavanaugh>	if -pron- add a file reference to a file the compiler already know about that file reference be pick up
[2015-07-30T21:17:15.568Z]	<RyanCavanaugh>	if -pron- say tsc and add a reference comment in -pron- add the referenced file to the compilation
[2015-07-30T21:19:28.379Z]	<scottwio>	have to add another reference just seem a little over kill something else to remember everytime a new file be create i guess grunt or gulp could do this with watch but -pron- seem like something the compile tool should do out the box
[2015-07-30T21:20:34.659Z]	<scottwio>	ide people be not go to have this problem because the ide  <user> do -pron- for -pron- but a lot of the javascript hipsters will go near full blow ide
[2015-07-30T21:21:00.132Z]	<RyanCavanaugh>	yea i agree just try to understand the specific scenario -pron- in
[2015-07-30T21:21:09.031Z]	<RyanCavanaugh>	-pron- have a with no file property
[2015-07-30T21:25:12.082Z]	<scottwio>	yep and i just want to watch all file in -pron- project folder say public then if i add a new file compile that as well -pron- use vs code i start up tsc in the terminal and -pron- compile all the file -pron- know about and watch -pron- great stuff now i want to create a new reatc component i need a new file no that file be never go to get compile unless i make -pron- way back to the terminal stop the tsc process and restart -pron- -pron- a first world problem but have to do that everytime i make a new component be get old quickly
[2015-07-30T21:25:40.329Z]	<RyanCavanaugh>	i definitely get that -pron- annoying
[2015-07-30T21:27:22.664Z]	<RyanCavanaugh>	just to break this down there be two problem tsconfig not support globs which be one thing -pron- talk about do and the other one be that tsc be pick up new file in the folder which i think be just a bug -pron- would take a pr for
[2015-07-30T21:28:48.506Z]	<scottwio>	be glob in atom essentially the same thing then
[2015-07-30T21:28:57.697Z]	<RyanCavanaugh>	same as
[2015-07-30T21:29:22.380Z]	<scottwio>	watch file with wildcard so -pron-  <user> pick up any new matching file
[2015-07-30T21:29:34.608Z]	<RyanCavanaugh>	i do know how atom typescript implement -pron-
[2015-07-30T21:30:06.321Z]	<RyanCavanaugh>	but yea -pron- sound like -pron- have the same problem
[2015-07-30T21:34:24.516Z]	<scottwio>	thank for the break down -pron- keep an eye on the github issue and hope globs be add or the bug be fix i can imagine -pron- be able to get -pron- head around the source code well enough to add a pr
[2015-07-30T21:49:33.181Z]	<shovon>	be this not allow javascript enum widget foo bar baz interface widgetslist x widget string
[2015-07-30T21:51:21.861Z]	<shovon>	oh well a switch statement should do i guess
--------------------------------------------------------------------------------------------------
[2015-07-30T22:34:06.545Z]	<danquirk>	i believe atom typescript take the filesglob property and literally rewrite the file property accord to the explicit list pick up by filesglob
[2015-07-30T22:54:41.570Z]	<RyanCavanaugh>	see
[2015-07-31T07:12:02.958Z]	<mitranim>	there no difference between list those file explicitly and let the compiler language service find -pron-
--------------------------------------------------------------------------------------------------
[2015-07-30T23:44:43.394Z]	<basarat>	i believe atom typescript take the filesglob property and literally rewrite the file property accord to the explicit list pick up by filesglob yes
--------------------------------------------------------------------------------------------------
[2015-07-31T05:11:44.879Z]	<mitranim>	just keep in mind that -pron- do need to explicitly list file by default the compiler or the language service  <user> use all file from where be locate
--------------------------------------------------------------------------------------------------
[2015-07-31T05:18:56.958Z]	<MicahZoltu>	that fall apart pretty quickly as soon as -pron- project get to any substantial size complexity
[2015-07-31T05:19:22.906Z]	<MicahZoltu>	especially when -pron- have to bring in dependency
[2015-07-31T07:11:45.058Z]	<mitranim>	which should contain anything extraneous
[2015-08-01T00:49:04.070Z]	<MicahZoltu>	a simple example that i have run into be when -pron- want to bring in file from yet -pron- typescript source file be in or put -pron- in would cause -pron- to pick up the file in but then -pron- root relative path all require or i believe -pron- can use rootdir and outdir but when i have try that in the past i run into further complication
[2015-08-01T00:51:08.834Z]	<MicahZoltu>	another scenario be when -pron- have multiple project in one repo and -pron- need to reference each other share again file ship with the module in this case -pron- likely have multiple file that need glob like or in this case -pron- be incorrect to put one at the root because the different project may need different compiler option and -pron- want to clearly define dependency not have every project just happen to depend on every other project as a side effect of where -pron- drop -pron-
--------------------------------------------------------------------------------------------------
[2015-07-31T06:25:42.208Z]	<radpet>	-pron- be look for robust static analysis tool
--------------------------------------------------------------------------------------------------
[2015-07-31T07:11:35.294Z]	<mitranim>	why should be in -pron- source folder
--------------------------------------------------------------------------------------------------
[2015-07-31T08:14:59.776Z]	<alexpeta>	hey guy
--------------------------------------------------------------------------------------------------
[2015-07-31T16:09:02.140Z]	<DanielRosenwasser>	hi
--------------------------------------------------------------------------------------------------
[2015-07-31T18:59:49.998Z]	<LPGhatguy>	hey typescript be yell at -pron- for use for of on an map
[2015-07-31T19:01:05.149Z]	<LPGhatguy>	type map number number be not an array type or a string type
[2015-07-31T19:06:32.970Z]	<LPGhatguy>	and map object do have the some method or a length property
[2015-07-31T19:12:31.576Z]	<LPGhatguy>	for var entry of appear to be throw the same error even though be an iterableiterator
[2015-07-31T19:15:07.699Z]	<LPGhatguy>	right never go to happen
--------------------------------------------------------------------------------------------------
[2015-07-31T19:33:50.107Z]	<LPGhatguy>	in fact how do i iterate over a map at all in typescript just foreach
--------------------------------------------------------------------------------------------------
[2015-07-31T19:40:45.961Z]	<avielfedida>	hi guy i read the pdf spec and have a problem understand the follow when the scope of two entity with the same name overlap the entity with the innermost declaration take precedence and access to the outer entity be either not possible or only possible by qualify -pron- do anyone happen to know a code example to explain the above quote
[2015-07-31T19:47:36.467Z]	<LPGhatguy>	-pron- look like i can use as -pron- argument to the for of loop
--------------------------------------------------------------------------------------------------
[2015-08-01T06:40:09.463Z]	<mitranim>	hmm this make sense i never run into this scenario because i use tsd to install definition right into -pron- typing instead of pull -pron- from since very few library ship with def
[2015-08-01T06:51:50.956Z]	<MicahZoltu>	hopefully over time more module  <user> ship with file
--------------------------------------------------------------------------------------------------
[2015-08-02T16:33:04.624Z]	<wwwsevolod>	i think -pron- be bcz this iterator implement in generator when generator land in compiler i hope this would be fix asap
[2015-08-02T16:35:06.331Z]	<wwwsevolod>	 <user> with respect to the type annotation -pron- run with a non stable build right yeah -pron- be like project requirement lold
--------------------------------------------------------------------------------------------------
[2015-08-03T08:51:45.261Z]	<LPGhatguy>	be there any standard for distribute typescript project on npm and have -pron- work for both ts and non ts user
[2015-08-03T08:54:52.828Z]	<LPGhatguy>	should i just compile -pron- module to an and provide a file somehow
[2015-08-03T10:06:45.911Z]	<wwwsevolod>	-pron- should look at -pron- be write in js but example be pretty simple u can provide file in bundle and -pron- would be automatically import on tsd install
--------------------------------------------------------------------------------------------------
[2015-08-03T13:59:25.350Z]	<Yellowmat>	hi guy
[2015-08-03T14:18:13.154Z]	<Yellowmat>	i have a problem while try to parse a line of code from the last to the first token perhaps i be miss something obvious assume the follow line of javascript code function myfunction return var a var c false var d myfunction var e d i be able to parse this line from position mean just before ar or to the first token no problem with that assume the previous line of code where the two last character have be remove function myfunction return var a var c false var d myfunction var e d use the same code previously use to parse the line from last to first token i now have an exception try to get the text of the second last token the error i get be error typeerror undefined be not an object evaluate sourcefile createchildren line getchildren line find line find line find line findprecedingtoken line findtokenonleftofposition line be i miss something be this exception normal what should i do to properly parse from end to start here be the code i use to parse the line var token position if token while var previoustoken if previoustoken token previoustoken else break thank in advance
[2015-08-03T14:54:49.882Z]	<DanielRosenwasser>	-pron- not sure but -pron- understanding be that findtokenonleftofposition do return unknown at the beginning of the file
[2015-08-03T14:55:10.945Z]	<DanielRosenwasser>	-pron- may be the case that findtokenonleftofposition be never mean to be call at the beginning of the file
[2015-08-03T14:55:58.619Z]	<DanielRosenwasser>	so really what -pron- want to test be typescript while start
[2015-08-03T14:56:05.228Z]	<DanielRosenwasser>	hope that help
[2015-08-04T01:10:42.724Z]	<MicahZoltu>	i prefer -pron- when module be distribute as javascript file with definition and sourcemaps to typescript
[2015-08-04T01:11:42.280Z]	<MicahZoltu>	use atom typescript and hopefully tsc globbing soon i would add to -pron- file glob and -pron- runtime loader would use the file with link to the source map
[2015-08-04T01:12:08.915Z]	<MicahZoltu>	if every module ship this way -pron- life would be super easy much easy than the tsd thing which throw versione out the window completely
[2015-08-04T06:59:33.494Z]	<wwwsevolod>	i say exactly same
--------------------------------------------------------------------------------------------------
[2015-08-04T08:38:57.188Z]	<gastrodia>	hi guy may be -pron- a typescript
[2015-08-04T08:39:19.404Z]	<gastrodia>	microsoft thumb microsoft blob
[2015-08-04T08:42:08.713Z]	<gastrodia>	i use this demo code
[2015-08-04T08:50:08.844Z]	<Yellowmat>	thank for -pron- answer but -pron- do help i still have an exception try to parse from end to start the follow line of code function myfunction return var a var c false var d myfunction var e d the last token i have be endoffiletoken and everything seem to be valid position source file the exception still occur while call findtokenonleftofposition error typeerror undefined be not an object evaluate sourcefile createchildren line getchildren line find line find line find line findprecedingtoken line findtokenonleftofposition line
[2015-08-04T09:02:14.028Z]	<Yellowmat>	would -pron- be a good optimization to add a token to the api get the left token -pron-  <user> avoid a call to gettokenatposition to find the current token
[2015-08-04T09:54:11.831Z]	<Yellowmat>	to give more information about -pron- problem while evaluate token ts call getchildren on the follow node without pass sourcefile as a parameter nodeobject end expression nodeobject end expression nodeobject end pos text d proto nodeobject name nodeobject pos proto nodeobject pos proto nodeobject ts then call createchildren with undefined as sourcefile ts finally throw an exception fail to evaluate sourcefile because sourcefile be undefined this have kind and undefined parent which seem to be a problem call an easy fix could be to pass sourcefile as a parameter to getchildren call in find implementation let -pron- know if -pron- a good idea do -pron- want -pron- to create a specific issue for that problem hope that  <user> help
[2015-08-04T17:20:58.369Z]	<DanielRosenwasser>	but yes when possible sourcefile should be pass along as -pron- save the need to walk up parent reference so if -pron- like to send out a pr -pron- may be willing to take that
[2015-08-05T08:47:35.112Z]	<Yellowmat>	ok -pron- submit a pr asap thank for -pron- answer
--------------------------------------------------------------------------------------------------
[2015-08-04T11:50:39.056Z]	<marekweb>	hello be runtime introspection possible in typescript there be a mention of -pron- be use for some angular feature but i have find any documentation
[2015-08-04T11:56:37.177Z]	<mitranim>	there a metadata reflection proposal float around and typescript implement emit that metadata
[2015-08-04T11:56:37.517Z]	<mitranim>
[2015-08-04T11:57:03.825Z]	<mitranim>	-pron- can import the reflect polyfill and use -pron- to inspect compliant code
[2015-08-04T12:20:42.381Z]	<marekweb>	very cool thank for point -pron- to -pron-
--------------------------------------------------------------------------------------------------
[2015-08-04T17:18:43.882Z]	<DanielRosenwasser>	this have kind and undefined parent which seem to be a problem call -pron- language service api do support without parent reference set
[2015-08-04T17:35:32.251Z]	<DanielRosenwasser>	i believe -pron- be a bug in that that work
[2015-08-04T17:36:56.955Z]	<DanielRosenwasser>	with an instance method the target be the prototype of the class
[2015-08-04T17:37:22.623Z]	<DanielRosenwasser>	so -pron- be pass the prototype not the constructor function
--------------------------------------------------------------------------------------------------
[2015-08-05T15:49:55.923Z]	<jomeier>	have anybody ever get webworker run with typescript can find example in the  <user> thank -pron-
--------------------------------------------------------------------------------------------------
[2015-08-05T17:15:05.783Z]	<DanielRosenwasser>	be there anything that would make -pron- different from use webworker in js
[2015-08-05T22:08:42.278Z]	<DanielRosenwasser>	-pron- hope to have stre literal type in
[2015-08-05T22:08:55.265Z]	<DanielRosenwasser>	and eventually if -pron- can narrow base on -pron-
--------------------------------------------------------------------------------------------------
[2015-08-05T18:28:58.461Z]	<roganov>	how can this flow snippet be translate to typescript type binarytree kind leaf value number kind branch leave binarytree right binarytree
--------------------------------------------------------------------------------------------------
[2015-08-05T19:29:49.085Z]	<ccapndave>	maybe something like typescript interface leaf kind stre value number interface node kind stre leave binarytree right binarytree type binarytree leaf node
--------------------------------------------------------------------------------------------------
[2015-08-05T22:32:21.156Z]	<zcstarr>	hey be anyone around
[2015-08-05T22:32:29.024Z]	<RyanCavanaugh>	sure
[2015-08-05T22:32:55.900Z]	<zcstarr>	just have a quick question that probably people have run into be there any sane way to split an external module across file
[2015-08-05T22:33:02.271Z]	<RyanCavanaugh>	not yet
[2015-08-05T22:33:36.904Z]	<zcstarr>	alternative question be there a way to maybe fake the funk
[2015-08-05T22:34:04.780Z]	<zcstarr>	have tsc not transpile a block of code and call nodejs
[2015-08-05T22:34:18.970Z]	<RyanCavanaugh>	if -pron- a commonjs module -pron- can use var x etc instead of the build in syntax and use for concatenation
[2015-08-05T22:37:42.713Z]	<zcstarr>	stupid question would i then be able to reference that as a single
[2015-08-05T22:38:30.252Z]	<zcstarr>	i do believe concat external module that be split
[2015-08-05T22:38:41.995Z]	<zcstarr>	perhaps -pron- wrong here
[2015-08-05T22:38:43.637Z]	<RyanCavanaugh>	what -pron- want to do be take the generate file and wrap -pron- in declare module nameofsplitmodule emit
[2015-08-05T22:39:21.701Z]	<RyanCavanaugh>	right that what -pron- need to use require as a function instead of as a build in syntax that way typescript will consider the file to be an external module
[2015-08-05T22:41:44.682Z]	<zcstarr>	ic thank
[2015-08-06T05:30:10.727Z]	<roganov>	that would be nice for now if -pron- do mind -pron- ask how would -pron- recommend -pron- type flux action -pron- basically have the follow signature interface baseaction type string interface fooaction extend baseaction foo number interface baraction extend baseaction bar stre type action fooaction baraction the problem with this that i can not use type guard on interface ideally -pron- like to be able to do smthe like this handleaction action action if foo ok type error else if bar ok
[2015-08-06T06:06:26.993Z]	<DanielRosenwasser>	okay i have a workaround for -pron-
[2015-08-06T06:06:39.779Z]	<DanielRosenwasser>	but
[2015-08-06T06:07:03.783Z]	<DanielRosenwasser>	-pron- only work in and -pron- contingent on get fix
[2015-08-06T06:07:43.537Z]	<DanielRosenwasser>	so i assume that need to be a string at runtime
[2015-08-06T06:08:02.881Z]	<roganov>	yes
[2015-08-06T06:08:39.406Z]	<DanielRosenwasser>	so i start off with the follow typescript namespace actiontype export type foo string footag any export const foo export type bar string bartag any export const bar type actiontype
[2015-08-06T06:09:18.831Z]	<DanielRosenwasser>	what this do be -pron- declare two useful value and
[2015-08-06T06:09:31.286Z]	<DanielRosenwasser>	in a sense -pron- set up something like a string enum
[2015-08-06T06:10:23.804Z]	<DanielRosenwasser>	-pron- have actiontype which represent a type that can be a foo or a bar
[2015-08-06T06:11:00.276Z]	<DanielRosenwasser>	-pron-  <user> have type for individual value  <user> name and
[2015-08-06T06:11:53.052Z]	<DanielRosenwasser>	-pron- be but -pron-  <user> add special tag to distinguish -pron- from ordinary
[2015-08-06T06:12:18.662Z]	<DanielRosenwasser>	now -pron- amend -pron- original type hierarchy typescript interface baseaction type actiontype interface fooaction extend baseaction type foo number interface baraction extend baseaction type bar string
[2015-08-06T06:13:57.224Z]	<DanielRosenwasser>	and -pron- add a little helper function that return a type predicate when give the right overload typescript function baseaction type action be string function baseaction type action be boolean function baseaction type actiontype boolean return type this  <user> give an error until be fix but the rest of -pron- program  <user> have desire behavior
[2015-08-06T06:14:50.293Z]	<DanielRosenwasser>	finally let amend -pron- example to use isactiontype typescript let handleaction action baseaction if let foo ok let bar -pron- get a type error d else if let bar ok
[2015-08-06T06:16:27.789Z]	<roganov>	that nice thank one more thing could -pron- please explain what do stre footag any mean
[2015-08-06T06:16:45.101Z]	<DanielRosenwasser>	make an intersection type
[2015-08-06T06:17:28.256Z]	<DanielRosenwasser>	an intersection type be a type that be simultaneously all of -pron- constituent type
[2015-08-06T06:17:50.481Z]	<DanielRosenwasser>	so a value of type a b c have member of a and b and c
[2015-08-06T06:18:49.446Z]	<DanielRosenwasser>	so stre footag any be just a string with the property footag
[2015-08-06T06:18:55.497Z]	<roganov>	ah so -pron- be a workaround make type foo and type right
[2015-08-06T06:19:00.260Z]	<DanielRosenwasser>	exactly
[2015-08-06T06:19:46.190Z]	<roganov>	thank again  <user> be watch
[2015-08-06T06:20:04.823Z]	<DanielRosenwasser>	-pron- not beautiful but -pron- kind of cool at least i think so and get the job do smile
[2015-08-06T06:21:47.797Z]	<roganov>	yeah -pron- basically emulate adts
[2015-08-06T06:23:17.502Z]	<DanielRosenwasser>	well string back enum really but i suppose -pron- could add separate field if -pron- want
[2015-08-06T06:23:40.353Z]	<DanielRosenwasser>	and actually one extra thing -pron- could do
[2015-08-06T06:25:57.900Z]	<roganov>	ideally -pron- want to not have this type property at all and rely on type in elm type action updatefield string changevisibility string
[2015-08-06T06:28:07.220Z]	<DanielRosenwasser>	-pron- could do typescript function baseaction type action be fooaction function baseaction type foo action be fooaction function baseaction type action be baraction function baseaction type bar action be baraction function baseaction type string boolean function baseaction type string boolean return type if -pron- still want to use string literal in isactiontype
--------------------------------------------------------------------------------------------------
[2015-08-06T08:36:54.795Z]	<Mig1st4ck>	hi
[2015-08-06T08:37:21.347Z]	<Mig1st4ck>	i have a object that can have any property with a define structure
[2015-08-06T08:37:40.653Z]	<Mig1st4ck>	how can use typescript to help -pron-
[2015-08-06T08:37:57.051Z]	<Mig1st4ck>	for now i have this
[2015-08-06T08:40:40.508Z]	<Mig1st4ck>	interface xpto validator key string expression viewvalue modelvalue boolean message stre the idea be to use something like var x xpto validator abc expression a any b any return false
[2015-08-06T08:58:44.842Z]	<Mig1st4ck>	find how
[2015-08-06T08:59:25.090Z]	<Mig1st4ck>	interface xpto validator here -pron- need to use bracket instead of curve key string expression viewvalue modelvalue boolean message stre the idea be to use something like var x xpto validator abc expression a any b any return false
[2015-08-06T15:36:07.014Z]	<DanielRosenwasser>	yup that a string index signature
--------------------------------------------------------------------------------------------------
[2015-08-06T23:02:11.972Z]	<wwwsevolod>	hello guy again try out official microsoft typescript plugin for sublime previously use atom but hell -pron- be so slow not plugin atom -pron- and wonder about difference the file property in can be skip so i just want to know why atom typescript be collect every file that be acceptable by fileglob and sublime plugin do not be there some benefit of track all file in tsconfig
[2015-08-06T23:03:45.425Z]	<wwwsevolod>	and how to work on project with people with this kind of difference when some of -pron- work in atom some in sublime some in visual studio currently i be only dev on that project but in few month there would be more
--------------------------------------------------------------------------------------------------
[2015-08-06T23:06:00.426Z]	<wwwsevolod>	wait for advice  <user> could someone suggest good dependency injection library everything find on google be feel not in the right way or may be i should google in bing for ts libs
--------------------------------------------------------------------------------------------------
[2015-08-07T00:06:29.800Z]	<danquirk>	do support file globbe
[2015-08-07T00:06:40.204Z]	<danquirk>	atom typescript have choose to support -pron- by mean of the fileglob property
[2015-08-07T00:07:11.305Z]	<danquirk>	which then rewrite the support file property in with the explicit set of file capture by -pron- specify globbing pattern
--------------------------------------------------------------------------------------------------
[2015-08-07T00:08:02.347Z]	<danquirk>	be the suggest way to manage a project that go to be work on from a number of different editor
[2015-08-07T00:08:21.253Z]	<danquirk>	-pron- may find -pron- easy to then just only use the official property that all editor support
[2015-08-07T00:08:48.292Z]	<danquirk>	but other may have a different well strategy for this case
--------------------------------------------------------------------------------------------------
[2015-08-07T01:45:43.324Z]	<MicahZoltu>	atom glob support be really nice and -pron- can still use -pron- while other people do
[2015-08-07T01:46:12.015Z]	<MicahZoltu>	if -pron- do use atom glob support then -pron- have to manually add every file -pron- create or add a reference to for a large project this be pretty painful
[2015-08-07T01:46:25.326Z]	<MicahZoltu>	the file globbing be one of the big reason i do move away from atom typescript
--------------------------------------------------------------------------------------------------
[2015-08-07T10:46:17.124Z]	<axefrog>	be typescript currently a full superset of babel implementation
[2015-08-07T10:48:24.614Z]	<roganov>	no
[2015-08-07T10:49:51.996Z]	<axefrog>	ah just find the blog post
--------------------------------------------------------------------------------------------------
[2015-08-07T14:17:33.522Z]	<ivogabe>	-pron- work with the compiler api and i notice that only return a value if i first call node be an elementaccessexpression or a propertyaccessexpression be that a bug or by design
--------------------------------------------------------------------------------------------------
[2015-08-07T14:26:35.713Z]	<shivinsky>	hi i have not find proposal about auto property like in c
[2015-08-07T14:34:46.448Z]	<shivinsky>	-pron- be strange a bit be not -pron-
[2015-08-07T16:22:49.335Z]	<DanielRosenwasser>	sound like a bug but -pron- file for -pron- to figure -pron- out for -pron-
[2015-08-09T04:59:25.297Z]	<LPGhatguy>	i want thing like native generator that typescript throw up on and native let which typescript babel do always generate optimally but do do thing like module or arrow function yet which i still want
[2015-08-09T05:00:02.243Z]	<LPGhatguy>	i guess i could target with ts and then run -pron- through babel with select transformer enable but that not ideal be -pron-
[2015-08-09T17:43:30.294Z]	<grofit>	anyone use bluebird with the new module syntax
[2015-08-09T17:46:12.186Z]	<grofit>	i can not for the life of -pron- get -pron- work do import as bluebird from bluebird
[2015-08-09T17:46:58.445Z]	<grofit>	then if i do -pron- tell -pron- -pron- require a generic on the promise but if i give -pron- one -pron- then blow up require bracket but i do not want to new -pron- just use the static
[2015-08-09T17:47:06.799Z]	<grofit>	would be great if anyone know a work around
[2015-08-10T10:24:14.875Z]	<ericmdantas>	would -pron- have to do -pron- like this import as promise from bluebird
[2015-08-10T11:03:11.153Z]	<grofit>	try that
[2015-08-10T11:03:18.037Z]	<grofit>	even if i do -pron- still say -pron- need a generic type
[2015-08-10T11:03:54.499Z]	<grofit>	and that be what baffle -pron- -pron- a static method i have try provide the generic on the static method the root promise blah object etc and nothing seem to satisfy the compiler
[2015-08-10T11:04:10.662Z]	<grofit>	but i know there be a few quirk with the old import syntax on file and the new import
[2015-08-10T12:27:10.611Z]	<boogunote>	how to extend interface in for example i add a new function to jquery object how to add this function in
[2015-08-10T15:55:36.292Z]	<ccapndave>	probably -pron- know already but there be a record type in immutablejs if that any help
[2015-08-10T19:04:13.911Z]	<grofit>	i wish someone would come up with a documentation system where -pron- write -pron- documentation outside of the file
[2015-08-10T19:04:41.787Z]	<grofit>	so -pron- source code could be clean and -pron- just have like a meta file which contain the documentation for the object and -pron- property
--------------------------------------------------------------------------------------------------
[2015-08-09T04:58:43.410Z]	<LPGhatguy>	be -pron- possible for typescript to target a platform somewhere between and full like
--------------------------------------------------------------------------------------------------
[2015-08-09T22:44:48.381Z]	<Gaelan>	be there support for react component with child use jsx the definitelytype
--------------------------------------------------------------------------------------------------
[2015-08-10T05:29:41.691Z]	<roganov>	how do -pron- document typescript code be there something like jsdoc but which document type
--------------------------------------------------------------------------------------------------
[2015-08-10T14:37:00.799Z]	<jgoux>	hi
[2015-08-10T14:37:25.355Z]	<jgoux>	be -pron- possible to define a n immutbale data structure close to the record in f with typescript
[2015-08-10T14:37:37.423Z]	<jgoux>	an immutable
[2015-08-10T14:37:58.146Z]	<jgoux>	i try use immutable js but i can come up with a nice syntax
[2015-08-10T15:56:38.456Z]	<jgoux>	yes but -pron- do accept generic so i do know how to define a structure like -pron- would guid body string to -pron-
[2015-08-10T16:12:55.005Z]	<donato>	what be the correct syntax to say this interface myplaylist
[2015-08-10T16:13:15.646Z]	<donato>	for a definition file to an external library
[2015-08-10T16:43:04.366Z]	<jonathandturner>	can -pron- just use jsdoc the compiler should support -pron-
[2015-08-10T16:43:28.804Z]	<jonathandturner>	-pron- should be able to put -pron- on -pron- interface and function  <user>
--------------------------------------------------------------------------------------------------
[2015-08-10T19:05:04.538Z]	<JohanLarsson>	could be an ide filter
[2015-08-10T19:05:07.866Z]	<grofit>	-pron- annoy -pron- to no end when a file be full of documentation
[2015-08-10T19:09:09.965Z]	<grofit>	anyway back to -pron- question from earlier with the import of old import syntax
[2015-08-10T19:09:29.643Z]	<grofit>	have anyone else have the issue mention above like hour ago
[2015-08-10T19:09:42.016Z]	<grofit>	i do not know how to put a link in to previous message
--------------------------------------------------------------------------------------------------
[2015-08-10T19:28:01.376Z]	<ericmdantas>	alt click the date hour to quote
[2015-08-10T19:51:02.251Z]	<roganov>	i probably could but then -pron- have to specify type in both jsdoc comment and typescript -pron- i want to avoid this duplication
[2015-08-10T20:15:20.242Z]	<grofit>	oh good to know thank
[2015-08-10T20:16:52.278Z]	<grofit>	not a clue
[2015-08-10T20:18:47.687Z]	<grofit>	the only immutable i know of in js be the primative
[2015-08-10T20:19:53.291Z]	<jgoux>	i hope -pron-  <user> be part of ts in the future
[2015-08-10T20:21:19.997Z]	<grofit>	yeah and that s the problem
[2015-08-10T20:23:19.345Z]	<jgoux>	and the same language on both side
[2015-08-10T20:23:54.501Z]	<grofit>	oh yeah i agree ts for -pron- be one of the good language
[2015-08-10T20:24:19.079Z]	<grofit>	but that do not happen
[2015-08-11T14:27:58.427Z]	<jgoux>	require seem the way to go
--------------------------------------------------------------------------------------------------
[2015-08-10T20:16:23.580Z]	<jgoux>	so anyone have an idea of how to create a record like immutable datum structure like in f with ts
[2015-08-10T20:18:57.257Z]	<grofit>	everything else -pron- could make into a pretend immutable
[2015-08-10T20:19:10.459Z]	<grofit>	but -pron- not like -pron- have the notion of struct
[2015-08-10T20:20:11.328Z]	<grofit>	i do not know how ts can express -pron- as really -pron- js which need to support -pron-
[2015-08-10T20:20:17.154Z]	<grofit>	if js support -pron- ts can
[2015-08-10T20:20:32.449Z]	<grofit>	-pron- may be able to do something like that via or one of the other low level libs
[2015-08-10T20:20:39.014Z]	<jgoux>	of course but this  <user> be in a far future i think if -pron- come to js
[2015-08-10T20:21:10.979Z]	<jgoux>	i look at the funscript project but -pron- seem a bit inactive
[2015-08-10T20:21:23.841Z]	<grofit>	ts just compile to js
[2015-08-10T20:21:30.060Z]	<grofit>	so if js do not support -pron- -pron- will not see -pron-
[2015-08-10T20:21:38.144Z]	<grofit>	ts be mainly syntactical sugar
[2015-08-10T20:22:49.104Z]	<jgoux>	-pron- -pron- good option right now be able to benefit from the npm ecosystem a type langage
[2015-08-10T20:24:08.154Z]	<grofit>	but unfortunately -pron- be still constrain by js
[2015-08-10T20:24:12.576Z]	<jgoux>	i try purescript but i do like the tooling
[2015-08-10T20:24:16.636Z]	<grofit>	i be hope google dart would have kinda supercede js
[2015-08-10T20:25:04.220Z]	<grofit>	i like the direction js be take but -pron- like java with legacy constraint and issue which make -pron- difficult to do anything great with
[2015-08-10T20:25:04.415Z]	<jgoux>	i begin ts today hopefully the introduce a lot of syntax so i be so lost
[2015-08-10T20:25:22.539Z]	<grofit>	whereas c basically be not shackle by the legacy stuff and within like year be soooo feature rich
--------------------------------------------------------------------------------------------------
[2015-08-11T06:13:17.562Z]	<gastrodia>	hi guy i write a class extend from parent but -pron- when compile tsc throw error
[2015-08-11T06:15:31.055Z]	<gastrodia>	microsoft thumb microsoft blob
[2015-08-11T06:16:27.685Z]	<gastrodia>	microsoft thumb microsoft blob
[2015-08-11T06:53:43.434Z]	<grofit>	can -pron- mix the new module loading syntax with the old import syntax
[2015-08-11T06:54:28.407Z]	<grofit>	as i be basically block on a project as i can not use a descriptor which use the export blah within the module without do a coercion dance and that then mean i can not use static method without -pron- blow up
[2015-08-11T06:55:15.782Z]	<grofit>	so if i be to import that use the old syntax and have other thing be import with the syntax would -pron- still compile fine for each module type system common amd umd etc
[2015-08-11T07:14:51.791Z]	<jgoux>	be -pron- possible to define a type with contain a require key and then only optional value
[2015-08-11T07:15:07.002Z]	<jgoux>	like type string option
[2015-08-11T07:15:18.323Z]	<jgoux>	which contain
[2015-08-11T07:15:21.775Z]	<jgoux>	sorry xd
[2015-08-11T07:22:50.430Z]	<jgoux>	the only solution i find be to use a wrapper object type string payload any
[2015-08-11T07:22:58.454Z]	<jgoux>	but i would prefer to avoid -pron-
[2015-08-11T07:24:37.290Z]	<jgoux>	would be nice if -pron- could define an interface with the spread operator like type string remain any
[2015-08-11T14:08:47.571Z]	<grofit>	quick query about compile as module
[2015-08-11T14:08:59.897Z]	<grofit>	so let say i have a large project like ts file
[2015-08-11T14:09:25.140Z]	<grofit>	and i compile -pron- all as a commonjs module or other module do not really matter the type
[2015-08-11T14:09:37.733Z]	<grofit>	so now i have js file
[2015-08-11T14:10:18.621Z]	<grofit>	now that that be fine for nodejs but let say i want to use -pron- within the browser what be the good practice round take these file and turn -pron- into a minify version for usage on a website
[2015-08-11T14:11:15.693Z]	<grofit>	as the problem i can forsee be that all file  <user> be link to each other be -pron- through other file call or through some other module inclusion notion
[2015-08-11T14:29:27.386Z]	<grofit>	i have bundle -pron- into a single
--------------------------------------------------------------------------------------------------
[2015-08-11T14:28:29.333Z]	<grofit>	require just include a file when i have file which be all seeded from the initial one that would cause http request
[2015-08-11T14:28:29.911Z]	<jgoux>	-pron- have a compile option to make a single file out of the compilation
[2015-08-11T14:28:35.657Z]	<grofit>	oh right ok
[2015-08-11T14:28:40.993Z]	<grofit>	well browserify do stuff like this
[2015-08-11T14:29:02.255Z]	<grofit>	but -pron- follow up question be go to be
[2015-08-11T14:29:11.632Z]	<grofit>	now let say this lib let call -pron- projone
[2015-08-11T14:29:47.665Z]	<grofit>	now let say i have projtwo and projthree depend upon this one
[2015-08-11T14:30:00.228Z]	<grofit>	then projfour depend upon projtwo and projthree
[2015-08-11T14:30:22.037Z]	<grofit>	assume i want to bundle minify projtwo and projthree would projfour end up with copy of projone
[2015-08-11T14:31:07.166Z]	<jgoux>	-pron- pretty sure -pron- have option about that in browserify or webpack let -pron- check this
[2015-08-11T14:31:45.922Z]	<jgoux>	the option in browserify should do the trick
[2015-08-11T14:32:01.918Z]	<grofit>	i would love to know more about that although now i think about -pron- maybe i do not need to bundle minify at this level and just do -pron- at the end app level
[2015-08-11T14:32:06.225Z]	<jgoux>	-pron- be there too lol
[2015-08-11T14:32:43.044Z]	<grofit>	currently -pron- project just do manual minification and munge together without modules
[2015-08-11T14:33:15.905Z]	<grofit>	so i be just look at the good way to turn the module into proper module go forward
[2015-08-11T14:33:19.975Z]	<grofit>	thank for the advice
[2015-08-11T14:44:31.522Z]	<jgoux>	can i use instanceof on interface
[2015-08-11T14:44:40.297Z]	<jgoux>	i do seem to work
[2015-08-11T14:45:42.349Z]	<jgoux>	i pass a union type as -pron- function parameter and i want to check a specific type within the union type
--------------------------------------------------------------------------------------------------
[2015-08-11T14:46:03.375Z]	<roganov>	-pron- can
[2015-08-11T14:46:10.668Z]	<jgoux>
--------------------------------------------------------------------------------------------------
[2015-08-11T14:47:50.262Z]	<cmichaelgraham>	type evaporate during compile
[2015-08-11T14:48:00.502Z]	<jgoux>	what be the prefered approach to mimic f match x with block structure
[2015-08-11T14:48:35.303Z]	<roganov>	in future -pron-  <user> be hopefully able to add stre tag to -pron- interface and switch on -pron-
[2015-08-11T14:49:02.678Z]	<jgoux>	wow nice d
[2015-08-11T14:49:28.905Z]	<jgoux>	but right now apart from addind a type key in -pron- object do i have another solution
[2015-08-11T14:49:33.183Z]	<jgoux>	add
[2015-08-11T14:50:46.200Z]	<roganov>	yep class
[2015-08-11T14:52:13.215Z]	<jgoux>	i want to avoid -pron- to try a functional approach
[2015-08-11T14:52:28.249Z]	<jgoux>	but if -pron- the only solution
[2015-08-11T14:54:12.589Z]	<jgoux>	be there a milestone for the singleton type feature
[2015-08-11T14:55:20.337Z]	<roganov>	have no idea
[2015-08-11T14:56:15.694Z]	<roganov>	-pron- should  <user> probably read this comment
[2015-08-11T15:00:10.181Z]	<jgoux>	neat solution but -pron- involve a lot of boilerplate
--------------------------------------------------------------------------------------------------
[2015-08-12T08:51:30.523Z]	<Fincodr>	hi all what be the good tool to generate documentation from typescript code
[2015-08-12T10:20:07.372Z]	<grofit>	when -pron- use the new style module import syntax where do -pron- look for module
[2015-08-12T10:20:19.662Z]	<grofit>	if i do import ko from knockout
[2015-08-12T10:20:29.582Z]	<grofit>	where be -pron- look for knockout
[2015-08-12T10:20:43.467Z]	<grofit>	sorry that should be in the above
[2015-08-12T10:20:54.026Z]	<grofit>	but do not really alter the question
[2015-08-12T10:23:39.699Z]	<grofit>	as i get tell error can not find module knockout
[2015-08-12T10:24:15.233Z]	<grofit>	but i assume -pron- ignore and expect to have a knockout module expose in a somewhere
[2015-08-12T10:46:43.150Z]	<grofit>	after read some other post in the github issue on the subject i be confused
[2015-08-12T10:48:57.437Z]	<grofit>	as i assume i could just use all exist commonjs style module use the import syntax and in some case i just have to use import as type from module
[2015-08-12T10:49:20.735Z]	<grofit>	but -pron- appear that be only half the story and the file have to support some default notion
[2015-08-12T10:51:22.572Z]	<grofit>	i expect that import ko from knockout when build for commonjs in tsc would output var ko
[2015-08-12T10:51:24.757Z]	<grofit>	however -pron- do not
[2015-08-12T11:19:43.202Z]	<grofit>	and in the case when -pron- do -pron- turn the usage into
[2015-08-12T14:30:08.745Z]	<donato>	i like typedoc for generate documentation
[2015-08-12T21:25:12.631Z]	<grofit>	now if the for that module point to the index file
[2015-08-12T21:25:34.372Z]	<grofit>	and in another project i then do npm install -pron- module
[2015-08-12T21:26:06.381Z]	<grofit>	when i do import from -pron- module
[2015-08-12T21:26:24.132Z]	<grofit>	-pron- do not seem to understand what -pron- module reference
[2015-08-12T21:27:07.383Z]	<grofit>	as i know the old style export would do something like declare module foo export bar
[2015-08-12T21:27:20.737Z]	<grofit>	so if -pron- be to try and reference foo -pron- would know -pron- mean this module
[2015-08-12T21:27:31.790Z]	<grofit>	but in -pron- scenario above there be no module in the descriptor
[2015-08-12T21:28:09.351Z]	<grofit>	so be i mean to wrap the re export in a module or be there some other way to do -pron-
[2015-08-12T21:28:16.970Z]	<grofit>	as i be unsure how to good export and import -pron- use syntax
[2015-08-13T01:05:37.842Z]	<MicahZoltu>	-pron- need to tell the typescript compiler about the module
[2015-08-13T01:06:19.493Z]	<MicahZoltu>	-pron- of the opinion that the good way to do this be via the file though -pron- can  <user> pass -pron- in on the command line or via some other tooling gulp typescript
[2015-08-13T07:46:44.330Z]	<grofit>	or at least make some freakish post processing build script to convert the file
[2015-08-13T08:20:04.999Z]	<grofit>
--------------------------------------------------------------------------------------------------
[2015-08-12T15:29:16.680Z]	<cbornhoft>	nice avatar  <user> smile
[2015-08-12T15:29:45.146Z]	<cbornhoft>	anyone have a couple minute to help -pron- with a quick issue on compilation with backbone
[2015-08-12T15:31:56.000Z]	<cbornhoft>	for the line export class todoview extend todoitem -pron- get the error class todoview incorrectly extend base class view todoitem
[2015-08-12T15:32:24.467Z]	<cbornhoft>	todoitem be an extension of so -pron- not sure how -pron- extend -pron- incorrectly
--------------------------------------------------------------------------------------------------
[2015-08-12T21:24:44.423Z]	<grofit>	if i have a module which have like file and each one start with export class then i make an which basically re export -pron- all export from file name
[2015-08-12T21:26:45.050Z]	<grofit>	so do i need to do anything else
--------------------------------------------------------------------------------------------------
[2015-08-13T06:33:35.872Z]	<grofit>	i do use gulp typescript i do not use the tsconfig file though as i output to multiple target
[2015-08-13T06:34:13.605Z]	<grofit>	but that aside what be the syntax for export stuff as a module i assume i just need to wrap -pron- re export
[2015-08-13T06:34:23.661Z]	<grofit>	not each file
[2015-08-13T06:39:13.755Z]	<grofit>	as the typescript documentation and blog always reference the import file via relative path
[2015-08-13T06:40:05.549Z]	<grofit>	which be fine for local stuff but once the package go up to npm and -pron- should no longer be use relative path -pron- kinda fall apart and i can see no doc on that issue
[2015-08-13T07:44:53.971Z]	<grofit>	amazing
[2015-08-13T07:45:12.271Z]	<grofit>	turn out -pron- can not do module blah outside of a file
[2015-08-13T07:45:48.595Z]	<grofit>	so there go the idea of -pron- create the module wrap dynamically
[2015-08-13T07:46:23.318Z]	<grofit>	-pron- like -pron- be try -pron- hard to make -pron- manually append that module stuff in there
--------------------------------------------------------------------------------------------------
[2015-08-13T07:03:02.989Z]	<grofit>	i have look at other ts libs that use the new syntax and -pron- seem -pron- still wrap all the final re export in a declare module i be hope that the syntax do away with need -pron- explicitly but i guess typescript have no notion of the file so i guess -pron- would not know about the module name any other way
--------------------------------------------------------------------------------------------------
[2015-08-13T08:20:04.195Z]	<grofit>	put a post on so hopefully someone can assist
--------------------------------------------------------------------------------------------------
[2015-08-13T13:46:00.687Z]	<grofit>	still no taker
--------------------------------------------------------------------------------------------------
[2015-08-14T09:51:06.312Z]	<hschmidt99>	hello everyone
[2015-08-14T09:51:37.517Z]	<hschmidt99>	-pron- migrate a knockout project of -pron- to typescript and i need some guidance for a problem
[2015-08-14T09:54:00.126Z]	<hschmidt99>	var getlocalestring string return class localization locale knockoutobservable any localestring knockoutcompute string this
[2015-08-14T09:55:56.117Z]	<hschmidt99>	the this reference in getlocalestring get translate to this but this at that time be an empty object and -pron- really need a referenc to this
[2015-08-14T09:57:46.039Z]	<hschmidt99>	-pron- already discover that convert the arrow function to normal function declaration  <user> keep the this context but do that really mean that i can never use arrow function for computed
[2015-08-14T10:25:31.227Z]	<grofit>	another knockout person
[2015-08-14T10:25:32.828Z]	<grofit>	ahoy sir
[2015-08-14T10:25:33.724Z]	<grofit>	ahoy
[2015-08-14T10:25:57.242Z]	<grofit>	-pron- can use the arrow function for computed
[2015-08-14T10:26:32.833Z]	<grofit>	return somevar
[2015-08-14T10:26:53.636Z]	<grofit>	-pron- do not need to pass in the this argument after the function -pron- optional
[2015-08-14T10:27:07.186Z]	<grofit>	and  <user> -pron- generally do not need to be explicit with -pron- type
[2015-08-14T10:27:33.749Z]	<grofit>	locale  <user> tell -pron- -pron- mean locale knockoutobservable any for free
[2015-08-14T10:27:54.125Z]	<grofit>	well i know -pron- do for type one like string
[2015-08-14T10:28:00.448Z]	<grofit>	but i would assume the any work as well
[2015-08-14T10:31:18.737Z]	<hschmidt99>	hello  <user> and thank for -pron- reply be i right that i still have no access to observable define in the this context within arrow function
[2015-08-14T10:32:28.903Z]	<grofit>	the arrow let this be the class instance
[2015-08-14T10:33:27.223Z]	<grofit>	the arrow behind the scene basically do var yourfunction var this this var yourfunction function
[2015-08-14T10:33:47.100Z]	<grofit>	so -pron- can access the other class member within the arrow function
[2015-08-14T10:33:54.225Z]	<grofit>	i mean -pron- can access -pron- without -pron- in some case
[2015-08-14T10:34:17.470Z]	<grofit>	-pron- just -pron- explicitly tell -pron- with the arrow function to use the contain scope not the passed scope
[2015-08-14T10:34:53.813Z]	<hschmidt99>	right i can see that from the transpiled output but i seem to run into an order problem within the constructor as soon as i hit the computed declaration -pron- query which be undefined while already exist
[2015-08-14T10:35:50.087Z]	<hschmidt99>	the code be quite big at the moment -pron- try to strip -pron- down to basic problem and upload -pron- to pastebin
[2015-08-14T10:47:39.011Z]	<hschmidt99>
[2015-08-14T10:48:43.118Z]	<hschmidt99>	if i change line to var getlocalestring function string the transpiler will touch the this within the function context and everything work as expect
[2015-08-14T10:50:23.386Z]	<grofit>	thing
[2015-08-14T10:50:45.422Z]	<grofit>	the ifrst method be not within the scope of the class
[2015-08-14T10:50:55.702Z]	<grofit>	so this in that context literally have no container to be this for
[2015-08-14T10:51:12.946Z]	<grofit>	the arrow function be mean to be use to imply the scope of the container so global method have no container scope
[2015-08-14T10:51:28.864Z]	<grofit>	so -pron- option be either stop -pron- be an arrow function
[2015-08-14T10:51:35.838Z]	<grofit>	and then -pron-  <user> take this from wherever
[2015-08-14T10:51:41.286Z]	<grofit>	or move -pron- inside -pron- class
[2015-08-14T10:51:50.183Z]	<grofit>	and just set -pron- as private if -pron- do not want -pron- to be expose
[2015-08-14T10:52:46.007Z]	<hschmidt99>	ok just gimme a sec try -pron- as a private instance method
[2015-08-14T10:57:47.001Z]	<hschmidt99>	that appear to work but since -pron- pretty new to typescript allow -pron- the question even if declare the method as private in typescript in the transpiled javascript output that function now be a normal public method on -pron- localization class right
[2015-08-14T11:00:55.974Z]	<grofit>	i be not sure how -pron- deal with -pron- these day
[2015-08-14T11:01:01.552Z]	<hschmidt99>	ok find the answer on google in the meantime
[2015-08-14T11:01:03.639Z]	<grofit>	i be sure at one point -pron- be private
[2015-08-14T11:01:26.390Z]	<grofit>	as function yourclass var thisisprivate
[2015-08-14T11:02:53.920Z]	<hschmidt99>	unfortunately that not what the current output from the transpiler suggest
[2015-08-14T11:03:17.329Z]	<grofit>
[2015-08-14T11:03:27.425Z]	<grofit>	in most case i would not worry about -pron-
[2015-08-14T11:03:27.725Z]	<hschmidt99>	private function be bind to the protoype and expose to every client
[2015-08-14T11:03:55.393Z]	<grofit>	even if -pron- be to call js function manually through the browser -pron- should only mess up -pron- page
[2015-08-14T11:04:13.856Z]	<grofit>	-pron- not like -pron- go to delete record from backend etc
[2015-08-14T11:04:43.685Z]	<grofit>	but raise -pron- as an issue if -pron- want i think that -pron- be make private var privatevar in class if -pron- be not there must be a very good reason
[2015-08-14T11:05:02.386Z]	<hschmidt99>	i find -pron- clutter the console when debug whereas i enter localestre in chromes console -pron- autocomplete to the compute i now accidentally hit the function
[2015-08-14T11:05:31.615Z]	<hschmidt99>	-pron- probably next to irrelevant for the end user but -pron- still irk -pron-
[2015-08-14T11:06:34.881Z]	<hschmidt99>	oh and a quick search show -pron- there be issue concern real private function and -pron- be all shoot down
[2015-08-14T11:15:51.699Z]	<grofit>	oh well
[2015-08-14T11:18:15.508Z]	<grofit>	as -pron- seem impossible to use module syntax and use the definition anywhere
--------------------------------------------------------------------------------------------------
[2015-08-14T11:02:03.605Z]	<grofit>	so -pron- do have the notion of private and public even if -pron- be not the same as normal oo private and public
--------------------------------------------------------------------------------------------------
[2015-08-14T11:16:09.573Z]	<grofit>	anyone here able to tell -pron- the correct way to build definition for module use syntax yet
--------------------------------------------------------------------------------------------------
[2015-08-14T12:26:59.655Z]	<ivogabe>	question about the api be there an export method that return the output filename of a source file -pron- should follow the option outdir rootdir of course
--------------------------------------------------------------------------------------------------
[2015-08-14T15:03:38.546Z]	<GeertVL>	can some one help -pron- with an example of how to use signalr correctly with typescript and the definitelytype library for signalr
[2015-08-14T18:34:51.261Z]	<DanielRosenwasser>	the big problem be default style import syntax be different between the two
[2015-08-14T18:35:14.745Z]	<DanielRosenwasser>	but -pron- should be able to do a namespace import and a selective import
[2015-08-14T18:36:11.362Z]	<DanielRosenwasser>	do have a lot of experience with -pron- but maybe this would help
[2015-08-14T18:36:35.135Z]	<DanielRosenwasser>	let -pron- check with on that one
[2015-08-14T18:51:15.750Z]	<DanielRosenwasser>	-pron- do have anything public but -pron- have getownemitoutputfilepath
[2015-08-14T20:47:12.030Z]	<DanielRosenwasser>	but one second
--------------------------------------------------------------------------------------------------
[2015-08-14T20:21:25.479Z]	<wwwsevolod>	hello guy wonder be there some generic magic to do something like this class someclass field someinterface returnssomeinterface fieldfunction or more complex example class someclass field hashmapofsomeinterface hashmapoffunctionsthatreturnshashmapofsomeinterface key return accum hashmapofsomeinterface ofc with as much type inference as possible be something of this be possible thank -pron-
[2015-08-14T20:29:11.280Z]	<wwwsevolod>	example of usage var a new return moretest return here compiler must say that test be number provide autocomplete of this field and moretest field too
[2015-08-14T20:33:51.741Z]	<ivogabe>	could that method be export -pron- not a fan of just copy the whole function source to -pron- project
[2015-08-14T20:35:22.047Z]	<DanielRosenwasser>	check out
[2015-08-14T20:46:41.256Z]	<DanielRosenwasser>	i think -pron- want to be able to extend a generic parameter
[2015-08-14T20:47:42.954Z]	<DanielRosenwasser>	implement
[2015-08-14T20:49:48.049Z]	<wwwsevolod>	mm
[2015-08-14T20:50:50.532Z]	<ivogabe>	thank
[2015-08-14T20:52:47.344Z]	<wwwsevolod>	i find that i can make generic parameter that would map to return type of pass function but can create type definition that would map to hashmap of return value of hashmap of functions
[2015-08-14T20:53:45.835Z]	<wwwsevolod>	at least i can key string returnvalue but i want autocomplete and typesafety on generate result
[2015-08-14T20:56:16.483Z]	<DanielRosenwasser>	typescript interface sometype interface mixedconstructor class new t class t var someclass mixedconstructor sometype class someclass propertyname string any for let propname in property var mixedinstance new someclass hello world stre number
[2015-08-14T20:57:05.472Z]	<DanielRosenwasser>	and -pron- can fudge that a little bit more if -pron- need though -pron- be still limit in some way
[2015-08-14T20:57:50.197Z]	<DanielRosenwasser>	and indeed -pron- example work too
[2015-08-14T20:58:01.735Z]	<DanielRosenwasser>	but this require
[2015-08-14T20:58:33.372Z]	<DanielRosenwasser>	-pron- can try -pron- out with shell npm install
[2015-08-14T20:58:35.585Z]	<wwwsevolod>	i have already bcz react
[2015-08-14T20:58:41.457Z]	<wwwsevolod>	hm
[2015-08-14T20:58:55.277Z]	<DanielRosenwasser>	awesome
[2015-08-14T20:59:05.590Z]	<DanielRosenwasser>	yeah sometype here be -pron- instance side
[2015-08-14T20:59:15.704Z]	<wwwsevolod>	so
[2015-08-14T20:59:31.639Z]	<DanielRosenwasser>	if -pron- need static -pron- can play around with some type alias
[2015-08-14T21:00:37.725Z]	<wwwsevolod>	can -pron- show example with function return value please like var mixedinstance new someclass hello return hello world return string number
[2015-08-14T21:01:53.293Z]	<wwwsevolod>	but this t class t thing be already awesome thank -pron-
[2015-08-14T21:03:27.218Z]	<DanielRosenwasser>	the same example -pron- give seem to work with the exist code
[2015-08-14T21:03:33.430Z]	<DanielRosenwasser>	microsoft typescript thumb microsoft typescript blob
[2015-08-14T21:04:04.709Z]	<wwwsevolod>	no i mean not dynamic method but result of -pron- map to property
[2015-08-14T21:04:54.549Z]	<DanielRosenwasser>	-pron- mean like if -pron- want to constrain all -pron- function to return the same type
[2015-08-14T21:05:05.740Z]	<wwwsevolod>	no
[2015-08-14T21:05:50.399Z]	<DanielRosenwasser>	then sorry -pron- not clear on what -pron- ask but -pron- still like to help if i can
[2015-08-14T21:05:55.014Z]	<wwwsevolod>	sec
[2015-08-14T21:09:09.826Z]	<wwwsevolod>	say i have object like this var mapofmethod test return and i want some or whatever that accept -pron- iterate over all key execute function on every key and save -pron- to new object for key that be on function like function return key return accum var result number value and type that be return from function
[2015-08-14T21:11:20.506Z]	<DanielRosenwasser>	oh -pron- perform a copy
[2015-08-14T21:12:19.190Z]	<DanielRosenwasser>	typescript function makeresult t t return t key return accum
[2015-08-14T21:13:17.670Z]	<DanielRosenwasser>	sorry edit to include the type assertion to t
[2015-08-14T21:14:35.691Z]	<wwwsevolod>	not copy copying structure but value not function result of that function
[2015-08-14T21:14:59.808Z]	<wwwsevolod>	sorry forget about
[2015-08-14T21:15:08.990Z]	<wwwsevolod>	edit -pron- example
[2015-08-14T21:15:32.634Z]	<DanielRosenwasser>	okay gotcha
[2015-08-14T21:19:12.543Z]	<wwwsevolod>	atm i think from what i see -pron- be not possible in ts type system but may be do know hope something and there way to make -pron- work without write interface for every case where i use this weird thing
--------------------------------------------------------------------------------------------------
[2015-08-14T21:19:53.976Z]	<DanielRosenwasser>	yeah i would honestly like some of the type operator from flow in -pron- language i could imagine a resulttype
[2015-08-14T21:19:59.616Z]	<DanielRosenwasser>	see
[2015-08-14T21:23:00.710Z]	<wwwsevolod>	i understand sorry for make misunderstood statement here
--------------------------------------------------------------------------------------------------
[2015-08-14T21:21:04.094Z]	<wwwsevolod>	-pron- be so sad that flow be not ready enough for -pron- for example window support i be in team of three dev only not on window but flow atm not work on window lold
--------------------------------------------------------------------------------------------------
[2015-08-14T21:22:04.159Z]	<DanielRosenwasser>	oh by all mean -pron- not say use flow -pron- just say -pron- like for -pron- to have something like a resulttype
[2015-08-14T21:22:42.188Z]	<DanielRosenwasser>	-pron- should be make -pron- easy to express common javascript pattern
[2015-08-14T21:23:13.468Z]	<DanielRosenwasser>	no worry smiley
[2015-08-14T21:23:21.435Z]	<wwwsevolod>	be there hope that -pron- would be soon available in ts
[2015-08-14T21:24:22.431Z]	<wwwsevolod>	and when to expect to be release this year next as i see many feature of be do before release
[2015-08-14T21:24:25.982Z]	<DanielRosenwasser>	i do necessarily foresee -pron- in though if someone be willing to write a thorough proposal that may help
[2015-08-14T21:24:46.818Z]	<DanielRosenwasser>	 <user> be out decently soon actually
[2015-08-14T21:25:33.930Z]	<DanielRosenwasser>	i anticipate within the next month if thing go smoothly but no promise
[2015-08-14T21:26:07.194Z]	<wwwsevolod>	-pron- project rewrite of silverlight app in would be release like in december so good to hear -pron-
[2015-08-14T21:26:51.468Z]	<wwwsevolod>	thank -pron- for -pron- help -pron- think about write proposal
[2015-08-14T21:27:28.489Z]	<DanielRosenwasser>	wait actually
[2015-08-14T21:27:43.168Z]	<DanielRosenwasser>	ah nevermind
[2015-08-14T21:27:48.540Z]	<wwwsevolod>
[2015-08-14T21:28:31.709Z]	<DanielRosenwasser>	i think the good -pron- could do be a union type of all result type in -pron- object
[2015-08-14T21:29:49.490Z]	<wwwsevolod>	yeah but that s not what be require ok i will go and write interface for all case thank u once again
[2015-08-14T21:30:13.414Z]	<DanielRosenwasser>	no prob let -pron- know of any other interesting case
--------------------------------------------------------------------------------------------------
[2015-08-15T07:46:14.970Z]	<grofit>	so anyone here fancy discuss syntax and type descriptor yet as i be unable to continue with -pron- project as no hack seem to work fully
[2015-08-15T07:47:47.666Z]	<grofit>	although if -pron- be to assume i be do everything correct i be surprised no one else be jump up and down about this
[2015-08-15T07:48:25.784Z]	<LPGhatguy>	what sort of issue be -pron- run into
[2015-08-15T07:48:40.670Z]	<grofit>	good man here be a stack overflow on -pron- save -pron- retype all of -pron-
[2015-08-15T07:48:46.588Z]	<grofit>
[2015-08-15T07:48:58.571Z]	<grofit>	but long story short i have a module which use all import export syntax
[2015-08-15T07:49:12.084Z]	<grofit>	i then want to build that module for commonjs nodejs and system browser
[2015-08-15T07:49:22.986Z]	<grofit>	which run fine however when i do the descriptor file output
[2015-08-15T07:49:42.220Z]	<grofit>	-pron- generate but there be no ambient module declaration
[2015-08-15T07:50:13.702Z]	<grofit>	so when i include this module in let say another project and do import sometype from -pron- module -pron- blow up as -pron- do not know what -pron- module be
[2015-08-15T07:50:37.012Z]	<LPGhatguy>	can -pron- add a reference declaration on the consume module to point to the file
[2015-08-15T07:50:56.100Z]	<LPGhatguy>	a la reference module -pron- or something like that
[2015-08-15T07:50:59.512Z]	<grofit>	even if i do
[2015-08-15T07:51:09.498Z]	<grofit>	the module contain no declare module -pron- module
[2015-08-15T07:52:12.607Z]	<grofit>	even if i manually create a module as mention in one of the comment on so declare module -pron- module export from
[2015-08-15T07:53:07.663Z]	<grofit>	webstorm seem happy enough with that but when i try to build the next lib use tsc which be dependent upon -pron- module -pron- blow up as -pron- can not generate the descriptor as -pron- can not find -pron- module even though -pron- be provide to -pron-
[2015-08-15T07:53:26.090Z]	<grofit>	so basically i be wonder what be the correct use case for share module definition file when use syntax
[2015-08-15T07:53:46.846Z]	<LPGhatguy>	i think package ts consumable module be still kind of messy right now
[2015-08-15T07:53:53.306Z]	<grofit>	as the reference stuff be a nightmare and a step backwards the import mymodule module still suffer from same issue
[2015-08-15T07:54:22.622Z]	<grofit>	well this be the thing if there be no use case for module definition file that work
[2015-08-15T07:54:31.145Z]	<grofit>	why be i the only person jump up and down about this
[2015-08-15T07:54:45.188Z]	<grofit>	and why be there no mention of this anywhere
[2015-08-15T07:54:51.692Z]	<grofit>	-pron- make -pron- think i be miss some crucial detail
[2015-08-15T07:54:56.082Z]	<grofit>	but for the life of -pron- i can not find -pron-
[2015-08-15T07:55:07.432Z]	<LPGhatguy>	right now i use reference declaration with party library and -pron- definition from definitelytype
[2015-08-15T07:55:17.626Z]	<LPGhatguy>	but -pron- be curious to know how -pron- suppose to do that in a typescript friendly way
[2015-08-15T07:56:19.624Z]	<grofit>	i give up reference year ago
[2015-08-15T07:56:41.987Z]	<grofit>	i just find -pron- overly fiddly to work with
[2015-08-15T07:56:55.467Z]	<grofit>	so i often just use to just munge everything together and ignore the reference
[2015-08-15T07:57:01.521Z]	<grofit>	which work and -pron- what i have do to date
[2015-08-15T07:57:57.063Z]	<grofit>	but i do like the syntax and -pron- make everything seem to fit together better as -pron- make sense as a streamlined system so no more import a or reference stuff or crazy output hack -pron- can just use
[2015-08-15T07:58:08.402Z]	<grofit>	and -pron- be pretty much same as the js module system
[2015-08-15T07:58:14.589Z]	<grofit>	so -pron- a common thing no more unique ts hack
[2015-08-15T07:58:17.511Z]	<grofit>	but -pron- just do not work
[2015-08-15T07:58:18.710Z]	<grofit>
[2015-08-15T07:58:22.519Z]	<grofit>	well for definition file anyway
[2015-08-15T07:58:57.099Z]	<LPGhatguy>	well use reference tag and import export still work at least
[2015-08-15T07:59:07.692Z]	<LPGhatguy>	dunno about one or the other but that something
[2015-08-15T07:59:16.897Z]	<grofit>	problem be there -pron- be have to do twice the work
[2015-08-15T08:00:00.334Z]	<LPGhatguy>	can -pron- just set -pron- main field in -pron- -pron- module to point to the ts file
[2015-08-15T08:00:05.764Z]	<LPGhatguy>	do that even make sense
[2015-08-15T08:00:27.726Z]	<grofit>	as not only with typescript do export class myclassname give -pron- code a dependency on myclassname but if -pron- use reference class name -pron- now have a file path dependency on consumer then if -pron- be to  <user> have import myclassname from -pron- class name that s file location dependency and class name dependency
[2015-08-15T08:00:41.528Z]	<grofit>	well ts ignore
[2015-08-15T08:00:50.993Z]	<LPGhatguy>	then use export default class instead
[2015-08-15T08:00:55.199Z]	<grofit>	-pron- have no notion of -pron- which be part of the reason i think that be fine as a whole but definition file be just confused
[2015-08-15T08:01:04.825Z]	<LPGhatguy>	then -pron- just use import myclassname from -pron- class name where myclassname be whatever -pron- want
[2015-08-15T08:01:11.982Z]	<grofit>	but that would only export a single class right
[2015-08-15T08:01:17.043Z]	<grofit>	and even so how do i import -pron-
[2015-08-15T08:01:30.685Z]	<LPGhatguy>	-pron- would export a single class per file which be usually fine
[2015-08-15T08:01:33.977Z]	<grofit>	-pron- class name as a from argument need to be a relative path or a module name
[2015-08-15T08:01:44.390Z]	<grofit>	yeah i use a single class per file but i have like file per module
[2015-08-15T08:02:00.010Z]	<LPGhatguy>	-pron- could be -pron- module -pron- would be fine
--------------------------------------------------------------------------------------------------
[2015-08-15T08:02:19.630Z]	<grofit>	but again -pron- module do not exist anywhere no ambient module be create
[2015-08-15T08:02:23.574Z]	<grofit>	to do that -pron- would need to do
[2015-08-15T08:02:58.898Z]	<grofit>	npm install -pron- module then import myclassfrom -pron- module -pron- class name
[2015-08-15T08:03:10.562Z]	<grofit>	that would work
[2015-08-15T08:03:24.579Z]	<grofit>	as -pron- be not include a module -pron- be include a file
[2015-08-15T08:04:25.913Z]	<grofit>	well -pron- still see -pron- as a module but -pron- not use a prefixed ambient module -pron- like with nodejs stuff if -pron- be to do module look in for -pron- but module look in the relative path for -pron-
[2015-08-15T08:04:38.232Z]	<grofit>	and -pron- have this same notion with the syntax for import
[2015-08-15T08:04:59.400Z]	<grofit>	but the definition file seem to have no way to support the former case only the latter
[2015-08-15T09:37:46.863Z]	<LPGhatguy>	in chrome -pron- get throw as uncaught typeerror invalid anonymous module load if load a single module ensure anonymous be load via if load a bundle ensure all the call be name
--------------------------------------------------------------------------------------------------
[2015-08-15T08:08:44.795Z]	<grofit>	i just do not know what else i can do but sit in here and hope that someone know a solution
[2015-08-15T09:36:39.563Z]	<LPGhatguy>	should i be get error compile ts with module type system and concatenate to a single file
[2015-08-15T09:36:53.561Z]	<LPGhatguy>	that is runtime error
--------------------------------------------------------------------------------------------------
[2015-08-15T09:52:49.697Z]	<LPGhatguy>	typescript systemjs exporter be give the module name export
--------------------------------------------------------------------------------------------------
[2015-08-15T10:06:35.891Z]	<grofit>	i could not get systemjs work
[2015-08-15T10:06:57.624Z]	<grofit>	-pron- would export but like -pron- say the importing of -pron- just break for -pron- with jspm
[2015-08-15T10:09:08.608Z]	<LPGhatguy>	i give up on jspm since the api do feel like -pron- design to be use in exist build system
[2015-08-15T10:09:15.029Z]	<LPGhatguy>	-pron- move back to browserify i guess
[2015-08-15T10:10:23.524Z]	<LPGhatguy>	browserify really be bad but -pron- prefer to use systemjs but get typescript gulp and systemjs jspm to all work together be a nightmare
[2015-08-15T10:11:41.575Z]	<grofit>	i find -pron- all fine -pron- just browserify be just a module resolver not a loader right
[2015-08-15T10:11:54.691Z]	<grofit>	whereas jspm be both resolver and loader well i think -pron- systemjs under the hood
[2015-08-15T10:13:35.229Z]	<LPGhatguy>	browserify use commonjs under the hood and jspm use systemjs under the hood
[2015-08-15T10:14:02.637Z]	<LPGhatguy>	that all really jspm be pretty tightly couple with systemjs which be the good loader around since -pron- do commonjs amd and global import
[2015-08-15T10:14:16.096Z]	<grofit>	oh do browserify include too
[2015-08-15T10:14:18.410Z]	<grofit>	most interesting
[2015-08-15T10:14:43.713Z]	<LPGhatguy>	browserify  <user> hunt down -pron- dependency from and bundle -pron- in too
[2015-08-15T10:14:58.825Z]	<grofit>	jspm do that too
[2015-08-15T10:15:06.404Z]	<grofit>	-pron- can include from npm and bundle
[2015-08-15T10:15:10.159Z]	<grofit>	not that i do
[2015-08-15T10:15:23.087Z]	<grofit>	-pron- can  <user> include from other source and include css html file via -pron- too i think
[2015-08-15T10:15:32.635Z]	<LPGhatguy>	yeah though -pron- never find that very useful
[2015-08-15T10:15:35.439Z]	<grofit>	to be honest i like the idea of -pron- i just find -pron- very flaky
[2015-08-15T10:16:51.285Z]	<LPGhatguy>	-pron- really need to work with a streaming build api though because as be -pron- too clunky to work with from gulp and friend
[2015-08-15T10:17:09.486Z]	<LPGhatguy>	browserify kinda sorta work with gulp but -pron- a heck of a lot well than jspm on that front
[2015-08-15T10:17:48.985Z]	<grofit>	as i be hope there be a gul browserify and there be but then -pron- be unmaintaine and recommend that -pron- just use -pron- directly
[2015-08-15T10:18:12.726Z]	<LPGhatguy>	-pron- use browserify directly from gulp just fine with a couple adapter plugin vinyl source stream and vinyl buffer and -pron- pretty flawless
[2015-08-15T10:18:57.392Z]	<LPGhatguy>	that say -pron- do take -pron- like two day of work to get -pron- to work well
--------------------------------------------------------------------------------------------------
[2015-08-15T10:15:57.282Z]	<LPGhatguy>	i do think -pron- ready to replace browserify in -pron- or -pron- team workflow yet but -pron- root for -pron-
[2015-08-15T10:16:02.550Z]	<grofit>	like i would try to include a lib via jspm from github and -pron- would not work for some reason then i spend hour find out i need some custom shim thing for jquery
[2015-08-15T10:16:20.505Z]	<grofit>	yeah same i be really look forward to -pron- come out of beta
[2015-08-15T10:17:25.117Z]	<grofit>	well i look into this the other  <user> actually
[2015-08-15T10:17:52.518Z]	<grofit>	but seem a faff
--------------------------------------------------------------------------------------------------
[2015-08-15T10:18:31.665Z]	<grofit>	this why i currenty export -pron- ts to system and common so at least i can support both use case
[2015-08-15T10:18:34.593Z]	<LPGhatguy>	i mean -pron- not very gulp y but -pron- work with minimal fuss
[2015-08-15T10:18:44.641Z]	<grofit>	yeah
[2015-08-15T10:20:57.739Z]	<grofit>	-pron- so fragmented
[2015-08-15T10:21:01.971Z]	<grofit>	this be why i like stuff
[2015-08-15T10:21:17.550Z]	<grofit>	and ts be like the nice wrapper around -pron- all
--------------------------------------------------------------------------------------------------
[2015-08-15T10:19:25.184Z]	<LPGhatguy>	modern js library and tool seldom seem well documented cry
--------------------------------------------------------------------------------------------------
[2015-08-15T10:20:55.287Z]	<grofit>	this be the problem with modern js
[2015-08-15T10:21:06.702Z]	<grofit>	-pron- kinda bring everything back in line
[2015-08-15T10:21:26.850Z]	<grofit>	well when -pron- work
--------------------------------------------------------------------------------------------------
[2015-08-15T10:24:14.786Z]	<LPGhatguy>	well there  <user> which be a pretty similar workflow
[2015-08-15T10:24:41.688Z]	<grofit>	i use babel a bit with aurelia
--------------------------------------------------------------------------------------------------
[2015-08-15T10:24:45.842Z]	<grofit>	not see flow
--------------------------------------------------------------------------------------------------
[2015-08-15T11:33:46.406Z]	<LPGhatguy>	how be issue put off until be load from kind of a really big deal
--------------------------------------------------------------------------------------------------
[2015-08-15T12:12:19.710Z]	<LPGhatguy>	now -pron- be bang -pron- head against this issue for awhile too why be no one worry about this
--------------------------------------------------------------------------------------------------
[2015-08-15T13:59:13.952Z]	<wwwsevolod>	hello guy once again
[2015-08-15T14:03:59.908Z]	<wwwsevolod>	i wonder why typescript compiler do not throw compilation error on unchecked optional argument optional property on interface what would be really neat interface someinterface test number error error funciton that would throw error on compile step while i do not check error be define function someinterface function that compile correctly bcz i check that error property be define function someinterface if and similiar example to optional argument
[2015-08-15T14:54:58.824Z]	<GeertVL>	thank -pron- but i miss a more working example if somebody get a typescript example that would be very helpful
[2015-08-15T14:59:54.091Z]	<wwwsevolod>	and one hard question again reducestate statevalue changerequest statevalue return asd changerequest be there way to infer type as type of argument and return value from return value return value be type enough
[2015-08-15T15:27:08.729Z]	<GeertVL>	sorry i get the example -pron- be hide in the article thank for point -pron- in -pron- direction
[2015-08-15T18:01:55.616Z]	<wwwsevolod>	and one more question on previous question i do not find answer atm interface ifunctionthatreturn returntype argtype option argtype returntype function test returntype ifunctionthatreturn returntype argtype here i can infer type of one argument but if i want type of all argument -pron- be not work i try option argtype and leave -pron- empty but -pron- do not fix be something like this possible
[2015-08-15T18:11:12.813Z]	<wwwsevolod>	 <user> in this case i want to know save optional on argument and etc
[2015-08-15T18:35:43.365Z]	<wwwsevolod>	ah see answer on -pron- last question i think if this would be do -pron- problem would be solve
[2015-08-15T19:33:55.368Z]	<wwwsevolod>	but i hope -pron- be not this issue and i can make -pron- work -pron- be too annoying in current state
[2015-08-16T16:57:30.863Z]	<wwwsevolod>
[2015-08-16T17:13:16.499Z]	<wwwsevolod>	oh i make -pron- about function argument just use return type inferring in one place not in that place where -pron- be call hope somebody understand -pron- poor language
[2015-08-17T06:57:03.118Z]	<DanielRosenwasser>	-pron- do infer base on the return type of function
--------------------------------------------------------------------------------------------------
[2015-08-16T01:32:06.420Z]	<spencerwi>	not to beat the possibly dead horse of but be there any plan for continue work on well commonjs compatibility for default export from typescript external module the reason i ask be because while amd be largely die commonjs live on in node and -pron- get a project -pron- love to bring up to the state of the art except that -pron- be hurt commonjs api consumer in the process
[2015-08-16T03:55:56.644Z]	<LPGhatguy>	-pron- promote target of systemjs
[2015-08-16T17:06:14.349Z]	<wwwsevolod>	for example filesglob
[2015-08-17T10:21:58.721Z]	<wwwsevolod>	something like function withreturntype returntype be work
--------------------------------------------------------------------------------------------------
[2015-08-16T11:21:53.783Z]	<charlespockert>	ok be this a good place to ask this question -pron- try to use ts for a project and i have a load of file in -pron- folder how do i tell that those ts definition be to be use for intellisense i do want to include -pron- in -pron- project
[2015-08-17T07:22:01.722Z]	<charlespockert>	because i just get squigglie
--------------------------------------------------------------------------------------------------
[2015-08-16T21:31:52.723Z]	<spencerwi>	for node though -pron- seem a little roundabout to ask user to install a secondary module system
--------------------------------------------------------------------------------------------------
[2015-08-17T07:20:49.934Z]	<charlespockert>	try that but do actuall respect filesglob now
--------------------------------------------------------------------------------------------------
[2015-08-17T15:03:54.175Z]	<douglas-mason>	curious how to implement the follow in typescript class greeter john last somebody first last var greeter new greeter joe last mister
[2015-08-17T15:04:50.760Z]	<douglas-mason>	-pron- try this close but no cigar well i think -pron- close class greeter string john last string return hello first last
[2015-08-17T15:05:23.506Z]	<douglas-mason>	first and last be undefined
[2015-08-17T15:07:07.991Z]	<douglas-mason>	 <user> i get no error regard the function signature so -pron- appear to be valid just not sure how to access the destructured param
[2015-08-17T15:23:07.647Z]	<charlespockert>	mason look strange in ts do that give -pron- an empty object
[2015-08-17T15:38:45.521Z]	<douglas-mason>	yeah so that way the object -pron- be optional not just the prop so perhaps in ts that be consider -pron- do -pron- wrong
[2015-08-17T15:40:37.447Z]	<douglas-mason>	but even without the empty object assignment be this method of destructure valid in ts and if so how would i access those param
[2015-08-17T15:42:34.686Z]	<douglas-mason>	basically -pron- look at this snippet from and just try to relate -pron- to ts if -pron- make sense to do so see section
[2015-08-17T15:51:17.192Z]	<douglas-mason>	i be just try -pron- out on
--------------------------------------------------------------------------------------------------
[2015-08-17T15:49:10.520Z]	<charlespockert>	i assume -pron- be pass in an object still though be -pron- transpile
--------------------------------------------------------------------------------------------------
[2015-08-17T15:51:31.995Z]	<wwwsevolod>	class greeter john last asd return hello first second be enough
[2015-08-17T15:52:08.879Z]	<wwwsevolod>	-pron- will get type of property and type of argument structure automatically through type inference mason
[2015-08-17T15:53:02.919Z]	<douglas-mason>	ok yeah -pron- right get rid of the type fix the error thank i can say i understand why though
[2015-08-17T15:54:01.947Z]	<wwwsevolod>	bcz argument destructuring can not be type like -pron- do
[2015-08-17T15:54:15.812Z]	<douglas-mason>	ahh
[2015-08-17T15:54:21.392Z]	<wwwsevolod>	if -pron- want
[2015-08-17T15:54:47.766Z]	<wwwsevolod>	john last asd first string last
[2015-08-17T15:54:56.538Z]	<wwwsevolod>	but i prefer interface for this use case
[2015-08-17T15:55:37.556Z]	<wwwsevolod>	oh may be -pron- be wrong and -pron- can not type -pron- this way
[2015-08-17T15:55:41.299Z]	<charlespockert>	yeah -pron- interesting see the transpilation of this too if -pron- put the type in the output be a bit weird look
[2015-08-17T15:56:26.651Z]	<charlespockert>	that valid syntax
[2015-08-17T15:56:34.596Z]	<douglas-mason>	yeah that make perfect sense now
[2015-08-17T15:56:53.722Z]	<douglas-mason>	yeah that work
[2015-08-17T15:57:39.174Z]	<douglas-mason>	-pron- chalk this one up to try to just mark up the with ts syntax rather than just rewrite -pron-
[2015-08-17T15:57:47.571Z]	<douglas-mason>	thank guy
[2015-08-17T15:58:03.147Z]	<wwwsevolod>	at first write just js
[2015-08-17T15:58:22.275Z]	<wwwsevolod>	as of version ts be really close to js in syntax
[2015-08-17T15:58:48.099Z]	<wwwsevolod>	than write type for anything that think that be any
[2015-08-17T15:59:22.985Z]	<wwwsevolod>	-pron- can highlight this place by turn no implicit any in compiler configuration as i understand
[2015-08-17T16:01:55.382Z]	<douglas-mason>	ok gotcha thank -pron- i have use that option yet though i do notice -pron- be use in a project recently
--------------------------------------------------------------------------------------------------
[2015-08-17T22:01:31.258Z]	<wwwsevolod>	hello again
[2015-08-17T22:05:07.775Z]	<wwwsevolod>	any way to create private member on module in typescript i mean if i have npm package i want to generate file from typescript code when compile source but i want to say somehow to compiler not to generate typing on something hide member of class interface in public for when other programer  <user> use -pron- npm package -pron- or -pron- would not see this thing again weird question d
[2015-08-17T22:06:00.747Z]	<wwwsevolod>	if not be -pron- good enough feature to write proposal
[2015-08-17T22:49:45.708Z]	<wwwsevolod>	i see i can do -pron- by hand in result file where -pron- need to export -pron- by hand
--------------------------------------------------------------------------------------------------
[2015-08-17T23:23:01.190Z]	<DanielRosenwasser>	in a namespace module -pron- simply do add an export modifi
[2015-08-17T23:23:26.179Z]	<wwwsevolod>	yeah yeah sorry for noise
[2015-08-17T23:23:34.659Z]	<DanielRosenwasser>	in a class -pron- mark property as private this mean typescript consumer  <user> get error on use
[2015-08-17T23:24:57.851Z]	<wwwsevolod>	but in case typescript do not have final class -pron- want to hide for example protect member from outside of world but now i see -pron- be big overhead
[2015-08-17T23:28:00.976Z]	<DanielRosenwasser>	i think -pron- want something like an internal modifi
[2015-08-17T23:28:22.685Z]	<wwwsevolod>	yeah may be
[2015-08-17T23:28:26.705Z]	<DanielRosenwasser>	see for that
[2015-08-17T23:28:57.676Z]	<DanielRosenwasser>	-pron- have the compiler flag that simply omit typing from produce file
[2015-08-17T23:29:11.636Z]	<DanielRosenwasser>	but that be a workaround and i do know how long -pron- plan to support that
[2015-08-18T03:59:35.115Z]	<LPGhatguy>	would there be any possibility for compile target for typescript somewhere between and for environment like chrome which have arrow function block scoping but no module or such
[2015-08-18T08:12:33.031Z]	<DanielRosenwasser>	unfortunately there currently no way to do that
--------------------------------------------------------------------------------------------------
[2015-08-18T03:59:55.525Z]	<LPGhatguy>	one way to get around -pron- for now be to compile to and then run babel over the output with select transform disabled but that another step oof
--------------------------------------------------------------------------------------------------
[2015-08-18T17:31:06.281Z]	<BringerOD>	be anyone have issue with sourcemaps in i be unable to debug the typescript file -pron- be blank when i debug in chrome i think maybe the file be not copy over to the wwwroot folder i be use a file
[2015-08-18T20:37:29.519Z]	<mhegazy>	without module seem like a fair request would -pron- mind file an issue for -pron- -pron- be basically support with commonjs
[2015-08-19T17:51:00.603Z]	<mhegazy>	cover this issue should be fix shoretlly
[2015-08-19T17:51:30.028Z]	<mhegazy>	this be currently in the work see
[2015-08-20T00:12:04.693Z]	<sinclairzx81>	ah right i be about to try -pron- luck with a pr
[2015-08-20T00:57:45.034Z]	<MicahZoltu>	be the first step to
[2015-08-20T00:58:29.052Z]	<MicahZoltu>	-pron- just need to add to -pron- file array
[2015-08-20T00:59:43.113Z]	<sinclairzx81>	as part of tsconfig
[2015-08-20T01:00:22.003Z]	<MicahZoltu>	-pron- actually second guess -pron- here i have only do this with file in the past which declare -pron- module inside the file no auto module
[2015-08-20T01:00:51.186Z]	<sinclairzx81>	-pron- be not sure that work
[2015-08-20T01:01:02.581Z]	<MicahZoltu>	if -pron- have the above solution work and -pron- import look like import foo from foo
[2015-08-20T01:01:16.962Z]	<MicahZoltu>	-pron- less confident that what -pron- want  <user> occur with a file though
[2015-08-20T01:01:45.510Z]	<MicahZoltu>	foo ts declare module foo
[2015-08-20T01:04:37.757Z]	<sinclairzx81>	well that be the intent
[2015-08-20T01:05:58.982Z]	<sinclairzx81>	-pron- pretty impractical to have to generate quote file to import code in not without tool all over the place
[2015-08-20T01:07:50.923Z]	<MicahZoltu>	i want to say -pron- be generate automatically by tsc like that
[2015-08-20T01:07:58.140Z]	<MicahZoltu>	though -pron- have be a while so maybe i be misremember
[2015-08-20T01:08:15.408Z]	<MicahZoltu>
[2015-08-20T01:11:14.886Z]	<sinclairzx81>	-pron- be not aware of any mean of emit quote declaration
[2015-08-20T01:12:03.084Z]	<MicahZoltu>	hmm give -pron- a sec
[2015-08-20T01:12:49.156Z]	<sinclairzx81>	come from a node background -pron- would be nice to have ts point at a module entry point for a package either or main by way of the and be able to bundle up all export thing as a interface for caller to consume
[2015-08-20T01:13:25.804Z]	<MicahZoltu>	i believe that be what the issue link above be intend to solve ish
[2015-08-20T01:13:40.127Z]	<sinclairzx81>	no -pron- different
[2015-08-20T01:13:54.467Z]	<MicahZoltu>	-pron- be the first step into make the module resolution system extensible so -pron- could run tsc with any module resolution strategy which include one that understand node package
[2015-08-20T01:14:11.006Z]	<MicahZoltu>	the second step of course be for someone to write such a resolution extension
[2015-08-20T01:14:32.739Z]	<sinclairzx81>	do -pron- but -pron- be apparently too late
[2015-08-20T01:15:20.948Z]	<sinclairzx81>	be go to submit a pr be tell -pron- currently in the work and look at what s be do -pron- a bit more fleshed out than what i slap together anyway
[2015-08-20T01:15:51.249Z]	<MicahZoltu>	i wonder if -pron- be plan on launch with a node resolver
[2015-08-20T01:16:21.017Z]	<sinclairzx81>	the comment in there suggest -pron- want to flesh -pron- out with other resolver
[2015-08-20T01:16:21.031Z]	<MicahZoltu>	i assume -pron- microsoft would just ship the resolver plugin system and leave -pron- to other such as -pron- to build a node resolver
[2015-08-20T01:17:14.867Z]	<sinclairzx81>	i wonder that  <user> there be much room in there for all sort of wacky resolver i think the code could use a bit of refactore to do -pron- properly not sure if that s on the card
[2015-08-20T01:17:35.372Z]	<sinclairzx81>	honestly -pron- be just happy to have the functionality after year d
[2015-08-20T01:20:17.475Z]	<MicahZoltu>	yeah
[2015-08-20T01:20:30.840Z]	<MicahZoltu>	the typescript third party library story be slowly get well
[2015-08-20T01:20:42.398Z]	<MicahZoltu>	-pron- still be anywhere near what -pron- be like for with nuget
[2015-08-20T01:20:47.171Z]	<MicahZoltu>	but -pron- be improve
[2015-08-20T01:23:04.001Z]	<MicahZoltu>	huh -pron- appear -pron- be correct that the auto generate file do have the module string in -pron-
[2015-08-20T01:23:36.501Z]	<MicahZoltu>	the library i use auto generate file from source code and the module -pron- generate have -pron- i just assume that be the same style that tsc generate
[2015-08-20T01:23:45.963Z]	<sinclairzx81>	yeah i keep check in every month or so to see if -pron- be implement yet
[2015-08-20T01:24:02.117Z]	<sinclairzx81>	would that be dtsbundle
[2015-08-20T01:29:59.229Z]	<sinclairzx81>	sorry what i mean be be -pron- use typescript for -pron- nodejs project and if so -pron- be curious to hear how -pron- work around the module system up till now
--------------------------------------------------------------------------------------------------
[2015-08-19T14:02:59.056Z]	<fatso83>	i go from use the compiler to implicitly use grunt ts and suddenly the compile js contain lot of reference which make -pron- deploy tool complain any way of turn off those reference path in the compile js
[2015-08-19T14:07:05.788Z]	<fatso83>	one should think help but alas
[2015-08-19T15:10:53.241Z]	<sinclairzx81>	i need to import foo
[2015-08-20T00:59:47.502Z]	<MicahZoltu>	json file foo ts import foo from index
--------------------------------------------------------------------------------------------------
[2015-08-19T15:10:03.136Z]	<sinclairzx81>	hey all
[2015-08-19T15:10:30.894Z]	<sinclairzx81>	i have the follow
[2015-08-19T15:10:33.945Z]	<sinclairzx81>
[2015-08-19T15:10:39.922Z]	<sinclairzx81>	foo
[2015-08-19T15:11:42.332Z]	<sinclairzx81>	i could import with import as foo from foo index
[2015-08-19T15:12:21.604Z]	<sinclairzx81>	but -pron- would rather not in node directory can be module be there no way for ts to override -pron- module search path
[2015-08-19T15:12:59.271Z]	<sinclairzx81>	as a follow on to this be there no way to generate a quote for a external module
[2015-08-19T15:13:27.206Z]	<sinclairzx81>	i think not be able to do either make typescript highly impractical to use on the nodejs platform do anyone have any thought
[2015-08-20T00:13:13.239Z]	<sinclairzx81>	look at what have be do mate -pron- would wait year for this to happen d
[2015-08-20T00:31:39.988Z]	<sinclairzx81>	many thank
--------------------------------------------------------------------------------------------------
[2015-08-20T01:27:04.420Z]	<DanielRosenwasser>	there be plan to have a node resolver and once this get in -pron- can use the compiler api to plug in -pron- own resolver
[2015-08-20T01:27:57.712Z]	<DanielRosenwasser>	the editor experience be a little less clear for -pron- though but -pron- take -pron- a step at a time
[2015-08-20T01:28:24.624Z]	<sinclairzx81>	for nodejs
[2015-08-20T01:29:05.612Z]	<DanielRosenwasser>	compile what on nodejs smile
[2015-08-20T01:31:01.445Z]	<DanielRosenwasser>	i work on typescript -pron- so yes i use typescript for -pron- nodejs project which compile run on nodejs smile
--------------------------------------------------------------------------------------------------
[2015-08-20T01:28:13.431Z]	<sinclairzx81>	be -pron- compile on nodejs
--------------------------------------------------------------------------------------------------
[2015-08-20T01:31:38.794Z]	<MicahZoltu>	tsc do have any third party dependency i believe
[2015-08-20T01:31:42.427Z]	<DanielRosenwasser>	the kicker be that typescript be currently not write use external module but -pron- be something -pron- like to see
[2015-08-20T01:31:45.071Z]	<MicahZoltu>	at least none that be write in ts
[2015-08-20T01:33:17.888Z]	<DanielRosenwasser>	just want to give -pron- an update on vlad work on the module resolution story
[2015-08-20T01:36:43.149Z]	<MicahZoltu>	i like vlad all of the thing that i be eagerly wait for in tsc end up on -pron- plate
[2015-08-20T01:37:02.937Z]	<MicahZoltu>	-pron- be possible i just like vlad pm or whoever assign work but from -pron- point of view -pron- be work on the thing i want
[2015-08-20T01:39:17.078Z]	<DanielRosenwasser>	-pron- get to hand -pron- to -pron- both pretty great guy smiley
--------------------------------------------------------------------------------------------------
[2015-08-20T01:32:54.440Z]	<DanielRosenwasser>	correct the extent of -pron- be -pron- testing framework which use certain package but -pron- not necessarily canonical
--------------------------------------------------------------------------------------------------
[2015-08-20T22:43:03.333Z]	<wwwsevolod>	hello guy where i can read documentation on decorator metadata  <user> be i able to get interface meta datum i mean for example i have class with constructor with argument with type of some interface now -pron- get only object for this argument but i want shape
[2015-08-21T00:10:25.050Z]	<DanielRosenwasser>
[2015-08-21T00:10:37.192Z]	<DanielRosenwasser>	formal decorator proposal
[2015-08-21T00:12:47.034Z]	<DanielRosenwasser>	and some more stuff here
[2015-08-21T00:13:03.615Z]	<DanielRosenwasser>	sorry -pron- all over the place i have be work that closely on the decorator design proposal
[2015-08-21T02:20:58.403Z]	<LPGhatguy>	i file an issue -pron- at
[2015-08-21T02:21:30.477Z]	<LPGhatguy>	any idea how typescript decorator implementation line up with babel yet last i check ts -pron- do match and -pron- cause some interop issue
[2015-08-21T11:56:11.991Z]	<radpet>
[2015-08-22T20:33:28.733Z]	<wwwsevolod>	compileroption jsx preserve noemit true target noimplicitany true experimentaldecorator true emitdecoratormetadata true filesglob typescript lib ide compileonsave false compileonsave false
--------------------------------------------------------------------------------------------------
[2015-08-21T16:15:34.255Z]	<darrylryan>	hey
[2015-08-21T16:15:46.153Z]	<darrylryan>	anyone around
[2015-08-21T18:55:18.957Z]	<LPGhatguy>	typescript seem to be miss how do that get overlook
[2015-08-21T19:33:45.282Z]	<roganov>	yeah i  <user> stumble upon this once i think i end up use node
[2015-08-21T23:57:52.232Z]	<DanielRosenwasser>	do -pron- have any specific interop issue -pron- find
[2015-08-22T16:19:49.056Z]	<wwwsevolod>	hello guy currently run into issue on late function any a any a type target class testaction number return a class test extend any any testaction testaction render return div decorate injectaction type testaction
[2015-08-22T16:20:06.948Z]	<wwwsevolod>	bad generate code
[2015-08-22T20:36:43.323Z]	<wwwsevolod>	compiler version
--------------------------------------------------------------------------------------------------
[2015-08-22T20:33:06.093Z]	<DanielRosenwasser>	-pron- not able to reproduce -pron- error what be -pron- compiler option
[2015-08-22T20:33:48.658Z]	<wwwsevolod>
[2015-08-22T20:34:00.658Z]	<wwwsevolod>	sec
[2015-08-22T20:34:03.967Z]	<wwwsevolod>	-pron- not
[2015-08-22T20:35:22.859Z]	<wwwsevolod>	fix
[2015-08-22T20:37:19.575Z]	<wwwsevolod>	when i remove emitdecoratormetadata -pron- be work just fine
[2015-08-22T20:37:40.301Z]	<wwwsevolod>	but i need that metadata to get this class constructor in decorator and use -pron-
[2015-08-22T20:37:56.575Z]	<wwwsevolod>	something like di
[2015-08-22T20:43:52.888Z]	<wwwsevolod>	change from target to do not help
[2015-08-22T20:45:03.966Z]	<DanielRosenwasser>	do -pron- intentionally have noemit in there
[2015-08-22T20:45:40.739Z]	<DanielRosenwasser>	oh i see now
[2015-08-22T20:45:56.007Z]	<DanielRosenwasser>	i forget emitdecoratormetadata
[2015-08-22T20:46:01.376Z]	<DanielRosenwasser>	yup definitely a bug
[2015-08-22T20:46:06.701Z]	<DanielRosenwasser>	thank
[2015-08-22T20:46:32.752Z]	<wwwsevolod>	may be -pron- be regression and there be more stable version of this feature
[2015-08-22T20:47:37.007Z]	<DanielRosenwasser>	not sure to be honest -pron- can install previous version from npm and see what work
[2015-08-22T20:48:21.921Z]	<DanielRosenwasser>	npm install npm install etc
[2015-08-22T20:48:49.123Z]	<wwwsevolod>
--------------------------------------------------------------------------------------------------
[2015-08-22T20:49:36.896Z]	<wwwsevolod>	 <user> i find similiar issue
[2015-08-22T20:56:23.139Z]	<wwwsevolod>	hm
[2015-08-22T20:56:40.178Z]	<wwwsevolod>	-pron- be break somewhere in between of and -pron- say version when -pron- stop work
[2015-08-22T21:02:16.958Z]	<wwwsevolod>	-pron- be work on and stop work on
--------------------------------------------------------------------------------------------------
[2015-08-23T08:38:18.545Z]	<LPGhatguy>	no interop issue yet but the workaround i propose in issue make -pron- wonder how many be out there lurk under the surface
--------------------------------------------------------------------------------------------------
[2015-08-25T14:24:00.940Z]	<Yellowmat>	hi everybody
[2015-08-25T14:24:15.579Z]	<ericmdantas>	hello
[2015-08-25T14:42:10.856Z]	<Yellowmat>	i be struggle with getdefinitionatposition more precisely on how to get the position of each definition how can i get the position of each definition in case -pron- exist in multiple file actually i use the file name of a definition to get -pron- file content from host in order to get the line and character from position i use the definition as a position -pron- seem to work i get correct line value but sometimes and i do know why the character value be invalid and always equal to i may not use the correct method to get the line character of each definition but i be open to any clue thank in advance
[2015-08-25T15:24:47.806Z]	<LabEG>	var xmldoc document new text xml var channelnodes
[2015-08-25T15:24:54.309Z]	<LabEG>	error property firstelementchild do not exist on type document
[2015-08-25T15:25:02.670Z]	<LabEG>	how to repair this
[2015-08-25T15:28:49.580Z]	<LabEG>	var xmldoc document new text xml var channelnodes
[2015-08-25T15:28:55.304Z]	<LabEG>	this work
[2015-08-25T19:54:56.060Z]	<LPGhatguy>	-pron- really bad a lot of the time especially consider what be common or implement change every week
[2015-08-25T19:55:20.307Z]	<LPGhatguy>	-pron- already file two issue about api issue and -pron- find a bunch of other thing that just be up to snuff
[2015-08-25T19:55:29.901Z]	<DanielRosenwasser>	-pron- always try to improve -pron- please keep the report come in
[2015-08-25T19:55:43.078Z]	<LPGhatguy>	what the policy on new api
[2015-08-25T19:55:46.362Z]	<DanielRosenwasser>	migth know more about the matter than -pron-
[2015-08-25T19:55:57.418Z]	<wwwsevolod>
[2015-08-25T19:56:06.029Z]	<LPGhatguy>	i want but -pron- only support in two browser one with a flag but -pron- still feel off have to add stuff to document with a custom
[2015-08-25T19:56:15.626Z]	<DanielRosenwasser>	can -pron- explain what -pron- mean by the policy on new api
[2015-08-25T19:56:27.353Z]	<LPGhatguy>	well what function qualify for addition to
[2015-08-25T19:56:50.307Z]	<LPGhatguy>	establish standard implement in x browser
[2015-08-25T19:57:16.899Z]	<LPGhatguy>	should -pron- be break out into a modular that include a bunch of other file with varying level of dom api
[2015-08-25T19:57:20.222Z]	<DanielRosenwasser>	i would say be an api relate thing -pron- say -pron- be consider a versioning story so that -pron- do break people on specific version
[2015-08-25T19:57:59.465Z]	<LPGhatguy>	well -pron- certainly do curve how people write typescript code that interact with the dom
[2015-08-25T19:58:10.610Z]	<DanielRosenwasser>	-pron- hard to say -pron- kind of a tough process that have be take care of spec say something be a number every browser use a string
[2015-08-25T20:01:32.744Z]	<DanielRosenwasser>	there a couple somewhat related
[2015-08-25T20:02:44.441Z]	<DanielRosenwasser>	potentially
[2015-08-25T20:08:38.617Z]	<LPGhatguy>	in general what the good way to get involve in the effort of try to improve the dom typing interface
[2015-08-25T20:08:50.014Z]	<LPGhatguy>	-pron- seem like type file be in a weird muck with definitelytype and the new module resolution system proposal
--------------------------------------------------------------------------------------------------
[2015-08-25T17:12:56.562Z]	<mhegazy>	-pron- solution seem correct a document may not have a firstelementchild
[2015-08-25T17:28:13.346Z]	<DanielRosenwasser>	-pron- hard to say without see the code
--------------------------------------------------------------------------------------------------
[2015-08-25T19:54:35.850Z]	<LPGhatguy>	be there any potential improvement come to the dom type definition that come with typescript
[2015-08-25T20:09:15.420Z]	<LPGhatguy>	and feel like a monolithic hunk of typing that have to be keep pretty much as be for backwards compatibility reason
--------------------------------------------------------------------------------------------------
[2015-08-25T19:59:09.999Z]	<LPGhatguy>	be there a single github issue to track the ongoing improvement of the dom api
--------------------------------------------------------------------------------------------------
[2015-08-25T20:58:03.985Z]	<mhegazy>	there be different part to the question for break the library into small component -pron- already have that do see in for break -pron- into even small component be a relevant place for this discussion if -pron- be interested in do this please post a detailed proposal for what need to be do an initial implementation pr
[2015-08-25T20:58:04.778Z]	<mhegazy>	for a more granular dom typing base on level browser i think issue be a relevant place to have this discussion and i would say -pron- should put an initial version on definitlly type -pron- concern be curate all these version can get pretty expensive
[2015-08-25T21:00:09.295Z]	<LPGhatguy>	-pron- be up for build a sample in -pron- free time of what i have in mind for granularity with the dom api at least
[2015-08-26T07:48:06.663Z]	<LabEG>	if
[2015-08-26T07:49:13.947Z]	<LabEG>	how to write correctly
[2015-08-26T08:06:33.075Z]	<LabEG>	if htmlelement cssstylesheet
[2015-08-26T08:11:54.978Z]	<LabEG>	and wath else may be contain in stylesheet in addition to cssstylesheet
--------------------------------------------------------------------------------------------------
[2015-08-25T20:59:21.821Z]	<LPGhatguy>	-pron- be frank i really do like how definitelytype be the first place definition get put especially for first class api library develop in typescript and core api like dom
--------------------------------------------------------------------------------------------------
[2015-08-26T07:48:47.948Z]	<LabEG>	error property -pron- would do not exist on type node error property cssrule do not exist on type stylesheet
--------------------------------------------------------------------------------------------------
[2015-08-26T08:10:22.300Z]	<LabEG>	why return base object node why not a htmlelement
--------------------------------------------------------------------------------------------------
[2015-08-26T08:29:57.014Z]	<Yellowmat>	here be -pron- code i have a directory which contain multiple file from a specific file i try to get all definition of an identifier i use the path and content of this specific file and the line and character of the cursor i expect to get all definition of myfunction i get all definition of myfunction but can get valid character position path the path and content of the current file from where i request definition line and character position of the symbol myfunction at the end of the code line content var position line character var definition position var filecontent var filecontentlinestart var definitionposition line character contain function myfunction return var dardar myfunction contain function myfunction return var dardar myfunction contain function myfunction return var dardar myfunction contain function myfunction return var dardar myfunction when i check the console log path and line be correct but character be always equal to which be not correct
--------------------------------------------------------------------------------------------------
[2015-08-26T10:45:41.637Z]	<alexandrebodin>	hello guy -pron- try to create a file for the node config library but i come across a problem in node config the prototype be extend to be able to acce config like thtat
[2015-08-26T10:46:41.451Z]	<alexandrebodin>	import as config from config or
[2015-08-26T10:47:23.775Z]	<alexandrebodin>	i do know any way to declare the module and say -pron- can acce any property -pron- want on that module anyone can help
--------------------------------------------------------------------------------------------------
[2015-08-26T12:30:14.183Z]	<Yellowmat>	here be some new information about -pron- problem i be debug the resolvename which get the definition i be interested in from the global object name global in global i see -pron- symbol name myfunction and -pron- declaration have as pos perhaps -pron- know why i be try to debug deeper and get to the point where -pron- symbol myfunction be add to the global object to understand why -pron- declaration have invalid pos
[2015-08-26T17:54:00.681Z]	<LPGhatguy>	finally hit a babel ts compatibility issue the same one everyone else hit decorator
--------------------------------------------------------------------------------------------------
[2015-08-26T14:10:30.069Z]	<Yellowmat>	finally i be sure that i do not use the right method to get the position of each declaration be there any good practice to get the node use to extract definition infos should i add a member to each definition entry to store the correspond node datum
--------------------------------------------------------------------------------------------------
[2015-08-26T20:26:08.667Z]	<bartq>	hey what the current status of jsx in ts any tutorial
[2015-08-26T20:26:53.206Z]	<DanielRosenwasser>	install -pron- nightly with npm install then read up here
[2015-08-26T20:28:12.198Z]	<DanielRosenwasser>	originally base on a blog post by
[2015-08-26T20:29:50.161Z]	<bartq>	do -pron- check -pron- work today
[2015-08-26T20:30:26.609Z]	<DanielRosenwasser>	what do -pron- mean
[2015-08-26T20:30:41.454Z]	<DanielRosenwasser>	do i check if the nightly work
[2015-08-26T20:31:28.545Z]	<bartq>	yes i be read and follow this article but -pron- get error
[2015-08-26T20:31:29.481Z]	<bartq>	like
[2015-08-26T20:31:34.824Z]	<bartq>	can not find name react
[2015-08-26T20:31:58.957Z]	<bartq>	and i have reference react var a div foo
[2015-08-26T20:32:26.012Z]	<bartq>	and compileroption module commonjs target noimplicitany false outdir app src build rootdir sourcemap true jsx react extension exclude
[2015-08-26T20:32:43.490Z]	<DanielRosenwasser>	-pron- need to improve the page so that -pron- can get start more easily
[2015-08-26T20:32:58.029Z]	<DanielRosenwasser>	if -pron- check low on the page -pron- say that -pron- need an appropriate
[2015-08-26T20:33:25.896Z]	<DanielRosenwasser>
[2015-08-26T20:33:57.928Z]	<bartq>	ok i try to install -pron- with tsd
[2015-08-26T20:34:05.838Z]	<DanielRosenwasser>	if -pron- use module use otherwise use react
[2015-08-26T20:35:04.451Z]	<DanielRosenwasser>	brb
[2015-08-26T20:35:15.230Z]	<bartq>	ok now i have this reference react import as react from react var a div foo
[2015-08-26T20:35:19.128Z]	<DanielRosenwasser>	do -pron- file an issue
[2015-08-26T20:35:26.015Z]	<bartq>	and compiler say error error have occur in the compile process typeerror undefined be not a function
[2015-08-26T20:36:02.010Z]	<bartq>	-pron- use -pron- from webstorm
[2015-08-26T20:36:11.586Z]	<bartq>	and webstorm of course break on jsx syntax
[2015-08-26T20:38:21.583Z]	<DanielRosenwasser>	make sure -pron- globally instal tsc nightly
[2015-08-26T20:38:46.775Z]	<DanielRosenwasser>	and that -pron- not be shadow by another tsc
[2015-08-26T20:38:56.505Z]	<DanielRosenwasser>	on a unix system -pron- which tsc
[2015-08-26T20:39:04.030Z]	<DanielRosenwasser>	in -pron- where tsc
[2015-08-26T20:39:44.524Z]	<DanielRosenwasser>	or rather just check tsc
[2015-08-26T20:40:17.332Z]	<DanielRosenwasser>	right now i get the correct error message tsc react commonjs error the left hand side of an arithmetic operation must be of type any number or an enum type
[2015-08-26T20:41:18.735Z]	<bartq>	be -pron- a must to have global tsc nightly
[2015-08-26T20:41:23.733Z]	<bartq>	can be just local
[2015-08-26T20:42:16.647Z]	<bartq>	zrzut ekranu o microsoft typescript thumb zrzut microsoft typescript zrzut
[2015-08-26T21:21:57.104Z]	<DanielRosenwasser>	oh -pron- can be i think -pron- be execute from a compiler
[2015-08-26T21:22:22.994Z]	<DanielRosenwasser>	but i do use webstorm so -pron- just guess in the dark run that custom tsc work
[2015-08-26T21:22:34.515Z]	<DanielRosenwasser>	from the custom directory i mean
[2015-08-26T23:28:22.032Z]	<LPGhatguy>	the decorator issue have already be bring up a few time as far as i can tell let -pron- look to see if there a dedicated issue for -pron-
[2015-08-26T23:30:19.666Z]	<LPGhatguy>	on another note i just notice that just instal a development version what do that mean for
[2015-08-27T00:31:26.666Z]	<DanielRosenwasser>	-pron- mean that for the most part no new feature work  <user> be check into after this point -pron-  <user> just be bug fix and let bake
[2015-08-27T08:56:11.348Z]	<bartq>	try to follow instruction but can find the file in description on -pron- disk
--------------------------------------------------------------------------------------------------
[2015-08-27T08:55:49.272Z]	<bartq>	-pron- may be a problem with webstorm -pron- from cmd there be no error btw how to enable support in vs code on osx
--------------------------------------------------------------------------------------------------
[2015-08-27T10:45:04.223Z]	<radpet>	hello i be try to compile syntax rest param with the typescript compiler but -pron- do not process -pron- -pron- output -pron- as -pron- be in do the output need to be process with transpiler like babel traceur
[2015-08-27T11:10:29.161Z]	<ericmdantas>	nope see
[2015-08-27T11:24:11.622Z]	<radpet>	yea i know that but why -pron- do not process -pron- i read something about nested rest param and this may be the case var factoryfunction args var instance new arg return function text additionlarg return additionlarg and the output be var factoryfunction function var arg for var i i var instance new arg
[2015-08-27T11:42:11.889Z]	<radpet>	not really nested but i refer to this edit yes this be the problem
[2015-08-27T14:18:56.597Z]	<radpet>	hello again i be use systemjs for import dep into -pron- ts project but -pron- seem the compiler be have trouble to translate the import import view component inject ngscope ngelement from app app import application from app app import from common import as uuid from common lib uuid import as from lodash import as widgettemplate from theoretically in should be load lodash however the content of be load lodash be hold in uuid i see the output js and -pron- seem alright app app app common common lib uuid lodash var uuid var widgetregistry basewidget widgetcontrol any idea
--------------------------------------------------------------------------------------------------
[2015-08-27T14:25:23.071Z]	<pawciobiel>	hey how do i declare an array of array of number or null
[2015-08-27T14:25:53.065Z]	<pawciobiel>	should var l number be ok
[2015-08-27T14:27:38.829Z]	<pawciobiel>	can -pron- not import application in the same line as the rest
[2015-08-27T14:27:57.954Z]	<pawciobiel>	like after comma or something
[2015-08-27T14:29:34.931Z]	<pawciobiel>	why do -pron- define view in app app can -pron- extract -pron- to -pron- own file
[2015-08-27T14:30:58.364Z]	<radpet>	those be temp decorator until i be not really sure i can import application in the same line because app do not have default export
[2015-08-27T14:32:43.499Z]	<pawciobiel>	-pron- never use and just start with ts but in python world decorator d
[2015-08-27T14:33:25.823Z]	<pawciobiel>	ha i think what confusing be that -pron- try to import from one file two or more different thing
[2015-08-27T14:34:03.849Z]	<pawciobiel>	what exactly be export by app app
[2015-08-27T14:34:16.706Z]	<radpet>	i think about that but this code run perfectly transpile with babel
[2015-08-27T14:35:34.608Z]	<pawciobiel>	can -pron- do thing like import application view component from app app or import application view from app app
[2015-08-27T14:40:02.652Z]	<radpet>	yea thanks -pron- seem that typescript do not handle well those import from one file
[2015-08-27T14:41:44.315Z]	<pawciobiel>	or whatever requirejs -pron- use
[2015-08-27T14:42:34.713Z]	<radpet>	babel could transpile this okey -pron- be not systemjs fault i still want to know if this be typescript issue
[2015-08-27T15:25:21.053Z]	<pawciobiel>	oh ok
[2015-08-27T16:35:06.437Z]	<shovon>
[2015-08-27T17:00:46.345Z]	<shovon>	do typescript have suppport for statically type check bind function for example javascript interface something property go here function bindablefunction syntax to tell the compiler that this function be bind to something some stuff here let something something property in accordance to something here let another true typescript compile this fine let boundedtosomethe type error bindablefunction can be bind to an object of type boolean let another
[2015-08-27T17:51:58.922Z]	<RichiCoder1>	-pron- be something that be request suggest a lot of believe
[2015-08-27T17:53:26.765Z]	<RichiCoder1>
[2015-08-28T00:23:09.776Z]	<DanielRosenwasser>	there no document supported way right now but -pron- can hack -pron- a bit
[2015-08-28T00:23:11.331Z]	<DanielRosenwasser>	or give the sublime plugin a try
[2015-08-28T19:54:56.084Z]	<LabEG>	be there tool for store db entity and java model to typescript interface
[2015-08-31T15:13:07.664Z]	<PunkSage>	what do -pron- mean exactly be tslint enough
[2015-08-31T15:28:07.420Z]	<pawciobiel>	as oppose to nan
[2015-08-31T15:29:48.228Z]	<pawciobiel>	i think -pron- expect too much
--------------------------------------------------------------------------------------------------
[2015-08-29T03:54:42.242Z]	<radicaled>	do anyone know of a typescript good practice handbook -pron- try to figure out where i should put -pron- typing for external library and if i should check in typing from the tsd cli into git
[2015-08-29T20:37:33.931Z]	<radicaled>	no more like interoperate with already exist in house javascript library that will be convert to typescript any time soon or at all
[2015-08-29T20:48:54.897Z]	<radicaled>	three day i be migrate an application away from dart to typescript
[2015-08-29T20:51:42.940Z]	<radicaled>	yes no real problem so far
[2015-08-29T20:57:57.648Z]	<radicaled>	interesting -pron- use atom typescript but i may check out i only have and only have -pron- for dart use
[2015-08-29T22:55:47.009Z]	<radicaled>	ryuuji
--------------------------------------------------------------------------------------------------
[2015-08-29T20:34:06.633Z]	<PunkSage>	i would advise -pron- do put defininion into git and keep the typing in different folder at the same level as the rest of -pron- application
[2015-08-29T20:36:02.964Z]	<radicaled>	where should i put how should i handle home roll definition eg i need to use a small js library want to write a typedefinition
[2015-08-29T20:36:45.706Z]	<PunkSage>	be -pron- already available through tsd
[2015-08-29T20:38:55.313Z]	<PunkSage>	then i think that -pron- should keep the definition together with -pron- file
[2015-08-29T20:39:12.350Z]	<PunkSage>	so and should be in the same folder
[2015-08-29T20:41:42.877Z]	<radicaled>	i see i see
[2015-08-29T20:48:24.546Z]	<PunkSage>	how long have -pron- be program with ts
[2015-08-29T20:49:13.084Z]	<radicaled>	so i be more or less pick -pron- up as i go along
[2015-08-29T20:49:59.515Z]	<PunkSage>	-pron- should be fairly easy to transform -pron- from dart
[2015-08-29T20:52:42.542Z]	<PunkSage>	if -pron- use webstorm -pron- should consider get version eap -pron- have a lot of improvement to typescript workflow
[2015-08-31T09:57:07.265Z]	<PunkSage>	sure -pron- do
--------------------------------------------------------------------------------------------------
[2015-08-30T20:25:18.412Z]	<dmytro-krekota>	hello do anyone use gulp tslint
--------------------------------------------------------------------------------------------------
[2015-08-31T14:07:54.837Z]	<pawciobiel>	be there a way to enable enforce error during build time when i have strange usage of undefined variable
[2015-08-31T15:57:25.705Z]	<LabEG>	error index signature of object type implicitly have an any type how can i get rid of this error on
[2015-08-31T19:14:20.437Z]	<LPGhatguy>	that look like -pron- have noimplicitany enable which -pron- can turn off if -pron- do want that error ever
[2015-08-31T19:23:09.781Z]	<LabEG>	use typescript and not use noimplicitany
[2015-08-31T20:06:18.264Z]	<LPGhatguy>	i see through then all of the dev version with the last dev version be
--------------------------------------------------------------------------------------------------
[2015-08-31T15:14:42.805Z]	<aboeglin>	anyone get experience with package a module which be implement in different file to be use in different other project if yes what be the procedure to do -pron- the idea would be to be able to write import class otherclass from library and have a file along
[2015-08-31T15:26:50.008Z]	<pawciobiel>	tslint do tell -pron- about those i guess i just use to have thing like undefined number give -pron- type error exception
[2015-08-31T16:01:50.763Z]	<LabEG>	replace enum to class with static property and now ok
--------------------------------------------------------------------------------------------------
[2015-08-31T20:04:48.596Z]	<LPGhatguy>	-pron- look like be break drop into -pron- team build system ack
[2015-08-31T20:05:36.222Z]	<LPGhatguy>	additionally what the way to install the late development version from npm
[2015-08-31T20:09:18.918Z]	<LPGhatguy>	break -pron- build flow too
--------------------------------------------------------------------------------------------------
[2015-08-31T20:19:08.767Z]	<cveld>	do contain the generator yield stuff
[2015-08-31T20:19:28.629Z]	<cveld>	i see that milestone be complete now what be in
[2015-08-31T23:36:40.330Z]	<DanielRosenwasser>	what do -pron- mean broken
[2015-08-31T23:37:24.056Z]	<DanielRosenwasser>
[2015-08-31T23:37:42.281Z]	<DanielRosenwasser>	have generator but not for downlevel emit
[2015-08-31T23:38:04.453Z]	<DanielRosenwasser>	be the release proper -pron- be plan  <user> have a beta
[2015-09-01T02:33:29.629Z]	<RichiCoder1>	be notice that release work have be accelerate recently can wait for the beta look forward to all the new goody
--------------------------------------------------------------------------------------------------
[2015-09-01T06:25:45.663Z]	<LPGhatguy>	i file an issue about -pron- -pron- a big ugly stack of error all inside typescript
--------------------------------------------------------------------------------------------------
[2015-09-01T08:34:53.628Z]	<toms-dev>	check out this post
--------------------------------------------------------------------------------------------------
[2015-09-01T11:55:28.096Z]	<removed~kataras>	do -pron- know when the ts  <user> be available as i can see all pull request be close
[2015-09-01T12:13:44.144Z]	<aboeglin>	dev thank -pron- -pron- check -pron- out
--------------------------------------------------------------------------------------------------
[2015-09-01T12:21:48.050Z]	<vilic>	-pron- try to hook up vs code problem matcher with tsc but the error will get clean after incremental build actually the editor clean -pron- but later after incremental build the editor seem to pick -pron- up again from the task any idea
[2015-09-01T17:55:29.498Z]	<LPGhatguy>	with the new resolution be there a convenient way to generate a file to cover the scope of the entire module especially over multiple file
[2015-09-01T17:55:56.842Z]	<LPGhatguy>	last time i check -pron- require some amount of manual generation and do play nicely with large project
[2015-09-01T18:11:29.307Z]	<toms-dev>	-pron- use dts generator which be pretty much do the job
[2015-09-01T18:11:29.521Z]	<toms-dev>
[2015-09-01T23:16:33.153Z]	<LPGhatguy>	-pron- appear that drop into a project that be stable with have break path resolution hooray
[2015-09-01T23:17:19.807Z]	<DanielRosenwasser>	try classic
[2015-09-01T23:17:27.015Z]	<LPGhatguy>	be node the new default
[2015-09-01T23:17:38.586Z]	<DanielRosenwasser>	-pron- be for commonjs
[2015-09-01T23:17:47.835Z]	<LPGhatguy>	i be under the impression that -pron- have to opt in to that new resolution strategy be there any way i can get both
[2015-09-01T23:18:10.004Z]	<LPGhatguy>	i want to be able to get path relative to the root of -pron- project classic and fall back to node
--------------------------------------------------------------------------------------------------
[2015-09-01T20:06:19.354Z]	<DanielRosenwasser>	-pron- hope for mid september
--------------------------------------------------------------------------------------------------
[2015-09-01T23:18:49.841Z]	<charlespockert>	just check but -pron- import use syntax and the compile js seem to be break when default export be involve
[2015-09-01T23:18:57.338Z]	<charlespockert>	be -pron- aware of an issue around this
[2015-09-01T23:19:06.911Z]	<charlespockert>	basically
[2015-09-01T23:19:54.841Z]	<charlespockert>	import moment from moment should allow -pron- to use the default export as moment but instead the js have
[2015-09-01T23:20:08.971Z]	<charlespockert>	so i have to workround with
[2015-09-01T23:20:18.969Z]	<charlespockert>	import as moment from moment
[2015-09-01T23:20:42.094Z]	<charlespockert>	interestingly if i transpile use babel the first example work
[2015-09-01T23:20:47.655Z]	<LPGhatguy>	-pron- have to use the latter for every commonjs library from typescript
[2015-09-01T23:21:07.891Z]	<charlespockert>	so -pron- just an issue with particular module format
[2015-09-01T23:22:31.543Z]	<LPGhatguy>	-pron- not sure but -pron- be kind of silly to have to do that for commonjs first library moment jquery handlebar probably everything else when babel do a good job at fix that issue
[2015-09-01T23:22:48.345Z]	<DanielRosenwasser>	if the library -pron- use actually properly export a default then -pron- should work -pron- guess that babel be just fake the presence of a default export by use the export field
[2015-09-01T23:23:17.846Z]	<LPGhatguy>	if a library export a default use commonjs will -pron- break any other consumer
[2015-09-01T23:23:39.072Z]	<LPGhatguy>	since commonjs be single export per module iirc as compare with be multi export single default
[2015-09-01T23:24:44.673Z]	<charlespockert>	ah right -pron- happy to workaround -pron- just confuse -pron- a fair bit at first since -pron- pretty new to js in general and i think i have -pron- head around the whole import export until i be mash -pron- face against a wall with moment kendo
[2015-09-01T23:26:07.911Z]	<DanielRosenwasser>	see
[2015-09-01T23:29:18.653Z]	<charlespockert>	thank
[2015-09-01T23:29:27.307Z]	<DanielRosenwasser>	no problemo
[2015-09-01T23:30:16.279Z]	<LPGhatguy>	so the solution if i want to write cjs library in typescript be to adopt babel
[2015-09-02T06:09:51.012Z]	<LPGhatguy>	the solution feel like -pron- target then use babel
--------------------------------------------------------------------------------------------------
[2015-09-02T00:33:05.149Z]	<jbrantly>	-pron- may be interested in -pron- can mostly ignore the webpack part but i try to give an overview of use module in typescript with cjs interop
--------------------------------------------------------------------------------------------------
[2015-09-02T03:55:07.854Z]	<plantain-00>	 <user> support commonjs
--------------------------------------------------------------------------------------------------
[2015-09-02T09:12:54.967Z]	<jbrantly>	if -pron- write a reusable library something to publish to npm and -pron- want to write -pron- in typescript module but maintain compatibility with normal cjs user pretty much the entire npm ecosystem then yes the solution be target then use babel if -pron- just write like a webapp where -pron- want to consume library write in either or cjs then -pron- more a matter of preference
[2015-09-02T09:17:47.753Z]	<jbrantly>	check out i do work on typescript but -pron- guess be that -pron- in a feature freeze right now for so that almost certainly will be there not to mention that nobody from typescript have say yea -pron- do this
[2015-09-02T09:23:26.074Z]	<jbrantly>	doh i just realize -pron- already comment on smile in any case the other stuff stand
--------------------------------------------------------------------------------------------------
[2015-09-02T10:47:57.967Z]	<plantain-00>	be there other way to use koa with typescript
[2015-09-02T11:08:54.172Z]	<jbrantly>	the only thing i can think of would be to use babel -pron- can configure babel to transpile only the piece -pron- want for instance only transpile module but leave the generator
[2015-09-02T11:27:27.972Z]	<plantain-00>	ok thank
--------------------------------------------------------------------------------------------------
[2015-09-02T11:27:32.808Z]	<toms-dev>	check out this post -pron- pretty much what -pron- describe thank for share this to -pron-
--------------------------------------------------------------------------------------------------
[2015-09-02T12:12:00.322Z]	<removed~kataras>	be there any way rather than node babel to run -pron- typescript module in node js unexpected token import error
[2015-09-02T13:04:55.600Z]	<jbrantly>	target and cjs instead
[2015-09-02T13:06:31.824Z]	<jbrantly>	node do support module so -pron- need to transpile that part at least either use typescript cjs output or like -pron- say babel
[2015-09-02T13:09:19.760Z]	<removed~kataras>	oh ok i see
[2015-09-02T13:09:24.836Z]	<removed~kataras>	can i ask one thing
[2015-09-02T13:09:26.316Z]	<removed~kataras>	more
[2015-09-02T13:09:30.305Z]	<removed~kataras>	what about iojs
[2015-09-02T13:10:07.047Z]	<removed~kataras>	i be read that -pron- support more feature than nodejs and as far i know be the same thing so easy as node js right
[2015-09-02T13:10:58.659Z]	<removed~kataras>	do support module maybe be suit more than nodejs in -pron- case i just want to test -pron- module lib to a server
[2015-09-02T13:12:54.537Z]	<jbrantly>	be actually be merge back into i believe very soon but i do follow that too closely afaik  <user> do not support module
[2015-09-02T13:13:38.279Z]	<removed~kataras>	i know that be merge but in site tell that now be base on node js some feature more
[2015-09-02T13:14:51.764Z]	<removed~kataras>	if do not support module then be for -pron- case i wait for node js new version do -pron- know when  <user> be release approximately
[2015-09-02T13:52:51.558Z]	<jbrantly>	i do think a new node version  <user> support module either node be really on the bandwagon anytime soon
[2015-09-02T13:53:06.411Z]	<jbrantly>	module bandwagon
[2015-09-02T14:12:26.093Z]	<removed~kataras>	i do know -pron- so what can i do to use -pron- node module lib which be use some feature like function and yield keyword
[2015-09-02T14:13:00.336Z]	<removed~kataras>	-pron- library be publish to public i want a produce way to do -pron- maybe not now but when if not next node js version
[2015-09-02T14:26:12.783Z]	<jbrantly>	use babel to transpile the module part but not the other part
[2015-09-02T14:27:15.281Z]	<removed~kataras>	yes -pron- try to do that but in tsconfig if i choose as target the whole project compile to code
[2015-09-02T14:27:26.577Z]	<removed~kataras>	why -pron- make -pron- life so hard
[2015-09-02T14:27:29.886Z]	<removed~kataras>
[2015-09-02T14:28:28.532Z]	<jbrantly>	after -pron- get the code use babel to transpile that to commonjs modules
[2015-09-02T14:31:29.462Z]	<aboeglin>	still this whole modularity package module thing in js be kind of screw
[2015-09-02T14:42:39.407Z]	<removed~kataras>	i search on stackoverflow but i make -pron- all right i do not know what be wrong now
[2015-09-02T14:43:05.275Z]	<removed~kataras>	when i run nodejs
[2015-09-02T18:44:47.058Z]	<bartq>	be -pron- possible to use typescript compiler to compile both and as
[2015-09-02T18:45:04.076Z]	<bartq>	-pron- like to avoid typescript babel in the same project
[2015-09-02T20:08:30.128Z]	<removed~kataras>	thanks -pron- i check -pron-
[2015-09-02T20:25:13.954Z]	<removed~kataras>	typescript for visual studio just release download
[2015-09-02T20:25:27.784Z]	<removed~kataras>	-pron- beta version ofc
[2015-09-03T00:04:11.911Z]	<DanielRosenwasser>	yup -pron- can specifically get -pron- on npm by run npm install
--------------------------------------------------------------------------------------------------
[2015-09-02T14:42:18.160Z]	<removed~kataras>	i do -pron- and error occur regeneratorruntime be not define on the method that use and yield
--------------------------------------------------------------------------------------------------
[2015-09-02T19:14:43.204Z]	<removed~kataras>	but at the moment i understand that -pron- can do that
[2015-09-02T19:15:16.432Z]	<DanielRosenwasser>
[2015-09-02T19:15:22.252Z]	<DanielRosenwasser>	see that issue and
--------------------------------------------------------------------------------------------------
[2015-09-03T04:31:51.369Z]	<LPGhatguy>	dev that a pretty good solution especially with the autoloade introduce with new ts version
--------------------------------------------------------------------------------------------------
[2015-09-03T09:25:36.917Z]	<LabEG>	can i load js from ts
[2015-09-03T09:25:41.093Z]	<LabEG>	import glslify from glslify
[2015-09-03T09:25:45.380Z]	<LabEG>	error can not find module glslify
[2015-09-03T11:23:39.530Z]	<LabEG>	not find
[2015-09-03T11:24:45.415Z]	<LabEG>	import glslify from glslify
[2015-09-03T11:25:21.894Z]	<LabEG>	type script can not load js file only as global object
[2015-09-03T11:42:32.030Z]	<LabEG>	error can not find module glslify
[2015-09-03T11:43:17.563Z]	<LabEG>	i watch for in process monitor and -pron- find this file
[2015-09-03T11:43:53.332Z]	<LabEG>	target module commonjs noimplicitany true suppressimplicitanyindexerror true
[2015-09-03T11:44:33.977Z]	<LabEG>	browserify
[2015-09-03T11:44:41.205Z]	<LabEG>	tsify
[2015-09-03T11:45:32.161Z]	<charlespockert>	ah not use -pron- look like -pron- bundle and spoofs module loading
[2015-09-03T11:47:31.092Z]	<charlespockert>	ah right so -pron- use to load node module for browser
[2015-09-03T11:47:47.938Z]	<LabEG>	no in begin work tsify and after tsify transform work browserify
[2015-09-03T11:51:07.852Z]	<charlespockert>	sorry do know enough about those plugin to tell -pron- how -pron- should load the module
--------------------------------------------------------------------------------------------------
[2015-09-03T11:01:00.773Z]	<falsandtru>	hello be there someone who review -pron- be issue about compiler hang please
[2015-09-03T11:22:57.870Z]	<plantain-00>	-pron- should use tsd to install
[2015-09-03T11:23:01.072Z]	<plantain-00>
[2015-09-03T11:38:42.721Z]	<charlespockert>	typescript use modules so assume glslify be in a module format -pron- should import fine
[2015-09-03T11:39:09.778Z]	<charlespockert>
[2015-09-03T11:43:24.700Z]	<charlespockert>	what -pron- setup like what module loader be -pron- use
[2015-09-03T11:44:23.092Z]	<charlespockert>	yeah that -pron- ts compile but what module loader be -pron- use
--------------------------------------------------------------------------------------------------
[2015-09-03T11:59:11.025Z]	<LabEG>	tsc commonjs error can not find external module glslify
[2015-09-03T11:59:21.370Z]	<LabEG>	this be not plugin bug
[2015-09-03T11:59:26.358Z]	<LabEG>	this be ts bug
[2015-09-03T12:00:21.995Z]	<LabEG>	need method for load js file with external dts
[2015-09-03T12:00:32.477Z]	<LabEG>	or declare dts
[2015-09-03T12:04:58.114Z]	<charlespockert>	well i can load module fine use
[2015-09-03T12:07:11.327Z]	<LabEG>	no glslify load modular shader as browserify but for shader -pron- transform shader in browserify transformation
--------------------------------------------------------------------------------------------------
[2015-09-03T13:04:07.768Z]	<jbrantly>	-pron- need the file if tsd do work for -pron- then go and grab -pron- manually from the definitelytype repo then -pron- need to tell typescript that the exist -pron- can do that either with reference or the file that should be enough to get tsc to work once tsc be work then go back to browserify
[2015-09-03T13:04:34.033Z]	<jbrantly>	but -pron- absolutely not go to work unless -pron- have the file and -pron- instruct typescript to load -pron-
[2015-09-03T13:08:24.994Z]	<jbrantly>	actually i just go and look and -pron- seem like there be typing already write for glslify whoop
[2015-09-03T13:08:46.865Z]	<LabEG>	yep
[2015-09-03T13:08:48.957Z]	<jbrantly>	so that -pron- first issue d
[2015-09-03T13:09:10.094Z]	<jbrantly>	-pron- can write -pron- own declare module glslify
[2015-09-03T13:09:10.395Z]	<LabEG>	yep i write issue now
[2015-09-03T13:10:08.912Z]	<jbrantly>	but fyi reference be not just for global object -pron- a generic mechanism to load file and those file can declare module like declare module glslify
[2015-09-03T13:21:54.942Z]	<LabEG>	declare module glslify not work i need not a delcare i need load work code from module i need delcare module insert var glslify after typescript transformation
[2015-09-03T13:22:49.530Z]	<LabEG>	or just replace this declare function glslify url string string to this var glslify on ts transformation
[2015-09-03T13:25:42.629Z]	<jbrantly>	declare module glslify just tell typescript that the module exist and what -pron- api be typescript do not load working code from the module that be up to -pron- module loader in this case browserify
[2015-09-03T13:26:39.064Z]	<jbrantly>	since there be no typing and since -pron- target commonjs there be a workaround -pron- can use
[2015-09-03T13:28:37.997Z]	<jbrantly>	declare var require string t path string callback module any void void ensure path string callback require string t void void put that in a file somewhere then just use var glslify this effectively bypass typescript
[2015-09-03T13:29:40.829Z]	<jbrantly>	but browserify  <user> still see the require and  <user> bundle the module
[2015-09-03T13:35:07.161Z]	<LabEG>	declare function require url string function ballgisshader ballgisshader but browserify  <user> still see the require and  <user> bundle the module thank -pron- very much solve
--------------------------------------------------------------------------------------------------
[2015-09-03T13:06:45.644Z]	<LabEG>	declare function glslify url string stre -pron- do help ts want module reference this for global object
--------------------------------------------------------------------------------------------------
[2015-09-03T18:42:35.698Z]	<delaman>	hi  <user> typescript ever be able to support a more true style of overload the current workaround for overload in typescript be a little limit to -pron- be there something typescript can do in the future so that the compiler can support multiple overloaded function with an option of have different function definition without the need to do any type checking
[2015-09-03T18:52:18.081Z]	<delaman>	could this be solve use reflection such how other statically type language do
[2015-09-03T19:01:17.927Z]	<delaman>	actually i find a github issue talk about this so i  <user> read over that
--------------------------------------------------------------------------------------------------
[2015-09-03T22:44:49.556Z]	<LPGhatguy>	typescript be just a javascript superset there no javascript support for that typescript additionally do support type direct code emmision so something like that  <user> never land
--------------------------------------------------------------------------------------------------
[2015-09-04T00:55:32.337Z]	<divmgl>	so i start look into typescript today and i have to say -pron- really impressed with -pron- however i have a coworker who simply do not see the advantage of use typescript over vanilla javascript be -pron- safe to say that typescript help create a more object orient javascript
[2015-09-04T00:56:04.874Z]	<divmgl>	-pron- argue that functionally there no difference between -pron- example
[2015-09-04T00:56:31.806Z]	<divmgl>	and this var car model make model var honda honda model var civic new
[2015-09-04T00:57:45.935Z]	<divmgl>	be i think about typescript incorrectly
[2015-09-04T01:10:03.963Z]	<divmgl>	so i think i just read something online which clear thing up for -pron- well
[2015-09-04T01:10:09.511Z]	<divmgl>	microsoft typescript thumb microsoft typescript blob
[2015-09-04T01:11:42.384Z]	<DanielRosenwasser>	that last thing -pron- send be pretty well balance
[2015-09-04T01:12:17.616Z]	<divmgl>	the image
[2015-09-04T01:12:24.370Z]	<DanielRosenwasser>	yeah
[2015-09-04T01:12:33.963Z]	<divmgl>	cool yeah i like the explanation
[2015-09-04T01:12:37.273Z]	<DanielRosenwasser>	i would say that typescript and both make -pron- easy to write oo code the way that most dev prefer to write
[2015-09-04T01:13:17.157Z]	<DanielRosenwasser>	or what -pron- may call more traditional
[2015-09-04T01:13:48.724Z]	<DanielRosenwasser>	typescript add a few thing on top of that like property declaration in class which be propose for
[2015-09-04T01:14:34.404Z]	<divmgl>	what  <user> happen to typescript once become the standard
[2015-09-04T01:14:46.556Z]	<divmgl>	if ever
[2015-09-04T01:14:56.011Z]	<DanielRosenwasser>	do introduce type into the mix
[2015-09-04T01:15:02.520Z]	<divmgl>	true
[2015-09-04T01:15:11.022Z]	<divmgl>	maybe babeljs will be as relevant then
[2015-09-04T01:15:18.107Z]	<DanielRosenwasser>	but think of -pron- this way -pron- can write oo code in ruby or python or whatever but -pron- super easy to shoot -pron- in the foot and super hard to reason about a really big codebase
[2015-09-04T01:15:47.727Z]	<DanielRosenwasser>	not say those be bad language those be pretty fun language that i like use
[2015-09-04T01:16:24.783Z]	<DanielRosenwasser>	but when i can open up -pron- editor and -pron- show a red squiggle before i try run -pron- program that a lot nice than see -pron- crash halfway through
[2015-09-04T01:17:15.792Z]	<DanielRosenwasser>	or get code completion when i dot off something and know that the object i have be go to have those method
[2015-09-04T01:18:30.509Z]	<divmgl>	i agree that one of the big perk of use typescript that i like i separate most of -pron- code and test -pron- so that i catch thing like typos and syntax error early but when -pron- use c visual studio catch those problem for -pron- before -pron- even hit the compiler
[2015-09-04T01:18:41.559Z]	<divmgl>	so -pron- pretty cool to see that happen with javascript
[2015-09-04T01:20:38.302Z]	<divmgl>	be there plan to have generator in typescript
[2015-09-04T01:21:22.649Z]	<DanielRosenwasser>	yup -pron- hope to land downlevele generator in typescript along with
[2015-09-04T01:23:42.606Z]	<divmgl>	awesome
[2015-09-04T01:25:50.498Z]	<divmgl>	do the fact that typescript be write in typescript help improve -pron- development workflow
[2015-09-04T01:27:16.691Z]	<DanielRosenwasser>	i think -pron- tremendously helpful to write a compiler in the language -pron- targette
[2015-09-04T01:27:30.792Z]	<DanielRosenwasser>	obviously -pron- get -pron- own codebase to test out so that nice
[2015-09-04T01:28:00.591Z]	<DanielRosenwasser>	and -pron-  <user> know some of the pain point developer run into because -pron- face -pron- -pron-
[2015-09-04T01:28:23.267Z]	<divmgl>	i be go to mention that be the reason that typescript come about because certain project become unwieldy
[2015-09-04T01:30:04.198Z]	<DanielRosenwasser>	yeah if -pron- not mistaken some of the original problem for the initial conception of vs code monaco be that -pron- get pretty hard to build a big editor in javascript
[2015-09-04T01:30:48.417Z]	<DanielRosenwasser>	which get some of the gear in motion
[2015-09-04T01:30:59.830Z]	<divmgl>	i do know vs code be build in javascript cool
[2015-09-04T01:33:37.643Z]	<divmgl>	would -pron- happen to know what be compile -pron- to a window binary be -pron- build like on a wrapper like node webkit
[2015-09-04T01:40:00.737Z]	<divmgl>	haha -pron- okay
[2015-09-04T01:40:06.963Z]	<divmgl>	thanks i appreciate -pron- answer -pron- question
--------------------------------------------------------------------------------------------------
[2015-09-04T01:31:48.701Z]	<DanielRosenwasser>	well monaco and vs code be both mainly typescript from what i understand
[2015-09-04T01:32:09.279Z]	<DanielRosenwasser>	but yeah both be drive by js
[2015-09-04T01:36:00.596Z]	<DanielRosenwasser>	-pron- not sure have dive into the codebase but -pron- understanding be that -pron- may use electron
[2015-09-04T01:36:07.035Z]	<DanielRosenwasser>	but do quote -pron- on that
--------------------------------------------------------------------------------------------------
[2015-09-04T07:41:33.950Z]	<weswigham>	-pron- say vs code be build on electron at
--------------------------------------------------------------------------------------------------
[2015-09-04T16:43:34.145Z]	<RichiCoder1>	yup -pron- electron
--------------------------------------------------------------------------------------------------
[2015-09-05T10:59:45.369Z]	<dsebastien>	nice
--------------------------------------------------------------------------------------------------
[2015-09-05T12:15:53.736Z]	<s-panferov>	hello i have a question could please anyone tell -pron- what be the semantic difference between this two way to write interface property ts interface iface method void ts interface iface method void
[2015-09-06T06:12:36.278Z]	<s-panferov>	thank -pron- make a small doc tool for ts and this information be helpful
[2015-09-06T07:05:30.406Z]	<LPGhatguy>	panferov what kind of tool
--------------------------------------------------------------------------------------------------
[2015-09-05T21:07:06.891Z]	<removed~kataras>	indicate a function that return nothing void
[2015-09-05T21:07:52.663Z]	<removed~kataras>	and i think indicate a method that return nothing void i think no difference between and
[2015-09-05T21:09:58.341Z]	<removed~kataras>	i suppose that -pron- can use both of these for the same thing -pron- on -pron- as developer what style of code -pron- want
[2015-09-05T21:10:38.781Z]	<removed~kataras>	i be not sure for these but as i read the doc i understand that both of these case be the same thing
[2015-09-05T21:40:25.359Z]	<charlespockert>	panferov one use fat arrow syntax and assign the function to the method property and the other be but -pron- be equivalent the first be say there a property call method which have a function signature that take no arg and return void the second be say there a function that return void call method the compiled output  <user> be identical
[2015-09-06T07:05:40.117Z]	<LPGhatguy>	the typescript tsserver documentation service be pretty rad as be
--------------------------------------------------------------------------------------------------
[2015-09-06T07:50:24.657Z]	<s-panferov>	-pron- be like typedoc but with reactjs frontend for more interactive ux -pron- just an rnd activity to learn compiler internal
[2015-09-06T16:42:56.171Z]	<MicahZoltu>	import citizen from model citizen
[2015-09-06T16:44:17.232Z]	<MicahZoltu>	if so then -pron- need to make sure be in -pron- file array
[2015-09-06T16:53:35.022Z]	<MicahZoltu>	-pron- can make gulp use a which i recommend but if -pron- be tell gulp typscript to use -pron- tsconfig then -pron- mean -pron- be manually pass file into gulp
[2015-09-06T16:54:55.520Z]	<MicahZoltu>	then -pron-  <user> need to make sure gulp be feed what do -pron- gulp task look like right now
[2015-09-06T16:55:55.633Z]	<Odonno>	return module commonjs stylish return module commonjs reporter nyan
[2015-09-06T16:57:08.150Z]	<MicahZoltu>	what be dest
[2015-09-06T16:57:32.721Z]	<MicahZoltu>	model citizen
[2015-09-06T16:57:58.250Z]	<MicahZoltu>	at runtime -pron- test be look for in model
[2015-09-06T16:58:13.248Z]	<MicahZoltu>	which -pron- will find because -pron- need to look in model -pron- guess
--------------------------------------------------------------------------------------------------
[2015-09-06T12:14:49.055Z]	<Odonno>	hi all
[2015-09-06T12:14:57.056Z]	<Odonno>	reference model import model model citizen
[2015-09-06T12:15:43.361Z]	<Odonno>	i have a bug when i run -pron- unit test -pron- say but in vs code i find -pron- intellisense work
[2015-09-06T12:15:51.636Z]	<Odonno>	here be the citizen class
[2015-09-06T12:16:00.960Z]	<Odonno>
[2015-09-06T12:16:19.184Z]	<Odonno>	export class citizen name string
[2015-09-06T16:42:38.090Z]	<MicahZoltu>	probably not related to -pron- problem but at some point -pron-  <user> want to move to the new syntax rather than the old one
[2015-09-06T16:43:19.783Z]	<MicahZoltu>	be -pron- use a
[2015-09-06T16:50:20.099Z]	<Odonno>	oh thank for -pron- answer
[2015-09-06T16:50:50.226Z]	<Odonno>	i have a file but there be no file property what -pron- be suppose to do
[2015-09-06T16:51:33.228Z]	<MicahZoltu>
[2015-09-06T16:51:38.945Z]	<MicahZoltu>	-pron- contain a list of all the file -pron- want to compile
[2015-09-06T16:51:53.531Z]	<MicahZoltu>	in the case of -pron- test -pron- test should be in there as well as any of -pron- test dependency
[2015-09-06T16:52:42.754Z]	<MicahZoltu>	if -pron- leave the file array out then all ts and file in the folder and subfolder with the  <user> get pick up
[2015-09-06T16:52:49.205Z]	<Odonno>	i use gulp typescript to do the transpilation
[2015-09-06T16:52:57.986Z]	<MicahZoltu>	ah
[2015-09-06T16:53:42.287Z]	<MicahZoltu>	be -pron- pass to gulp
[2015-09-06T16:54:30.106Z]	<Odonno>	-pron- right i do not use the json file with gulp
[2015-09-06T16:54:57.250Z]	<Odonno>	but gulp be work i have all the file i want
[2015-09-06T16:55:09.985Z]	<MicahZoltu>	specifically the gulp task for -pron- unit test
[2015-09-06T16:55:37.550Z]	<MicahZoltu>	oh i think i misread -pron- question -pron- get the error at runtime
[2015-09-06T16:55:42.467Z]	<MicahZoltu>	not at compile time
[2015-09-06T16:56:03.170Z]	<Odonno>	i have two task
[2015-09-06T16:56:23.081Z]	<Odonno>	at runtime yes
[2015-09-06T16:57:28.139Z]	<Odonno>	var dest
[2015-09-06T16:58:37.043Z]	<Odonno>	oh right
[2015-09-06T16:58:40.487Z]	<Odonno>	-pron- test that
[2015-09-06T16:59:06.030Z]	<MicahZoltu>	-pron- can verify this by look at the test generate -pron- should see a commonjs style require statement in there somewhere
[2015-09-06T17:10:20.482Z]	<Odonno>	yep -pron- work
[2015-09-06T17:10:27.166Z]	<Odonno>	but there be something weird
--------------------------------------------------------------------------------------------------
[2015-09-06T17:10:34.618Z]	<Odonno>	i do not have the definition anymore
--------------------------------------------------------------------------------------------------
[2015-09-06T17:14:40.402Z]	<MicahZoltu>	do -pron- still have the reference line
[2015-09-06T17:15:25.092Z]	<MicahZoltu>	i have use the old reference stuff at all so i probably can be much help here however i suspect that the problem be with the mismatch path
[2015-09-06T17:15:25.275Z]	<Odonno>	yes -pron- do
[2015-09-06T17:15:55.657Z]	<Odonno>	what do -pron- mean
[2015-09-06T17:16:07.020Z]	<Odonno>	in vs code -pron- do nothing
[2015-09-06T17:16:10.428Z]	<MicahZoltu>	val foo new
[2015-09-06T17:16:22.493Z]	<Odonno>	but in -pron- other file i can access to property
[2015-09-06T17:17:55.815Z]	<Odonno>	-pron- weird
[2015-09-06T17:18:42.571Z]	<Odonno>	ah -pron- do that to make -pron- work
[2015-09-06T17:19:04.861Z]	<Odonno>	var citizen model citizen var citizen new
--------------------------------------------------------------------------------------------------
[2015-09-06T17:14:55.164Z]	<MicahZoltu>	and do -pron- still point to model
--------------------------------------------------------------------------------------------------
[2015-09-06T17:15:38.592Z]	<MicahZoltu>	what do a line in -pron- test look like when -pron- access the citizen
[2015-09-06T17:16:18.037Z]	<MicahZoltu>	-pron- guess -pron- have a line like that somewhere in -pron- test
[2015-09-06T17:18:05.493Z]	<MicahZoltu>	if -pron- assumption be correct then the problem be that typescript do know anything about -pron- only know about citizen
[2015-09-06T17:19:40.802Z]	<MicahZoltu>	and that run
[2015-09-06T17:19:52.813Z]	<Odonno>	yes test pass
[2015-09-06T17:20:26.359Z]	<Odonno>	but if i do import instead of var -pron- do not work
--------------------------------------------------------------------------------------------------
[2015-09-06T17:20:29.034Z]	<MicahZoltu>	this show -pron- lack of understanding of require syntax i think -pron- have to do a default export to make that work which -pron- do appear -pron- do in -pron- code sample
[2015-09-06T17:20:54.324Z]	<MicahZoltu>	the modern way to do -pron- be to do import citizen from model citizen
[2015-09-06T17:21:19.594Z]	<MicahZoltu>	however -pron- have a problem in that the relative path from test to code be different for source and release
[2015-09-06T17:21:48.055Z]	<MicahZoltu>	really -pron- need to make -pron- so -pron- test have the same relative path to -pron- source in both source and release
[2015-09-06T17:22:03.323Z]	<MicahZoltu>	which likely mean re arrange -pron- project structure a bit
[2015-09-06T17:22:10.688Z]	<Odonno>	vs code do not like this syntax
[2015-09-06T17:22:31.631Z]	<MicahZoltu>	-pron- do like import citizen from model citizen
[2015-09-06T17:22:37.164Z]	<Odonno>	yep
[2015-09-06T17:22:38.057Z]	<MicahZoltu>	what version of typescript be vs code use
[2015-09-06T17:22:47.373Z]	<Odonno>	beta i think
[2015-09-06T17:23:25.525Z]	<Odonno>	the think be that i like the current structure src release folder
[2015-09-06T17:24:34.416Z]	<MicahZoltu>	-pron- may be possible to get thing work with the current structure but -pron- be likely to be difficult
[2015-09-06T17:25:03.210Z]	<Odonno>	ok
[2015-09-06T17:25:10.640Z]	<MicahZoltu>	what error do -pron- get in vs code when -pron- use import citizen from model citizen
[2015-09-06T17:25:15.991Z]	<Odonno>	there be just the test that be do that
[2015-09-06T17:25:27.288Z]	<Odonno>	in -pron- own src folder everything work fine
[2015-09-06T17:25:41.337Z]	<MicahZoltu>	yeah because all the path be relative and do change between source and release
[2015-09-06T17:26:51.157Z]	<MicahZoltu>	the problem be that the typescript compiler be run against -pron- source code while the runtime be run against -pron- release code at compile time -pron- need a path that contain src in -pron- and at runtime -pron- need a path that contain release in -pron-
[2015-09-06T17:27:31.862Z]	<MicahZoltu>	the problem be that whatever path -pron- have in -pron- source code be move over to -pron- release code as be no conversion
[2015-09-06T17:27:53.213Z]	<MicahZoltu>	-pron- could maybe write a gulp task that change all reference to to but that be probably overkill
[2015-09-06T17:28:32.025Z]	<Odonno>	-pron- be because -pron- be not a module
[2015-09-06T17:28:33.746Z]	<MicahZoltu>	-pron- may  <user> be able to use the legacy stuff reference to make typescript not use the same path as -pron- runtime code
[2015-09-06T17:28:57.022Z]	<MicahZoltu>	import citizen from model citizen
[2015-09-06T17:29:08.645Z]	<MicahZoltu>	-pron- say model citizen be not a module
[2015-09-06T17:29:30.101Z]	<Odonno>	yes
[2015-09-06T17:29:37.440Z]	<Odonno>	because -pron- be not one
[2015-09-06T17:30:08.011Z]	<MicahZoltu>	-pron- have a file at model that look like this right ts export class citizen
[2015-09-06T17:30:16.984Z]	<MicahZoltu>	if so then -pron- have a module
[2015-09-06T17:30:31.388Z]	<MicahZoltu>	oh right -pron- be pass the file to gulp
--------------------------------------------------------------------------------------------------
[2015-09-06T17:30:42.887Z]	<Odonno>	export citizen
[2015-09-06T17:30:50.119Z]	<Odonno>	at the end of the file
[2015-09-06T17:30:57.042Z]	<MicahZoltu>	ah -pron- leave that bit out
[2015-09-06T17:31:36.554Z]	<MicahZoltu>	now -pron- make sense why -pron- var citizen require new citizen work
[2015-09-06T17:31:36.933Z]	<Odonno>	sorry
[2015-09-06T17:31:40.293Z]	<MicahZoltu>	-pron- okay
[2015-09-06T17:32:42.120Z]	<MicahZoltu>	-pron- not sure how exactly to resolve -pron- problem without re arrange -pron- folder structure and switch to the new module system
[2015-09-06T17:32:58.744Z]	<Odonno>	ok no problem
[2015-09-06T17:33:22.990Z]	<Odonno>	right now the most important part be that i have intellisense in src folder
[2015-09-06T17:33:37.661Z]	<Odonno>	the test  <user> fail in any case if there be something wrong
--------------------------------------------------------------------------------------------------
[2015-09-06T17:33:09.991Z]	<MicahZoltu>	i have use the old system at all only read up on -pron- a long time ago and in the new system -pron- need -pron- path to match pende an upcoming pr to typescript
--------------------------------------------------------------------------------------------------
[2015-09-06T17:34:12.528Z]	<MicahZoltu>	without a -pron- not entirely sure how vscode be pick out file perhaps all file in the current workspace
[2015-09-06T17:35:30.216Z]	<Odonno>	with reference
[2015-09-06T17:36:55.577Z]	<Odonno>	never use vs code and typescript from now
--------------------------------------------------------------------------------------------------
[2015-09-06T17:36:09.909Z]	<MicahZoltu>	vscode  <user> work i believe with the new system which do use reference
--------------------------------------------------------------------------------------------------
[2015-09-06T17:36:41.636Z]	<Odonno>	well i be a newbie i start a new project from scratch yesterday
[2015-09-06T17:37:49.503Z]	<MicahZoltu>	i assume -pron- be work with an old code base
--------------------------------------------------------------------------------------------------
[2015-09-06T17:37:42.757Z]	<MicahZoltu>	-pron- sadden -pron- that the doc still have the old system in -pron- reference
--------------------------------------------------------------------------------------------------
[2015-09-06T17:38:41.627Z]	<MicahZoltu>	though typescript have be move forward at breakneck speed so -pron- not entirely surprised that the doc can keep up
[2015-09-06T17:39:20.756Z]	<Odonno>	hell the doc
[2015-09-06T17:39:38.020Z]	<MicahZoltu>	heh
[2015-09-06T17:40:12.435Z]	<Odonno>	like two or three file with dependency management
[2015-09-06T17:40:25.810Z]	<Odonno>	that the tricky part
[2015-09-06T17:41:39.644Z]	<MicahZoltu>	i write a template for typescript in the browser with jspm systemjs
[2015-09-06T17:41:49.272Z]	<MicahZoltu>	though -pron- do solve the unit test problem
--------------------------------------------------------------------------------------------------
[2015-09-06T17:39:59.015Z]	<Odonno>	maybe vs code need a default project template with ts codebase up to date
--------------------------------------------------------------------------------------------------
[2015-09-06T17:42:12.320Z]	<MicahZoltu>	and -pron- be really bare bone so if -pron- be new -pron- be a great place to start
--------------------------------------------------------------------------------------------------
[2015-09-07T03:42:53.791Z]	<LPGhatguy>	i have get ts to work well with systemjs yet so -pron- be stick on browserify over here
[2015-09-07T03:58:22.524Z]	<MicahZoltu>	but with ts come some bug fix that make -pron- all work great
--------------------------------------------------------------------------------------------------
[2015-09-07T03:58:13.095Z]	<MicahZoltu>	-pron- do until ts
--------------------------------------------------------------------------------------------------
[2015-09-07T03:58:45.061Z]	<LPGhatguy>	-pron- run the late ts dev some nightly and i think -pron- go to wait for some stuff to settle
--------------------------------------------------------------------------------------------------
[2015-09-07T03:59:07.917Z]	<LPGhatguy>	the new module resolution do quite mix with -pron- codebase yet -pron- want a mix of classic and node strategy really and typing file be still a barrier to modularization
[2015-09-07T04:02:13.729Z]	<MicahZoltu>	yeah there be active development to help resolve the typing issue
[2015-09-07T04:02:25.726Z]	<MicahZoltu>	-pron- very glad -pron- have finally work -pron- way up the priority list
--------------------------------------------------------------------------------------------------
[2015-09-07T04:07:31.039Z]	<LPGhatguy>	-pron- surprised the angular team do bring -pron- up earlier
[2015-09-07T04:11:54.933Z]	<MicahZoltu>	-pron- be rage about -pron- for a while but the typescript team have have other thing on -pron- plate that be high priority
--------------------------------------------------------------------------------------------------
[2015-09-07T04:12:13.594Z]	<MicahZoltu>	i suspect the issue be that most typescript user be come from javascript where the situation be beyond abysmal
[2015-09-07T04:12:52.442Z]	<MicahZoltu>	i suspect that the angular team be just use to have no real good answer to dependency management static typing etc
[2015-09-07T04:15:54.434Z]	<LPGhatguy>	well the angular team be probably all java refugee hah
[2015-09-07T04:16:40.138Z]	<MicahZoltu>	yeah
--------------------------------------------------------------------------------------------------
[2015-09-07T04:12:28.846Z]	<MicahZoltu>	i on the other hand be come from where the situation be pretty good relatively speak
--------------------------------------------------------------------------------------------------
[2015-09-07T04:16:22.972Z]	<LPGhatguy>	i come from but have to solve problem with developer from js so i turn to typescript
[2015-09-07T04:16:29.760Z]	<LPGhatguy>	-pron- have be a godsend overall but -pron- still rough
--------------------------------------------------------------------------------------------------
[2015-09-07T11:14:16.003Z]	<corneliutusnea>	hi be there a good library for use promise defer with typescript
--------------------------------------------------------------------------------------------------
[2015-09-07T13:08:44.795Z]	<charlespockert>	bluebird
[2015-09-07T13:09:08.704Z]	<charlespockert>	try bluebird -pron- have typing
[2015-09-07T13:09:17.052Z]	<charlespockert>
--------------------------------------------------------------------------------------------------
[2015-09-07T13:23:22.113Z]	<removed~kataras>	bluebird be the good library for modern promise style programming i m use bluebird in all of -pron- project sometimes i extend the promise t class  <user> try -pron- urself -pron- can be helpful
[2015-09-07T18:45:46.826Z]	<MicahZoltu>	just use a modern browser
[2015-09-07T18:50:10.494Z]	<removed~kataras>	-pron- can  <user> use -pron- with node js of course i use -pron- mostly there
[2015-09-07T19:13:23.429Z]	<RichiCoder1>	huh i like that edge have be pull out into -pron- own now
--------------------------------------------------------------------------------------------------
[2015-09-07T21:59:39.181Z]	<robwormald>	anybody have any idea how to grab jsdoc comment node use the ts compiler -pron- get as far as get the tag use getjsdoccomment but that only give -pron- the tag -pron- class or name but not the corresponding info
[2015-09-08T05:06:27.602Z]	<robwormald>	be that but -pron- not widely support
--------------------------------------------------------------------------------------------------
[2015-09-07T22:22:53.978Z]	<corneliutusnea>	guy be there a way to get notification from change property inside an array
[2015-09-07T22:23:32.087Z]	<corneliutusnea>	model array address i need to get a notification when the state inside an address have change
[2015-09-07T22:23:54.558Z]	<corneliutusnea>	oh sorry wrong chat window that be suppose to be for aurelia guy
[2015-09-07T22:28:42.782Z]	<MicahZoltu>	-pron- be actually an es question specifically
[2015-09-08T02:52:03.241Z]	<corneliutusnea>	a good way to be notify when a property in a child object change
[2015-09-08T02:52:37.422Z]	<corneliutusnea>	should i have -pron- own onpropertychange event like have
[2015-09-08T05:06:14.622Z]	<robwormald>	there be really such a thing
--------------------------------------------------------------------------------------------------
[2015-09-08T16:38:56.233Z]	<Odonno>	ey
[2015-09-08T16:39:03.499Z]	<Odonno>	how be -pron-
[2015-09-08T16:39:46.279Z]	<Odonno>
[2015-09-08T16:41:26.195Z]	<Odonno>	i have an error right now write unit test i do know why i receive this error because other test on other method work and the code implementation work fine in release object universaltime have no method elaspe
[2015-09-08T16:57:24.773Z]	<vladima>	typo elaspe elapse
[2015-09-08T17:12:21.273Z]	<Odonno>	omg
[2015-09-08T17:12:40.505Z]	<Odonno>	thanks i need glass sorry i have already
[2015-09-08T17:37:54.837Z]	<sebastian-lenz>	if -pron- look for the comment of certain node this be how i be able to retrieve -pron- through the compiler interface
--------------------------------------------------------------------------------------------------
[2015-09-08T18:15:39.328Z]	<clinington>	do with web essential instal support file in a folder call
--------------------------------------------------------------------------------------------------
[2015-09-08T20:07:23.142Z]	<acopalipsis>	there be those who write in phpstorm what to do if the library have no declaration
[2015-09-08T20:08:30.526Z]	<acopalipsis>	the entire assembly be write independently that be not in use build in tool ide
[2015-09-08T20:35:01.743Z]	<robwormald>	lenz most helpful thank
[2015-09-09T10:47:00.580Z]	<LabEG>	i write webworker
[2015-09-09T10:47:10.266Z]	<LabEG>	reference no default reference typescript bin
[2015-09-09T10:47:54.802Z]	<LabEG>	and on compilation have error
[2015-09-09T10:48:01.645Z]	<LabEG>	error in browserify typescript bin error can not find name eventinit error in browserify typescript bin error can not find name uievent error in browserify typescript bin error can not find name uievent error in browserify typescript bin error can not find name msappasyncoperation error in browserify typescript bin error can not find name msexecatpriorityfunctioncallback error in browserify typescript bin error can not find name msexecatpriorityfunctioncallback error in browserify typescript bin error can not find name xmlhttprequestupload error in browserify typescript bin error can not find name uievent error in browserify typescript bin error can not find name uievent error in browserify typescript bin error can not find name uievent error in browserify typescript bin error can not find name node error in browserify typescript bin error can not find name nodelist error in browserify typescript bin error can not find name position error in browserify typescript bin error can not find name positionerror error in browserify typescript bin error can not find name mediaquerylist error in browserify typescript bin error can not find name mutationrecord error in browserify typescript bin error can not find name mutationobserver error in browserify typescript bin error can not find name audiobuffer
[2015-09-09T10:48:10.272Z]	<LabEG>	where be problem
[2015-09-09T12:07:16.622Z]	<hschmidt99>	hello everyone in javascript knockout i can use observable like function but have extend method on -pron- like setter var txt observable getter var txt additional method getter on function
[2015-09-09T12:08:03.848Z]	<hschmidt99>	be there a way to emulate this in typescript so that i can call -pron- variable without parameter and that would work like a getter while -pron- work as a setter when i call -pron- with parameter
[2015-09-09T13:16:02.402Z]	<OlegDokuka>	hi guy i have get issue during compilation and have no idea how to fix -pron- the argument type typeof a impossible appoint parameter type new any new arg any any typescript class a stre can anybody help -pron- with this
[2015-09-09T13:17:40.634Z]	<OlegDokuka>	be there any way to declare something like this typescript module type export type class new any new arg any any for any kind of constructor
[2015-09-09T14:20:31.324Z]	<jxpx777>	when use advanced optimization in google closure compiler -pron- complain about dangerous use of global this for this line var extend this function d b anyone have a simple way to work around this
[2015-09-09T14:38:03.655Z]	<jxpx777>	i update to the late release of closure compiler just in case -pron- make -pron- well in the sept release but still get the warning
[2015-09-09T14:45:33.991Z]	<removed~kataras>	hello to everyone have -pron- module definition at definitelytyped github repo but -pron- not list at can anyone explain -pron- how can i list -pron- definition at the website of tsd too thank
[2015-09-09T14:46:26.124Z]	<removed~kataras>	i already ask the definitelytype community and i m wait for the good answer
[2015-09-09T14:48:22.892Z]	<removed~kataras>	the first version of be publish month ago and not list to tsd console and tsd website yet why
[2015-09-09T15:30:44.209Z]	<jxpx777>	if var extend this function d b be write with a self execute function wrapper with a globalscope parameter closure compiler do complain but i do want to write code to manually munge this definition of extend
[2015-09-09T20:50:00.311Z]	<aicioara>	hello i be wonder if the cla bot -pron- be use for github be open source or make in house
[2015-09-09T21:34:16.789Z]	<DanielRosenwasser>	-pron- pretty sure -pron- make in house but -pron- not sure
[2015-09-10T22:01:09.180Z]	<DanielRosenwasser>	what exactly be -pron- interested in do
[2015-09-10T22:27:27.929Z]	<DanielRosenwasser>	hey the ts compiler api may be the right place to look
[2015-09-10T22:27:36.678Z]	<DanielRosenwasser>	by the way be -pron- still work with amadeusz
[2015-09-11T03:35:39.974Z]	<LPGhatguy>
[2015-09-11T04:35:49.248Z]	<LPGhatguy>	but there be no such flag document
--------------------------------------------------------------------------------------------------
[2015-09-10T19:37:24.720Z]	<JoshVarty>	if i want to make -pron- own javascript typescript rewriter do -pron- think i could leverage typescript
[2015-09-10T19:37:31.507Z]	<JoshVarty>	have anyone do this before
[2015-09-10T22:09:09.519Z]	<JoshVarty>	-pron- build a live code tool for c call alive
[2015-09-10T22:09:20.886Z]	<JoshVarty>	-pron- work by rewrite people code and run -pron-
[2015-09-10T22:10:02.437Z]	<JoshVarty>	-pron- get an intern who -pron- like to have build the same tool for js ts
[2015-09-10T22:10:32.900Z]	<JoshVarty>	so i be curious whether the ts compiler may be a good starting point for -pron- to look at
--------------------------------------------------------------------------------------------------
[2015-09-10T20:55:24.885Z]	<apastuhov>	if someone know please help
[2015-09-10T21:02:05.967Z]	<LabEG>	tslint rule
[2015-09-10T22:33:15.009Z]	<DanielRosenwasser>	gotcha codeconnect and alive both look awesome if -pron- can help -pron- guy out with typescript javascript support in some fashion that would be great
[2015-09-11T03:38:55.606Z]	<LPGhatguy>	oof -pron- work with tsc -pron- go to go point -pron- finger at someone else
[2015-09-11T20:56:25.256Z]	<danquirk>	-pron- might have an old copy of the repo
[2015-09-11T20:56:41.841Z]	<danquirk>	if -pron- add a new dev dependency in then when -pron- do a git pull on the repo -pron- have that new dependency list
--------------------------------------------------------------------------------------------------
[2015-09-10T22:29:40.428Z]	<JoshVarty>	yeah -pron- both work together on alive these day but -pron- now base out of vancouver and -pron- in waterloo
[2015-09-10T22:32:15.362Z]	<JoshVarty>	out of curiosity how -pron- know amadeu
[2015-09-10T22:33:32.924Z]	<JoshVarty>	thank
[2015-09-10T22:33:35.072Z]	<DanielRosenwasser>	-pron- both work at the same place around the same time
[2015-09-10T22:34:49.468Z]	<DanielRosenwasser>	coope to be honest smile
[2015-09-10T22:36:35.140Z]	<JoshVarty>	awesome that really cool small world haha
--------------------------------------------------------------------------------------------------
[2015-09-11T03:36:11.616Z]	<LPGhatguy>	additionally two do resolve if -pron- in the root
[2015-09-11T03:36:28.709Z]	<LPGhatguy>	but two and a two should be the same with classic right
[2015-09-11T03:40:40.421Z]	<LPGhatguy>	-pron- may have be a browserify bug
[2015-09-11T04:34:45.593Z]	<LPGhatguy>	how be resolution handle use moduleresolution node with commonjs module
[2015-09-11T04:35:45.923Z]	<LPGhatguy>	the relevant issue link to by the what new post say that the root folder would be determine by a command line flag
--------------------------------------------------------------------------------------------------
[2015-09-11T06:47:32.810Z]	<gastrodia>	hi in typescript have any method to do this
[2015-09-11T06:47:56.688Z]	<gastrodia>	import as f from f declare module nodetype to export f as a type so i can type fs
--------------------------------------------------------------------------------------------------
[2015-09-11T09:06:08.253Z]	<hschmidt99>	-pron- try to migrate an exist spa base upon requirejs to typescript and -pron- run into problem concern module resolution
[2015-09-11T09:07:44.132Z]	<hschmidt99>	-pron- get -pron- set up for requirejs where i define path like jquery and so on but call lead to can not find external module
[2015-09-11T09:08:52.329Z]	<hschmidt99>	now -pron- google issue microsoft typescript but the comment be hard to grog and i just want to know be there a solution workaround for the module path resolution
[2015-09-11T20:53:21.976Z]	<JoshVarty>	delete the repo and re cloning seem to have fix w e -pron- be that be wrong
--------------------------------------------------------------------------------------------------
[2015-09-11T09:39:15.873Z]	<pawciobiel>	-pron- newbie to js world so please be forgiving while work with typescript i keep have strange issue especially when use inheritance between viewmodel thing like function be not define or attribute be not a function on observable in general object misbehave especially when i want to call setinterval in a constructor pass a method to -pron- seam to be an issue i have to define method on an object as oppose to prototype but then some other method down the chain or parent method super be not accessible so -pron- question be class a public one two which way do -pron- guy define -pron- method because have a mixture of both seam to cause -pron- issue
[2015-09-11T09:46:11.339Z]	<pawciobiel>	ideally i would want -pron- define as one so -pron- be available in constructor but then i want to call or from -pron- too
--------------------------------------------------------------------------------------------------
[2015-09-11T16:27:25.552Z]	<apastuhov>	why do typescript team decide to use jakejs as a build tool but not gulp grunt or any other more popular tool
[2015-09-11T16:28:59.962Z]	<atschx>	who know
[2015-09-11T20:56:50.252Z]	<danquirk>	but -pron- need to re run npm install to get the dependency actually instal
[2015-09-11T20:57:05.884Z]	<danquirk>	i add that mocha reporter a month or so ago so if -pron- originally clone the repo before that that probably how -pron- end up in that situation
--------------------------------------------------------------------------------------------------
[2015-09-11T20:04:29.812Z]	<JoshVarty>	hey guy -pron- just try to get the ts repo building and try to run some test -pron- new to the node landscape so -pron- probably make some mistake
[2015-09-11T20:04:45.880Z]	<JoshVarty>	-pron- follow the instruction on the readme and have node and jake instal
[2015-09-11T20:05:58.393Z]	<JoshVarty>	and as i start type -pron- question i double check -pron- step and now -pron- work fine
[2015-09-11T20:06:04.342Z]	<JoshVarty>	whoops haha
[2015-09-11T20:06:47.427Z]	<JoshVarty>	actually when i try jake runtest -pron- get the error error invalid reporter mocha fivemat progress reporter
--------------------------------------------------------------------------------------------------
[2015-09-11T21:00:41.527Z]	<DanielRosenwasser>	npm install npm install jake jake to build jake runtest to run test jake to see other task
[2015-09-11T21:12:39.191Z]	<JoshVarty>	yeah -pron- all seem to be good to go now
[2015-09-11T21:34:34.821Z]	<JoshVarty>
--------------------------------------------------------------------------------------------------
[2015-09-11T22:05:58.490Z]	<ghost~55df963f0fc9f982beaed62c>	be there a way to use typescript with bluebird promisifyall atm -pron- get error because readdirasync do really exist until runtime so what can i do be there a for this
[2015-09-11T22:09:49.072Z]	<ghost~55df963f0fc9f982beaed62c>	oop forget to mention although -pron- may be obvious -pron- use node typescript
[2015-09-11T23:00:11.071Z]	<danquirk>
[2015-09-11T23:00:54.609Z]	<danquirk>	that should do the trick if all -pron- be miss be type definition
[2015-09-11T23:02:09.094Z]	<DanielRosenwasser>	which version of typescript be -pron- use
[2015-09-11T23:03:22.836Z]	<DanielRosenwasser>	what do -pron- mean export f as a type
[2015-09-11T23:05:31.507Z]	<DanielRosenwasser>	check out description for resolution here
[2015-09-12T04:36:30.297Z]	<duanyao>	i just notice that in ts no longer have type any if bar actually exist on type of foo be this an intentional change
[2015-09-12T11:29:40.397Z]	<removed~kataras>	error class terminal incorrectly implement interface stream type of property addlistener be incompatible type event string listener function eventemitter be not assignable to type event string listener function eventemitter type eventemitter be not assignable to type eventemitter
[2015-09-12T11:30:19.706Z]	<removed~kataras>	do anyone know what be go wrong here i try to add -pron- test to the definitely type and this be the only error i get
[2015-09-12T11:31:54.484Z]	<removed~kataras>	the pull request be that last edit commit be because of this error and i could fix -pron- yet
[2015-09-12T15:20:27.448Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- instal the type definition
[2015-09-12T16:08:16.358Z]	<ghost~55df963f0fc9f982beaed62c>	typescript import as f from f import as promise from bluebird export class filename public static string in this case the compiler give -pron- the following error text error property readdirasync do not exist on type typeof f
[2015-09-12T16:08:53.028Z]	<ghost~55df963f0fc9f982beaed62c>	i understand why but -pron- not sure what the good approach to fix -pron-
[2015-09-12T16:13:53.017Z]	<apastuhov>	but there be no readdirasync in from export function string callback err file string void void export function string string
[2015-09-12T16:15:20.042Z]	<apastuhov>
[2015-09-12T16:18:29.434Z]	<ghost~55df963f0fc9f982beaed62c>	hmm
[2015-09-12T16:19:08.740Z]	<apastuhov>	so -pron- must write error file file
[2015-09-12T16:19:41.997Z]	<ghost~55df963f0fc9f982beaed62c>	okay i think -pron- miss or do know what promisifyall do then
[2015-09-12T16:21:37.764Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- basically wrap readdir with readdirasync so -pron- can use promise instead of callback and -pron- do that on runtime
[2015-09-12T16:22:16.190Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- do have that method define in
[2015-09-12T16:22:54.605Z]	<apastuhov>	yes i do know and what about var fs and add this to -pron- static promisifyall object option t
[2015-09-12T16:23:02.806Z]	<apastuhov>	hm thank for the explaining
[2015-09-12T16:23:09.304Z]	<ghost~55df963f0fc9f982beaed62c>	no problem
[2015-09-12T16:25:34.564Z]	<apastuhov>	and what do -pron- think about any hotfix -pron- be not nice but work
[2015-09-12T16:25:55.572Z]	<ghost~55df963f0fc9f982beaed62c>	hmm
[2015-09-12T16:26:36.645Z]	<ghost~55df963f0fc9f982beaed62c>	how  <user> that help
[2015-09-12T16:27:27.187Z]	<ghost~55df963f0fc9f982beaed62c>	i mean -pron- not an issue with promisifyall but with what inject at runtime and lack of information at compile time
[2015-09-12T16:28:07.495Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- will auto magically  <user> allow -pron- to use readdirasync be -pron-
[2015-09-12T16:30:10.845Z]	<apastuhov>	yep but no compile error
[2015-09-12T16:31:57.111Z]	<apastuhov>	do -pron- need to use promisifyall -pron- seem that promisify solve the problem
[2015-09-12T16:32:40.522Z]	<ghost~55df963f0fc9f982beaed62c>	nop i do need to use promisifyall just start to use bluebird so -pron- just experiment
[2015-09-12T16:33:12.115Z]	<apastuhov>	xd
[2015-09-12T16:38:43.800Z]	<ghost~55df963f0fc9f982beaed62c>	yeah -pron- patch and add the definition to use any i guess -pron- the good i can do for now unless i want to write and add everything manually d
[2015-09-12T16:47:39.321Z]	<ghost~55df963f0fc9f982beaed62c>	pastuhov thank
--------------------------------------------------------------------------------------------------
[2015-09-12T17:24:05.704Z]	<apastuhov>	sorry i do not find any solution worried a week ago i use decorator to dynamically map property and function from one object to another but there be no need in intellisense so this be not -pron- case
[2015-09-13T06:50:58.151Z]	<DanielRosenwasser>	that should never have not work -pron- have to be more specific
[2015-09-14T09:15:07.247Z]	<duanyao>	for non browser environment user do introduce so -pron- should not be a problem -pron- seem that global variable and property of window be manually sync in which be error prone -pron- would be nice to have a tool to enforce this rule
[2015-09-14T14:20:48.632Z]	<SergioMorchon>	due to the new module specification the recommendation be to use the new sintaxis typescript import somemod from somemodule import as somemod from somemodule import myclass anotherthe from somemodule and son on
--------------------------------------------------------------------------------------------------
[2015-09-12T20:06:22.300Z]	<robwormald>	pretty sure promisifyall return a new object
[2015-09-12T20:06:40.202Z]	<robwormald>	so -pron- can just define an interface for that object
[2015-09-12T20:07:11.556Z]	<robwormald>	interface qfs
[2015-09-12T20:07:42.172Z]	<robwormald>	any
[2015-09-12T20:08:32.433Z]	<robwormald>	then var fs qfs
[2015-09-12T20:09:06.940Z]	<robwormald>	on -pron- phone sorry about format but that the idea
[2015-09-12T20:48:38.999Z]	<ghost~55df963f0fc9f982beaed62c>	yeah -pron- do return a new object
[2015-09-12T20:49:39.673Z]	<ghost~55df963f0fc9f982beaed62c>	i end up do the follow thing let f any
[2015-09-14T20:07:02.408Z]	<DickvdBrink>
--------------------------------------------------------------------------------------------------
[2015-09-13T15:36:48.394Z]	<apastuhov>	please help this work typescript namespace main namespace private export function func export function public this be not work error can not find name private namespace main namespace private export function func namespace main export function public what i want be to separate private logic and public interface so private method and class  <user> not be able from outer scope if i write export namespace private -pron-  <user> export private from main but i  <user> want -pron- result be clean like declare namespace main function public void
[2015-09-14T02:04:26.444Z]	<delaman>	when use typescript with nodejs what be the preferred way to import a module be -pron- import somemod or should -pron- be import somemod from somemodule both work but be one prefer recommend more than the other when -pron- come to a nodejs application
[2015-09-14T03:11:14.425Z]	<duanyao>	i be wrong the problem be that new work before but not with -pron- seem because url be not a property of window before but -pron- be addde in a subtle break change i think ts should make sure all global variable be property of window
[2015-09-14T03:41:04.900Z]	<LPGhatguy>	that would be incompatible with non browser environment
[2015-09-14T06:27:49.036Z]	<gastrodia>	yes i what to export f as a type
[2015-09-14T16:16:33.919Z]	<apastuhov>	why separate internal module compile as two function
--------------------------------------------------------------------------------------------------
[2015-09-14T07:45:45.392Z]	<bpasero>	can i combine tsc and in a way that i can add additional ts file to the compilation via command line but still get all the one configure from tsc would take but  <user> check for more
--------------------------------------------------------------------------------------------------
[2015-09-14T14:45:35.190Z]	<JoshVarty>	hey guy to run the ts compiler test in visual studio be there any special step i need to take
[2015-09-14T14:45:50.977Z]	<JoshVarty>	i create a new node project from exist code and point -pron- at the typescript root folder
[2015-09-14T14:46:04.367Z]	<JoshVarty>	-pron- able to build run the test with jake via commandline
[2015-09-14T14:46:30.490Z]	<JoshVarty>	but -pron- get a lot of error within vs so -pron- wonder if i miss a step
[2015-09-14T14:46:35.428Z]	<delaman>	thank for the excellent response
--------------------------------------------------------------------------------------------------
[2015-09-14T19:54:08.133Z]	<JoshVarty>	be there a syntax visualizer for typescript
--------------------------------------------------------------------------------------------------
[2015-09-14T20:07:00.208Z]	<DickvdBrink>	i write one a long time ago so -pron- use a very old version of typescript and -pron- poorly write
[2015-09-14T20:08:12.892Z]	<DickvdBrink>	try to update -pron- a few week ago but do finish -pron- yet
--------------------------------------------------------------------------------------------------
[2015-09-14T22:42:24.840Z]	<jamesmoey>	hi guy i have a question do for of suppose to work on iterator in -pron- work on but could not get -pron- work on i be use for of on querylist from angularjs which implement
[2015-09-14T23:45:59.513Z]	<JoshVarty>	cool maybe -pron- check -pron- out
[2015-09-15T00:01:21.699Z]	<wforney>	be for of an feature -pron- probably should work on because -pron- do exist in the version of js
[2015-09-15T00:02:19.740Z]	<wforney>	now for typescript somebody else  <user> have to say but tsc should compile down to a normal for loop for -pron- if -pron- be available in ts when target js
[2015-09-15T00:02:43.407Z]	<wforney>	do that make sense
[2015-09-15T00:13:28.201Z]	<jamesmoey>	the problem be for loop do not handle iterator i do not know the exact scope of tsc but should -pron- take care of feature and transpile -pron- to compatible code
[2015-09-15T00:13:53.030Z]	<wforney>	that the idea
[2015-09-15T00:15:29.889Z]	<jamesmoey>	so typescript should generate compatible code if -pron- encounter the use of iterator but -pron- be not do that at the moment would that be consider a bug
[2015-09-15T00:16:12.247Z]	<wforney>	depend whether -pron- implement yet or not i suppose
[2015-09-15T00:16:36.979Z]	<wforney>	if -pron- implement should work then -pron- a bug if -pron- on the todo list -pron- be
[2015-09-15T00:16:38.237Z]	<wforney>
[2015-09-15T00:17:39.915Z]	<wforney>	anybody know the state of the work on ts be -pron- do and work on feature or be -pron- still in progress
[2015-09-15T00:36:27.599Z]	<plantain-00>	typescript support for of in and
[2015-09-15T00:36:28.294Z]	<plantain-00>
[2015-09-15T01:25:46.304Z]	<DanielRosenwasser>	maybe something like typescript import as f from f type fstype typeof fs export fstype as f
[2015-09-15T16:29:22.353Z]	<JoshVarty>	the debugger show a value of but when i go to the definition i see a value of
[2015-09-16T02:16:59.898Z]	<gastrodia>	thank
[2015-09-16T10:17:40.651Z]	<removed~kataras>	typescript question do anyone know why intersection type
[2015-09-16T10:18:20.851Z]	<removed~kataras>	be work on vs code for -pron- lib and for production project with excactly the same setting
[2015-09-16T10:18:32.023Z]	<removed~kataras>	-pron- throw -pron- with property not find
[2015-09-16T10:19:26.922Z]	<removed~kataras>	function extendtype t t second u t u
[2015-09-16T10:20:05.881Z]	<removed~kataras>	class user userid number username string mail stre
[2015-09-16T10:20:52.215Z]	<removed~kataras>	class somethingelse some any
[2015-09-16T10:21:27.918Z]	<removed~kataras>	var user new user a username
[2015-09-16T10:22:02.956Z]	<removed~kataras>	var something new somethingelse
[2015-09-16T10:22:10.371Z]	<removed~kataras>	nothing
[2015-09-16T10:22:29.778Z]	<removed~kataras>	var userwithsomething something
[2015-09-16T10:22:49.729Z]	<removed~kataras>	when i type -pron- throw -pron- a property error not find
[2015-09-16T10:23:27.834Z]	<removed~kataras>	on one project which i be build the and src no error throw
[2015-09-16T10:24:05.798Z]	<removed~kataras>	when i go to test the compile code with definition to other project with same setting for target and tsdk path on vs code
[2015-09-16T10:24:24.514Z]	<removed~kataras>	then -pron- throw -pron- the error
[2015-09-16T14:06:15.990Z]	<DanielRosenwasser>	-pron- not actually see this
[2015-09-16T14:06:27.289Z]	<DanielRosenwasser>	be -pron- use the beta
--------------------------------------------------------------------------------------------------
[2015-09-15T16:28:58.719Z]	<JoshVarty>	be this a know bug or peculiarity of ts js compilation
--------------------------------------------------------------------------------------------------
[2015-09-16T18:17:23.354Z]	<battlebottle>	hey guy how much interest would there be here in a version of coffeescript that support type annotation and compile to typescript
--------------------------------------------------------------------------------------------------
[2015-09-16T19:38:09.613Z]	<adidahiya>	i see tag in the github repo be this release ready be -pron- go to publish to npm
[2015-09-16T20:13:17.982Z]	<LPGhatguy>	probably very little coffeescript implement lot of other semantic that be of a different development philosophy -pron- class do follow -pron- have implicit return and everything be whitespaced and when the last time -pron- see a whitespace dependent type language
[2015-09-16T20:13:42.966Z]	<DanielRosenwasser>	if -pron- do end up do something like that -pron- sound like a fun interesting project a good place to start may be may be able to help with that
[2015-09-16T20:13:59.590Z]	<DanielRosenwasser>	a whitespace base strongly type language like f and haskell smile
[2015-09-16T20:14:14.272Z]	<DanielRosenwasser>	yes and -pron- currently have publish
[2015-09-16T20:14:28.166Z]	<DanielRosenwasser>	typescript be live
[2015-09-16T20:16:06.218Z]	<LPGhatguy>	fair enough but those be of a completely different philosophy than coffeescript and ts hah
[2015-09-16T20:17:22.172Z]	<LPGhatguy>	implicit return can definitely be a surprise when -pron- come to the signature of -pron- function
[2015-09-16T20:18:52.131Z]	<battlebottle>	true but -pron- never create any trouble in -pron- experience have static typing make even more palatable imo
[2015-09-16T20:46:51.323Z]	<battlebottle>	how be the jsx and angular extension to typescript handle be -pron- build into the compiler or be -pron- modularise in some way be -pron- easy for third party to make -pron- own similar ts extension
[2015-09-16T20:47:39.362Z]	<DanielRosenwasser>	there be no angular extension hook into typescript so -pron- have to be more specific on what -pron- mean by that
[2015-09-16T20:47:58.569Z]	<DanielRosenwasser>	as for jsx there be both a preserve and react set
[2015-09-16T20:49:43.324Z]	<DanielRosenwasser>	type check for jsx element be fairly decouple see -pron- wiki page on microsoft typescript wiki jsx but the parsing be not and that appear to be a non trivial thing to do
[2015-09-16T20:50:25.580Z]	<DanielRosenwasser>	if -pron- use jsx but -pron- targette a framework that be not react that what the preserve option be for
[2015-09-16T20:51:03.264Z]	<battlebottle>	i see thank
[2015-09-16T20:51:54.433Z]	<removed~kataras>	i start to learn meteor today be -pron- worth or i must start with react unreleated to -pron- previous question
[2015-09-16T20:52:35.972Z]	<removed~kataras>	i just want to extend one class from one other but i want to see type property from both of the class
[2015-09-16T20:53:31.209Z]	<removed~kataras>	as i understand intersection type be that i want t u but on -pron- testing project point to ts beta do work on the main project which -pron- write the lib be work without error
[2015-09-16T20:54:01.723Z]	<removed~kataras>	i can put -pron- in github in order to see -pron- if -pron- want to help -pron- ofc
--------------------------------------------------------------------------------------------------
[2015-09-16T20:16:59.438Z]	<battlebottle>	i think class would be the only issue implicit return and white space would provide no issue in compile to typescript though -pron- a f guy so -pron- not too unusual to -pron-
[2015-09-16T20:38:11.831Z]	<battlebottle>	ts look good
[2015-09-16T20:49:56.912Z]	<removed~kataras>	sorry for -pron- bad english if -pron- do understand i can explain well now yes -pron- use beta
[2015-09-16T20:53:42.161Z]	<removed~kataras>	-pron- use vs code
--------------------------------------------------------------------------------------------------
[2015-09-16T20:54:46.062Z]	<DanielRosenwasser>	can -pron- show -pron- what -pron- option be set to
[2015-09-16T20:54:52.461Z]	<removed~kataras>	yes
[2015-09-16T20:55:16.433Z]	<removed~kataras>	makis pc appdata roam npm typescript lib for both of the project same line
[2015-09-16T20:55:46.007Z]	<removed~kataras>	i instal ts use npm install
[2015-09-16T20:56:44.941Z]	<removed~kataras>	yes -pron- use jsx and i can combine view with react as -pron- read but i  <user> test -pron- later now -pron- problem be intersection type
[2015-09-16T20:58:06.239Z]	<removed~kataras>	 <user> i copy into the project otherwise error on build time i have this problem with ts too
[2015-09-16T20:58:44.163Z]	<DanielRosenwasser>	upgrade typescript to the non beta -pron- release less than an hour ago and restart vs code see if that fix -pron-
[2015-09-16T21:00:03.986Z]	<removed~kataras>	yes this i be look right now
[2015-09-16T21:00:06.239Z]	<removed~kataras>	good news
[2015-09-16T21:00:10.735Z]	<removed~kataras>	i m instal right now
[2015-09-16T21:00:14.335Z]	<DanielRosenwasser>	d
[2015-09-16T21:01:26.806Z]	<removed~kataras>	do work again
[2015-09-16T21:01:35.890Z]	<removed~kataras>	-pron- show -pron- type error on the second project
--------------------------------------------------------------------------------------------------
[2015-09-16T20:56:01.911Z]	<DanielRosenwasser>	i can say much about meteor -pron- not very familiar with -pron- but if -pron- use jsx then -pron- should be able to provide typing for -pron- and have -pron- work well with typescript
--------------------------------------------------------------------------------------------------
[2015-09-16T21:01:50.837Z]	<adidahiya>	nice congrat on the release
[2015-09-16T21:03:25.210Z]	<removed~kataras>	look i have this on -pron- lib definition file function observable t t observableobject
[2015-09-16T21:03:39.216Z]	<removed~kataras>	and on code
[2015-09-16T21:03:48.969Z]	<removed~kataras>	var user new
[2015-09-16T21:03:58.283Z]	<removed~kataras>	var something new
[2015-09-16T21:04:44.999Z]	<removed~kataras>	forget something var the new be come from lib function
[2015-09-16T21:04:52.600Z]	<removed~kataras>	var userextended
[2015-09-16T21:05:10.340Z]	<removed~kataras>	blablabla
[2015-09-16T21:05:32.341Z]	<removed~kataras>	property onpropertychange do exist on type user any
[2015-09-16T21:05:33.909Z]	<removed~kataras>	error
[2015-09-16T21:06:24.176Z]	<removed~kataras>	and on -pron- lib definition file -pron- show -pron- that the right hand side must be an arithmetic operation on t observable
[2015-09-16T21:06:59.624Z]	<removed~kataras>	-pron- use target on compiler option at both of the project
[2015-09-16T21:13:20.708Z]	<removed~kataras>	i think something with node be work now
[2015-09-16T21:18:35.815Z]	<removed~kataras>	now other problem occur too
[2015-09-16T21:18:45.985Z]	<removed~kataras>	excludepropertie string any error a rest parameter must be of an array type
[2015-09-16T21:18:58.188Z]	<removed~kataras>	on definition file why be that
[2015-09-16T21:20:52.351Z]	<removed~kataras>	ok i add rename to and add -pron- to tsconfig file property and error dissapear
--------------------------------------------------------------------------------------------------
[2015-09-16T21:13:10.255Z]	<removed~kataras>	fix but i have other error now lol console error axa
--------------------------------------------------------------------------------------------------
[2015-09-16T21:22:37.474Z]	<DanielRosenwasser>	sound like -pron- need a to specifiy that -pron- targette
[2015-09-16T21:22:56.673Z]	<DanielRosenwasser>	-pron- should need to overwite
[2015-09-16T21:23:40.377Z]	<removed~kataras>	yes i be do -pron- i overwrite and  <user> remove promise promiseconstructor interface because -pron- dublicate error with bluebird
[2015-09-16T21:23:52.892Z]	<removed~kataras>	if i be not do -pron- do not work and all of that
[2015-09-16T21:24:02.314Z]	<DanielRosenwasser>	try update -pron- definitelytype definition
[2015-09-16T21:24:06.260Z]	<removed~kataras>	i do know why i be do -pron- since ts
[2015-09-16T21:24:23.554Z]	<DanielRosenwasser>	that should fix -pron-
[2015-09-16T21:24:38.672Z]	<removed~kataras>	ok i  <user> do -pron-
[2015-09-16T21:24:42.386Z]	<removed~kataras>	 <user> can i ask -pron-
[2015-09-16T21:25:03.401Z]	<removed~kataras>	if module import work on nodejs -pron- seem now i test with argument too
[2015-09-16T21:26:00.791Z]	<DanielRosenwasser>	node do support module yet
[2015-09-16T21:26:21.289Z]	<DanielRosenwasser>	the module loading spec need to be finalize before -pron- can settle down on how exactly -pron- should work
[2015-09-16T21:29:51.308Z]	<removed~kataras>	so i can work with ts yet
[2015-09-16T21:29:58.656Z]	<removed~kataras>
[2015-09-16T21:30:10.504Z]	<removed~kataras>	i update all definition
[2015-09-16T21:30:20.378Z]	<removed~kataras>	i delete from -pron- local project folder
[2015-09-16T21:31:26.958Z]	<removed~kataras>	and error come again in and rest parameter
[2015-09-16T21:31:43.589Z]	<removed~kataras>	i add a to the too but -pron- seem do work either
[2015-09-16T21:33:04.712Z]	<removed~kataras>	-pron- seem that i be the only one have this problem
[2015-09-16T21:33:09.409Z]	<removed~kataras>	what i be do wrong wtf
[2015-09-16T21:33:41.960Z]	<DanielRosenwasser>	close vs code try npm uninstall typescript and then npm install typescript
[2015-09-16T21:35:30.742Z]	<removed~kataras>	do but nothing solve
[2015-09-16T21:36:24.171Z]	<removed~kataras>	i understand that -pron- have no time to help -pron- more because this problem affect only -pron- and no other developer in the community
[2015-09-16T21:36:58.454Z]	<removed~kataras>	but if -pron- have i can give -pron- teamviewer access
[2015-09-16T21:37:13.877Z]	<removed~kataras>	i know this be right way but -pron- seem only -pron- have this problem
[2015-09-16T21:40:20.682Z]	<removed~kataras>	if i make nolib false
[2015-09-16T21:40:29.900Z]	<removed~kataras>	i have error with dublicate interface promise
[2015-09-16T21:41:18.536Z]	<removed~kataras>	i be edit the and remove all promise interface and that be fix this problem but -pron- say -pron- have to work without override the lib
[2015-09-16T21:41:38.973Z]	<DanielRosenwasser>	try just run tsc with -pron-
[2015-09-16T21:41:49.170Z]	<DanielRosenwasser>	see where the duplicate definition be come from
[2015-09-16T21:42:09.623Z]	<removed~kataras>	and node mysql wrapper compile typing bluebird error duplicate identifier promise
--------------------------------------------------------------------------------------------------
[2015-09-16T21:41:54.098Z]	<removed~kataras>	makis pc appdata roam npm typescript lib error duplicate identifier promise
--------------------------------------------------------------------------------------------------
[2015-09-16T21:42:18.214Z]	<removed~kataras>	multiple time but these error only
--------------------------------------------------------------------------------------------------
[2015-09-16T21:43:01.775Z]	<removed~kataras>	and node mysql wrapper compile typing bluebird error can not find namespace promise
[2015-09-16T21:44:05.699Z]	<DanielRosenwasser>	if -pron- target then -pron- should run into this issue
[2015-09-16T21:44:09.582Z]	<removed~kataras>	i update the def type before minute
[2015-09-16T21:44:10.844Z]	<removed~kataras>	no
[2015-09-16T21:44:13.924Z]	<removed~kataras>	i be target
[2015-09-16T21:44:20.821Z]	<removed~kataras>	in order to use intersection type
[2015-09-16T21:44:28.678Z]	<DanielRosenwasser>	-pron- do need to use intersection type
[2015-09-16T21:44:33.974Z]	<removed~kataras>	lol
[2015-09-16T21:44:46.844Z]	<DanielRosenwasser>	smile
[2015-09-16T21:44:53.283Z]	<removed~kataras>	lol wait
[2015-09-16T21:45:46.350Z]	<DanielRosenwasser>	but mix library be an issue track by
[2015-09-16T21:45:56.783Z]	<removed~kataras>	do -pron- and run but now lol if typeerror be not a function
--------------------------------------------------------------------------------------------------
[2015-09-16T21:44:51.812Z]	<removed~kataras>	i though that version of typescript solve problem or add feature to only
[2015-09-16T21:46:50.658Z]	<removed~kataras>	before talk with -pron- i be do nolib true
[2015-09-16T21:47:00.412Z]	<removed~kataras>	but with this i must copy the to -pron- current project
--------------------------------------------------------------------------------------------------
[2015-09-16T21:47:08.474Z]	<removed~kataras>	i make -pron- to false as default
[2015-09-16T21:47:20.029Z]	<removed~kataras>	and remove from -pron- current project
[2015-09-16T21:47:28.300Z]	<removed~kataras>	this be the right thing right
[2015-09-16T21:49:47.387Z]	<DanielRosenwasser>	in -pron- tsconfig yeah do include and do turn on nolib
[2015-09-16T21:50:38.932Z]	<removed~kataras>	yes
[2015-09-16T21:50:39.894Z]	<removed~kataras>	ok
[2015-09-16T21:50:45.817Z]	<removed~kataras>	i retype the
[2015-09-16T21:50:53.909Z]	<removed~kataras>	import as from node mysql wrapper
[2015-09-16T21:51:02.447Z]	<removed~kataras>	to -pron- old var mysql wrapper
[2015-09-16T21:51:12.025Z]	<removed~kataras>	this dissapear the error about path on tsc
[2015-09-16T21:51:39.912Z]	<DanielRosenwasser>	try typescript import as from mysql wrapper
[2015-09-16T21:51:59.296Z]	<DanielRosenwasser>	-pron- make a change to how commonjs module resolution work
[2015-09-16T21:52:50.777Z]	<removed~kataras>	if be do -pron-
[2015-09-16T21:52:57.986Z]	<removed~kataras>	if typeerror be not a function at getrootlength at at loadnodemodulefromdirectory at loadmodulefromnodemodules at nodemodulenameresolver at resolvemodulename at at at resolvemodulenamesworker at processimportedmodule
--------------------------------------------------------------------------------------------------
[2015-09-16T21:57:55.419Z]	<removed~kataras>	same error when i be do import mysql wrapper too without as
[2015-09-16T21:58:48.003Z]	<removed~kataras>	but if i do var require i have other type of error
[2015-09-16T21:59:24.964Z]	<DanielRosenwasser>	-pron- get that even with mysql wrapper
--------------------------------------------------------------------------------------------------
[2015-09-16T21:58:48.399Z]	<removed~kataras>	node mysql wrapper error untyped function call may not accept type argument
--------------------------------------------------------------------------------------------------
[2015-09-16T21:59:27.158Z]	<removed~kataras>	import mysql wrapper have work for -pron- but now error occur for tsc
[2015-09-16T21:59:30.638Z]	<removed~kataras>	i can not use becaue
[2015-09-16T21:59:36.347Z]	<removed~kataras>	-pron- be on folder
[2015-09-16T21:59:45.348Z]	<removed~kataras>	i have two separate project
[2015-09-16T22:00:01.931Z]	<removed~kataras>	i be cope the change to node mysql wrapper and everytime i be make change
[2015-09-16T22:00:22.807Z]	<DanielRosenwasser>	ahh i see
[2015-09-16T22:00:48.632Z]	<removed~kataras>	why be happen
[2015-09-16T22:01:01.910Z]	<removed~kataras>	on tsc
[2015-09-16T22:01:26.222Z]	<DanielRosenwasser>	look like a potential bug
[2015-09-16T22:02:19.901Z]	<removed~kataras>	okay i be thank -pron-
--------------------------------------------------------------------------------------------------
[2015-09-16T22:00:43.388Z]	<removed~kataras>	this error for function chatcodeat be new error i never see -pron-
[2015-09-16T22:01:36.771Z]	<DanielRosenwasser>	talk with about -pron- offline
--------------------------------------------------------------------------------------------------
[2015-09-16T22:02:25.971Z]	<JoshVarty>	quick question be there an api for rewrite syntax tree
[2015-09-16T22:02:31.245Z]	<removed~kataras>	if -pron- be a bug -pron- be good that -pron- find -pron-
[2015-09-16T22:02:58.071Z]	<JoshVarty>	not in the compilation pipeline but just to transform a syntax tree for -pron- own need
[2015-09-16T22:03:29.528Z]	<JoshVarty>	the tree -pron- be create will be see by the typescript service or anything like that
[2015-09-16T22:04:12.315Z]	<DanielRosenwasser>	not right now but be experiment with that sort of stuff for work on async function
[2015-09-16T22:05:51.444Z]	<JoshVarty>	interesting -pron- look at the prototypeasync branch
[2015-09-16T22:05:55.876Z]	<JoshVarty>	i see there a file
[2015-09-16T22:06:00.046Z]	<JoshVarty>	-pron- take a peek at that thank
[2015-09-16T22:06:18.014Z]	<DanielRosenwasser>	that actually a bit out of date right now
--------------------------------------------------------------------------------------------------
[2015-09-16T22:07:01.688Z]	<DanielRosenwasser>	but -pron- can get a gist of what -pron- think about from there
[2015-09-16T22:07:16.100Z]	<removed~kataras>	 <user> node mysql wrapper or or index occur the same function error
[2015-09-16T22:07:49.806Z]	<removed~kataras>	-pron- wait for a fix i give up atm
[2015-09-16T22:08:18.915Z]	<DanielRosenwasser>	-pron- not use any sort of plugin use -pron- api be -pron-
[2015-09-16T22:08:37.213Z]	<DanielRosenwasser>
[2015-09-16T22:08:58.932Z]	<DanielRosenwasser>	and do -pron- have a simple repro can -pron- share the codebase
[2015-09-16T22:09:05.443Z]	<removed~kataras>	yes
[2015-09-16T22:09:12.311Z]	<removed~kataras>	i be upload the change now to github wait
[2015-09-16T22:09:21.949Z]	<removed~kataras>	i do not use any lib method as i know i  <user> upload wait
[2015-09-16T22:11:28.636Z]	<removed~kataras>	this be the source typescript for -pron- lib
[2015-09-16T22:11:56.268Z]	<removed~kataras>	and this be the current test file of the other seperate project
--------------------------------------------------------------------------------------------------
[2015-09-16T22:27:42.601Z]	<DanielRosenwasser>	typing in -pron- should be a string not an array
[2015-09-16T22:28:44.984Z]	<DanielRosenwasser>	-pron- go to run into issue because -pron- use a mix of reference and external module check out this guide
[2015-09-16T22:29:32.206Z]	<DanielRosenwasser>	but that be likely the source of -pron- problem
[2015-09-16T22:29:32.753Z]	<removed~kataras>	not have triple slash reference
[2015-09-16T22:29:43.223Z]	<removed~kataras>	i add the triple slash after the error
[2015-09-16T22:29:49.275Z]	<removed~kataras>	but i  <user> test -pron- again wait a moment thank
[2015-09-16T22:30:18.747Z]	<removed~kataras>	so
[2015-09-16T22:30:24.584Z]	<removed~kataras>	at -pron- source code of the library
[2015-09-16T22:30:44.093Z]	<removed~kataras>	i be not allow to use to other external module
[2015-09-16T22:30:57.509Z]	<removed~kataras>
[2015-09-16T22:34:36.912Z]	<DanielRosenwasser>	i think -pron- can get around this by include mysql in -pron- file
--------------------------------------------------------------------------------------------------
[2015-09-16T22:32:39.740Z]	<removed~kataras>	if i remove triple slash ref from for example
[2015-09-16T22:32:57.196Z]	<removed~kataras>	error can not find module mysql on import as mysql from mysql
[2015-09-16T22:35:02.417Z]	<removed~kataras>	on typing field
[2015-09-16T22:35:18.128Z]	<removed~kataras>	but i have more than one to include how can i do -pron- with string on typing use
[2015-09-16T22:35:31.017Z]	<removed~kataras>	or u mean in file property
[2015-09-16T22:36:26.141Z]	<removed~kataras>	file license mysql
[2015-09-16T22:36:32.482Z]	<removed~kataras>	src error can not find module mysql
[2015-09-16T22:37:09.286Z]	<removed~kataras>	why -pron- can search automactly in typing folder i have this folder under src
[2015-09-16T22:38:25.130Z]	<removed~kataras>	ok
[2015-09-16T22:38:43.707Z]	<removed~kataras>	but at i add there and mysql module error disappear
[2015-09-16T22:40:50.907Z]	<removed~kataras>	typing bluebird typing mysql
[2015-09-16T22:41:07.730Z]	<removed~kataras>	and now no compile problem
[2015-09-16T22:41:51.617Z]	<DanielRosenwasser>	hand
[2015-09-16T22:42:25.681Z]	<removed~kataras>	node mysql wrapper error file node mysql wrapper compile typing node mysql wrapper node mysql be not a module
[2015-09-16T22:47:32.592Z]	<removed~kataras>	wrong
[2015-09-16T22:47:38.297Z]	<removed~kataras>	observable error can not find name require observable error can not find name require observable error can not find module node mysql wrapper
[2015-09-16T22:48:03.863Z]	<removed~kataras>	i learn a lot of new ts module
--------------------------------------------------------------------------------------------------
[2015-09-16T22:36:13.949Z]	<DanielRosenwasser>	i mean in file
[2015-09-16T22:38:31.095Z]	<removed~kataras>	-pron- mean no in
[2015-09-16T22:40:57.546Z]	<removed~kataras>	at file property
[2015-09-16T22:41:44.790Z]	<DanielRosenwasser>	yes -pron- amend -pron- comment
[2015-09-16T22:41:46.925Z]	<DanielRosenwasser>	yay
[2015-09-16T22:42:23.361Z]	<removed~kataras>
[2015-09-16T22:42:24.754Z]	<removed~kataras>	but now
[2015-09-16T22:42:35.081Z]	<removed~kataras>	on import as from node mysql wrapper
[2015-09-16T22:43:10.633Z]	<removed~kataras>	in typing of i put compile typing node mysql
[2015-09-16T22:43:38.793Z]	<removed~kataras>	but if i make -pron- to
[2015-09-16T22:43:39.393Z]	<removed~kataras>	typing compile typing node mysql wrapper node mysql
[2015-09-16T22:43:44.541Z]	<removed~kataras>	then -pron- work
[2015-09-16T22:44:08.096Z]	<removed~kataras>	what be hapenne lol file on typing node mysql do not exist
[2015-09-16T22:44:08.717Z]	<removed~kataras>
[2015-09-16T22:47:37.943Z]	<removed~kataras>	now i have build error
[2015-09-16T22:47:56.877Z]	<removed~kataras>	let -pron- i  <user> see -pron- alone
--------------------------------------------------------------------------------------------------
[2015-09-16T22:48:15.413Z]	<removed~kataras>	i  <user> read some thing and i hope i  <user> fix -pron- i  <user> write the solution here too
--------------------------------------------------------------------------------------------------
[2015-09-16T22:48:33.116Z]	<removed~kataras>	i appreciate -pron- help
--------------------------------------------------------------------------------------------------
[2015-09-16T22:49:43.749Z]	<DanielRosenwasser>	-pron- very welcome hope i help -pron- be jump between this and another task so -pron- be a little tough but -pron- glad -pron- get there
[2015-09-17T01:42:31.478Z]	<removed~kataras>	ok i make -pron- work
[2015-09-17T01:42:39.874Z]	<removed~kataras>	-pron- be simple now that i learn
[2015-09-17T01:43:09.842Z]	<removed~kataras>	-pron- do need reference anymore -pron- need -pron- only inside definition file if need as i understand
--------------------------------------------------------------------------------------------------
[2015-09-17T19:35:15.975Z]	<spaced>	noob question what do this ts mean key string primitive foo bar primitive update datum i understand the union but key string primitive key be stre
[2015-09-17T19:36:13.640Z]	<DanielRosenwasser>	-pron- mean that obj can be index with a string and -pron- return either primitive or a function that take a bar and return a primitive
[2015-09-17T19:36:50.447Z]	<DanielRosenwasser>	so if have a value -pron- need to be one of those type
[2015-09-17T19:37:39.578Z]	<spaced>	yea -pron- finally sink in
[2015-09-17T19:38:03.780Z]	<DanielRosenwasser>	yup -pron-  <user> mean that each of the property on obj need to be a a foo bar primitive
[2015-09-17T19:39:07.761Z]	<spaced>	-pron- translation in java scala -pron- would be obj primitive
[2015-09-17T19:39:22.942Z]	<DanielRosenwasser>	yeah exactly
[2015-09-17T19:40:10.825Z]	<DanielRosenwasser>	in fact in the compiler -pron- have a type typescript interface map t key string t
--------------------------------------------------------------------------------------------------
[2015-09-17T19:48:50.949Z]	<delaneyj>	hey everyone user try to get typescript to work first time use node and have -pron- tsconfig like so compileroption and -pron- main be import as moment from moment class foo name delaney now moment constructor const re const f new foo -pron- give -pron- an error of can not compile module unless the flag be provide but if i add a module flag then -pron- do allow -pron- sure this be probably cause by try to use an external lib moment in this case have tsd typing instal but i think that use reference be no longer need any idea sure -pron- a simple thing -pron- not grokke
[2015-09-17T19:49:59.902Z]	<delaneyj>	-pron- be use babel async await and really be hope to convert some code over
[2015-09-17T19:50:17.657Z]	<DanielRosenwasser>	hey have a fix for this on until then -pron- can emit down to as a target
[2015-09-17T19:53:30.363Z]	<delaneyj>	hmm if i change the part tsc do complain but end with a file with only a single line point to source map
[2015-09-17T19:59:32.788Z]	<ghalle>	-pron- should take a look at this
[2015-09-17T20:00:41.083Z]	<delaneyj>	so -pron- have to babel the typescript eh
[2015-09-17T20:01:58.554Z]	<delaneyj>	thanks this be the rosetta stone i be look for
[2015-09-17T20:36:59.981Z]	<delaneyj>	look like -pron- miss out on the vs code debugger if -pron- go that route
[2015-09-17T20:37:22.930Z]	<DanielRosenwasser>	oh -pron- should use in conjunction with
[2015-09-17T20:38:15.468Z]	<DanielRosenwasser>	be work on a option as well as per clearly -pron- the answer to all -pron- problem smile
[2015-09-17T20:39:01.381Z]	<delaneyj>	well i hope so but just try to get start just want babel with type worried
[2015-09-17T20:42:07.135Z]	<delaneyj>	well hope to get that without a billion all over
[2015-09-17T20:49:17.048Z]	<DanielRosenwasser>	-pron- do need to use reference
[2015-09-17T20:49:29.140Z]	<DanielRosenwasser>	-pron- can use for most of those use
[2015-09-17T20:53:09.267Z]	<delaneyj>	be there a guide -pron- see -pron- mention but no real detail
[2015-09-17T20:53:37.518Z]	<DanielRosenwasser>	take a look at this microsoft typescript wiki for detail on the file
[2015-09-17T20:54:28.942Z]	<DanielRosenwasser>	if -pron- have any question -pron- try to answer -pron- and maybe fix up the wiki to answer -pron-
[2015-09-17T20:57:55.510Z]	<delaneyj>	thank -pron- a little confusing for now -pron- try to get just vanilla node typescript enviornment work i do see any mention of external js lib reference in that wiki
[2015-09-17T20:59:12.987Z]	<delaneyj>	so -pron- do an npm init tsd npm install moment tsd install moment
[2015-09-17T21:00:07.447Z]	<delaneyj>	-pron- current look like compileroption module commonjs outfile build removecomment true and src class app moment constructor const s new app
[2015-09-17T21:00:10.951Z]	<DanielRosenwasser>	well -pron- just add the appropriate file to -pron- file field
[2015-09-17T21:02:02.251Z]	<delaneyj>	if i include in the -pron- compile main to a single source map and no content
[2015-09-17T21:02:23.169Z]	<delaneyj>	do i need to list every individually
--------------------------------------------------------------------------------------------------
[2015-09-17T21:15:02.228Z]	<DanielRosenwasser>	-pron- can have the out with module set at the same time that why -pron- get empty file
[2015-09-17T21:44:40.497Z]	<DanielRosenwasser>	-pron- go to give an error warn with and soon
--------------------------------------------------------------------------------------------------
[2015-09-17T21:20:10.062Z]	<delaneyj>	be there any explanation somewhere on that the typescript doc do seem to talk about that be an xor what be the right way to handle if -pron- do want -pron- generate side by side with the file be outdir okay
[2015-09-17T21:44:14.417Z]	<DanielRosenwasser>	outdir be fine
--------------------------------------------------------------------------------------------------
[2015-09-18T03:40:20.624Z]	<ghost~55df963f0fc9f982beaed62c>	what do noemitonerror option do mean
[2015-09-18T03:47:12.931Z]	<ghost~55df963f0fc9f982beaed62c>	i assume that -pron- mean that if -pron- true -pron- will display type error be that correct
[2015-09-18T03:56:50.888Z]	<ghost~55df963f0fc9f982beaed62c>	never mind get -pron-
--------------------------------------------------------------------------------------------------
[2015-09-18T06:19:17.002Z]	<Seikho>	-pron- a bit confused with the style resolution of package type definition
[2015-09-18T06:19:54.233Z]	<Seikho>	-pron- define the typing property in and -pron- resolve to -pron- correctly as far as i can tell
[2015-09-18T06:20:10.331Z]	<Seikho>	-pron- an external module definition declare module -pron- module
[2015-09-18T06:20:55.130Z]	<Seikho>	but i get an error in -pron- editor say file be not a module
[2015-09-18T06:22:10.935Z]	<Seikho>	be there a different format syntax of type definition expect for this particular case
--------------------------------------------------------------------------------------------------
[2015-09-18T12:14:04.392Z]	<sarod>	hi could someone clarify the reltionship between github microsoft typescript handbook and -pron- seem that the content be similar but that the website content be old be -pron- sync regularly
[2015-09-18T16:47:31.487Z]	<ghalle>	be there a way to get access to type inside an ambient external module without import that module
[2015-09-18T17:14:19.082Z]	<ghalle>	here be an example of the issue i have
[2015-09-18T17:23:18.671Z]	<weswigham>	import client from server ts remove use only for type import when the code be transpiled so do worry about that
[2015-09-19T00:43:35.766Z]	<DanielRosenwasser>	that way -pron- could give -pron- some collective thought
[2015-09-19T05:47:27.637Z]	<ghost~55df963f0fc9f982beaed62c>	add yet another proposal so -pron- will need to use this as often as -pron- do now or at least make -pron- terse
[2015-09-19T11:28:29.059Z]	<sarod>	hi what be the more up to date resource to learn typescript -pron- seem that the language be move fast but the doc be lag typescript handbook on github seem quite obsolete at least regard module version seem even more dated be there some other resource be the specification up to date or do -pron- have to resort to issue comment
[2015-09-20T12:41:29.363Z]	<acopalipsis>	typescript implement -pron- own mechanism for hide property from the enumeration or -pron- need to write the same as in js class test string name enumerable false value name
[2015-09-20T20:50:30.479Z]	<sarod>	thanks -pron- give try
--------------------------------------------------------------------------------------------------
[2015-09-19T00:32:25.074Z]	<ghost~55df963f0fc9f982beaed62c>	if i already make one proposal to add warning to global variable and -pron- be decline do -pron- make sense to add a new proposal to global variable that tackle that from a different angle like add a symbol that describe global variable declare global var somevar
[2015-09-19T00:43:14.793Z]	<DanielRosenwasser>	perhaps -pron- can hurt right
[2015-09-19T00:43:57.447Z]	<ghost~55df963f0fc9f982beaed62c>	sure -pron- write -pron- out then thank
[2015-09-19T02:08:52.062Z]	<ghost~55df963f0fc9f982beaed62c>	do
--------------------------------------------------------------------------------------------------
[2015-09-19T10:42:13.529Z]	<blendsdk>	hi do -pron- have a place where people can show off -pron- work with typescript
[2015-09-21T08:51:32.654Z]	<blendsdk>	thank -pron- i  <user> post about -pron- project soon
--------------------------------------------------------------------------------------------------
[2015-09-20T18:11:36.004Z]	<delaneyj>	so i have some code -pron- try to port to ts one function take an object typefoo typefoo typefoo where id be string and the array be foo how do i express that in typescript in the method function signature
[2015-09-20T18:14:34.613Z]	<ghalle>	function -pron- would string foo i think
[2015-09-20T18:17:12.296Z]	<delaneyj>	thank that be -pron-
[2015-09-20T20:02:11.754Z]	<DanielRosenwasser>	-pron- can post about -pron- on here if -pron- like the community be always interested in new project
[2015-09-20T20:03:40.590Z]	<DanielRosenwasser>	-pron- can  <user> check out and if -pron- general enough maybe and there an irc channel on freenode
[2015-09-20T20:04:03.394Z]	<DanielRosenwasser>	same as js though there an interesting proposal here
[2015-09-20T20:05:07.559Z]	<DanielRosenwasser>	note that -pron- have a bug tracking that property need to be non enumerable see
[2015-09-20T20:06:37.525Z]	<DanielRosenwasser>	have a very useful book
[2015-09-20T20:07:52.049Z]	<DanielRosenwasser>	i think something like typescript interface myobject -pron- would string foo
[2015-09-20T20:08:04.028Z]	<DanielRosenwasser>	ah answer -pron-
[2015-09-20T20:37:11.715Z]	<delaneyj>	still have issue with some library for example if i include immutable dist -pron- give a duplicate identifier immutable but if i remove -pron- i get a can not find namespace immutable any idea what -pron- do wrong
[2015-09-20T20:37:27.866Z]	<delaneyj>	include in the file section of
[2015-09-20T23:49:32.784Z]	<Gaelan>	find a small edge case with noimplictany typescript class foo foo bar number class baz extend foo foo bar undefined error object literal property bar implicitly have an any type
[2015-09-21T00:16:54.210Z]	<DanielRosenwasser>	that by design right now the foo in baz currently do get contextually type by the one in foo -pron- suggest add a on
[2015-09-21T00:17:58.034Z]	<DanielRosenwasser>	how be -pron- try to include -pron- be -pron- use both a reference and an import if -pron- could post the code that would be helpful
--------------------------------------------------------------------------------------------------
[2015-09-21T09:56:02.957Z]	<ghost~55df963f0fc9f982beaed62c>	be -pron- possible to pass a specific and a single file to tsc so i could reuse the option that exist in that file d
[2015-09-21T09:56:20.648Z]	<ghost~55df963f0fc9f982beaed62c>	i think -pron- not possible atm but maybe -pron- miss something
[2015-09-21T10:13:24.263Z]	<ghost~55df963f0fc9f982beaed62c>	currently -pron- use jake and typescript to build -pron- project each project have -pron- own jake file because the task be different but much of the code be share through module all be write in typescript but one file that initiate the build process which -pron- currently rewrite too now the issue be that in -pron- bash script that all -pron- do be call tsc i need to specify the option for the compiler again instead of use -pron- exist
[2015-09-21T10:32:28.089Z]	<ghost~55df963f0fc9f982beaed62c>	never mind -pron- change thing around to make -pron- work
--------------------------------------------------------------------------------------------------
[2015-09-21T12:38:43.535Z]	<SamuelMarks>	hi
[2015-09-21T12:42:47.191Z]	<SamuelMarks>	typescript à la esprima
[2015-09-21T12:43:09.158Z]	<SamuelMarks>	i want to codegen typescript
[2015-09-21T15:21:56.552Z]	<jbrantly>	see
[2015-09-21T15:22:26.526Z]	<jbrantly>	and  <user>
[2015-09-21T15:26:21.211Z]	<kitsonk>	doh i forget about and that i have comment on -pron- sorry
[2015-09-22T12:05:57.147Z]	<kitsonk>	-pron- appear i be wrong sorry
[2015-09-22T12:06:26.869Z]	<ccapndave>	no worry
[2015-09-22T12:06:36.427Z]	<ccapndave>	-pron- a shame that be the real syntax though
[2015-09-22T12:06:39.058Z]	<ccapndave>	-pron- look really nice
[2015-09-22T12:07:35.106Z]	<kitsonk>	well -pron- be real syntax -pron- just do do what -pron- would expect -pron- to do
[2015-09-22T12:07:49.023Z]	<ccapndave>	sure
[2015-09-22T12:07:52.962Z]	<ccapndave>	-pron- do do anything
--------------------------------------------------------------------------------------------------
[2015-09-21T14:10:41.638Z]	<alfrescian>	hi guy -pron- go to build an app with lot of module external module manage with webpack -pron- wonder whether -pron- be prefer to keep all custom in the same dir as the matching file or to keep all in a common typing directory
--------------------------------------------------------------------------------------------------
[2015-09-21T14:28:32.939Z]	<markrendle>	now that node support quite a lot of be there a way to use but still get import as express from express transpile to var express
[2015-09-21T14:34:19.461Z]	<SamuelMarks>	i just use the import express syntax
[2015-09-21T14:34:47.063Z]	<kitsonk>	do module commonjs target not do that if -pron- do -pron- should raise -pron- as an issue
[2015-09-21T14:36:15.623Z]	<markrendle>	no -pron- do  <user> raise that issue
[2015-09-21T14:42:33.363Z]	<markrendle>	raise as
[2015-09-21T14:42:42.793Z]	<Gaelan>	i recently propose which if implement would let -pron- do just that
[2015-09-21T14:43:49.018Z]	<kitsonk>	-pron-  <user> be interesting to see if there be some un obvious reason why -pron- be that way
--------------------------------------------------------------------------------------------------
[2015-09-21T17:15:00.860Z]	<ghalle>	be the follow valid syntax javascript await foo the typescript compiler do not seem to complain about -pron- and i know -pron- work with babel but typescript generate invalid code for -pron- so -pron- wonder if this be suppose to work or if -pron- need to be wrap like this javascript await foo
--------------------------------------------------------------------------------------------------
[2015-09-21T18:08:32.394Z]	<jbrantly>	i do think ts have emit support for await yet
[2015-09-21T18:13:08.370Z]	<ghalle>	-pron- do i can tell -pron- since when as i just start use typescript again recently but with this -pron- work json compileroption experimentalasyncfunction true target
--------------------------------------------------------------------------------------------------
[2015-09-21T18:32:33.959Z]	<jbrantly>	yea but do that just emit the async keyword then -pron- would be up something like babel to transpile maybe i misunderstood when yo usaid that ts generate invalid code for -pron- i think -pron- be talk about a transpiled emit to or something
--------------------------------------------------------------------------------------------------
[2015-09-21T18:36:07.611Z]	<ghalle>	no that do not just emit the async keyword in this case -pron- would emit javascript yield foo as well as wrap the function in this case i do include a function but that statement would need to be inside an async function inside an awaiter which be some helper generate by typescript at the top of the file
--------------------------------------------------------------------------------------------------
[2015-09-22T08:03:03.324Z]	<ccapndave>	hey everyone in the msdn announcement the screenshot show use jsx without an explicit return statement be this just a mistake or be that actually possible
[2015-09-22T08:12:43.313Z]	<kitsonk>	i suspect -pron- be a mistake -pron- could of course use the fat arrow syntax which would have an imply return other example of render appear to have an explicit return
[2015-09-22T09:00:10.009Z]	<ccapndave>	-pron- can use fat arrow for a class method though can -pron-
[2015-09-22T11:46:26.771Z]	<ccapndave>	i can get a syntax that  <user> compile what should -pron- be
--------------------------------------------------------------------------------------------------
[2015-09-22T10:47:10.968Z]	<kitsonk>	-pron- can but -pron-  <user> still get lexical this this  <user> refer to the class constructor not the instance
--------------------------------------------------------------------------------------------------
[2015-09-22T17:42:53.905Z]	<alfrescian>	-pron- a module that be declare in -pron- browser field i currently do get how to import this module in a file use webpack babel loader ts loader target
[2015-09-22T17:43:44.058Z]	<alfrescian>	be there any recommend readup
[2015-09-22T18:03:05.967Z]	<alfrescian>	ok thank no import as xyz from package return a can not find module but same applie for import as xyz from to package
--------------------------------------------------------------------------------------------------
[2015-09-22T17:48:54.917Z]	<jbrantly>	import from package do work
[2015-09-22T17:50:53.168Z]	<jbrantly>	the browser field be just useful for control the bundling behavior for something that use -pron- package -pron- not even sure if -pron- do anything if -pron- bundle -pron- own package
[2015-09-22T17:51:03.504Z]	<jbrantly>	may be helpful
[2015-09-22T18:18:53.904Z]	<alfrescian>	clap thx
[2015-09-22T18:22:03.070Z]	<jbrantly>	could -pron- do typescript render div hello
--------------------------------------------------------------------------------------------------
[2015-09-22T18:14:15.415Z]	<jbrantly>	for the from package case ts need to have the typing for that package -pron- can either add -pron- through a declaration file a file with declare module package that -pron- reference in or -pron- possible for the package -pron- to specify typing but that a relatively new feature and most package do do that so -pron-  <user>
--------------------------------------------------------------------------------------------------
[2015-09-22T18:23:16.286Z]	<LPGhatguy>	be there any regular case where module resolution would succeed in compilation but fail at runtime when there be circular reference
[2015-09-22T18:24:45.033Z]	<LPGhatguy>	typescript be hoist -pron- class but -pron- extend fail so i can really debug this
[2015-09-22T18:27:16.438Z]	<jbrantly>	i could be wrong but i believe the basic idea with circular reference at runtime be that while -pron- work -pron- possible for a short period of time to have an incomplete reference
[2015-09-22T18:27:48.209Z]	<LPGhatguy>	-pron- just use the circular reference for type checking so that should be an issue
[2015-09-22T18:28:04.381Z]	<LPGhatguy>	-pron- just get a problem where a typescript extend be throw a typeerror
[2015-09-22T18:28:56.006Z]	<LPGhatguy>	i think i need to disable sourcemaps because these error line be useless
[2015-09-22T18:49:15.534Z]	<LPGhatguy>	and now that -pron- get random module not resolve correctly -pron- time to go point -pron- finger at some other dependency
--------------------------------------------------------------------------------------------------
[2015-09-22T18:24:24.127Z]	<jbrantly>	i use that construction for event handler in react all the time so i do have to everything in -pron- render method
--------------------------------------------------------------------------------------------------
[2015-09-22T18:45:52.923Z]	<LPGhatguy>	-pron- king of surprise that typescript do pick up that this circular reference would be invalid
--------------------------------------------------------------------------------------------------
[2015-09-22T19:12:21.246Z]	<LPGhatguy>	-pron- narrow -pron- back down to typescript hooray
[2015-09-22T19:12:47.975Z]	<LPGhatguy>	declare class b before class a if b extend a compile okay but throw a runtime error in this case i guess
[2015-09-22T19:25:41.276Z]	<LPGhatguy>	that be a mess of a bug just to find out -pron- at issue
--------------------------------------------------------------------------------------------------
[2015-09-22T23:19:45.224Z]	<Coderah>	just upgrade to from target and require seem to resolve as be i miss something about new path resolution
[2015-09-22T23:43:32.397Z]	<Coderah>	and here be line of import basecomponent basecomponentprop from
[2015-09-23T00:25:04.900Z]	<Coderah>	switch moduleresolution to node change nothing
--------------------------------------------------------------------------------------------------
[2015-09-22T23:43:14.796Z]	<Coderah>	error in default  <user> code moss piglet lib teacup toolbar module  <user> code moss piglet lib teacup toolbar index have no export member basecomponent error in default  <user> code moss piglet lib teacup toolbar module  <user> code moss piglet lib teacup toolbar index have no export member basecomponentprop
--------------------------------------------------------------------------------------------------
[2015-09-23T00:43:04.183Z]	<symphony2014>	hi
[2015-09-23T00:43:17.802Z]	<symphony2014>	aa
[2015-09-23T00:43:21.235Z]	<symphony2014>	test
[2015-09-23T00:43:22.978Z]	<symphony2014>
[2015-09-23T00:43:35.825Z]	<DanielRosenwasser>	hi
[2015-09-23T02:12:07.895Z]	<Coderah>	lol if i go two directory up and then reference the one level up directory explicitly -pron- work who touch -pron- code
[2015-09-23T03:23:23.341Z]	<DanielRosenwasser>	-pron- want classic
[2015-09-23T03:24:09.760Z]	<DanielRosenwasser>	commonjs modules be resolve differently now see the write up on -pron- microsoft typescript wiki break module resolution no long assume path be relative
[2015-09-23T03:24:49.689Z]	<DanielRosenwasser>	ah wait -pron- be already work with a relative path i miss that
[2015-09-23T04:20:11.879Z]	<Coderah>	not actually sure what the particular be though which be frustrating
--------------------------------------------------------------------------------------------------
[2015-09-23T04:19:27.486Z]	<Coderah>	yeah classic be default from what the documentation say and -pron- definitely do seem to make a difference i think i find a bug but -pron- only seem to be in this particular case
--------------------------------------------------------------------------------------------------
[2015-09-23T07:25:50.627Z]	<DanielRosenwasser>	well node be the new default resolution strategy for commonjs emit in
[2015-09-23T07:26:04.805Z]	<DanielRosenwasser>	would -pron- be possible for -pron- to share the code at all
--------------------------------------------------------------------------------------------------
[2015-09-23T08:36:01.891Z]	<kitsonk>	woah be the new microsoft typescript wiki roadmap accord to the roadmap feel a bit nodejs here with number wink and say -pron- go on vacation with only to have -pron- come back from -pron- long journey
--------------------------------------------------------------------------------------------------
[2015-09-23T12:48:39.301Z]	<SamuelMarks>	hi
[2015-09-23T13:03:01.257Z]	<adamstortz>	ahh that right have get into those to much yet but i remember that now that -pron- say -pron- thank
[2015-09-23T13:03:47.825Z]	<chilversc>	when target those normally translate to var this this if -pron- need to inspect the value of this in a debugger
[2015-09-24T07:35:31.506Z]	<DanielRosenwasser>	see answer on
--------------------------------------------------------------------------------------------------
[2015-09-23T13:01:37.293Z]	<adamstortz>	anyone know how to get away from use var that this in a block like the follow in or typescript var that this
[2015-09-23T13:02:28.389Z]	<chilversc>	-pron- can use arrow function eg snapshot
[2015-09-23T13:04:29.430Z]	<adamstortz>	ok that make sense i be generate sourcemaps with gulp at the moment but that be useful information to fall back on
--------------------------------------------------------------------------------------------------
[2015-09-23T14:10:40.154Z]	<AlecTaylor>	typescript be give can not find module error how to resolve
[2015-09-23T14:13:58.937Z]	<kitsonk>	most likely related to this break microsoft typescript wiki break module resolution no long assume path be relative
[2015-09-23T14:15:14.644Z]	<kitsonk>	sorry
[2015-09-23T14:37:03.260Z]	<kitsonk>	hey typescript community folk i be part of the community try to build dojo community though -pron- do always get a lot of love compare to angular -pron- be still plug along one of the thing -pron- think be core be a composition library versus classical inheritance -pron- have develop a functional and i want to unleash -pron- on folk here for any comment thought
--------------------------------------------------------------------------------------------------
[2015-09-23T17:34:54.827Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- love to have a look at -pron- -pron- currently build a cms and -pron- be check out angular aurelia and few more framework for the front end soon -pron- love to chat and get a bit of background and hear what -pron- offer or how -pron- different than the one i list
[2015-09-23T17:39:18.071Z]	<kitsonk>	dojo be a thing yet -pron- have proposal but -pron- be just try to formulate the widget part but need to get how -pron- be go to define class work folk be more than welcome to muck in but if -pron- need be go to be production within the next month -pron- would be a very bumpy ride with dojo
[2015-09-23T18:46:43.358Z]	<Coderah>	i know there be this as type but when call a function that have type parameter be the syntax the same
[2015-09-23T18:46:56.659Z]	<Gaelan>	nope the only change syntax be type assertion
[2015-09-23T18:48:46.983Z]	<Coderah>	perfect just want to double check that
[2015-09-23T18:48:51.350Z]	<Coderah>	thank
[2015-09-23T19:45:43.273Z]	<DanielRosenwasser>	well actually there be a slight change in how -pron- have to write a single type parameter on an arrow function
[2015-09-23T19:45:59.171Z]	<DanielRosenwasser>	but as far as give type argument in a call nothing change
[2015-09-24T01:02:12.187Z]	<DanielRosenwasser>	-pron- could  <user> just do a namespace import typescript import as foo from foo export default class a property
[2015-09-24T01:06:28.836Z]	<DanielRosenwasser>	oh -pron- just want -pron- type to be globally visible if -pron- do default export ifoo then -pron- can turn that file into a file and include -pron- as one of the file in -pron- compilation
[2015-09-24T01:44:34.934Z]	<plantain-00>	when tsc be work -pron- seem that when old ts file be change -pron- be compile well and when i create a new ts file the new ts file be not compile be -pron- a bug or a feature version
--------------------------------------------------------------------------------------------------
[2015-09-23T18:19:21.519Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- fine -pron-  <user> take time before -pron- go to implement anything -pron- wait for more framework to be mature enough and evolve a bit atm -pron- just work on the design infrastructure and back end mostly -pron- expect to start the front end in about or more depend on -pron- time
[2015-09-23T18:46:28.637Z]	<Coderah>	be there a new syntax for pass type parameter when use tsx
--------------------------------------------------------------------------------------------------
[2015-09-23T20:37:14.933Z]	<Coderah>	ahh gotcha that be a case i have think of thank for the insight
--------------------------------------------------------------------------------------------------
[2015-09-24T00:12:19.169Z]	<mattmazzola>	how do -pron- get typescript to recognize interface from other file without have to import -pron- -pron- do make sense to -pron- why -pron- would have to do interface ifoo a string export default ifoo import foo from export default class a property ifoo
[2015-09-24T00:13:37.194Z]	<mattmazzola>	i try add reference such as reference but that do work either
[2015-09-24T00:14:15.976Z]	<mattmazzola>	but since the interface do transpile to any real code -pron- do make sense to see -pron- as dependency in the code
[2015-09-24T00:15:46.323Z]	<mattmazzola>	when i be use the legacy module syntax module app export interface ifoo a string module app export class a property ifoo this be not a problem
[2015-09-24T00:22:09.635Z]	<mattmazzola>	hmm -pron- look like the only way to achieve what i use to have be to define the interface in file that do have any export so -pron- not treat as a module
[2015-09-24T00:22:34.223Z]	<mattmazzola>	which mean -pron- have to separate the interface from the class
[2015-09-24T00:22:39.240Z]	<mattmazzola>
[2015-09-24T00:30:05.747Z]	<mattmazzola>	if anyone have link to blog about what other people be do to handle this i would be interested
[2015-09-24T01:03:29.587Z]	<DanielRosenwasser>	if -pron- do default export ifoo
--------------------------------------------------------------------------------------------------
[2015-09-24T07:34:52.181Z]	<DanielRosenwasser>	-pron- do have a way to detect new file be watch in include directory right now but cover -pron-
--------------------------------------------------------------------------------------------------
[2015-09-24T10:05:17.909Z]	<ghost~55df963f0fc9f982beaed62c>	how can i compile typescript into memory
[2015-09-24T10:22:07.675Z]	<ghost~55df963f0fc9f982beaed62c>	i can probably mock the fs but i do know whether -pron- the good approach
[2015-09-24T10:24:38.657Z]	<ghost~55df963f0fc9f982beaed62c>	i see
[2015-09-24T10:26:10.907Z]	<ghost~55df963f0fc9f982beaed62c>	may be well to just write to a temp folder
[2015-09-24T10:32:05.870Z]	<ghost~55df963f0fc9f982beaed62c>	yeah i think -pron- just write thing to disk for now -pron- just too much work for nothing
[2015-09-24T10:32:25.523Z]	<ghost~55df963f0fc9f982beaed62c>	thank
--------------------------------------------------------------------------------------------------
[2015-09-24T10:11:27.062Z]	<kitsonk>	depend on what -pron- mean for example in editor in order to do the intellisense the file be compile to memory but generally i suspect -pron- be look for more like something that provide an incremental build chain something like deal with file virtually and pipe -pron- through several processor and gulp  <user> gulp typescript be a tool for integrate typescript into gulp
[2015-09-24T10:18:33.256Z]	<ghost~55df963f0fc9f982beaed62c>	yeah the issue be -pron- not use gulp and already make -pron- choice -pron- use jake for now because for -pron- current task -pron- simple and so for now i just need to compile everything into memory and then run -pron- from there
[2015-09-24T10:24:18.817Z]	<kitsonk>	-pron- would still need some sort of tooling that integrate with typescript and manage some sort of virtual filesystem i be not aware of anything at the moment that have -pron- all strung together other than gulp
[2015-09-24T10:25:54.586Z]	<kitsonk>	there be other virtual filesystem that run under node but gulp build -pron- own call vinyl which be available as a separate package
[2015-09-24T10:25:57.833Z]	<ghost~55df963f0fc9f982beaed62c>	i check the gulp plugin that -pron- link and see that -pron- quite a bit of work not sure i want to invest so much into this right now
[2015-09-24T10:29:50.099Z]	<kitsonk>	yes i think there be little benefit in keep thing in memory in reality these day but the cool kid feel that incremental as i type build be cool but i see -pron- as a ricer thing not really effectively make -pron- code or productivity better
[2015-09-24T16:53:56.421Z]	<kitsonk>	interface be just a type structure declare var be when -pron- have a non typescript variable which have be create by some other javascript of which -pron- want to interact with allow -pron- to provide a type for -pron-
[2015-09-24T16:55:28.752Z]	<kitsonk>	declare var ijquery mean that the variable be already available in the global scope const ijquery would create a new locally scope variable
[2015-09-24T16:57:55.162Z]	<kitsonk>	well -pron- could but -pron- would mask the global variable just like in javascript js var foo function bar var foo foo bar set the locally scope foo not the first one
[2015-09-24T17:09:13.661Z]	<removed~kataras>	do -pron- want
[2015-09-24T17:19:57.082Z]	<mattmazzola>	because imagine -pron- take this same code and remove type annotation to make -pron- pure javascript -pron- would just become
--------------------------------------------------------------------------------------------------
[2015-09-24T13:04:35.900Z]	<Xceno>	have anyone here a working setup with ts and angularjs i have around error in the typing of angular and jquery with a completely new project
[2015-09-24T15:44:43.839Z]	<chilversc>	secondly be -pron- valid to define and use require like that in typescript since require be  <user> a keyword do that only matter if i be use import foo
[2015-09-24T16:47:38.060Z]	<mattmazzola>	can someone help -pron- understand what declare do in a file -pron- look at the and do understand why -pron- would not use interface
[2015-09-24T16:53:55.287Z]	<mattmazzola>	from -pron- understanding declare be use when -pron- need to expose a variable with an implicitly type like in the case of jquery -pron- could have something like declare var ijquery which mean the would be available to any file and know to implement the interface ijquery without someone have to write const ijquery be that correct interpretation
[2015-09-24T16:55:02.286Z]	<mattmazzola>	i see
[2015-09-24T16:55:59.654Z]	<mattmazzola>	ah right i could -pron- would be able to redefine the type of something that be already there
[2015-09-24T17:00:46.529Z]	<mattmazzola>	 <user> -pron- have trouble about where to define type for enum and class i move all -pron- interface to a file and say i have an interface that take an emum value like in application code enum direction north south east west in file interface x a direction but direction would be undefined in the file i think
[2015-09-24T17:02:14.130Z]	<DanielRosenwasser>	 <user> a more up to date version of the handbook be on github
[2015-09-24T17:02:24.224Z]	<DanielRosenwasser>
[2015-09-24T17:03:46.107Z]	<mattmazzola>	oh crap in general do not prefix interface with i i be do -pron- all wrong
[2015-09-24T17:04:22.566Z]	<mattmazzola>	anyways more worried about where to place thing in -pron- project than what the actual name be
[2015-09-24T17:05:43.512Z]	<mattmazzola>	i think -pron- get confused because interface do generate any code -pron- simply available to add type annotation to exist javascript where as the enum and class actually require code output to work and implicity be available as a type
[2015-09-24T17:05:58.996Z]	<removed~kataras>	interface be not generate real javascript code
[2015-09-24T17:06:20.235Z]	<removed~kataras>	-pron- exist in order to help -pron- as developer only
[2015-09-24T17:07:25.855Z]	<mattmazzola>	right so the only rule -pron- establish so far be put all the interface in file and the enum and class have to exist in application code but how to share these for instance some of the interface would need the enum type avilable and all the enum and class type need to be available in the whole project without have to import -pron-
[2015-09-24T17:07:34.041Z]	<mattmazzola>	so -pron- like a conflict of interest
[2015-09-24T17:07:46.635Z]	<mattmazzola>	-pron- tempt to redefine interface for the class and enum
[2015-09-24T17:08:48.183Z]	<mattmazzola>	be there any well know library that have github repo use typescript so i can see how -pron- do in practice
[2015-09-24T17:09:04.226Z]	<mattmazzola>	just look at the definitelytype repo do tell the whole story
[2015-09-24T17:09:10.137Z]	<removed~kataras>	do -pron- know
[2015-09-24T17:09:17.669Z]	<removed~kataras>	to give -pron-
[2015-09-24T17:09:45.081Z]	<removed~kataras>	-pron- line
[2015-09-24T17:09:46.178Z]	<removed~kataras>
[2015-09-24T17:09:52.239Z]	<removed~kataras>	but -pron- sure -pron-  <user> find that u be look
[2015-09-24T17:10:03.379Z]	<removed~kataras>	if -pron- have question after read this ask again here i  <user> be here
[2015-09-24T17:11:07.531Z]	<mattmazzola>	oh i do realize there be a type keyword perhaps this can help -pron-
[2015-09-24T17:11:42.793Z]	<mattmazzola>	do see that in the handbook
[2015-09-24T17:12:47.232Z]	<mattmazzola>	i see how -pron- be define -pron- class in the file
[2015-09-24T17:12:58.884Z]	<mattmazzola>	that seem like the key to one of -pron- issue
[2015-09-24T17:13:24.489Z]	<mattmazzola>	i do know -pron- coudl do that
[2015-09-24T17:13:58.665Z]	<mattmazzola>	so -pron- have the signature in the and the implementation in the application seem simple enough
[2015-09-24T17:15:28.717Z]	<mattmazzola>	there be enum in there as well that part seem confusing to -pron- would that mean there be duplicate definition
[2015-09-24T17:27:57.162Z]	<removed~kataras>	i be here
[2015-09-24T17:28:00.282Z]	<removed~kataras>	sorry i be read too
[2015-09-24T17:28:36.206Z]	<removed~kataras>	look
[2015-09-24T17:30:35.623Z]	<removed~kataras>	this help other developer to use the module function class and
[2015-09-24T17:31:01.884Z]	<removed~kataras>	but -pron- have other problem
--------------------------------------------------------------------------------------------------
[2015-09-24T13:55:08.295Z]	<copygift>	hello everyone i like to introduce and invite for develop new software license system please take time from -pron- schedule and give feedback and suggestion -pron- can join -pron- as collaborator committer and contributor project website github account official mail
[2015-09-24T15:42:58.016Z]	<chilversc>	be i correct in think that i should try and use import with webpack loader and instead should just define a require function then use var paginationtemplate rather than something like import as paginationtemplate from
--------------------------------------------------------------------------------------------------
[2015-09-24T17:17:56.264Z]	<mattmazzola>	enum collectionchangedaction insert delete reset if in -pron- application code -pron- have something like export default class myclass action collectionchangedaction constructor that mean the object collectionchangedaction need to exist but if -pron- be only define in the -pron- would
[2015-09-24T17:24:39.639Z]	<mattmazzola>	well get to go but thank for the help guy
[2015-09-24T17:28:41.776Z]	<removed~kataras>	this be only the
[2015-09-24T17:29:11.311Z]	<removed~kataras>	the file help typescript developer to import module and use -pron- function with help of auto complete of an ide
[2015-09-24T17:29:28.582Z]	<removed~kataras>	the really source code be under folder
[2015-09-24T17:30:55.018Z]	<removed~kataras>	i though -pron- want help to -pron- file
--------------------------------------------------------------------------------------------------
[2015-09-24T17:20:35.553Z]	<mattmazzola>	export default class myclass constructor and the definition of collectionchangedaction may be a normal object instead of something generate by enum syntax
--------------------------------------------------------------------------------------------------
[2015-09-24T17:21:17.801Z]	<mattmazzola>	so -pron- would seem to prove that the code for that enum can only live in the file
[2015-09-24T17:27:52.111Z]	<removed~kataras>	no
--------------------------------------------------------------------------------------------------
[2015-09-24T17:31:52.354Z]	<removed~kataras>	can -pron- paste a sample code of the issue here so maybe i can provide -pron- a real solution
[2015-09-24T17:32:06.313Z]	<removed~kataras>
[2015-09-24T17:32:12.898Z]	<mattmazzola>	i have old code which abuse the legacy module syntax to re open the same module in every file so every type object be available to everything else in -pron- -pron- convert -pron- to the actual standardize module syntax and the type be no longer share
[2015-09-24T17:32:47.528Z]	<mattmazzola>	so previously -pron- have interface that be relate to class define in the same file of the class
[2015-09-24T17:32:50.258Z]	<removed~kataras>	maybe -pron- need
[2015-09-24T17:32:59.778Z]	<mattmazzola>	i try that do work and even if -pron- do
[2015-09-24T17:33:04.080Z]	<mattmazzola>	-pron- be scalable
[2015-09-24T17:33:33.967Z]	<mattmazzola>	so then i ask some question yesterdan and realize interface would be available globally if -pron- be not in a module
[2015-09-24T17:33:42.298Z]	<mattmazzola>	so i move -pron- to file
[2015-09-24T17:33:49.093Z]	<mattmazzola>	but some of those interface rely on the enum
[2015-09-24T17:33:57.298Z]	<removed~kataras>	yeah i see
[2015-09-24T17:34:02.896Z]	<mattmazzola>	and -pron- do seem right to move enum to the file as well
[2015-09-24T17:34:08.217Z]	<mattmazzola>	for reason i describe above
[2015-09-24T17:34:09.264Z]	<removed~kataras>	yes ofc
[2015-09-24T17:34:14.608Z]	<mattmazzola>	becuase the solution have to work without the file
[2015-09-24T17:34:27.777Z]	<removed~kataras>	in the private chat
[2015-09-24T17:34:41.829Z]	<removed~kataras>	in order to give -pron- a way to see -pron- code and together fix -pron-
[2015-09-24T17:34:52.132Z]	<removed~kataras>	i be not a good english speaker as -pron- understand
[2015-09-24T17:36:20.807Z]	<removed~kataras>	yes the sample
[2015-09-24T17:36:23.515Z]	<removed~kataras>	that i mean
[2015-09-24T17:36:56.478Z]	<removed~kataras>	an example of what -pron- have now with the tsconfig setting  <user>
--------------------------------------------------------------------------------------------------
[2015-09-24T17:34:24.661Z]	<removed~kataras>	speak to -pron-
[2015-09-24T17:35:43.068Z]	<mattmazzola>	i could paste in example but would be able to let -pron- see the code -pron- not public yet
[2015-09-24T17:36:04.942Z]	<mattmazzola>	some  <user> manager  <user> believe in open source
--------------------------------------------------------------------------------------------------
[2015-09-24T17:37:01.299Z]	<removed~kataras>	just a sample
[2015-09-24T17:37:11.832Z]	<removed~kataras>	in order to -pron- understand better what be the real problem
--------------------------------------------------------------------------------------------------
[2015-09-24T22:12:50.778Z]	<LPGhatguy>	the lack of progress on be kill -pron- try to debug some of these issue
[2015-09-24T22:13:13.545Z]	<LPGhatguy>	lot of prototype be undefined message be throw with unhelpful traceback from typescript extend method
[2015-09-24T22:15:06.490Z]	<LPGhatguy>	this  <user> only seem to be pop up after -pron- upgrade to previously valid reference use only for type information be now throw error sometimes
--------------------------------------------------------------------------------------------------
[2015-09-25T00:31:44.210Z]	<DanielRosenwasser>	take a look at this
[2015-09-25T01:27:02.711Z]	<HelveticaScenario>	this may be a stupid question but when i declare a variable to be type a and then assign -pron- to a value that be of a different type that be not a subtype of a -pron- should produce an error at compile time right that be one of if not the main concept of statically type language
[2015-09-25T01:27:17.898Z]	<HelveticaScenario>	because in the most recent version of typescript -pron- do not do that for -pron-
--------------------------------------------------------------------------------------------------
[2015-09-25T01:27:33.682Z]	<HelveticaScenario>	-pron- seem like such a glaring error that i think i must be do something wrong or be misunderstand something
--------------------------------------------------------------------------------------------------
[2015-09-25T04:54:08.106Z]	<mattmazzola>	do the typescript compiler treat file different than regular file or be the just a convention for file that usually only contain type interface
--------------------------------------------------------------------------------------------------
[2015-09-25T06:33:09.535Z]	<DanielRosenwasser>	the compiler indeed treat -pron- differently everything in there be suppose to be an ambient declaration
[2015-09-25T06:34:15.462Z]	<DanielRosenwasser>	-pron- depend how -pron- determine whether something be a subtype typescript be mainly structurally type if something be a structural subtype of whatever -pron- assign to then -pron- be certainly assignable
[2015-09-25T06:34:27.730Z]	<DanielRosenwasser>	what be the example -pron- have in mind
[2015-09-25T06:36:29.173Z]	<HelveticaScenario>	class a class b extend a class c extend a var c c new b
[2015-09-25T06:36:58.874Z]	<HelveticaScenario>	that compile and throw no error for -pron-
[2015-09-25T06:37:00.079Z]	<DanielRosenwasser>	right neither b nor c have any difference in structure
[2015-09-25T06:37:28.402Z]	<DanielRosenwasser>	try add x number to c and -pron- get an error
[2015-09-25T06:38:08.719Z]	<HelveticaScenario>	that seem like an odd choice tbh
[2015-09-25T06:38:40.513Z]	<DanielRosenwasser>	-pron- may seem odd if -pron- use to traditional oo language
[2015-09-25T06:38:56.872Z]	<DanielRosenwasser>	but -pron- make a lot more sense when -pron- develop a type system around javascript
[2015-09-25T06:38:58.512Z]	<HelveticaScenario>	i be and that s what i think typescript be
[2015-09-25T06:39:12.684Z]	<HelveticaScenario>	get -pron-
[2015-09-25T06:40:09.807Z]	<HelveticaScenario>	be there anywhere in the doc that descibe this
[2015-09-25T06:40:25.470Z]	<DanielRosenwasser>	the language be a general purpose one there nothing stop -pron- from write good old fashioned class and interface
[2015-09-25T06:40:29.584Z]	<DanielRosenwasser>	one sec
[2015-09-25T06:40:49.672Z]	<DanielRosenwasser>
[2015-09-25T06:42:09.673Z]	<DanielRosenwasser>
[2015-09-25T06:43:00.001Z]	<DanielRosenwasser>	that second one be probably more where -pron- want to look
[2015-09-25T06:43:35.700Z]	<HelveticaScenario>	yeah i previously read the first one but never see the second one
[2015-09-25T06:44:28.791Z]	<HelveticaScenario>	that s sort of a bummer
[2015-09-25T06:48:26.555Z]	<HelveticaScenario>	-pron- would be great if that information be more prominently display there s a big difference between structural and normal typing and since the syntax of the language be very reminiscent of c and java on top of the fact that structural typing be not super common -pron- not unreasonable for someone to assume that typescript be type normally
[2015-09-25T06:51:06.631Z]	<DanielRosenwasser>	-pron- try to keep that in mind -pron- documentation need some tlc
[2015-09-25T06:51:44.389Z]	<DanielRosenwasser>	though -pron- should be a bummer -pron- really not a problem in practice and in fact -pron- work really well with how js library be write today
[2015-09-25T06:52:52.917Z]	<DanielRosenwasser>	nominal type system have a lot of strength but js be really a language that depend on shape a lot more than hierarchy
[2015-09-25T07:00:20.063Z]	<HelveticaScenario>	yeah -pron- seem cool -pron- be just a bummer cus -pron- mean i could not use empty class to define a bunch of custom -pron- would type that be incompatible with each other
[2015-09-25T07:00:43.332Z]	<HelveticaScenario>	shrug
[2015-09-25T07:07:56.507Z]	<DanielRosenwasser>	-pron- have to track that in the mean time -pron- can always introduce a brand property typescript class a private abrand class b extend a private bbrand class c extend a private cbrand let a a new b okay let b b new c error
--------------------------------------------------------------------------------------------------
[2015-09-25T06:49:30.410Z]	<HelveticaScenario>	could save user from quite a few bug
--------------------------------------------------------------------------------------------------
[2015-09-25T07:27:46.659Z]	<kitsonk>	if only typescript structural typing be the only thing in typescript ecmascript that confuse people from other language i think typescript do a great job of meet -pron- goal which be to be a superset of javascript without break javascript that be a hard job
[2015-09-25T18:54:35.475Z]	<removed~kataras>	other example be the meteor js platform
--------------------------------------------------------------------------------------------------
[2015-09-25T17:05:02.050Z]	<removed~kataras>	i would to make a fast question
[2015-09-25T17:05:23.077Z]	<removed~kataras>	can i have a property that -pron- name be unknown but -pron- property be type
[2015-09-25T17:05:24.192Z]	<removed~kataras>	example
[2015-09-25T17:06:48.936Z]	<removed~kataras>
[2015-09-25T17:07:02.808Z]	<removed~kataras>	js var something new something dsada
[2015-09-25T17:07:51.466Z]	<removed~kataras>	the dynamicunkownproperty be unknown but after this all property be know and i could have autocomplete support on editor for example
[2015-09-25T17:07:53.689Z]	<removed~kataras>	be that possible
[2015-09-25T17:09:07.951Z]	<removed~kataras>	js class something anunkownproperty class subsomething knownproperty string var something new something something dsadas
[2015-09-25T17:09:24.754Z]	<removed~kataras>	be that ok
[2015-09-25T17:09:47.705Z]	<removed~kataras>	but the string  <user> be
[2015-09-25T17:09:54.774Z]	<removed~kataras>	i want a property
[2015-09-25T18:25:57.320Z]	<DanielRosenwasser>	-pron- could add a string index signature
[2015-09-25T18:26:23.032Z]	<DanielRosenwasser>	oh -pron- mean -pron- want to be able to dot off of -pron-
[2015-09-25T18:28:10.869Z]	<DanielRosenwasser>	but if -pron- dynamic how be -pron- dot with -pron-
[2015-09-25T18:53:05.077Z]	<removed~kataras>	yeah
[2015-09-25T18:53:07.802Z]	<removed~kataras>	look
[2015-09-25T18:53:15.878Z]	<removed~kataras>	i have -pron- module which be for mysql table
[2015-09-25T18:53:20.773Z]	<removed~kataras>	for example
[2015-09-25T18:53:24.577Z]	<removed~kataras>
[2015-09-25T18:53:37.069Z]	<removed~kataras>	i know that the db
[2015-09-25T18:53:40.705Z]	<removed~kataras>	 <user> be a table name
[2015-09-25T18:54:02.867Z]	<removed~kataras>	for now ihave -pron-
[2015-09-25T18:54:38.932Z]	<removed~kataras>	on blaze template
[2015-09-25T18:54:45.334Z]	<removed~kataras>
[2015-09-25T18:55:50.558Z]	<removed~kataras>	the definition file for meteorjs have  <user> this problem i m describing -pron- must write -pron- and after -pron- do not have autocomplete support although -pron- could i want to be able to have this with simple property name follow by dot without use of index or array or dictionary of string
--------------------------------------------------------------------------------------------------
[2015-09-25T18:53:55.170Z]	<removed~kataras>	and after this i  <user> have the table method findall findbyid and
[2015-09-25T18:54:15.498Z]	<removed~kataras>	but i want to be able somewhere to do -pron-
[2015-09-25T18:54:17.936Z]	<removed~kataras>	like
[2015-09-25T18:54:22.932Z]	<removed~kataras>	or
[2015-09-25T18:54:27.873Z]	<removed~kataras>	-pron- be useful on some case
[2015-09-25T18:55:57.766Z]	<removed~kataras>	i want to be able somehow to make -pron- with dot
[2015-09-25T18:56:06.048Z]	<removed~kataras>	be that possible or at the future something
--------------------------------------------------------------------------------------------------
[2015-09-25T18:55:14.000Z]	<removed~kataras>	the templatename be dynamic unknown property name but the method follow this templatename property be hardcoded normal property
--------------------------------------------------------------------------------------------------
[2015-09-25T18:56:40.588Z]	<removed~kataras>	i know that after dot  <user> have something and after these something i  <user> have know property
--------------------------------------------------------------------------------------------------
[2015-09-25T19:02:54.554Z]	<removed~kataras>	the meaning be that if -pron- know what come after this dynamic property -pron- could bring code assistance be i wrong
--------------------------------------------------------------------------------------------------
[2015-09-25T19:07:33.428Z]	<Cu3PO42>	if the property name be dynamic -pron- need to access -pron- with the bracket notation please do eval -pron- have already post the correct way to specify these type provide code completion be entirely possible with this solution if -pron- do not currently work for -pron- -pron- may be a limitation bug in the autocompletion engine -pron- use however -pron- can definitely be do
[2015-09-25T19:08:09.068Z]	<Cu3PO42>	there be no need to introduce a different syntax here
[2015-09-25T19:08:23.960Z]	<removed~kataras>	i be use vs code
[2015-09-25T19:08:29.456Z]	<removed~kataras>	-pron- mean dsa
[2015-09-25T19:08:32.165Z]	<removed~kataras>	this be work
[2015-09-25T19:08:36.138Z]	<removed~kataras>	i want to take off the bracket
[2015-09-25T19:08:41.465Z]	<removed~kataras>	i want just dsa
[2015-09-25T19:09:26.580Z]	<removed~kataras>	-pron- have index string something
[2015-09-25T19:09:49.446Z]	<removed~kataras>	i want something like index property something
[2015-09-25T19:10:08.986Z]	<removed~kataras>	with index string ok -pron- work
[2015-09-25T19:10:22.172Z]	<removed~kataras>	with index no -pron- be not work
[2015-09-25T19:10:37.678Z]	<removed~kataras>	-pron- seem that i need a new type not a new syndax
[2015-09-25T19:10:43.730Z]	<removed~kataras>	like string number and
[2015-09-25T19:10:59.192Z]	<removed~kataras>	a type that be describe a dynamic property name
[2015-09-25T19:16:13.432Z]	<removed~kataras>	this property
[2015-09-25T19:28:36.757Z]	<removed~kataras>	yes this -pron- do
--------------------------------------------------------------------------------------------------
[2015-09-25T19:11:18.391Z]	<mylesmegyesi>	hi all can anyone offer guidance on how to implement a custom module resolver for use with the typescript compiler api i would like to implement a module resolver that resolve module relative to a list of search path similar to ruby load path or java class path
[2015-09-25T19:12:47.170Z]	<Cu3PO42>	a dynamic property name be a string
[2015-09-25T19:13:10.574Z]	<removed~kataras>	yes but -pron- can only access -pron- with bracket
[2015-09-25T19:13:23.465Z]	<removed~kataras>	be any way -pron- can access -pron- like a normal property with dot
[2015-09-25T19:13:28.172Z]	<removed~kataras>	like javascript do of course
[2015-09-25T19:13:31.917Z]	<removed~kataras>	both way
[2015-09-25T19:14:07.482Z]	<removed~kataras>	the example -pron- tell for  <user> be have only dynamic property
[2015-09-25T19:14:30.255Z]	<removed~kataras>
[2015-09-25T19:16:10.184Z]	<removed~kataras>	-pron- know what be instance of this property but -pron- do know what be the name of
[2015-09-25T19:16:23.883Z]	<Cu3PO42>	so -pron- be say the name be actually static know at compile time and -pron- want -pron- type definition to map any property on that object to a specify time without use the bracket notation
[2015-09-25T19:17:05.572Z]	<removed~kataras>	no i be not speak for definition only
[2015-09-25T19:17:12.693Z]	<removed~kataras>	and the property name be not static
[2015-09-25T19:17:20.981Z]	<removed~kataras>	the property class be static and know
[2015-09-25T19:17:29.664Z]	<removed~kataras>	for example
[2015-09-25T19:17:32.098Z]	<removed~kataras>
[2015-09-25T19:17:35.855Z]	<removed~kataras>	-pron- know what database class be
[2015-09-25T19:17:41.535Z]	<removed~kataras>	-pron- know that after database dot
[2015-09-25T19:17:49.427Z]	<removed~kataras>	-pron-  <user> have a table object
[2015-09-25T19:17:55.876Z]	<removed~kataras>	and that table object have findall method
[2015-09-25T19:18:05.858Z]	<removed~kataras>	but -pron- do know what be the name of this property
[2015-09-25T19:18:10.689Z]	<removed~kataras>	-pron- can be
[2015-09-25T19:18:12.718Z]	<removed~kataras>
[2015-09-25T19:18:14.891Z]	<removed~kataras>
[2015-09-25T19:19:36.813Z]	<removed~kataras>	i think -pron- be clear what i be try to describe
[2015-09-25T19:19:36.985Z]	<removed~kataras>
[2015-09-25T19:24:39.167Z]	<Cu3PO42>	actually -pron- be not not to -pron- at least the property name be either static or dynamic if -pron- dynamic the only way js support access dynamic property be via bracket notation if -pron- static -pron- could  <user> access -pron- via dot notation typescript do not currently support use dot notation for property that be define as a map in the type and i do think typescript be intend to work like that if -pron- can change the type definition and -pron- want this default type for all property on an object -pron-  <user> need to use bracket notation for those as well
[2015-09-25T19:29:13.776Z]	<removed~kataras>	but -pron-  <user> be a nice to have an index type
[2015-09-25T19:29:18.034Z]	<removed~kataras>	like an index stre
[2015-09-25T19:29:41.471Z]	<removed~kataras>	something like that -pron- be tell the compiler to map any property name to the index
[2015-09-25T19:30:13.951Z]	<removed~kataras>	for the case somebody have an answer that i do not see
[2015-09-25T19:30:27.273Z]	<removed~kataras>	clearly this be not the way that typescript do type javascript
[2015-09-25T19:31:03.309Z]	<Cu3PO42>	there be a relevant issue on github
--------------------------------------------------------------------------------------------------
[2015-09-25T19:30:05.921Z]	<removed~kataras>	so i can do that i know -pron- but i think to ask here
[2015-09-25T19:31:22.936Z]	<removed~kataras>	yes
[2015-09-25T19:31:26.770Z]	<removed~kataras>	this excatly
[2015-09-25T19:31:33.230Z]	<removed~kataras>	so i be not alone
--------------------------------------------------------------------------------------------------
[2015-09-25T19:31:48.213Z]	<Cu3PO42>	since that be still label with need more info i suggest -pron- contribute -pron- usecase there
[2015-09-25T19:34:28.457Z]	<removed~kataras>	yes i already write something but -pron- english suck
[2015-09-25T19:38:10.945Z]	<removed~kataras>	thank for -pron- assistance
--------------------------------------------------------------------------------------------------
[2015-09-25T23:59:03.920Z]	<ornamentist>	look for convention for organize a typescript project for node -pron- like to have directory src source tree test test file lib generate js typing file but not sure how these should interact with
[2015-09-25T23:59:29.154Z]	<ornamentist>	especially with srcroot and file option
--------------------------------------------------------------------------------------------------
[2015-09-26T01:01:48.833Z]	<DanielRosenwasser>	i think that seem pretty reasonable
[2015-09-26T01:03:32.590Z]	<DanielRosenwasser>	-pron- could  <user> use bin or build instead of lib but i think lib work just fine
[2015-09-26T11:27:23.487Z]	<removed~kataras>	-pron- can have src for typescript code typing or definition for -pron- definition file test for -pron- test compile for generate javascript from typescript
[2015-09-26T11:28:00.720Z]	<removed~kataras>	and public for -pron- website file if -pron- project be that
[2015-09-26T11:28:41.298Z]	<removed~kataras>	 <user> learn how to use gulp or grunt -pron- use gulp i can give -pron- -pron- script for compile and copy the generate code in -pron- test folder if -pron- want to see an example
[2015-09-26T11:29:44.188Z]	<removed~kataras>	-pron- tsconfig  <user> be at the root project folder
[2015-09-26T11:30:11.262Z]	<removed~kataras>	outside of src typing test and compile folder
--------------------------------------------------------------------------------------------------
[2015-09-26T15:47:08.871Z]	<reliak>	hey there be there a way to disable compile on save for file in project in vs
[2015-09-26T15:57:50.869Z]	<reliak>	oh i find -pron- -pron- be in tool text editor typescript project
[2015-09-26T16:58:17.922Z]	<reliak>	i have a question regard the emitter from the comment i see that an external import be push when -pron- be referenced however i have the follow code import aurelia from aurelia framework export function aurelia the generate js file do not contain the dependency to aurelia framework be this the expect behaviour or a bug when i explicitely create a reference let a new aurelia the dependency be add in the generate js
[2015-09-26T17:02:13.164Z]	<DanielRosenwasser>	in that case -pron- use aurelia as a type if -pron- write new aurelia then -pron- be reference the constructor function i suspect that the reason
[2015-09-26T17:05:02.528Z]	<DanielRosenwasser>	i realize -pron- confusing but if -pron- want to ensure that side effect from load aurelia framework occur -pron- can write typescript import aurelia framework
[2015-09-26T17:05:16.359Z]	<DanielRosenwasser>	-pron- try to find an issue that track this
[2015-09-26T17:08:50.494Z]	<reliak>	ok thank for the response but if i use import aurelia framework how can i reference aurelia as a type as in the constructor aurelia aurelia
[2015-09-26T17:10:41.525Z]	<DanielRosenwasser>	i believe -pron- can write both typescript import aurelia framework import aurelia from aurelia framework
[2015-09-26T17:11:05.921Z]	<reliak>	ok that what i want to avoid but -pron- would be well than nothing
[2015-09-26T17:11:40.147Z]	<DanielRosenwasser>
[2015-09-26T17:13:42.105Z]	<reliak>	thank for the link i  <user> study -pron- however -pron- would be good if the use of a type as in -pron- above example code would be recognise so i can avoid duplicated import statement
[2015-09-26T18:06:41.891Z]	<DanielRosenwasser>	well -pron- be that the thing
[2015-09-26T18:06:58.446Z]	<DanielRosenwasser>	-pron- detect that -pron- do actually use any of the value import from a module
[2015-09-26T18:07:46.503Z]	<DanielRosenwasser>	but -pron- can detect whether -pron- need the side effect of load a module
[2015-09-26T21:30:38.629Z]	<ghost~55df963f0fc9f982beaed62c>	that how i have -pron- in -pron- file appdata roam npm typescript lib
[2015-09-26T21:31:11.760Z]	<MicahZoltu>	that way i do have to depend on user have a nightly build setup in vscode on -pron- machine
[2015-09-27T01:12:51.190Z]	<DanielRosenwasser>	to colorize that be
[2015-09-27T01:13:20.788Z]	<MicahZoltu>	what be this in reference to
[2015-09-27T01:14:24.584Z]	<MicahZoltu>	that define where vscode find the language service tsc which i believe be use for syntax highlight
[2015-09-27T02:25:54.514Z]	<MicahZoltu>	that be unfortunate
[2015-09-27T02:26:31.165Z]	<MicahZoltu>	because -pron- mean change in the language such as the new async await keyword will apply syntax highlight when i be compile with ts
[2015-09-27T05:03:55.445Z]	<reliak>	but -pron- can detect whether -pron- need the side effect of load a module -pron- read the comment in issue i think typescript be try to be too smart in detect what dependency be actually use a typical problematic scenario be the injection of dependency where i do actually reference a module import dependencyx from some module export class someclass dependencyx use dep in the above example i find -pron- confusing that typescript eliminate the import -pron- do not generate some module as a dependency -pron- would be helpful if there be at least be some kind of flag to enable disable this smartness of typescript
[2015-09-27T07:27:47.692Z]	<reliak>	just because i do call new dependencyx do mean i do have a dependency on -pron- the class someclass be dependent on some module and this dependency should be make explicit if some module be load before someclass i have a problem by declare the import statement i explicitely state that i be dependent on this module typescript remove this in the compilation be not what i expect to happen
[2015-09-27T11:40:40.198Z]	<reliak>	i have the understanding that when i be import something from another module -pron- have a dependency on that module when i write import some module instead of import dependencyx from some module the dependency  <user> be retain by typescript i do think that be consistent and -pron- cause confusion
[2015-09-28T12:56:35.826Z]	<jbrantly>	-pron- can just use import some module to import a module where the current module have no dependency on an export from some module but still need -pron- to be load for some other side effect but the fact that there be a side effect at all be a code smell
--------------------------------------------------------------------------------------------------
[2015-09-26T20:01:40.638Z]	<ornamentist>	thank to and  <user> find for a bare bone node project
[2015-09-26T20:04:17.988Z]	<ornamentist>	do -pron- put generate javascript for test in the test directory
--------------------------------------------------------------------------------------------------
[2015-09-26T20:58:29.260Z]	<MicahZoltu>	do anyone know where vscode get -pron- version of tsc from for static analysis not for build that come from whatever task -pron- have setup
[2015-09-26T20:58:47.887Z]	<MicahZoltu>	by static analysis i mean syntax highlighting and auto complete
[2015-09-26T21:01:48.384Z]	<MicahZoltu>	i think the terminology be how can i use nightly build as the vscode typescript language service
[2015-09-27T02:25:49.618Z]	<MicahZoltu>	oh okay
--------------------------------------------------------------------------------------------------
[2015-09-26T21:29:21.497Z]	<ghost~55df963f0fc9f982beaed62c>	be -pron- refer to the file of vscode
[2015-09-26T21:29:43.223Z]	<MicahZoltu>	yeah i find -pron- micah appdata roam npm typescript lib
[2015-09-26T21:29:55.400Z]	<ghost~55df963f0fc9f982beaed62c>	i think -pron- want
[2015-09-26T21:29:57.300Z]	<MicahZoltu>	-pron- would appear that there currently be support for relative path
[2015-09-26T21:30:48.155Z]	<MicahZoltu>	i would prefer to put the setting in -pron- workspace directory and have -pron- reference a locally instal node module
[2015-09-27T01:32:30.188Z]	<DanielRosenwasser>	-pron- should be use the tmlanguage file
--------------------------------------------------------------------------------------------------
[2015-09-26T22:04:14.350Z]	<removed~kataras>	i have a different folder for typescript test and javascript and
[2015-09-26T22:07:57.667Z]	<removed~kataras>	i have different folder for typescript because i want to see what code assistance -pron- lib have for typescript developer  <user>
[2015-09-26T22:08:51.001Z]	<removed~kataras>	-pron- can have only the test directory for generate javascript code typescript be javascript in the end so no problem
[2015-09-27T01:12:42.455Z]	<DanielRosenwasser>	for the record i believe vscode use the same tmlanguage file as -pron- sublime plugin
[2015-09-27T01:13:39.640Z]	<MicahZoltu>	oh i get -pron- answer -pron- be the setting
[2015-09-27T01:14:39.192Z]	<MicahZoltu>	i could be wrong though
[2015-09-27T01:31:57.785Z]	<DanielRosenwasser>	-pron- not unless something recently change
[2015-09-27T01:33:18.870Z]	<DanielRosenwasser>	but as far as any other operation yeah -pron- use the language service
[2015-09-28T12:58:38.031Z]	<jbrantly>	just read more of the chat history i see actually already suggest what i say whoop
[2015-09-28T13:02:40.118Z]	<jbrantly>	but take -pron- original example typescript import aurelia from aurelia framework export function aurelia that file do need an emit -pron- really be just use the type information instead the module that call that would need the runtime dependency eg typescript import aurelia from aurelia framework import configure from var aurelia new aurelia
--------------------------------------------------------------------------------------------------
[2015-09-27T07:20:28.217Z]	<kitsonk>	i do think -pron- be be overly smart typescript be a module loader -pron- have code that typescript see -pron- have no runtime dependency on that code so -pron- do emit a runtime dependency that be exactly what i would expect -pron- to do
--------------------------------------------------------------------------------------------------
[2015-09-27T11:07:40.844Z]	<ghost~55df963f0fc9f982beaed62c>	what would -pron- expect to happen because -pron- snippet of code do show anything about -pron- be a dependency aside from the type -pron- which be remove and the comment that do tell much type be a compile time feature not a run time feature
--------------------------------------------------------------------------------------------------
[2015-09-27T19:34:35.741Z]	<code-Review-2015>	be -pron- work cloesely with microsoft ntvs
[2015-09-27T20:00:03.804Z]	<code-Review-2015>	i mean typescript sorry
[2015-09-27T20:20:16.725Z]	<code-Review-2015>	yeah well ntvs have have some issue get intellisense to work and -pron- be under discussion whether typescript file be the solution
--------------------------------------------------------------------------------------------------
[2015-09-27T20:05:24.334Z]	<kitsonk>	not directly though -pron- be build dojo with typescript and i have be an increasingly vocal member of the community
--------------------------------------------------------------------------------------------------
[2015-09-28T14:01:51.563Z]	<reliak>	thank for -pron- answer -pron- be right i only need the type information and i do need the import for any side effect so -pron- should be ok if the import require be not emit in this case
[2015-09-28T18:28:07.435Z]	<ghalle>	-pron- seem like if everything in an interface be optional -pron- allow extra property not part of the interface be there anyway to prevent that
[2015-09-28T18:39:50.897Z]	<ghalle>	nevermind do not seem to have anything to do do with -pron- be optional or not seem like -pron- just the inference not be that great
--------------------------------------------------------------------------------------------------
[2015-09-28T19:18:35.437Z]	<jbrantly>	there be some check for extra property -pron- a relatively new feature and have limit but useful scope
--------------------------------------------------------------------------------------------------
[2015-09-28T19:24:17.447Z]	<code-Review-2015>	i have nearly no experience with if i want to contribute to npm would -pron- suggest run linux and if so what ide package codebox vscode etc
[2015-09-28T19:29:58.628Z]	<ghalle>	typescript interface schema type string item schema schema property property string schema const a schema type array item type object property foo type object c in the above example c should be an error but -pron- be not -pron- only work if i make one of the thing in the interface non optional like type string instead of type stre
[2015-09-28T19:35:05.032Z]	<DanielRosenwasser>	this be a symptom of be assignable to schema because schema have all optional member and so basically anything that do have the type item and property  <user> be assignable to -pron-
[2015-09-28T19:35:28.573Z]	<ghalle>	be there anyway arround that
[2015-09-28T19:36:46.821Z]	<DanielRosenwasser>	well put out a pr for this sort of thing
[2015-09-28T19:37:15.296Z]	<DanielRosenwasser>	do some work so that object literal do have this problem but primitive still do
[2015-09-28T19:37:39.346Z]	<DanielRosenwasser>	i have a couple of suggestion that may help in the mean time but -pron- hacky
[2015-09-28T19:38:46.986Z]	<ghalle>	sure -pron- would hurt to know -pron-
[2015-09-28T19:42:03.370Z]	<DanielRosenwasser>	add the follow property to schema typescript valueof donotuse incompatible with valueof in string number and booleans test donotuse incompatible with test in regexe
[2015-09-28T19:42:25.817Z]	<DanielRosenwasser>	actually -pron- can make an interface that specifically disallow primitive and extend that
[2015-09-28T19:42:48.455Z]	<DanielRosenwasser>	typescript interface noprimitive valueof donotuse incompatible with valueof in string number and booleans test donotuse incompatible with test in regexe
[2015-09-28T19:44:43.169Z]	<DanielRosenwasser>	typescript interface schema extend noprimitive type string item schema schema property property string schema
[2015-09-28T19:45:24.341Z]	<ghalle>	that do seem to work thank
[2015-09-28T19:46:05.063Z]	<DanielRosenwasser>	-pron- welcome glad there at least some way -pron- can work around this for now smile
--------------------------------------------------------------------------------------------------
[2015-09-29T06:42:59.807Z]	<umren>	when use with node i can find a way to output file in other directory
[2015-09-29T06:43:20.842Z]	<umren>	out option be always output just a single empty file
[2015-09-29T06:43:48.153Z]	<umren>	how to output all ts file to other directory instead of src where i want to have only ts file
[2015-09-29T06:55:51.172Z]	<DanielRosenwasser>	if -pron- use with the two option do work together
[2015-09-29T06:56:10.897Z]	<DanielRosenwasser>	if -pron- remove the module option -pron- should get the result -pron- expect
[2015-09-29T06:56:58.914Z]	<DanielRosenwasser>	if -pron- want to just change the directory of -pron- output file instead of just make a single js output file use
[2015-09-29T06:57:12.701Z]	<DanielRosenwasser>	let -pron- know if that work
[2015-09-29T07:03:02.271Z]	<umren>	i i do use module option -pron- always give -pron- this error error can not compile module unless the flag be provide
[2015-09-29T07:06:14.624Z]	<DanielRosenwasser>	then -pron- have to remove the out option to get a single file emit with module -pron- have to use a bundler like browserify or webpack
[2015-09-29T07:07:25.398Z]	<umren>	no no i do want single file
[2015-09-29T07:07:31.869Z]	<umren>	i want multiple file but in other directory
[2015-09-29T07:07:40.262Z]	<umren>	not in the same with ts file
[2015-09-29T07:07:43.610Z]	<DanielRosenwasser>	ah then -pron- want
[2015-09-29T07:08:20.724Z]	<DanielRosenwasser>
[2015-09-29T07:11:02.838Z]	<umren>	hm have see that option on
[2015-09-29T07:11:09.494Z]	<umren>	thanks that solve the problem
--------------------------------------------------------------------------------------------------
[2015-09-29T18:22:55.026Z]	<calebboyd>	any idea why would emit generator function
[2015-09-29T18:23:18.264Z]	<calebboyd>	target with experimentalasyncfunction enable
[2015-09-29T18:31:19.584Z]	<calebboyd>	here be a quick snippet with demonstrate the issue javascript function thing await new compileroption target experimentalasyncfunction true var awaiter function thing yield new res
[2015-09-29T18:32:34.459Z]	<calebboyd>	hmm there be a few other issue here to arrow function
[2015-09-29T18:33:17.820Z]	<jbrantly>	should that be target
[2015-09-29T18:33:29.364Z]	<jbrantly>	without the compileroption
[2015-09-29T18:34:08.980Z]	<calebboyd>	i think that sig belong to the deprecate transpile method yeah
[2015-09-29T18:35:09.180Z]	<jbrantly>	sorry -pron- right
[2015-09-29T18:36:09.049Z]	<jbrantly>	i think -pron- possible that be correct there
[2015-09-29T18:36:17.204Z]	<jbrantly>	and that -pron- need the enum value
[2015-09-29T18:36:36.319Z]	<jbrantly>	be for and tsc but after -pron- parse -pron- turn into a number
[2015-09-29T18:37:21.878Z]	<jbrantly>	again i could be wrong there
[2015-09-29T18:38:00.359Z]	<jbrantly>	try set target to
[2015-09-29T18:39:40.185Z]	<calebboyd>	awesome thank -pron- look like i need to do this
[2015-09-29T18:39:52.668Z]	<calebboyd>	instead of just this
[2015-09-29T18:40:18.955Z]	<jbrantly>	righto welcome
[2015-09-29T18:41:21.497Z]	<jbrantly>	be -pron- write an integration for something
[2015-09-29T18:43:25.682Z]	<calebboyd>	flippin enum
[2015-09-29T18:54:19.081Z]	<calebboyd>	weird gitter do have that message there earlier -pron- just attempt to setup a simple mocha compiler at the moment
[2015-09-29T18:56:30.218Z]	<calebboyd>	ideally -pron- want to pass -pron- through the same loader that i have configure with webpack but -pron- not sure that be expose on webpack
[2015-09-30T18:45:08.849Z]	<jbrantly>	have the typescript team think about have a typescript conference
[2015-09-30T18:46:29.803Z]	<jbrantly>	i be just discuss -pron- talk proposal to jsconf to talk about typescript and a coworker think -pron- would be cool if ms hold a typescript specific conf
--------------------------------------------------------------------------------------------------
[2015-09-30T21:08:59.100Z]	<DanielRosenwasser>	-pron- think about -pron- have a tsconf sort of thing but i guess that usually subsume by the annual build conference i can ask other how -pron- feel about the idea
[2015-09-30T21:45:26.433Z]	<jbrantly>	if -pron- ever wind up do -pron- -pron- should open -pron- up for community speaker as well for instance -pron- love to give a talk on integrate webpack and typescript -pron- personally love to attend a tsconf if for no other reason than to meet a bunch of -pron- guy and other from the community to talk shop
--------------------------------------------------------------------------------------------------
[2015-10-01T10:22:40.786Z]	<kitsonk>	-pron- be good the typescript get prop at build but yes i would second something more focused
--------------------------------------------------------------------------------------------------
[2015-10-01T12:37:12.046Z]	<ryanwischkaemper>	have anyone have experience with typescript unit test in conjunction with systemjs and karma
[2015-10-01T12:37:34.188Z]	<ryanwischkaemper>	i have not be able to find any example nor get -pron- own project work well with -pron-
[2015-10-01T12:38:52.732Z]	<ryanwischkaemper>	and to be clear i want to write -pron- unit test in typescript -pron- be able to have source file and test file but that feel kind of wrong to -pron-
[2015-10-01T12:42:33.969Z]	<slikts>	be -pron- possible to add type annotation to file base on file or be there any plan of support this
[2015-10-01T12:45:08.516Z]	<slikts>	fwiw i use and -pron- support test but only work in atom vs jetbrain ide -pron- an arguably nice test runner than karma in any case
[2015-10-01T12:46:37.467Z]	<ryanwischkaemper>	not sure if there be any official plan of support -pron- but the aurelia project on aurelia do something like that -pron- write -pron- code in file but -pron- include type annotation in -pron- code then when -pron- have a gulp task that generate file base of -pron- source example aurelia framework blob master src
[2015-10-01T12:47:08.860Z]	<ryanwischkaemper>	i love wallaby but i do not think -pron- have support for run on -pron- ci server
[2015-10-01T12:49:33.440Z]	<jbrantly>	that be so weird
[2015-10-01T12:49:43.635Z]	<jbrantly>	why not just make the source file file
[2015-10-01T12:50:04.752Z]	<slikts>	what -pron- like to do be to convert into use exist type information from a file -pron- not sure if i understand what go on with aurelia but -pron- look like -pron- write ts in file
[2015-10-01T12:51:09.620Z]	<ryanwischkaemper>	-pron- be use feature from babel to generate type definition file from -pron- source code
[2015-10-01T12:51:51.057Z]	<ryanwischkaemper>	i believe -pron- because -pron- do want to alienate anyone who be not familiar with typescript
[2015-10-01T12:52:13.204Z]	<jbrantly>	but then -pron- have code like
[2015-10-01T12:52:20.606Z]	<jbrantly>	just seem weird
[2015-10-01T12:52:49.166Z]	<ryanwischkaemper>	while at the same time still fully support typescript user by have all of -pron- file always up to date because -pron- be generate from -pron- source code
[2015-10-01T12:53:17.323Z]	<slikts>	i do get -pron- either that clearly ts but in a file and skim the wiki article do really clarify the reasoning to -pron-
[2015-10-01T12:53:29.146Z]	<jbrantly>	right
[2015-10-01T12:53:52.689Z]	<ryanwischkaemper>	-pron- find what the creator say about -pron-
[2015-10-01T12:54:16.965Z]	<jbrantly>	regard -pron- thing -pron- not aware of any such tool -pron- guess be that the reasoning be any time spend create the manually in the first place could instead just be use on convert the js to ts
[2015-10-01T12:58:34.443Z]	<slikts>	the reason i ask be because of party type definition in definitelytype -pron- would make -pron- easy for project to switch to ts if -pron- could just apply the file to -pron- code
[2015-10-01T13:00:35.691Z]	<ryanwischkaemper>	-pron- do not let -pron- link directly to a comment but if -pron- look in the comment aurelia early september release for the one by michal gajek and aurelia creator rob eisenberg response
[2015-10-01T13:01:15.977Z]	<jbrantly>	gotcha -pron- not aware of any such tool but that do really mean anything i suspect -pron- would be quite tricky to write and error prone though there lot of way to do thing in js that could make matching between the dts and the js difficult
[2015-10-01T13:01:58.243Z]	<slikts>	right what i do realise be that babel support the type annotation that kind of weird
[2015-10-01T13:02:52.349Z]	<jbrantly>	-pron- do because of flow
[2015-10-01T13:02:58.760Z]	<jbrantly>	well partially because of flow
[2015-10-01T13:03:14.556Z]	<slikts>	i wonder if -pron- not a good idea for people who be author the file to actually just convert the project to and generate the type definition
[2015-10-01T13:03:18.572Z]	<ryanwischkaemper>	read that comment on the post i link -pron- sound like babel support -pron- because type in javascript may become a standard in the future
[2015-10-01T13:06:13.181Z]	<slikts>	thanks this be actually a neat approach -pron- not sure about the support in editor though for instance i use atom typescript and i think -pron- only work with file
[2015-10-01T13:06:36.201Z]	<kitsonk>	already have a strong mode where -pron- be look at introduce run time typing
[2015-10-01T13:06:37.550Z]	<jbrantly>	flow support type in file but -pron- have to run a build step to strip the type to use the js basically the same as ts facebook use jstransform to do that but -pron- deprecate jstransform in favor of babel to do jsx conversion and to strip type information babel be  <user> aqui hire by facebook so yea that partially why babel support type d
[2015-10-01T13:07:35.082Z]	<slikts>	seem like thing be look up for people who like static typing
[2015-10-01T13:10:38.796Z]	<slikts>	too bad be lag so much with -pron- support for though
[2015-10-01T13:22:38.314Z]	<kitsonk>	in what part the big challenge be that -pron- require the use strict prolog which be incorrect
[2015-10-01T13:24:21.215Z]	<slikts>	destructuring default parameter class reflection and builtin subclassing
[2015-10-01T13:25:06.095Z]	<slikts>	destructuring and builtin subclassing be what i mostly care about
[2015-10-01T13:25:55.891Z]	<slikts>	oh and tco of course
[2015-10-01T13:27:13.115Z]	<kitsonk>	most of the build in subclassing be there just under strict mode i would say that be behind only edge have -pron- really
[2015-10-01T13:29:54.359Z]	<slikts>	all of those feature be implement by either edge or fx or both
[2015-10-01T13:31:03.633Z]	<kitsonk>	subclasse build ins be in production edge or ff the thing -pron- most care about
--------------------------------------------------------------------------------------------------
[2015-10-01T13:26:55.551Z]	<slikts>	babel have manage to add some form of tco before the js vms
--------------------------------------------------------------------------------------------------
[2015-10-01T13:35:32.797Z]	<slikts>	builtin subclassing be one case where may not be behind but the rest be fx have destructure for instance the other thing i single out
--------------------------------------------------------------------------------------------------
[2015-10-01T18:34:06.441Z]	<BlacKCaT27>	hi all quick question have anyone here that use the eclipse palantir ts plugin notice that reference to relative path that be the current directory be suddenly fail have anyone find a resolution to this
[2015-10-01T18:42:37.313Z]	<BlacKCaT27>	okay other issue i just migrate from to now typescript seem to be generate javascript that just a copy of the ts no clue why
[2015-10-01T18:46:54.079Z]	<slikts>	do -pron- include type annotation what target be -pron- use
[2015-10-01T18:48:48.019Z]	<BlacKCaT27>	targette with suppress excess property error turn on for the moment simple file like class xyz be get transpile to a javascript file with the content class xyz which be invalid js
[2015-10-01T18:49:35.661Z]	<slikts>	that be actually valid
[2015-10-01T18:49:42.232Z]	<BlacKCaT27>	do something change between and where class must now be declare somehow i see there be a lot of change in and around the concept of module -pron- still pretty fresh to ts so -pron- not quite sure where to start look
[2015-10-01T18:49:52.294Z]	<BlacKCaT27>	-pron- come back say class be a reserved keyword in the browser
[2015-10-01T18:50:07.132Z]	<BlacKCaT27>	identifier
[2015-10-01T18:50:18.206Z]	<slikts>
[2015-10-01T18:50:33.038Z]	<slikts>	target if -pron- want
[2015-10-01T18:54:00.236Z]	<BlacKCaT27>	no i want i be just use that as an example because the ts compiler at least in would output something like var
[2015-10-01T18:54:36.904Z]	<BlacKCaT27>	oh but -pron- know -pron- right -pron- be actually transpile some of the code so then the next question be why be the browser complain about valid javascript
[2015-10-01T18:55:30.984Z]	<slikts>	because not all browser implement every feature i send -pron- a link where -pron- show feature and the class syntax be one of -pron- here be a compatibility teable of the feature
[2015-10-01T18:56:20.416Z]	<slikts>	-pron- can either target to get compatibility with most browser or -pron- can use babel
[2015-10-01T18:56:48.110Z]	<slikts>	afaik babel can either be use in place of tsc or after tsc
[2015-10-01T18:56:49.784Z]	<BlacKCaT27>	ahhhh that would do -pron- do support class thank a lot
[2015-10-01T18:57:16.200Z]	<BlacKCaT27>	-pron- be targette with ts since i start on the project and -pron- be work fine i guess something change in the ts compiler since then
[2015-10-01T18:57:42.563Z]	<slikts>	that what usually happen in new version
[2015-10-01T18:58:05.591Z]	<BlacKCaT27>	i mean in term of how -pron- handle the flag specifically
[2015-10-01T18:58:35.988Z]	<slikts>	-pron- can look through the change -pron-
--------------------------------------------------------------------------------------------------
[2015-10-01T19:04:11.850Z]	<msftgeek>	anyone know why typescript stop create the file
[2015-10-01T19:05:05.407Z]	<msftgeek>	i instal web extension to create -pron- on save after compile stop intermittently but now that stop as well
[2015-10-01T19:05:42.905Z]	<msftgeek>	i create a new ts file and all file seem good until thet stop create js file again
[2015-10-01T19:10:40.458Z]	<ryanwischkaemper>	check the output window and use the dropdown inside that window to show detail from the typescript javascript build
[2015-10-01T19:22:23.979Z]	<msftgeek>	thanks -pron- check that next time -pron- do -pron- since i recreate the file and all be good right now but last time i do remeber see anything interesting
[2015-10-01T19:25:19.780Z]	<BlacKCaT27>	so -pron- look through the changelog and all over the site but i can find an answer to this question in typescript if i target the transpiled js do use the class keyword be that a change that happen in or i see -pron- happen in but -pron- confuse as to why -pron- be there to begin with why change from var classname function syntax to the new class classname syntax of
[2015-10-01T19:27:06.605Z]	<jbrantly>
[2015-10-01T19:27:13.940Z]	<jbrantly>	look like -pron- change in
[2015-10-01T19:27:14.673Z]	<DanielRosenwasser>	-pron- have a systemjs sample
[2015-10-01T19:28:08.869Z]	<BlacKCaT27>	thanks james be there any way -pron- know of to disable that and go back to the extend method
[2015-10-01T19:28:15.307Z]	<BlacKCaT27>	while still targette
[2015-10-01T19:28:47.686Z]	<jbrantly>	no why would -pron- want to do that
[2015-10-01T19:29:42.707Z]	<jbrantly>	what environment be -pron- targette
[2015-10-01T19:29:53.822Z]	<BlacKCaT27>	because -pron- break -pron- project when try to migrate from to since -pron- target browser do support -pron- but i still want to target for map which -pron- use all over
[2015-10-01T19:31:17.476Z]	<slikts>	-pron- can target but use babel for class
[2015-10-01T19:32:10.005Z]	<jbrantly>	currently the ts compiler be very coarse grain when -pron- come to transpilation between and as say if -pron- want more fine grain control use target but then pass through babel
[2015-10-01T19:32:27.387Z]	<BlacKCaT27>	yeah look like i may need to head down that path thank
[2015-10-01T19:36:00.005Z]	<slikts>	be a proposal for granular targeting that hopefully get implement
[2015-10-01T19:43:54.394Z]	<jbrantly>	-pron- never understand the hate on that issue to -pron- transpile in typescript be a convenience feature but not what i use typescript for i use typescript for static typing what -pron- good at and i use babel for transpilation what -pron- good at i would continue to use typescript even if -pron- have no downlevel transpilation at all
[2015-10-01T19:46:47.281Z]	<slikts>	the feature exist therefore -pron- should be fix or remove
[2015-10-01T19:46:58.708Z]	<jbrantly>	fair enough
[2015-10-01T19:48:04.055Z]	<BlacKCaT27>	i could take or leave the transpiling if -pron- be for the palantir eclipse plugin which run tsc on a file whenever -pron- save i can make ts change and refresh the browser and the change be there way more convenient than run a full ant build or have to type out the compile command for each file
[2015-10-01T19:49:14.141Z]	<jbrantly>	typescript be quickly become an all in one tool static typing transpile and bundle
[2015-10-01T19:53:10.802Z]	<slikts>	there be no reason to even consider compile manually i do know how to do -pron- in eclipse but i personally use webpack watch mode with babel the same can be do with other tool like gulp
[2015-10-01T19:56:12.804Z]	<slikts>	right eclipse have an auto build after save option so -pron- would just have to add babel to -pron- the thing be that -pron- should have a build step in any case no matter what -pron- do since -pron- should be use module and browserify webpack be the most sane way of bundle module for the browser
--------------------------------------------------------------------------------------------------
[2015-10-01T19:51:55.223Z]	<slikts>	-pron- do have to use ts for bundle or compile anything except the type definition since babel know how to strip out type notation from ts or flow
--------------------------------------------------------------------------------------------------
[2015-10-01T20:00:25.182Z]	<BlacKCaT27>	fair enough -pron- absolutely right i guess -pron- just in the mindset of try to do the migration with minimal impact to -pron- current project which admittedly be not structure very well i just come on a couple month ago and be push for a clean up effort thank for all the insight though -pron- a middleware backend dev who just take on this task since the frontend guy be busy so -pron- apology if i sound a bit ignorant on the subject
[2015-10-01T20:03:23.471Z]	<ryanwischkaemper>	thank but that example do not have any unit test
[2015-10-01T20:04:31.938Z]	<ryanwischkaemper>	big downside for -pron- right now with typescript be the unit test experience in -pron- current project -pron- have a large number of javascript unit test be run via karma all of -pron- developer expect that once -pron- kick off -pron- karma gulp task that any change -pron- make  <user> automatically rerun -pron- test
[2015-10-01T20:04:46.678Z]	<ryanwischkaemper>	i can get that same experience work with unit test write in typescript
[2015-10-01T20:05:09.253Z]	<ryanwischkaemper>	use typescript systemjs
--------------------------------------------------------------------------------------------------
[2015-10-01T20:05:16.883Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- try to get typescript karma and jspm to work atm and -pron- just insane
[2015-10-01T20:05:52.171Z]	<ghost~55df963f0fc9f982beaed62c>	the amount of configuration i need to do just to set -pron- up do even make sense
[2015-10-01T20:07:08.861Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- not use gulp though but jake so -pron- do most of the thing -pron- still -pron- want thing to just work d
[2015-10-01T20:08:54.744Z]	<ryanwischkaemper>	so far all -pron- be able to do be have a gulp task that compile -pron- typescript unit test before start karma but that far from ideal for -pron- because now karma will rerun -pron- typescript unit test if i make change to -pron-
[2015-10-01T20:08:56.387Z]	<slikts>	why do people use jspm or systemjs be what i do get everyone always have problem with -pron- and -pron- not a great idea even on paper meanwhile browserify work just fine
[2015-10-01T20:09:36.359Z]	<jbrantly>	i think the idea there be that -pron- be an easy migration path to where -pron- theoretically do need bundle
[2015-10-01T20:09:38.668Z]	<ryanwischkaemper>	jspm be awesome but -pron- just a package manager and do affect how thing get load in the browser
[2015-10-01T20:09:57.980Z]	<ghost~55df963f0fc9f982beaed62c>	yup -pron- awesome d
[2015-10-01T20:11:17.992Z]	<slikts>	jspm package management be design around the systemjs dynamic loader
[2015-10-01T20:11:48.091Z]	<ryanwischkaemper>	browserify be nice but -pron- do follow the module spec right with browserify -pron- use commonjs style import via require instead of the syntax use with module
[2015-10-01T20:12:10.107Z]	<ryanwischkaemper>	true but -pron- can use jspm completely indepent of systemjs
[2015-10-01T20:12:19.971Z]	<slikts>	there be no module the spec be even remotely close to be complete
[2015-10-01T20:12:39.184Z]	<slikts>	so all this be nonsense and whatever -pron- use -pron- likely that -pron- have to make change for the actual es modules
[2015-10-01T20:13:19.638Z]	<slikts>	and i do get what awesome about jspm -pron- use systemjs and systemjs be junk for the aforementioned reason that there be no module and that everyone always have problem with systemjs or requirejs
[2015-10-01T20:14:10.432Z]	<ghost~55df963f0fc9f982beaed62c>	not really that the nice thing about jspm -pron- abstract the way dependency work and support multiple syntax
[2015-10-01T20:15:03.300Z]	<slikts>	-pron- know what else abstract the module system and support multiple of -pron- tsc and babel
[2015-10-01T20:15:03.979Z]	<ryanwischkaemper>	i be under the impression that the spec be finalize
[2015-10-01T20:15:28.087Z]	<jbrantly>	i believe the module portion of the spec be finalize in july
[2015-10-01T20:16:05.254Z]	<jbrantly>	the loader portion be not though
[2015-10-01T20:16:12.509Z]	<ghost~55df963f0fc9f982beaed62c>	okay -pron- actually do understand the tool and call -pron- junk
[2015-10-01T20:16:43.032Z]	<slikts>	no module loader mean there be no module
[2015-10-01T20:17:02.802Z]	<slikts>	why do -pron- explain then
[2015-10-01T20:17:51.380Z]	<ghost~55df963f0fc9f982beaed62c>	do babel or tsc  <user> provide cli to download these dependecie do -pron- provide unify configuration file do -pron- deal with package versione
[2015-10-01T20:17:57.510Z]	<ryanwischkaemper>	yet there be module and -pron- spec be finalize
[2015-10-01T20:18:39.750Z]	<ryanwischkaemper>	the fact that -pron- usability loader have be finalize do make -pron- non existent
[2015-10-01T20:18:51.180Z]	<ryanwischkaemper>	that -pron- little nitpick of the  <user> hah
[2015-10-01T20:20:32.233Z]	<slikts>	if -pron- read what i write i say that tsc and babel support different module system nothing about package for package there be npm
[2015-10-01T20:20:33.966Z]	<ghost~55df963f0fc9f982beaed62c>	all tsc or babel do be transform a syntax to javascript -pron- do deal with load anything because -pron- be compile time tool
[2015-10-01T20:21:16.502Z]	<slikts>	for load module there be browserify or webpack which be much more convenient tool than requirejs or systemjs
[2015-10-01T20:21:26.152Z]	<ghost~55df963f0fc9f982beaed62c>	yeah at language level nothing more than that
[2015-10-01T20:22:26.992Z]	<slikts>	what -pron- think be module  <user> change by the time the loader spec be do so -pron- will get more benefit from use the module syntax than from use whatever else
[2015-10-01T20:22:37.331Z]	<jbrantly>	to answer -pron- question no browserify webpack do not support module natively yet  <user> no clue for browserify that say -pron- not really a huge impediment
[2015-10-01T20:22:58.180Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- use the old version of browserify so i can not comment on that i still need to check webpack
[2015-10-01T20:23:13.892Z]	<slikts>	i have no idea what -pron- mean by at language level
[2015-10-01T20:23:31.945Z]	<slikts>	webpack browserify bundle node dependencie
[2015-10-01T20:23:49.517Z]	<ghost~55df963f0fc9f982beaed62c>	i refer to babel and typescript
[2015-10-01T20:24:31.614Z]	<ghost~55df963f0fc9f982beaed62c>	do -pron- try jspm at all though
[2015-10-01T20:25:29.452Z]	<slikts>	why exactly would i use jspm if there be npm i do need to load anything from git
[2015-10-01T20:44:43.699Z]	<ghost~55df963f0fc9f982beaed62c>	include be not the same as something that be design specifically to deal with client side module
[2015-10-01T20:50:23.489Z]	<ghost~55df963f0fc9f982beaed62c>	bundling be not the future
[2015-10-01T20:53:00.838Z]	<slikts>	luckily systemjs be  <user> not the future what -pron- call module be not even package -pron- repos whose author do know to or care to make a proper package if -pron- need work with that then jspm be -pron- tool but -pron- argue that -pron- worth think twice and find something well
--------------------------------------------------------------------------------------------------
[2015-10-01T20:24:51.424Z]	<slikts>	i never say or imply that babel or tsc have anything to do with package management i even explain -pron- to -pron- again in simple english now -pron- explainig -pron- to -pron- the third time
--------------------------------------------------------------------------------------------------
[2015-10-01T20:40:27.698Z]	<ghost~55df963f0fc9f982beaed62c>	yeah well npm be not orient towards client side module and -pron- deal mostly with the package -pron- whereas jspm deal with everything from manage package to -pron- loading at runtime -pron- not perfect but i would go and call -pron- junk just because -pron- use different tool
--------------------------------------------------------------------------------------------------
[2015-10-01T20:43:38.576Z]	<slikts>	npm be orient towards js which include client side module bundle -pron- for the browser be a solve problem that systemjs or requirejs do in an inferior manner
--------------------------------------------------------------------------------------------------
[2015-10-01T21:02:45.513Z]	<ghost~55df963f0fc9f982beaed62c>	technically any repo can be a package and some of -pron- be actually just package -pron- not follow aurelia atm but i think that most of -pron- repos be actually store in github and be offer through jspm and in fact i think that jspm be -pron- preferred tool for package management
[2015-10-01T21:07:43.013Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- not say -pron- the ultimate tool and like i say before there so much to do in term of configuration so there certainly a long way to go before thing  <user> just work
[2015-10-01T21:08:10.243Z]	<ghost~55df963f0fc9f982beaed62c>	but for these of -pron- who want to use import export -pron- well than nothing
--------------------------------------------------------------------------------------------------
[2015-10-02T02:39:08.528Z]	<RichiCoder1>	be npm package just git repos a little filtering package up and with script
[2015-10-02T02:39:46.448Z]	<RichiCoder1>	and by package i mean tarball
[2015-10-02T03:27:03.833Z]	<ghost~55df963f0fc9f982beaed62c>	well some of the git repos be npm package but -pron- can use whatever vcs -pron- like
--------------------------------------------------------------------------------------------------
[2015-10-02T05:06:40.890Z]	<digital-synapse>	try import from systemjs not have much luck
[2015-10-02T12:37:31.735Z]	<slikts>	-pron- would be useful for find type definition for one thing
--------------------------------------------------------------------------------------------------
[2015-10-02T08:52:55.966Z]	<bartq>	how do -pron- currently handle async await transpilation to run code in env
[2015-10-02T08:54:23.491Z]	<bartq>	aha like this
--------------------------------------------------------------------------------------------------
[2015-10-02T12:37:15.518Z]	<slikts>	-pron- would be brilliant if ts get something like hoogle that would let -pron- search base on type information
--------------------------------------------------------------------------------------------------
[2015-10-02T13:15:08.182Z]	<BlacKCaT27>	hey all quick question regard alias be -pron- restrict in where -pron- can be use or be i just use -pron- wrong -pron- define an alia at the top of -pron- ts file prior to the class definition within -pron- class i only seem to be able to use the alias type in method signature not method body be that by design or be i do something incorrectly
[2015-10-02T22:39:59.299Z]	<DanielRosenwasser>	hmm that potentially sound like a bug
[2015-10-02T22:40:02.718Z]	<DanielRosenwasser>	do -pron- have a minimal repro
[2015-10-04T08:41:59.767Z]	<plantain-00>	hi what do the message mean when i run tsc error fail to parse file frontend unexpected token the file be compileroption module commonjs target
[2015-10-04T08:43:30.051Z]	<plantain-00>	oh sorry the file be in a different directory
[2015-10-04T08:44:05.949Z]	<plantain-00>	but the error message seem mislead
[2015-10-05T13:54:33.109Z]	<jbrantly>	may be interesting to -pron-
--------------------------------------------------------------------------------------------------
[2015-10-03T19:57:52.319Z]	<duncanmak>	hola
[2015-10-03T20:37:49.646Z]	<duncanmak>	hey
[2015-10-04T19:19:43.193Z]	<jbrantly>	try type -pron-
[2015-10-04T19:20:04.656Z]	<jbrantly>	whatever
--------------------------------------------------------------------------------------------------
[2015-10-03T23:01:45.215Z]	<JoshuaKGoldberg>	hey folk -pron- look into fix issue be there documentation on how to write test for fix look at file -pron- hard to tell which file be the original test for type treenode and which file be compile from -pron-
[2015-10-03T23:03:03.435Z]	<JoshuaKGoldberg>	-pron- guess
[2015-10-03T23:13:43.634Z]	<JoshuaKGoldberg>	disregard that question never mind haha
[2015-10-04T23:22:02.072Z]	<plantain-00>	no -pron- do find a in directory actually the message be wrong
[2015-10-05T00:39:37.166Z]	<plantain-00>	there be an issue already
[2015-10-05T02:13:47.908Z]	<Gaelan>	find a crash in ts and typescript interface fooclass t prototype t foo t function foo fooclass t class courseresourcegroup brand any static foo
[2015-10-05T02:20:56.788Z]	<jbrantly>	-pron- should prob open an issue for -pron-
--------------------------------------------------------------------------------------------------
[2015-10-04T03:00:40.624Z]	<jbrantly>	-pron- try to figure out how to model something but -pron- run into constraint of a type parameter can not reference any type parameter from the same parameter list -pron- try to model react createelement api -pron- look something like this prop class be a component class and prop be specific to the component today that signature look roughly like createelement new component p prop p however in actuality prop  <user> always have a special property which refer back to an instance of the class -pron- look like ref component c any the issue here be get so ideally -pron- like to see something like this typescript createelement p c extend component new c prop p ref component c any but the above fail with the error previously mention and i can figure out another way to work -pron- so that the type parameter can always be infer from usage
--------------------------------------------------------------------------------------------------
[2015-10-04T12:02:10.198Z]	<MartyIX>	this sound as if tsc compile file as a typescript script be that right
--------------------------------------------------------------------------------------------------
[2015-10-04T19:12:37.096Z]	<LucaVazz>	hey i m struggle with type definition can someone please explain to -pron- what i have to do in return instruction to archive that instruction stop throw the implicted
--------------------------------------------------------------------------------------------------
[2015-10-04T19:21:20.669Z]	<ryanwischkaemper>	be that aurelia code
[2015-10-04T19:23:56.823Z]	<LucaVazz>	ah thank how could i forget about the bracket
[2015-10-04T19:24:07.505Z]	<LucaVazz>	jepp
[2015-10-04T19:27:21.741Z]	<ryanwischkaemper>	if -pron- want that param strongly type then -pron- a navigationinstruction import from aurelia router instruction
[2015-10-04T19:31:44.287Z]	<LucaVazz>	thank
[2015-10-05T02:14:49.998Z]	<Gaelan>	the above code crash tsc on compile
--------------------------------------------------------------------------------------------------
[2015-10-05T09:22:17.570Z]	<lovedota>	can -pron- access the instance in decorator function string return target any key string descriptor any now be not c eventname action target target want to add the real c here here return descriptor i be use like this private product
--------------------------------------------------------------------------------------------------
[2015-10-05T15:15:07.765Z]	<muraiki>	be there a way i can represent a type like string or undefined besides use any
[2015-10-05T15:34:50.864Z]	<ericmdantas>	js function
[2015-10-05T15:35:50.331Z]	<muraiki>	-pron- particular use case be for declare that an attribute in an object can be a string or undefined but not in the sense that the attribute may be miss but that -pron- may be present but with a value of undefined
[2015-10-05T15:36:36.073Z]	<ericmdantas>	hmm i do know then
[2015-10-05T15:36:52.101Z]	<muraiki>	thank anyways
[2015-10-05T15:37:45.220Z]	<ericmdantas>	maybe typeof undefined
[2015-10-05T15:37:55.481Z]	<ericmdantas>	js function undefined
[2015-10-05T15:39:08.240Z]	<ericmdantas>	nope that will do
[2015-10-05T15:47:27.646Z]	<muraiki>	i wonder if  <user> work
[2015-10-05T15:53:59.571Z]	<muraiki>	nope
[2015-10-05T15:54:00.743Z]	<muraiki>	oh well
[2015-10-05T19:17:55.578Z]	<DanielRosenwasser>	string or undefined be just string right now undefined be assignable to anything
[2015-10-05T19:32:14.514Z]	<jbrantly>	no worry d
--------------------------------------------------------------------------------------------------
[2015-10-05T19:30:26.155Z]	<jbrantly>	any thought on this question i ask over the weekend
[2015-10-05T19:31:29.821Z]	<DanielRosenwasser>	sorry do see that
--------------------------------------------------------------------------------------------------
[2015-10-05T21:46:15.543Z]	<JoshVarty>	-pron- intern have be work on build a syntax tree visualizer for ts js
[2015-10-05T21:46:46.757Z]	<JoshVarty>	-pron- be turn -pron- into a wpf control this week after which -pron- turn -pron- into a visual studio extension
[2015-10-05T21:47:55.084Z]	<JoshVarty>	be there a repository or place where -pron- guy may want contribution of this type i think -pron- super useful for people try to interface with the compiler and -pron- necessary for -pron- since -pron- look into use the rewriter in the async await branch
[2015-10-05T21:49:31.007Z]	<DanielRosenwasser>	i think -pron- would link to -pron- in
[2015-10-05T21:50:03.499Z]	<DanielRosenwasser>	or maybe -pron- be well if -pron- have a wiki page that give advice on how to easily prototype work on feature for typescript
[2015-10-05T22:07:35.467Z]	<duncanmak>	-pron- try to write a typing for slack node library
--------------------------------------------------------------------------------------------------
[2015-10-05T21:49:10.857Z]	<DanielRosenwasser>	nice
[2015-10-05T21:51:25.032Z]	<JoshVarty>	sound good -pron- let -pron- know when -pron- do -pron- think sometime next week -pron- should be mostly good to go
[2015-10-05T22:06:54.088Z]	<duncanmak>	hey
[2015-10-05T22:07:03.339Z]	<DanielRosenwasser>	hey what up
[2015-10-05T22:07:14.427Z]	<duncanmak>	i be wonder about how to type a library
[2015-10-05T22:07:45.285Z]	<duncanmak>	the use case in be this
[2015-10-05T22:08:12.928Z]	<duncanmak>	javascript var slack client var bot new slack
[2015-10-05T22:08:47.956Z]	<duncanmak>	but -pron-  <user> try to export some interface from the library as well
[2015-10-05T22:09:25.408Z]	<duncanmak>	right now i can only get -pron- to work use the old module syntax and so i only get to export one thing
[2015-10-05T22:09:33.974Z]	<duncanmak>	ideally i can write this
[2015-10-05T22:10:27.287Z]	<duncanmak>	javascript import client imessage ichannel from slack client const bot new client
[2015-10-05T22:10:40.099Z]	<duncanmak>	do that make sense
[2015-10-05T22:11:13.925Z]	<duncanmak>	i try use export default but the codegen add an extra to the ctor call
[2015-10-05T22:11:56.674Z]	<duncanmak>
[2015-10-05T22:12:49.972Z]	<weswigham>	yeah that a know bug -pron- pretty sure -pron- do emit the esmodule field check to see if -pron- should use the module object as the default on import
[2015-10-05T22:13:44.916Z]	<duncanmak>	if that fix -pron- be able to write this
[2015-10-05T22:14:01.815Z]	<weswigham>	in theory
[2015-10-05T22:14:08.493Z]	<weswigham>	-pron- not sure -pron- get fix though
[2015-10-05T22:14:18.218Z]	<weswigham>	lemme find the issue discuss -pron-
[2015-10-05T22:14:21.575Z]	<duncanmak>	javascript import client imessage ichannel from slack client const bot new client
[2015-10-05T22:14:26.558Z]	<duncanmak>	i think i find -pron- too
[2015-10-05T22:14:30.721Z]	<DanielRosenwasser>	i would just do import client import imessage ichannel from slack client const bot new client
[2015-10-05T22:14:32.583Z]	<duncanmak>	there be a couple of issue
[2015-10-05T22:14:40.784Z]	<duncanmak>	i see i think of that too
[2015-10-05T22:15:00.010Z]	<DanielRosenwasser>	oh unless client be the standard export
[2015-10-05T22:15:03.891Z]	<weswigham>	tbh tslint have the same problem
[2015-10-05T22:15:08.759Z]	<DanielRosenwasser>	in which case -pron- could do that too
[2015-10-05T22:15:09.701Z]	<duncanmak>	client be the standard export
[2015-10-05T22:15:11.732Z]	<weswigham>	-pron- know how -pron- decide to fix -pron-
[2015-10-05T22:15:27.059Z]	<weswigham>
[2015-10-05T22:20:16.102Z]	<weswigham>	-pron- could just export one module as a member of the other
--------------------------------------------------------------------------------------------------
[2015-10-05T22:15:19.090Z]	<weswigham>	-pron- make a global lint namespace
[2015-10-05T22:15:33.111Z]	<duncanmak>	the global stuff be annoy
[2015-10-05T22:15:56.602Z]	<duncanmak>	i see that in the react typing and i always have to remember to add import as react from react
[2015-10-05T22:16:05.109Z]	<duncanmak>	otherwise -pron- pass the compiler and fail at runtime
[2015-10-05T22:16:27.115Z]	<weswigham>	mmm
[2015-10-05T22:16:28.792Z]	<weswigham>	hmm
[2015-10-05T22:18:20.777Z]	<duncanmak>	have to split into module kinda stink
[2015-10-05T22:21:55.328Z]	<duncanmak>	and when i use -pron- i have an extra grouping
[2015-10-05T22:21:56.570Z]	<weswigham>	ts import as bar from class foo fooy thing namespace foo export var bar bar export foo
--------------------------------------------------------------------------------------------------
[2015-10-05T22:20:31.595Z]	<duncanmak>	can -pron- show -pron-
[2015-10-05T22:21:08.134Z]	<DanielRosenwasser>	typescript import as foo from export foo
[2015-10-05T22:21:32.985Z]	<duncanmak>	oh
[2015-10-05T22:21:56.295Z]	<DanielRosenwasser>	and eventually  <user> have ts export as foo from
[2015-10-05T22:22:21.802Z]	<DanielRosenwasser>	i believe that bar  <user> be shadow by -pron-
[2015-10-05T22:22:39.926Z]	<duncanmak>	this stuff be really tricky
[2015-10-05T22:23:01.524Z]	<weswigham>	no what i have there work -pron- super hacky d
[2015-10-05T22:23:09.903Z]	<weswigham>	afaik
[2015-10-05T22:24:22.739Z]	<duncanmak>	then to access thing inside bar i write
[2015-10-05T22:24:37.951Z]	<weswigham>	yah the bar do shadow -pron- -pron- need to be import under a different alia
--------------------------------------------------------------------------------------------------
[2015-10-05T22:24:47.515Z]	<duncanmak>	javascript import bar from
[2015-10-05T22:24:48.137Z]	<weswigham>	which -pron- shadow -pron- seem wrong
[2015-10-05T22:25:20.494Z]	<duncanmak>	let say bar export a b c
--------------------------------------------------------------------------------------------------
[2015-10-05T22:32:26.476Z]	<weswigham>	yes that how -pron- get the bar namespace out of -pron- yes
--------------------------------------------------------------------------------------------------
[2015-10-05T22:38:49.885Z]	<jbrantly>	i write an article on module in typescript some of -pron- be webpack specific but not all may be useful for -pron- the long and short of -pron- though be that cjs export and default export be fundamentally different and -pron- go to run into quirk as people try to support both during this transition phase
[2015-10-05T22:39:55.458Z]	<jbrantly>	take react for example -pron- not actually an module but -pron- see a lot of import react from react which be technically wrong but work because a lot of people use babel which do some magic typescript decide to not do the same magic i think both viewpoint be valid
[2015-10-05T22:40:12.856Z]	<weswigham>	ts do the magic on export
[2015-10-05T22:40:16.359Z]	<weswigham>	but not on import
[2015-10-05T22:40:19.106Z]	<jbrantly>	correct
--------------------------------------------------------------------------------------------------
[2015-10-06T01:00:44.790Z]	<egistli>	hi i be use typescript with parse sdk in -pron- code there an import parse which compile okay but when execute the js parse sdk complain about the sdk i import and ask -pron- to correct -pron- to import parse node however when i change -pron- to node ts compiler give an warning say can not find module now i have to change -pron- back to import parse and update that statement to require parse the js file to make js file execute successfully be -pron- expect or there something wrong in -pron- configuration
[2015-10-06T03:03:44.018Z]	<DanielRosenwasser>	be -pron- use typing from definitelytype -pron- could just be that parse make a change and definitelytype typing need to be amend
[2015-10-06T03:24:04.104Z]	<egistli>	i manage to declare another module call parse node and the node work in file thank however in the definition file -pron- a bit repetitive be there any syntax to make -pron- more succinct declare module parse var type typeof parse var subtype parse typeof type export subtype declare module parse node var type typeof parse var subtype parse typeof type export subtype
[2015-10-06T07:08:18.711Z]	<DanielRosenwasser>	i would rewrite -pron- as typescript declare module parse node export parse declare module parse import parse node export parse
[2015-10-06T07:17:40.398Z]	<egistli>	wow that nice thank
[2015-10-06T17:42:53.322Z]	<duncanmak>	hmm
[2015-10-06T19:51:17.283Z]	<DanielRosenwasser>	hmm
[2015-10-06T19:55:05.848Z]	<zachrip>	i seem to be have issue try to export an interface interface action type string export action
[2015-10-06T19:55:17.326Z]	<zachrip>	be that allow
[2015-10-06T19:55:38.293Z]	<zachrip>	-pron- use tsc to compile -pron- and the js file be just empty
[2015-10-06T19:55:47.010Z]	<DanielRosenwasser>	i do believe so but -pron- can an interface
[2015-10-06T19:56:59.890Z]	<DanielRosenwasser>	typescript interface action type string export default action typescript import action from let action action
[2015-10-06T19:57:23.996Z]	<zachrip>	-pron- give that a shot
[2015-10-06T19:57:31.972Z]	<zachrip>	what exactly be the difference between the two
[2015-10-06T19:57:42.463Z]	<DanielRosenwasser>	though that mean -pron- can do something like typescript import action
[2015-10-06T19:58:24.218Z]	<DanielRosenwasser>	import foo be the way -pron- support commonjs loading
[2015-10-06T19:58:38.893Z]	<DanielRosenwasser>	but -pron- expect a value to be export
[2015-10-06T19:58:51.417Z]	<DanielRosenwasser>	an an interface have a value side
[2015-10-06T20:00:13.483Z]	<zachrip>	okay that make a lot of sense
[2015-10-06T20:00:15.036Z]	<zachrip>	thank -pron-
[2015-10-06T20:00:46.201Z]	<DanielRosenwasser>	no prob let -pron- know how -pron- all go
[2015-10-06T20:08:35.590Z]	<zachrip>	what would an interface look like after be compile
[2015-10-06T20:11:45.707Z]	<zachrip>	i think -pron- just misunderstand ts a bit i would expect anything to come from an interface because -pron- just use for type when -pron- write right
[2015-10-06T20:23:53.469Z]	<DanielRosenwasser>	an interface do get a value
[2015-10-06T20:24:01.875Z]	<DanielRosenwasser>	there no runtime representation
[2015-10-06T20:25:22.953Z]	<DanielRosenwasser>	so when -pron- actually compile there will be a default export that any consume javascript can use
[2015-10-06T20:36:42.607Z]	<zachrip>	that make sense
[2015-10-06T20:36:53.751Z]	<zachrip>	i get -pron- now
--------------------------------------------------------------------------------------------------
[2015-10-06T19:59:19.819Z]	<DanielRosenwasser>	introduce a different module system -pron- be able to design more flexibly around -pron-
[2015-10-06T20:23:43.902Z]	<DanielRosenwasser>	exactly
--------------------------------------------------------------------------------------------------
[2015-10-06T20:36:38.694Z]	<zachrip>	ahh okay
--------------------------------------------------------------------------------------------------
[2015-10-06T21:37:25.460Z]	<JKillian>	be there a way to disable typechecking with jsx -pron- get some svg code that have all kind of tag and attribute not include with the react typing
[2015-10-06T21:38:30.383Z]	<jbrantly>	add a catch all indexer
[2015-10-06T21:39:49.460Z]	<jbrantly>	or just remove intrinsicelement from the react typing
[2015-10-06T21:46:26.870Z]	<JKillian>	both good idea except all file code be affect then which be ideal
[2015-10-06T21:46:48.744Z]	<jbrantly>	jsx typechecking be implement globally
[2015-10-06T21:47:02.431Z]	<jbrantly>	at least for intrinsic element
[2015-10-06T21:47:44.108Z]	<jbrantly>	instead of add a catch all -pron- could just update the individual tag to be of type any
[2015-10-06T21:48:14.409Z]	<jbrantly>	so svg any path any etc
[2015-10-06T21:49:21.577Z]	<jbrantly>	fwiw i personally intend to have a massive update for react jsx typing and css property but i simply find the time yet
[2015-10-06T21:49:30.580Z]	<jbrantly>	have find
[2015-10-06T21:50:07.103Z]	<JKillian>	good idea
[2015-10-06T21:50:15.825Z]	<JKillian>	i have stuff like femorphology
[2015-10-06T21:51:11.042Z]	<jbrantly>	right so -pron- could either do femorphology any or femorphology radius string
[2015-10-06T21:51:45.422Z]	<JKillian>	right -pron- tricky how svg element be go to have different attribute -pron- support a lot of manually work to define an interface for each one of -pron-
[2015-10-06T21:52:02.573Z]	<JKillian>	i guess right now the model be an svgattribute interface that have all possible attribute
[2015-10-06T21:52:25.258Z]	<jbrantly>	right -pron- not ideal from a usage perspective right now
[2015-10-06T21:52:25.299Z]	<JKillian>	i wonder if the typing could be generate from some svg spec
[2015-10-06T22:18:22.954Z]	<JKillian>	thank i use the femorphology any solution and -pron- compile to the right js radius in sourcealpha operator dilate result
[2015-10-06T22:18:52.958Z]	<JKillian>	weirdly the html that react be render do include any of the non typed attribute though
[2015-10-06T22:19:05.472Z]	<JKillian>	-pron- just render as femorphology data
[2015-10-07T05:48:07.845Z]	<ghost~55df963f0fc9f982beaed62c>	i know what -pron- mean in term of mathematic but not sure how -pron- play in a language d
[2015-10-07T07:41:20.307Z]	<DanielRosenwasser>	but what be work for -pron- with respect to abstract class
[2015-10-07T07:43:48.574Z]	<DanielRosenwasser>	a value of a union type satisfie at least one of the type in the union so a value of type a b be at least either a or b a value of an intersection type satisfie all of the type in the intersection so a value of type a b be at least both a and b simultaneously
[2015-10-07T07:48:54.578Z]	<DanielRosenwasser>	 <user> be -pron- use the yield keyword in a generator or a plain function a generator be declare with function
[2015-10-07T08:50:02.695Z]	<ghost~55df963f0fc9f982beaed62c>	well yeah union produce type c too but -pron- shape be either a or b sorry -pron- try to think about -pron- in term of set theory but -pron- make -pron- slightly difficult to think about -pron- in the context of type
[2015-10-07T08:53:31.185Z]	<ghost~55df963f0fc9f982beaed62c>	okay okay never mind the penny have drop
--------------------------------------------------------------------------------------------------
[2015-10-06T22:57:35.239Z]	<weswigham>	okay so problem
[2015-10-06T22:58:08.247Z]	<weswigham>	ts export from export class foo
[2015-10-06T22:58:21.364Z]	<weswigham>	ts export class foo export from
[2015-10-06T22:59:25.455Z]	<weswigham>	maybe
[2015-10-06T22:59:28.080Z]	<weswigham>	think
[2015-10-06T22:59:58.954Z]	<weswigham>	eh nvm
[2015-10-06T23:00:11.020Z]	<DanielRosenwasser>	local decl take presence right
[2015-10-06T23:04:35.957Z]	<weswigham>	yeah
[2015-10-06T23:04:41.258Z]	<weswigham>	every time regardless of location
[2015-10-07T05:46:48.348Z]	<ghost~55df963f0fc9f982beaed62c>	how do union vs intersection type play what do -pron- mean in practice do union mean -pron- have two type or more matching either type whereas intersection mean -pron- have two type or more that produce a whole new type
[2015-10-07T07:40:58.190Z]	<DanielRosenwasser>	generator be only support when target so that may explain issue -pron- see on the playground
[2015-10-07T07:44:47.862Z]	<DanielRosenwasser>	typescript let x number string valid x lol valid x true not valid
[2015-10-07T07:47:39.057Z]	<DanielRosenwasser>	typescript interface i x string interface  <user> y number let y i  <user> y x hi y valid y x hi invalid y y invalid y x y hi invalid let z x hi y z true y z valid
[2015-10-07T08:53:44.602Z]	<ghost~55df963f0fc9f982beaed62c>	-pron- alll make sense d
--------------------------------------------------------------------------------------------------
[2015-10-07T00:48:27.476Z]	<kosz>	hey guy be generator and abstract class suppose to work in typescript -pron- just upgrade and the yield keyword be not be recognize then i try use -pron- in the playground and that do seem to be work either
--------------------------------------------------------------------------------------------------
[2015-10-07T08:43:24.389Z]	<ghost~55df963f0fc9f982beaed62c>	okay so in practice intersection produce a new type c whereas union be either a or b
[2015-10-07T08:53:34.538Z]	<ghost~55df963f0fc9f982beaed62c>	thank -pron- haha
--------------------------------------------------------------------------------------------------
[2015-10-07T13:06:33.807Z]	<waeljammal>	hi i be try to import export module from a central module but -pron- reference be break be there a way to do this -pron- try to centralize all class into include so i can do something like import helper helper then
[2015-10-07T13:07:24.773Z]	<waeljammal>	be this even possible without declare the class i be try something like import appstateservice state and then re export -pron- inside a declare module op helper
[2015-10-07T20:30:19.305Z]	<JKillian>	but i do see how that would work if syntaxkind be a const enum
--------------------------------------------------------------------------------------------------
[2015-10-07T14:11:34.452Z]	<MartyIX>	hello daniel could -pron- please give -pron- some feedback for pull request whenever -pron- have time
[2015-10-07T20:30:03.820Z]	<JKillian>	atom typescript use something similar
[2015-10-07T20:31:55.363Z]	<JKillian>	if -pron- not a const enum -pron- should be able to just do
[2015-10-07T22:25:11.073Z]	<DanielRosenwasser>	sorry about that
[2015-10-07T22:55:19.086Z]	<DanielRosenwasser>	if set theory make -pron- easy -pron- can think of -pron- in term of set theory
[2015-10-07T22:56:22.958Z]	<DanielRosenwasser>	a b be the union of a and b that mean that this be the union of the set of value in a with the set of value in b
[2015-10-07T22:56:55.808Z]	<DanielRosenwasser>	a b be the intersection of a and b that mean that this be the intersection of the set of value in a with the set of value in b
[2015-10-07T22:59:13.013Z]	<DanielRosenwasser>	the confusing part come with when -pron- dot off of a union type or intersection type for a union type a b the available member -pron- can access be the intersection of the member of a and b this be because -pron- can only be sure that -pron- have a member if -pron- exist in both a and b likewise for an intersection type a b the available member -pron- can access be the union of the member in a and in b because if -pron- satisfy both a and b -pron- must have all the member from both of -pron-
[2015-10-07T23:00:02.159Z]	<DanielRosenwasser>	hey can -pron- tell -pron- a little more about what -pron- file structure be like
[2015-10-07T23:02:23.523Z]	<DanielRosenwasser>	-pron- depend how -pron- class be export
[2015-10-07T23:37:50.797Z]	<basarat>	-pron- be mention a function but -pron- be obsolete what be the current equivalent -pron- a function i write for demo purpose and be document in the book  <user> i recommend ntypescript for muck around as -pron- mark this as an enum so -pron- do need to have the ugly type assetion  <user> if -pron- be curious about the type assertion or what be const enum that be cover here
[2015-10-07T23:39:20.838Z]	<basarat>	but i do see how that would work if syntaxkind be a const enum that because atom typescript use ntypescript and that have -pron- as an enum see readme
[2015-10-08T07:59:11.063Z]	<MartyIX>	thank for all the detail
[2015-10-08T08:26:24.813Z]	<chrisber>	thank for the resonse
--------------------------------------------------------------------------------------------------
[2015-10-07T18:45:18.997Z]	<chrisber>	-pron- follow book on typescript content doc compiler -pron- be mention a function but -pron- be obsolete what be the current equivalent
[2015-10-07T18:52:05.461Z]	<chrisber>	this be  <user> not work var name suggestion
[2015-10-07T18:58:05.716Z]	<chrisber>	this work i get a warning a const enum member can only be access use a string literal be this valid
--------------------------------------------------------------------------------------------------
[2015-10-07T23:45:04.869Z]	<mike-morr>	be anyone else have issue with ts in vscode
[2015-10-08T00:12:43.485Z]	<DanielRosenwasser>	like what
[2015-10-08T00:13:12.037Z]	<mike-morr>	intellisense not work all the tool tip just say loading
[2015-10-08T00:13:52.830Z]	<DanielRosenwasser>	do -pron- have a custom set
[2015-10-08T00:13:59.713Z]	<mike-morr>	no
[2015-10-08T00:14:36.742Z]	<DanielRosenwasser>
[2015-10-08T00:14:46.089Z]	<DanielRosenwasser>	be the most recent available one
[2015-10-08T00:15:06.188Z]	<mike-morr>	insider preview version
[2015-10-08T00:16:24.141Z]	<DanielRosenwasser>	ah -pron- either send a smile or potentially reach out to jo
[2015-10-08T00:16:26.526Z]	<mike-morr>	-pron- just solve -pron- for -pron- i double check the tsdk setting and -pron- be set
[2015-10-08T00:16:33.010Z]	<DanielRosenwasser>	d
[2015-10-08T00:17:01.910Z]	<mike-morr>	lol sorry for the bad info i could have swear i already check that
[2015-10-08T00:17:42.156Z]	<mike-morr>	-pron- guy be do awesome work btw
[2015-10-08T00:18:18.582Z]	<DanielRosenwasser>	always great to hear thank
--------------------------------------------------------------------------------------------------
[2015-10-08T14:50:18.458Z]	<oneillci>	do anyone know if -pron- possible to get access to a class member in a method decorator from what -pron- see -pron- seem that method decorator fire at class instantiation time rather than method invocation time
[2015-10-08T16:15:56.453Z]	<JKillian>	ha naughty typescript be great thank for the head up about -pron-
[2015-10-08T17:40:30.878Z]	<LPGhatguy>	if -pron- have an instance of the class -pron- can use -pron- constructor property cast -pron- to the type of the class -pron- interested and index -pron- a la ts myclass
[2015-10-08T19:10:43.860Z]	<DanielRosenwasser>	yes method decorator be invoke when -pron- declare the class
[2015-10-08T19:10:57.189Z]	<DanielRosenwasser>
[2015-10-09T09:06:38.479Z]	<plantain-00>	hi all how to handle the rejection in the promise p below var p promise number var a async await p use try and catch
[2015-10-09T12:41:26.437Z]	<MartyIX>	-pron- seem so
--------------------------------------------------------------------------------------------------
[2015-10-08T23:12:50.577Z]	<basarat>	-pron- use to be call nightly but then official nightly come up so i refactorte as to not confuse the community still i do want to lose any traction so decide to expand n to naughty -pron- be a bit stop gappy but i have come up with a well acronym expansion idea welcome rise
[2015-10-08T23:13:42.747Z]	<basarat>	come to think of -pron- naughty be not that bad
--------------------------------------------------------------------------------------------------
[2015-10-09T13:43:27.078Z]	<DomBlack>	-pron- try to write -pron- first typing file and -pron- try to do -pron- for koa do anybody know how i can write -pron- such that the module be both a function and a namespace an example of what -pron- try to get a typing file for typescript import koa from koa const app koa koa hello world
--------------------------------------------------------------------------------------------------
[2015-10-09T17:09:16.247Z]	<ravi-mone>	hello team
[2015-10-09T17:11:02.532Z]	<ravi-mone>	i be here to ask -pron- one question i be learn the by this i come to know that -pron- use typescript officially so need to learn that too
[2015-10-09T17:11:37.859Z]	<ravi-mone>	-pron- question be so to learn typescript first -pron- need to learn
[2015-10-09T17:11:39.442Z]	<ravi-mone>
[2015-10-09T17:55:11.707Z]	<DanielRosenwasser>	but there be certain feature that be really really nice to have
[2015-10-09T17:55:41.881Z]	<DanielRosenwasser>	specifically i would learn about arrow function and class
--------------------------------------------------------------------------------------------------
[2015-10-09T17:54:49.738Z]	<DanielRosenwasser>	i do think -pron- need to learn everything about to learn typescript
[2015-10-09T17:55:47.601Z]	<DanielRosenwasser>	that a great start
[2015-10-09T17:56:12.391Z]	<DanielRosenwasser>	but -pron- can learn the main part of that from these page
[2015-10-09T17:56:13.422Z]	<DanielRosenwasser>
[2015-10-09T17:56:19.639Z]	<DanielRosenwasser>
--------------------------------------------------------------------------------------------------
[2015-10-09T18:49:36.733Z]	<DanielRosenwasser>	namespace merge with function if -pron- be declare after the function
[2015-10-09T18:50:41.359Z]	<DanielRosenwasser>	typescript function foobar namespace foobar export let baz foobar
[2015-10-09T22:23:10.879Z]	<DanielRosenwasser>	hey -pron- do great work -pron- can try ping -pron- next time with tags sorry about any delay -pron- may have have but keep up the good work
--------------------------------------------------------------------------------------------------
[2015-10-09T18:57:35.787Z]	<MartyIX>	hi daniel i do know what the protocol be for pull request but i have update mine how can i ask for code review in a way so that -pron- will bother distract -pron- guy
[2015-10-09T22:20:45.955Z]	<plantain-00>	thank
[2015-10-09T22:31:36.359Z]	<MartyIX>	-pron- ok i do -pron- just for fun and to learn some new thing and because i love what typescript add to javascript
[2015-10-10T19:28:15.200Z]	<DanielRosenwasser>	if -pron- have -pron- should need and can get rid of -pron-
[2015-10-10T19:28:37.569Z]	<DanielRosenwasser>	in other word when targette -pron- do need
--------------------------------------------------------------------------------------------------
[2015-10-10T10:52:38.815Z]	<fdaschmidt>	hello i want to know if -pron- have the same problem i have a project with simple hello world typescript and when i generate -pron- solution i have a conflict whith sdk microsoft and some promise duplicate do -pron- have some idea on this problem
[2015-10-11T10:59:16.985Z]	<fdaschmidt>	yes thanxs i delete reference in et app
--------------------------------------------------------------------------------------------------
[2015-10-10T23:32:26.824Z]	<StrahilKazlachev>	hello be there a way say that a property be an object literal and all of -pron- property be of type know what property  <user> have but the value  <user> always be a string
[2015-10-10T23:33:54.268Z]	<ghalle>	index string stre
[2015-10-10T23:35:34.881Z]	<StrahilKazlachev>	thank -pron-
--------------------------------------------------------------------------------------------------
[2015-10-11T23:02:46.710Z]	<joostverdoorn>	hello can someone tell -pron- why empty tuple type be not allow in typescript and if there be a way to circumvent this type nothing the typescript compiler throw error a tuple type element list can not be empty
[2015-10-12T04:20:57.735Z]	<DanielRosenwasser>	be there a specific utility -pron- have in mind for the empty tuple -pron- provide basically the same guarantee as a
[2015-10-12T05:19:27.962Z]	<joostverdoorn>	i hope to build a simple maybe type
[2015-10-12T05:20:34.667Z]	<electricessence>	tuple
[2015-10-12T05:20:36.202Z]	<electricessence>
[2015-10-12T05:21:17.203Z]	<electricessence>	look pretty yawn in here right now
[2015-10-12T05:22:35.000Z]	<electricessence>	be write a variant of the framework use typescript really come together any star on github help even code review would be great
[2015-10-12T21:13:58.827Z]	<joostverdoorn>	very nice i just hope i could represent -pron- use tuple type i like -pron- way of handle the none case however i would prefer something like this type none type some v v type maybe v some v none function issome maybe v v be some v return v v instanceof array function maybe any v be none return var x none var y some number but this do work as typescript do support empty tuple type and then i start wonder why -pron- do
[2015-10-12T21:27:17.250Z]	<joostverdoorn>	haha no -pron- do thank for -pron- help though
[2015-10-13T06:11:16.289Z]	<electricessence>	thank -pron- for the npm question -pron- lead -pron- to this article which i quickly convert all -pron- module to the late import and export syntax work great as well as the nice backward compatibility -pron- provide the require statement
[2015-10-13T06:34:25.435Z]	<electricessence>	and -pron- stare add a couple reddit
--------------------------------------------------------------------------------------------------
[2015-10-12T08:15:41.570Z]	<DanielRosenwasser>	cool any reason -pron- have -pron- to npm yet
[2015-10-12T08:32:40.714Z]	<DanielRosenwasser>	maybe tinker with this let -pron- know how -pron- go typescript namespace maybe export interface none export interface some t extend array t t export const none none export function some t some t return x export function maybe any x be none return x none export function maybe any x be some any return x x instanceof array type maybe t t var x maybe number if let v x
[2015-10-12T21:17:54.461Z]	<DanielRosenwasser>	-pron- could do typescript type none but -pron- will feel satisfy
--------------------------------------------------------------------------------------------------
[2015-10-12T16:22:12.351Z]	<electricessence>	that be definitely on the agenda about a month ago i convert the entire project to be module base and have be refine -pron- modularity since then since -pron- more of a web guy versus node i think bower first but npm be a logical step i think first i want to get the unit test run in a more automated way then -pron- push to npm
[2015-10-13T06:11:47.294Z]	<electricessence>	-pron- now work hard to make a solid release of the lib to npm
--------------------------------------------------------------------------------------------------
[2015-10-12T19:26:57.458Z]	<DanielRosenwasser>	well -pron- a great project that -pron- sure a lot of people would get some good use out of -pron- suggest post to some channel for user as well
[2015-10-12T19:28:38.472Z]	<DanielRosenwasser>	consider post to
--------------------------------------------------------------------------------------------------
[2015-10-13T09:55:09.446Z]	<plantain-00>	-pron- strange that array stre number and array string array number behave differently let a array stre number success let b array string array number fail
--------------------------------------------------------------------------------------------------
[2015-10-13T09:58:37.553Z]	<lorthirk>	well i do know what bitwise or do in this scenario but i kinda look that -pron- somehow overwrite array string type definition with array number
[2015-10-13T10:00:13.186Z]	<plantain-00>	should i open an issue for this
[2015-10-13T10:10:48.262Z]	<plantain-00>
[2015-10-13T10:10:48.777Z]	<plantain-00>	i think -pron- look like a and b type be both string or number right
[2015-10-13T10:11:10.571Z]	<lorthirk>	well not to -pron- eye
[2015-10-13T10:11:26.294Z]	<lorthirk>	please be aware -pron- quite a newbie with typescript
[2015-10-13T10:12:05.286Z]	<lorthirk>	but to -pron- -pron- look that somehow b type end up to be array number
[2015-10-13T10:13:43.370Z]	<lorthirk>	honestly i can even find that syntax in the typescript handbook
[2015-10-13T10:17:16.135Z]	<lorthirk>	moreover please look at the error description
[2015-10-13T10:17:32.213Z]	<lorthirk>	can not invoke an expression whose type lack a call signature
[2015-10-13T10:18:25.681Z]	<plantain-00>
[2015-10-13T10:19:07.992Z]	<plantain-00>
[2015-10-13T10:19:39.399Z]	<plantain-00>	there be the syntax at wiki
[2015-10-13T10:24:18.868Z]	<plantain-00>	be there something like as syntax -pron- work like this let b array string array number b as
[2015-10-13T10:24:51.561Z]	<lorthirk>	ok here -pron- theory
[2015-10-13T10:25:45.639Z]	<lorthirk>	by declare let b array string array number -pron- in fact declare a variable that can contain both array string or array number
[2015-10-13T10:25:57.510Z]	<lorthirk>	not an array that can contain both
[2015-10-13T10:26:28.807Z]	<lorthirk>	and then -pron- can push anything inside because only accept element not array
[2015-10-13T10:29:52.701Z]	<lorthirk>	but again -pron- just a newbie theory
--------------------------------------------------------------------------------------------------
[2015-10-13T11:02:35.949Z]	<corneliutusnea>	hi can someone help with with a type inference error
[2015-10-13T11:05:20.147Z]	<corneliutusnea>	i have this code export class baseservice request t promise t return null export class testservice extend baseservice getme promise member return member this fail in the return line with error type promise member be not assignable to type promise member
[2015-10-13T11:20:31.316Z]	<plantain-00>	-pron- seem no error if i just define a interface call promise and member -pron- promise be the same promise not one from and the other one from library like bluebird
[2015-10-13T13:10:56.986Z]	<DomBlack>	in the generic system be there a way of -pron- define that a generic have a sub generic i want to do this typescript interface ifunctor m extend ifunctor a map a a b m b
[2015-10-13T13:11:19.982Z]	<DomBlack>	however the compiler be complain that type m be not generic
--------------------------------------------------------------------------------------------------
[2015-10-13T14:33:32.292Z]	<DeanB2015>	be today doctoberf
[2015-10-13T15:17:19.771Z]	<bb>	hi what the late and great preferred syntax for import import from or import require what be the rule to choose one over the other pointer to up to date documentation be welcome
--------------------------------------------------------------------------------------------------
[2015-10-13T15:20:03.152Z]	<jbrantly>	from be and be usable when -pron- set target to or require be cjs and be not available when -pron- set target to from be the future but there be definitely some gotcha to -pron- since there be different semantic between cjs and
[2015-10-13T15:20:54.890Z]	<jbrantly>	have some tip -pron- a webpack tutorial but -pron- can just ignore the webpack piece and -pron- still useful
[2015-10-13T15:30:24.458Z]	<bb>	thanks -pron- give -pron- a look -pron- current project target be so i should be fine from that perspective however i start with browserify so -pron- use cjs so far i be confused because many example like use the syntax while book and the website use cjs hopefully -pron- blog post enlighten -pron-
[2015-10-13T15:30:49.796Z]	<jbrantly>	-pron- blog definitely apply to browserify as well then
[2015-10-13T15:31:20.083Z]	<jbrantly>	same concept pull in and use npm publish package and definition
[2015-10-13T15:36:10.762Z]	<ghost~55df963f0fc9f982beaed62c>	can anyone check this issue and give -pron- some feedback -pron- be probably suggest before even though i check i do know maybe something like that already exist
[2015-10-13T16:02:08.205Z]	<jbrantly>	i comment on -pron- issue but see
[2015-10-13T16:02:24.107Z]	<jbrantly>	-pron- a proposal to have a module resolution strategy that include a baseurl
[2015-10-13T16:02:52.480Z]	<jbrantly>	be -pron- by chance use webpack
[2015-10-13T17:42:46.805Z]	<DanielRosenwasser>	today be doctoberf d
[2015-10-13T17:48:43.079Z]	<ghost~55df963f0fc9f982beaed62c>	nop -pron- use jspm
--------------------------------------------------------------------------------------------------
[2015-10-13T17:50:48.610Z]	<Brocco>	be there any particular sample that the team be look for node angular
[2015-10-13T17:57:16.486Z]	<DanielRosenwasser>	check out the sample repo
[2015-10-13T17:57:54.030Z]	<DanielRosenwasser>	if there something -pron- think be miss that -pron- like to work on let -pron- know
[2015-10-13T18:11:05.223Z]	<Brocco>	i just add webpack to an angular ts repo actually branch for a talk -pron- give next month so i could put together a webpack repo or angular
[2015-10-13T18:12:45.073Z]	<DanielRosenwasser>	webpack with angular would be perfect
[2015-10-13T18:13:40.790Z]	<Brocco>	awesome -pron- work on put that together i get -pron- work yesterday thank to
[2015-10-13T18:18:58.178Z]	<jbrantly>
[2015-10-13T18:21:03.116Z]	<jbrantly>	i hope the handbook be get some love today -pron- see multiple occasion where people get confused because of the outdate info there internal external module be one
[2015-10-13T18:22:11.951Z]	<jbrantly>	and stuff like this
[2015-10-13T18:41:51.957Z]	<Brocco>	fyi the file in the sample repo state new sample  <user> not be accept at this time i assume that be not true right now doctoberfest
[2015-10-13T18:44:09.701Z]	<bb>	i convert -pron- project to syntax now and everything seem to work thank for -pron- help
[2015-10-13T18:44:34.715Z]	<jbrantly>	awesome
[2015-10-13T18:46:17.975Z]	<RyanCavanaugh>	i do think that true at all anymore good place to start with doc edit
[2015-10-13T18:46:42.454Z]	<Brocco>	ok -pron- include that in -pron- pr with -pron- example
[2015-10-13T18:46:56.141Z]	<shivinsky>	hi how can i emulate name parameter extract argument to interface
[2015-10-13T19:03:48.573Z]	<DanielRosenwasser>	basically yeah just make -pron- function take an object type
[2015-10-14T00:17:05.607Z]	<DanielRosenwasser>	hi
[2015-10-14T00:18:15.257Z]	<zcstarr>	i have a quick question about packaging typescript into node package i currently have a typescript project that i package as a project that have a file that properly expose type i have another node package that depend on the first one -pron- expose only the subset of thing -pron- have in -pron- if -pron- can imagine -pron- structure look like depa
[2015-10-14T00:18:19.769Z]	<zcstarr>	hi
[2015-10-14T00:20:07.300Z]	<zcstarr>	highlevelpackage
[2015-10-14T00:20:52.055Z]	<zcstarr>	the problem be that when i need object from both node modules typescript complain
[2015-10-14T00:21:15.826Z]	<zcstarr>	that the type from depa be not the same as the one from highlevelpackage
[2015-10-14T00:22:07.261Z]	<zcstarr>	specifically if i have a subclass in highlevelpackage from depa -pron- complain that -pron- not the same as the type from depa
[2015-10-14T00:23:49.338Z]	<zcstarr>	import subclassfrom highlevelpackage import superclassfrom depa class subclassfrom extend superclassfrom
[2015-10-14T00:25:04.310Z]	<zcstarr>	simply yield a that complain that subclassfrom can not be assign type superclassfrom separate declaration of superclassfrom
[2015-10-14T00:25:31.295Z]	<zcstarr>	anyone have any thought here do what -pron- say make sense
[2015-10-14T00:40:59.863Z]	<zcstarr>	-pron- very make -pron- sad solution be to simply have a gulp script remove the all but the top level file prior to tsc compile
[2015-10-14T01:28:37.735Z]	<DanielRosenwasser>	-pron- a little unclear -pron- import subclass and then  <user> declare a subclass
[2015-10-14T01:28:51.076Z]	<DanielRosenwasser>	how do -pron- mean to differentiate -pron-
[2015-10-14T01:30:00.848Z]	<DanielRosenwasser>	-pron- could always do ts import as highlevelpackage from highlevelpackage new
[2015-10-14T05:30:32.846Z]	<DanielRosenwasser>	-pron- have a few pull request out right now for the handbook as well
--------------------------------------------------------------------------------------------------
[2015-10-14T00:14:07.198Z]	<zcstarr>	hi all
--------------------------------------------------------------------------------------------------
[2015-10-14T02:30:12.833Z]	<bricewilson>	hey everyone -pron- notice lately the handbook seem a bit out of date so in the spirit of doctoberfest i think i would try to help out a little with -pron- i do want to duplicate effort how about abstract class and method
--------------------------------------------------------------------------------------------------
[2015-10-14T05:30:18.557Z]	<DanielRosenwasser>	hey thank for bring that up i make just for -pron- smile
[2015-10-14T05:31:00.838Z]	<DanielRosenwasser>	so that definitely what -pron- have in mind for doctoberf
--------------------------------------------------------------------------------------------------
[2015-10-14T11:29:10.073Z]	<bricewilson>	cool thank
--------------------------------------------------------------------------------------------------
[2015-10-14T14:10:12.997Z]	<mikedon>	hey everyone -pron- be try to work on fix a bug i submit a few day ago try to understand -pron- way through the compiler source -pron- would be great if i could run the debugger through the code but can get -pron- to work with vscode and sourcemaps be there anythign special to get that to work
[2015-10-14T16:21:26.609Z]	<electricessence>	ok i could use a little help try to make -pron- lib node friendly and fail miserably be there some resource that someone can point -pron- to for make an npm package part of the trouble -pron- have as well be should i include the file for source reference or should i compile down to file what module type should i specify should i target or
[2015-10-14T16:25:35.781Z]	<mikedon>	try to execute runtest browser and get this error static file server run at ctrl c to shutdown use browser chrome throw er unhandled error event error spawn chrome enoent at at internal at onerrornt internal at at at at startup at jake abort
[2015-10-14T16:27:43.240Z]	<jbrantly>	i think i would recommend just package the file along with an include file that be reference in -pron- typing property re target depend on library if -pron- not use anything that need to be transpile for node then target but cjs modules see
[2015-10-14T16:28:48.503Z]	<jbrantly>	to be clear in order to do that last bit -pron- need to grab the nightly
[2015-10-14T16:43:28.506Z]	<electricessence>	ok that help the issue be -pron- a lib and i normally have -pron- organize for amd use do -pron- make -pron- more difficult for the subsequent node developer if -pron- want to continue use typescript if -pron- have to double reference the and use import or be that all figure out when -pron- use import
[2015-10-14T16:49:14.022Z]	<jbrantly>	ts know how to read and  <user> read the for a typing property -pron- use that automatically
[2015-10-14T16:50:53.375Z]	<jbrantly>	meaning when a consumer of -pron- lib do import foo from foo ts  <user> read foo foo and  <user> know how to type everything correctly
[2015-10-14T17:30:56.073Z]	<Brocco>	for reference -pron- can view the npm package i publish here
[2015-10-14T17:33:04.669Z]	<zcstarr>	have -pron- run into any issue where package have the same node dependency where the node dependency include a file however when -pron- try and use both package that include the node dependency at a high level the type between -pron- do match
[2015-10-14T17:34:28.579Z]	<zcstarr>	a extend b dependency and c extend b dependency
[2015-10-14T17:34:54.417Z]	<zcstarr>	then -pron- have some code that operate on type b
[2015-10-14T17:35:27.737Z]	<zcstarr>	-pron- be run into issue where the complaint be type mismatch
[2015-10-14T17:35:57.801Z]	<zcstarr>	i believe this to be because the declaration be declare in different location despite the type declartion be the same
[2015-10-14T17:36:38.065Z]	<zcstarr>	i would prefer that duck type work to resolve this conflict rather than file location
[2015-10-14T17:36:50.014Z]	<jbrantly>	those should clash because the file have to be proper external module declaration
[2015-10-14T17:37:05.781Z]	<zcstarr>	what do that mean
[2015-10-14T17:37:19.204Z]	<jbrantly>	-pron- mean -pron- can do declare module mymodule
[2015-10-14T17:37:33.107Z]	<jbrantly>	-pron- have to instead to export blah
[2015-10-14T17:38:06.413Z]	<jbrantly>	so dependency a b and dependency c b should not clash with each other
[2015-10-14T17:38:23.164Z]	<zcstarr>	yes i do export blah blah
[2015-10-14T17:38:35.863Z]	<zcstarr>	and still get a clash
[2015-10-14T17:39:10.572Z]	<zcstarr>	-pron- think that the super class b be different for both class
[2015-10-14T17:39:22.355Z]	<zcstarr>	when -pron- be the same despite -pron- origin be different
[2015-10-14T17:39:53.154Z]	<jbrantly>	but duck typing should kick in assume the b dependency for both be exactly the same
[2015-10-14T17:40:06.522Z]	<zcstarr>	that what i would suspect too
[2015-10-14T17:40:13.676Z]	<zcstarr>	but -pron- not happen
[2015-10-14T17:40:39.430Z]	<jbrantly>	-pron- create a simple repo and make an issue then
[2015-10-14T17:40:43.683Z]	<zcstarr>	just curious if anyone else have hit this if not then -pron- make an issue
[2015-10-14T17:40:50.582Z]	<zcstarr>
[2015-10-14T17:55:33.867Z]	<LPGhatguy>	hey typing fun should be accept a function for a second argument
[2015-10-14T17:56:05.223Z]	<LPGhatguy>	ts be complain that function and eventlistenerobject be incompatible but mdn disagree
[2015-10-14T17:58:19.086Z]	<LPGhatguy>	-pron- appear open and close the ticket a bunch without -pron- get fix in at least in issue
--------------------------------------------------------------------------------------------------
[2015-10-14T17:48:14.326Z]	<zcstarr>	thank for chime in
--------------------------------------------------------------------------------------------------
[2015-10-14T19:28:23.723Z]	<mhegazy>	do -pron- comment in answer -pron- question
[2015-10-14T23:29:33.664Z]	<LPGhatguy>	work for -pron- thank a bunch
--------------------------------------------------------------------------------------------------
[2015-10-15T06:12:45.895Z]	<electricessence>	everyone how reply about the npm packaging thank -pron- -pron- all help -pron- probably simple than i think but i just want to be sure that the consumer have a good experience
[2015-10-15T21:09:39.084Z]	<mattmazzola>	be there a way to overwrite there seem to be a problem with the type definition for bind and i want to try to fix -pron-
[2015-10-15T21:10:38.000Z]	<mattmazzola>	have any argarray any any which strip away the typeing of the function and return any
[2015-10-15T21:10:43.825Z]	<mattmazzola>	i want to preserve -pron-
[2015-10-15T21:15:26.316Z]	<mattmazzola>	if -pron- try to do something like function a b convert thing return b function a b return the compilation fail because the outer scope do know that the return type of convert be b
[2015-10-15T21:16:11.210Z]	<mattmazzola>	however if -pron- instead do
[2015-10-15T21:17:29.067Z]	<mattmazzola>	return thing work as expect because -pron- do use bind but this be not very good programming since -pron- lead to unnecessarily create lamdas to preserve context
[2015-10-15T21:22:38.841Z]	<mattmazzola>	seem like there need to be some way to use generic to preserve the type of the original function instance
[2015-10-15T21:23:18.998Z]	<jbrantly>	but to expand on the overload i mean overload not override -pron- could be able to just do declare interface function bind t t somewhere in -pron- app and have -pron- take effect
--------------------------------------------------------------------------------------------------
[2015-10-15T21:19:57.643Z]	<jbrantly>	i do understand why use lambas be not very good programming
[2015-10-15T21:20:12.110Z]	<jbrantly>	-pron- should be able to create override for bind without mess with
[2015-10-15T21:20:34.533Z]	<jbrantly>	but if for some reason thing be clash -pron- can use the option to not include the default lib and then -pron- can provide -pron- own
[2015-10-15T21:23:23.704Z]	<mattmazzola>	like t args any t
[2015-10-15T21:23:43.739Z]	<mattmazzola>	oh
[2015-10-15T21:24:07.239Z]	<jbrantly>	interface be merge in typescript
[2015-10-15T21:24:26.372Z]	<mattmazzola>	so how would t be know when use
[2015-10-15T21:25:01.902Z]	<mattmazzola>	in the example above i think -pron- would be
[2015-10-15T21:25:15.007Z]	<mattmazzola>	but the point be not to have to respecify b
[2015-10-15T21:25:44.912Z]	<mattmazzola>	-pron- should somehow be know via use bind on convert
[2015-10-15T21:28:03.090Z]	<jbrantly>	i think this may be relate to
[2015-10-15T21:29:16.833Z]	<jbrantly>	in any case i do think that use lambas be bad here
[2015-10-15T21:30:31.261Z]	<jbrantly>	 <user> see with that -pron- may be possible to do declare interface function bind this but not sure
[2015-10-15T21:31:05.238Z]	<mattmazzola>	yea not bad just extra noise in -pron- opinion people have to decide what to name the intermediate variable and -pron- inconsistent between developer
[2015-10-15T21:31:28.892Z]	<mattmazzola>	yea the typing use this be what i need
[2015-10-15T21:31:49.809Z]	<mattmazzola>	i think what -pron- write above be what i be look for i do know about use this
[2015-10-15T21:32:07.913Z]	<mattmazzola>	-pron- the type of the current instance the method be use on which be exactly what -pron- want
[2015-10-15T21:32:12.696Z]	<mattmazzola>	d
[2015-10-15T21:32:41.258Z]	<jbrantly>	look like -pron- available in the nightly
[2015-10-15T21:32:57.099Z]	<mattmazzola>	ok the milestone say
[2015-10-15T21:33:05.023Z]	<mattmazzola>	-pron- just wait for that and use lamdas for now
[2015-10-15T21:33:15.469Z]	<mattmazzola>	not really sure how to get the nightly without break everything
[2015-10-15T21:34:27.677Z]	<jbrantly>	re naming i think -pron- can do return args arg but not
[2015-10-15T21:35:16.971Z]	<jbrantly>	but -pron- make a good point about have to specify the argument at all
[2015-10-15T21:36:16.120Z]	<mattmazzola>	yea and arg be transpile into for loop to make argument into real array which be likely performance penalty
[2015-10-15T21:36:49.061Z]	<mattmazzola>	 <user> the converting function usually should not be aware of indicie array of what htey be convert
[2015-10-15T21:37:17.597Z]	<jbrantly>	but -pron- be if -pron- use bind
--------------------------------------------------------------------------------------------------
[2015-10-16T10:53:34.866Z]	<gastrodia>	hi can i use typescript exclude property in visualstudio njsproj file
--------------------------------------------------------------------------------------------------
[2015-10-16T15:11:10.384Z]	<Foxandxss>	so with this new awesome capability to autoload file i be try with -pron- have this back in with
[2015-10-16T15:11:20.279Z]	<Foxandxss>	tsc src dist
[2015-10-16T15:11:33.318Z]	<Foxandxss>	but i still get the can not find module
--------------------------------------------------------------------------------------------------
[2015-10-16T15:14:43.196Z]	<jbrantly>	i do use angular so i have personally do that but have -pron- see
[2015-10-16T15:15:21.858Z]	<Foxandxss>	i have not let -pron- read
[2015-10-16T15:16:19.154Z]	<Foxandxss>	the fun fact and why i ask here be that the doc configure a target work perfectly with as a target and cjs as module but not if i target
[2015-10-16T15:43:49.161Z]	<jbrantly>	what do -pron- import look like
[2015-10-16T15:44:48.247Z]	<chilversc>	how can i type cast a variable as a module if i have var bar bar
[2015-10-16T15:45:29.972Z]	<jbrantly>	import barmodule bar var bar typeof barmodule bar
[2015-10-16T15:46:00.208Z]	<chilversc>	but import can be use inside a function
[2015-10-16T15:47:35.645Z]	<chilversc>	can i import definition only from a module
[2015-10-16T15:47:36.421Z]	<jbrantly>	nope put -pron- at the top of the time
[2015-10-16T15:47:43.569Z]	<jbrantly>	of the file
[2015-10-16T15:47:45.748Z]	<jbrantly>	but
[2015-10-16T15:48:01.088Z]	<jbrantly>	if -pron- do actually use anything from that import ts  <user> strip -pron- from the emit js
[2015-10-16T15:48:10.799Z]	<chilversc>	i can as -pron- will exist at that moment in time
[2015-10-16T15:48:27.276Z]	<jbrantly>	be -pron- try to do like code splitting
[2015-10-16T15:48:36.104Z]	<jbrantly>	or dynamic loading of module at runtime
[2015-10-16T15:48:39.558Z]	<jbrantly>
[2015-10-16T15:49:02.650Z]	<chilversc>	no static loading with code splitting only the dependent file get load before the file -pron- depend on
[2015-10-16T15:49:14.844Z]	<jbrantly>	see above then
[2015-10-16T15:50:54.376Z]	<chilversc>	-pron- those import statement at the top in i want to avoid since -pron- just a landmine -pron- seem too easy to accidentally use instead of
[2015-10-16T15:51:10.604Z]	<jbrantly>	shrug no way around -pron-
[2015-10-16T15:51:53.612Z]	<chilversc>	i be hope for something similar to import foo
[2015-10-16T15:52:34.785Z]	<jbrantly>	if -pron- make -pron- module definition available as an internal module then -pron- could do that i suppose
[2015-10-16T15:52:49.272Z]	<Foxandxss>	 <user> i do import from
[2015-10-16T15:52:58.627Z]	<Foxandxss>	work if i transpile to directly do if i go to
[2015-10-16T15:55:40.795Z]	<chilversc>	yeah i just do want to have to repeat -pron- so i want to automatically generate the internal module somehow
[2015-10-16T15:57:55.580Z]	<chilversc>	i would mind the import as foo from foo syntax if i could have the compiler emit an error upon try to use anything other than an interface type from foo
[2015-10-16T15:59:31.495Z]	<jbrantly>	maybe import as from foo smile
[2015-10-16T15:59:36.422Z]	<jbrantly>	 <user> k
[2015-10-16T16:01:34.505Z]	<chilversc>	-pron- not a bad idea import as from foo type foomodule typeof
[2015-10-16T16:04:15.500Z]	<chilversc>	-pron- fine if -pron- just use the module though -pron- would work so well if -pron- want to refer to interface or type export by the module
[2015-10-16T16:05:07.575Z]	<jbrantly>	yea
[2015-10-16T16:07:32.161Z]	<chilversc>	be there any open issue about only import type information from a module
[2015-10-16T16:08:13.690Z]	<jbrantly>	not that -pron- aware of but that do mean anything smile
[2015-10-16T16:08:32.143Z]	<chilversc>	so -pron- could still use thing like var x or typeof but actually try to invoke a function or access a variable from foo would be a compile error
[2015-10-16T16:08:51.124Z]	<jbrantly>	right -pron- want to be able to restrict the usage so that -pron- never get emit
[2015-10-16T16:08:54.743Z]	<chilversc>	as i think that could be useful for when -pron- want type information but -pron- do want to accidentally import a module at the wrong point
[2015-10-16T16:10:48.054Z]	<jbrantly>	-pron- not sure for kick and giggle try with and without a default import import angular from and import as angular from
[2015-10-16T16:11:07.193Z]	<jbrantly>	i do think either of those would result in the error message -pron- see though
[2015-10-16T16:13:23.317Z]	<jbrantly>	look in the folder and find and see if -pron- use export anywhere
--------------------------------------------------------------------------------------------------
[2015-10-16T16:14:59.198Z]	<Foxandxss>	uhm
[2015-10-16T16:16:23.229Z]	<Foxandxss>	there be just i mean not two folder
[2015-10-16T16:16:47.487Z]	<Foxandxss>	the export from various other file
[2015-10-16T16:17:10.918Z]	<Foxandxss>	but still surprise that transpilation do fail
[2015-10-16T16:17:39.796Z]	<Foxandxss>	if i delete the from fail too make sense
--------------------------------------------------------------------------------------------------
[2015-10-16T16:31:01.827Z]	<lorthirk>	hello all
[2015-10-16T16:31:43.479Z]	<lorthirk>	-pron- face an issue with for of and a promise that use a variable inside the for
[2015-10-16T16:31:49.078Z]	<lorthirk>	let say i have
[2015-10-16T16:32:41.872Z]	<lorthirk>	for var item of collection
[2015-10-16T16:33:33.023Z]	<lorthirk>	when the promise resolve the item variable be not the one -pron- be when i invoke the promise in the first place
[2015-10-16T16:34:01.986Z]	<Brocco>	be this use angular q or q or something else
[2015-10-16T16:34:10.767Z]	<lorthirk>	angular q sorry
[2015-10-16T16:36:38.957Z]	<Brocco>	no problem to hold onto the item context -pron- can do this for var item of collection mypromise mypromiseresult
[2015-10-16T16:37:18.375Z]	<lorthirk>	ok so -pron- item have to navigate all the way though the promise and get back to -pron-
[2015-10-16T16:37:27.878Z]	<lorthirk>	another option would be to use
[2015-10-16T16:38:30.447Z]	<lorthirk>
[2015-10-16T16:40:43.339Z]	<chilversc>	try for let item of collection instead
[2015-10-16T16:41:39.398Z]	<lorthirk>	i get a compiler error
[2015-10-16T16:41:43.703Z]	<lorthirk>
[2015-10-16T16:42:27.797Z]	<lorthirk>	-pron- complain that the use of let and an inner function that access that variable be allow only in ecmascript
[2015-10-16T16:42:53.071Z]	<chilversc>	oh odd i think -pron- sort out the closure for -pron- auto magically
[2015-10-16T16:44:09.726Z]	<DanielRosenwasser>	the solution be to use a let or const but because the rewrite when use a involve an iife and thus a non trivial runtime cost in some case -pron- shy away from allow this in target other than
[2015-10-16T16:44:29.664Z]	<DanielRosenwasser>	which -pron- can get if -pron- use node
[2015-10-16T16:45:00.420Z]	<DanielRosenwasser>	but
[2015-10-16T16:45:19.674Z]	<DanielRosenwasser>	i think -pron- can expect -pron- in an upcoming version
[2015-10-16T16:46:37.402Z]	<DanielRosenwasser>	october microsoft may be able to answer this
[2015-10-16T16:47:35.501Z]	<DanielRosenwasser>	though i assume -pron- do not
[2015-10-16T16:48:11.462Z]	<lorthirk>	well by now i sort -pron- out with the
[2015-10-16T16:48:41.766Z]	<lorthirk>	-pron- follow the issue anyway thank
[2015-10-16T19:31:16.021Z]	<JoshVarty>
[2015-10-16T19:31:42.881Z]	<JoshVarty>	-pron- typescript visualizer be now on github there still some miss feature click a node and highlight correspond text but -pron- almost do
[2015-10-16T19:31:47.055Z]	<jbrantly>	that neat
[2015-10-16T19:32:41.988Z]	<JoshVarty>	thank hopefully -pron- help other build tool that work with typescript
[2015-10-16T19:33:05.932Z]	<JoshVarty>	-pron- be start dev on a tool that need to rewrite js ts and -pron- hope this  <user> make -pron- easy to understand what -pron- need to do
[2015-10-16T19:50:04.526Z]	<DanielRosenwasser>	nice definitely come in hand when i need to debug the language service
--------------------------------------------------------------------------------------------------
[2015-10-16T19:31:52.895Z]	<JoshVarty>	-pron- support vs and -pron- upload -pron- to the gallery after -pron- do
--------------------------------------------------------------------------------------------------
[2015-10-16T19:55:27.328Z]	<JoshVarty>	-pron- put -pron- on the vs gallery around monday after -pron- finish a few thing up
--------------------------------------------------------------------------------------------------
[2015-10-16T21:10:29.972Z]	<JKillian>	know of any good visualizer for osx atom typescript have a similar feature but unfortunately -pron- a little buggy and often do work
[2015-10-16T21:13:18.570Z]	<JoshVarty>	be the project on github
[2015-10-16T21:13:43.244Z]	<JKillian>	yup
[2015-10-16T21:15:02.479Z]	<JoshVarty>	maybe -pron- can contribute to -pron- at some point then or at least point -pron- in the right direction
[2015-10-16T21:15:05.069Z]	<JKillian>	maybe one  <user> -pron- try to figure out why -pron- do always work and file a pr but have have time and do know how complex -pron- be
[2015-10-16T21:15:47.578Z]	<JKillian>	here a few screenshot
[2015-10-16T22:15:40.922Z]	<JoshVarty>	similar to
[2015-10-17T00:16:02.714Z]	<mattmazzola>	there would be compilation error at line because -pron- would say arg which be any do not match expected parameter of string number
[2015-10-17T00:16:16.054Z]	<mattmazzola>	seem like there should be a trick to get b to inherit the type of a
[2015-10-17T00:16:31.870Z]	<mattmazzola>	just not sure what magic part of type script do this
[2015-10-17T00:22:09.555Z]	<mattmazzola>	i guess use spread be so good in typescript since -pron- would want b to still have type safe argument and need to specify -pron- explicitly anyways
--------------------------------------------------------------------------------------------------
[2015-10-16T22:15:31.111Z]	<JoshVarty>	be there a sourcebrowser set up for the typescript repo anywhere
--------------------------------------------------------------------------------------------------
[2015-10-17T00:15:13.471Z]	<mattmazzola>	be there a way to preserve type information when use function parameter spread operation to call anotehr function example function string number promise function arg return arg
--------------------------------------------------------------------------------------------------
[2015-10-17T00:37:02.974Z]	<mattmazzola>	hmm not so sure i have a good use case anyways i be originally write a class which wrap another class so i think i should be able to get away with just pass the argument through however the point of wrap the class be to change the return value so signature be different and could be inherit anyways
--------------------------------------------------------------------------------------------------
[2015-10-17T08:37:03.814Z]	<ArildBelsvik>	hi i be a newbee both in typescript and angular not sure if this be the right room for typescript angular related problem but i give -pron- a try -pron- a rewrite of a interceptor find here the problem be that while in the constructor this be define but when in all other method function this be undefined have be try different approach for the last hour with no luck anyone have any idea run -pron- with debugger in both chrome and same problem module use strict export interface iinterceptor request function requesterror function response function responseerror function export class authenticationinterceptor implement private currentloggedin static inject q injector public static injector return new injector q private injector var a public request config request return config public requesterror requestfailure any report return requestfailure public response responsesuccess any response report with status responsesuccess return responsesuccess public responseerror responsefailure any error report if error return angular httpprovider
[2015-10-17T12:15:44.848Z]	<mikedon>	i think the factory be screw -pron- up
[2015-10-17T12:16:43.228Z]	<mikedon>	in -pron- project -pron- just write a class with all function fat arrowe
[2015-10-17T12:17:03.317Z]	<mikedon>	register the interceptor with angular as a service
[2015-10-17T12:17:18.351Z]	<mikedon>	then push the service to the inteceptor array by -pron- string component name
[2015-10-19T05:50:16.855Z]	<LPGhatguy>	how do i target the late typescript beta from npm
[2015-10-19T05:50:52.851Z]	<LPGhatguy>	or uh development release
[2015-10-19T05:53:15.538Z]	<LPGhatguy>	i guess i can pin to but that not ideal
--------------------------------------------------------------------------------------------------
[2015-10-19T06:49:33.100Z]	<grofit>	hey i post a possible issue about week ago and hear little back but -pron- something i ideally need to resolve before i can progress on -pron- current work stream anyone get any idea
[2015-10-19T07:19:02.351Z]	<DanielRosenwasser>	until the release proper be generally close enough
[2015-10-19T07:19:14.855Z]	<DanielRosenwasser>	but should hopefully be come out in the next few week
[2015-10-19T07:24:40.889Z]	<DanielRosenwasser>	have something an experimental sourcebrowser a week or two ago
[2015-10-19T07:25:48.096Z]	<JoshVarty>	yeah i notice -pron- fix the ts support in -pron-
[2015-10-19T07:26:13.244Z]	<JoshVarty>	just curious if anyone have end up host an instance against the ts compiler source
[2015-10-19T07:27:37.169Z]	<DanielRosenwasser>	i think -pron-  <user> be
[2015-10-19T07:28:17.672Z]	<DanielRosenwasser>	as i understand -pron- -pron- need to set up an internal build to generate -pron-
[2015-10-19T07:28:28.391Z]	<DanielRosenwasser>	but -pron- talk to vlad and ask -pron-
[2015-10-19T07:30:40.889Z]	<JoshVarty>	sound good
[2015-10-19T07:31:15.861Z]	<DanielRosenwasser>	-pron- be quick to respond
[2015-10-19T07:31:21.649Z]	<DanielRosenwasser>
[2015-10-19T07:31:24.448Z]	<DanielRosenwasser>
[2015-10-19T07:31:52.365Z]	<DanielRosenwasser>	-pron- not up to date but -pron- may do the job for -pron-
--------------------------------------------------------------------------------------------------
[2015-10-19T07:32:07.889Z]	<JoshVarty>	awesome
--------------------------------------------------------------------------------------------------
[2015-10-19T08:51:31.455Z]	<doggy8088>	hi -pron- like to compare babel typescript for this function block function var b i let a b b a the babeljs output be use strict function var b for var i i var a b b a the typescript output be below function var b for var i i var a b b a i know -pron- a wrong code and typescript  <user> show error in the compilation result but ts still generate javascript and -pron- generate javascript have some implicit side effect which be not good i think -pron-  <user> be well if the a variable change to or something rather than use a in the for loop what do -pron- think
--------------------------------------------------------------------------------------------------
[2015-10-19T09:55:17.019Z]	<lorthirk>	hello -pron- wonder why in this line type mapobject i be not get an accessibility error symbol be private on mapobject class while in this one -pron- would i be get the error
[2015-10-19T12:11:18.698Z]	<chilversc>	only thing i can think of be that in the first example mapobject be type as any
[2015-10-19T12:16:05.281Z]	<lorthirk>	no -pron- type let mapobject any new plangraphicsymbol
[2015-10-19T12:16:12.440Z]	<lorthirk>	oh god
[2015-10-19T12:16:48.698Z]	<lorthirk>	-pron- sorry d
[2015-10-19T12:17:12.679Z]	<lorthirk>	indeed remove the any now throw the error
--------------------------------------------------------------------------------------------------
[2015-10-19T12:14:20.503Z]	<chilversc>	-pron- do if -pron- have an a in the outer scope -pron- never see that error since i always use noemitonerror
--------------------------------------------------------------------------------------------------
[2015-10-19T12:16:34.808Z]	<lorthirk>	how do i overlook at that any
[2015-10-19T12:17:14.253Z]	<lorthirk>	thank
--------------------------------------------------------------------------------------------------
[2015-10-19T12:25:28.147Z]	<RamaMuthukrishnan>	hi guy be new in aurelia i confuse about aurelia routing please any one help -pron- how to configure the dynamic router
[2015-10-19T12:25:55.360Z]	<lorthirk>	perhaps -pron- well for -pron- to ask on aurelia gitter room
[2015-10-19T12:26:39.238Z]	<RamaMuthukrishnan>	ok ji
--------------------------------------------------------------------------------------------------
[2015-10-19T16:31:01.449Z]	<lorthirk>	just one quick question
[2015-10-19T16:32:07.177Z]	<lorthirk>	be -pron- possible to have an array of multiple subtype all of -pron- subclasse a maybe abstract class
[2015-10-19T16:33:35.699Z]	<lorthirk>	so let say -pron- want something like array extend vehicle instead of array with car plane and bike extend vehicle
[2015-10-19T17:18:09.406Z]	<jbrantly>	would that just be array vehicle
--------------------------------------------------------------------------------------------------
[2015-10-19T17:24:10.602Z]	<bb>	hi be the way to go for bundle multiple typescript file into one or several bundle or be there well alternative currently i be use browserify in gulp but -pron- do work as -pron- should yet
[2015-10-19T17:41:23.065Z]	<jbrantly>	i maintain ts loader for webpack so -pron- obviously a big fan of that for bundling some other option be browserify as -pron- say and gulp typescript since -pron- use gulp what do work with browserify be -pron- use the tsify plugin
--------------------------------------------------------------------------------------------------
[2015-10-19T19:55:40.221Z]	<DanielRosenwasser>	hi why exactly be -pron- well to have intentionally more invalid code if -pron- report error on -pron- code
--------------------------------------------------------------------------------------------------
[2015-10-20T07:17:13.680Z]	<electricessence>	umd what do everyone think i just try -pron- in -pron- project and -pron- i wonder what the downside be work with amd work with node with the hangup i think this be  <user> great if -pron- be try to stay pure typescript what the catch
[2015-10-20T07:20:40.383Z]	<lorthirk>	-pron- would but then -pron- get error when refer some property in the derived class
[2015-10-20T07:32:12.842Z]	<lorthirk>	spoiler yes i would d
[2015-10-20T08:18:13.435Z]	<DanielRosenwasser>	if -pron- want to easily use the same output in both environment nothing bad i could think of smile
--------------------------------------------------------------------------------------------------
[2015-10-20T08:27:35.830Z]	<Souldrinker>	hi not sure if this be the correct place but -pron- try -pron- try to start use async await in -pron- aurelia app use visual studio and typescript and get -pron- work fine when i build use gulp where -pron- task transpile the typescript to use gulp typescript typescript and then from to use babel when i import babel polyfill in -pron- file but when i transpile on save in visual studio i get a exit with code and a can not find global type promiseconstructorlike in the error list and this in the output window file error exit with code any idea why since -pron- plan to have -pron- webapi and aurelia client in the same project -pron- would be good if i could build the project and have typescript from vs output code and than just have gulp to transpile -pron- from to until typescript with async await support arrive
[2015-10-20T11:45:08.204Z]	<doggy8088>	because someone may need to write the wrong code for the right reason but let be truely a local scope variable the variable name should be the same one
[2015-10-20T14:13:48.461Z]	<jbrantly>	-pron- not sure i understand what -pron- look for then -pron- want typescript to automatically scan -pron- project for all type that be a subclass and then union -pron- for -pron-
[2015-10-20T14:14:47.778Z]	<lorthirk>	ideally yes but maybe -pron- ask too much be i
[2015-10-20T14:15:16.827Z]	<jbrantly>	yea i think so -pron- not aware of any language that do something like that with heterogeneous array
[2015-10-20T14:17:23.041Z]	<lorthirk>	while work with netbeans rcp so java i often find something like t collection extend t
[2015-10-20T14:17:59.295Z]	<lorthirk>	but of course -pron- end up with a t base collection
[2015-10-20T14:18:05.495Z]	<jbrantly>	but -pron- still pass in the generic type parameter t and all element in that collection would be of type t
[2015-10-20T14:18:30.549Z]	<lorthirk>	moreover that extend be misleading since t be an interface not a class or to be honest -pron- not sure -pron- can use a class as t
[2015-10-20T14:19:20.690Z]	<lorthirk>	yes yes
[2015-10-20T14:19:42.801Z]	<lorthirk>	i be a bit confused about this concept i have be use -pron- for a while
[2015-10-20T14:20:40.604Z]	<chilversc>	how do -pron- make that play nice with in build typescript compilation currently -pron- use vs to compile ts js then webpack to bundle the js
[2015-10-20T14:22:05.046Z]	<jbrantly>	-pron- refer to ts loader -pron- just turn off vs typescript compilation and let webpack do -pron- instead
[2015-10-20T14:23:57.503Z]	<jbrantly>	or -pron- could run -pron- side by side will really hurt anything as long as webpack be configure to grab file before
[2015-10-20T14:29:04.406Z]	<chilversc>	i think disable vs typescript compiler  <user> disable -pron- intellisense
[2015-10-20T14:35:27.943Z]	<jbrantly>	i just mean the compile on save
[2015-10-20T14:59:04.473Z]	<chilversc>	but then vs still build all the typescript when -pron- hit build and can interfere
[2015-10-20T14:59:40.234Z]	<jbrantly>	well that why webpack have to be configure to get file before
[2015-10-20T15:00:57.339Z]	<jbrantly>	import
[2015-10-20T15:01:24.212Z]	<jbrantly>	note the
[2015-10-20T15:01:36.504Z]	<jbrantly>	i believe that disable compile on save and compile on build
[2015-10-20T15:02:17.465Z]	<jbrantly>	but -pron- run with and file and other oddity so -pron- hard to -pron- to say for sure
[2015-10-20T15:07:30.677Z]	<chilversc>	and now -pron- tempt to switch ts to bable
[2015-10-20T15:07:58.506Z]	<jbrantly>	lol why -pron- do different thing
[2015-10-20T15:08:17.013Z]	<jbrantly>	or do -pron- mean still use ts but babel afterwards
[2015-10-20T15:08:26.037Z]	<chilversc>	yup
[2015-10-20T15:08:33.371Z]	<jbrantly>	gotcha yea that what i do -pron- great
[2015-10-20T15:08:44.011Z]	<jbrantly>	and super easy to do loader
[2015-10-20T15:10:12.380Z]	<jbrantly>	some gotcha
[2015-10-20T15:10:28.474Z]	<chilversc>	i think i may have already read that
[2015-10-20T16:18:28.072Z]	<chilversc>	so under what the correct way to handle a commonjs module that use function foo export foo
[2015-10-20T16:19:42.821Z]	<chilversc>	import as foo from foo give an error since foo be a module but at the same time import foo be  <user> an error
[2015-10-20T16:20:03.411Z]	<chilversc>	i could do var foo but then i lose all type information
--------------------------------------------------------------------------------------------------
[2015-10-20T15:00:13.719Z]	<jbrantly>	-pron- pretty sure i run with typescript disabled but i still get intellisense and such
[2015-10-20T15:01:14.986Z]	<jbrantly>	take a look at that in -pron- project file
--------------------------------------------------------------------------------------------------
[2015-10-20T16:39:40.649Z]	<chilversc>	ah so -pron- just change -pron- to export default foo in the definition and use import foo from foo lettingf babel shim the commonjs export as the default export
--------------------------------------------------------------------------------------------------
[2015-10-20T17:12:41.336Z]	<DanielRosenwasser>	what be a situation where a person need to write the wrong code with respect to a block scope variable
[2015-10-20T17:13:02.414Z]	<JoshVarty>	hey guy -pron- like to use the async await branch of ts -pron- download and build the branch be there a way to replace the typescript package use npm
[2015-10-20T17:13:09.464Z]	<JoshVarty>	or maybe -pron- go about this the wrong way
[2015-10-20T17:13:17.014Z]	<DanielRosenwasser>	additionally if -pron- actually have another a in scope somewhere -pron-  <user> make a unique
[2015-10-20T17:16:10.709Z]	<JoshVarty>	should i try follow the instruction here
[2015-10-20T17:19:11.520Z]	<JoshVarty>	and when i say -pron- like to use the async await branch i mean -pron- like to use -pron- as an api -pron- like to try generate and rewrite code with -pron-
[2015-10-20T19:08:55.695Z]	<DanielRosenwasser>	-pron- want to use a separate version of typescript -pron- can check out the branch -pron- want run jake lkg run npm install within the typescript repo root
--------------------------------------------------------------------------------------------------
[2015-10-20T17:22:19.490Z]	<stacklance>	do anyone know how i can define the definition of a javascript library that use -pron- top level object as both a namespace and a constructor i have some library that i use as var x new but  <user> as var y new or as what be foo in this case be -pron- a module a class a variable
[2015-10-20T17:44:45.168Z]	<stacklance>	ah so i can overload everything
[2015-10-20T17:44:46.236Z]	<stacklance>	amazing
[2015-10-20T17:50:23.992Z]	<stacklance>	-pron- approach do work
[2015-10-20T18:19:21.864Z]	<jbrantly>	right -pron- annoying that -pron- have to change the definition but there be multiple issue already open discuss solution to that
[2015-10-20T19:10:06.943Z]	<JoshVarty>	thanks -pron- give that a shot
[2015-10-20T19:10:09.405Z]	<DanielRosenwasser>	-pron- can use class namespace merging or define -pron- as an interface
[2015-10-20T19:11:38.228Z]	<DanielRosenwasser>	ts declare class foo string declare namespace foo class bar constructor function bar
[2015-10-20T19:11:50.372Z]	<DanielRosenwasser>	that a declaration merge example
[2015-10-20T19:12:16.163Z]	<DanielRosenwasser>	namespace can merge with class and function as long as -pron- delcare afterwards
[2015-10-20T19:12:50.983Z]	<DanielRosenwasser>	sure thing dev mode be generally just for debug the current language service in visual studio not for have an a different compiler on -pron- system
[2015-10-20T19:34:42.731Z]	<stacklance>	thank that work perfectly
--------------------------------------------------------------------------------------------------
[2015-10-20T21:00:13.133Z]	<JKillian>	wonder if anyone have idea on specify option in ts -pron- work on tslint and want to make a clean option system for specify lint rule option ideally option should be programmatically enumerable key and possible value and there should be default value for everything so option be never require value from a json doc would be merge with the default specify in the code
[2015-10-20T23:24:43.217Z]	<DanielRosenwasser>	that sound sort of like how -pron- do -pron- in the compiler
[2015-10-21T03:26:00.648Z]	<mikedon>	need some help with understand the definition for date new date can return a string of invalid date if -pron- an invalid date if i try to compare the result of new date with invalid date i get the error operator can be apply to type date and stre
[2015-10-21T03:27:08.407Z]	<mikedon>	the dateconstructor have these two line that i do fully understand the difference new date date and then stre
[2015-10-21T03:27:21.300Z]	<mikedon>	i think the latter would cover -pron- case but -pron- not
[2015-10-21T03:38:28.204Z]	<DanielRosenwasser>	new date be the construct signature
[2015-10-21T03:38:37.877Z]	<DanielRosenwasser>	-pron- what happen -pron- get when -pron- new something
[2015-10-21T03:39:00.439Z]	<DanielRosenwasser>	string be a call signature -pron- what -pron- get when -pron- call something
[2015-10-21T03:40:08.685Z]	<DanielRosenwasser>	try run the actual javascript js date tue oct pacific daylight time new date a date object contain the info for tue oct pacific daylight time
[2015-10-21T03:42:13.212Z]	<mikedon>	ok that make sense
[2015-10-21T03:42:25.166Z]	<mikedon>	then be the type declaration incomplete
[2015-10-21T03:42:29.183Z]	<mikedon>	new date can return a string
[2015-10-21T07:31:41.158Z]	<lorthirk>	not really
[2015-10-21T07:31:46.773Z]	<lorthirk>	date be a method of window
[2015-10-21T07:31:58.492Z]	<lorthirk>	new date return a date object
[2015-10-21T07:33:07.661Z]	<lorthirk>	no sorry
[2015-10-21T07:33:10.123Z]	<lorthirk>	forget this d
[2015-10-21T15:03:40.998Z]	<mikedon>	maybe -pron- just in a browser
[2015-10-21T16:12:04.229Z]	<JKillian>	if the model work well for -pron- maybe  <user> copy -pron- for tslint
[2015-10-21T16:12:21.373Z]	<JKillian>	-pron- look at right now be that the good example
[2015-10-21T18:50:01.658Z]	<DanielRosenwasser>	yes -pron- not a string try use the typeof oeprator
--------------------------------------------------------------------------------------------------
[2015-10-21T09:26:19.811Z]	<chilversc>	-pron- be the definition that get -pron- at first i be think -pron- would work because those commonjs module do not export a default before realise babel shim -pron- to work
[2015-10-21T14:57:46.600Z]	<mikedon>	i think the type definition for date just need to be update to new value number date string new value string date string do that look right this at least fix -pron- scenario
[2015-10-21T15:01:40.385Z]	<chilversc>	when do new date ever return a string
[2015-10-21T15:02:05.689Z]	<mikedon>	new
[2015-10-21T15:02:58.721Z]	<chilversc>	that still give -pron- a date object
[2015-10-21T15:03:58.276Z]	<chilversc>	var d new show nan
[2015-10-21T15:04:06.113Z]	<chilversc>	yeah that be in a browser
[2015-10-21T15:06:03.500Z]	<mikedon>	actually -pron- an object
[2015-10-21T15:18:56.342Z]	<mikedon>	-pron- an object but not a date
[2015-10-21T15:19:11.928Z]	<mikedon>	i think -pron- an object with the tostring set to return invalid date
[2015-10-21T15:21:03.596Z]	<chilversc>	odd in the browser with i get object date
[2015-10-21T15:24:23.809Z]	<mikedon>	this may just be -pron- get confused as -pron- move some of -pron- js codebase over to ts
[2015-10-21T15:25:10.407Z]	<mikedon>	and -pron- look like that be just poor form all around
[2015-10-21T16:25:36.743Z]	<chilversc>	that sort of valid when compare to a string -pron- run tostre on the date first
[2015-10-21T16:26:30.675Z]	<chilversc>	same as work since that run valueof
[2015-10-21T16:27:33.852Z]	<chilversc>	i always use moment since i hate date thus avoid all this trouble
[2015-10-21T16:27:42.868Z]	<mikedon>
[2015-10-21T16:29:28.798Z]	<mikedon>	-pron- be guess the type definition for date be make specifically the way -pron- be to avoid poor code like new invalid date because that just make no sense
--------------------------------------------------------------------------------------------------
[2015-10-21T15:25:01.198Z]	<mikedon>	in js -pron- have a function that compare a date variable to invalid date as a way to assert if -pron- a date object
--------------------------------------------------------------------------------------------------
[2015-10-21T16:27:05.288Z]	<mikedon>	ah that s interesting
[2015-10-21T16:28:34.807Z]	<mikedon>	however at -pron- company -pron- have many javascript dev that be really just ex java guy and -pron- be constantly fight battle over typescript so -pron- good to be able to explain this
--------------------------------------------------------------------------------------------------
[2015-10-21T16:31:39.432Z]	<chilversc>	right that always return false for -pron- since a date be a string
[2015-10-21T16:33:27.528Z]	<mikedon>	sorry i mean to only have
[2015-10-21T16:36:58.045Z]	<chilversc>	make sense but probably be the good way
[2015-10-21T16:37:20.877Z]	<mikedon>	definitely not and i like that typescript force -pron- to think about this
--------------------------------------------------------------------------------------------------
[2015-10-21T21:13:05.967Z]	<LPGhatguy>	be there an issue track the loop contain block scope variable x reference by a function in the loop error that occur
[2015-10-21T21:13:22.101Z]	<LPGhatguy>	i do see why this can be downlevel emit by just use a lambda and a function scope variable
[2015-10-21T21:13:47.136Z]	<DanielRosenwasser>	yeah -pron- just go to downlevel that in
[2015-10-21T21:14:08.281Z]	<LPGhatguy>	neat
[2015-10-21T21:14:16.061Z]	<DanielRosenwasser>	the original reason be that -pron- incur a peformance hit -pron- need to write the loop body as an iife and that -pron- not the prettiest
[2015-10-21T21:14:40.768Z]	<DanielRosenwasser>	but -pron- figure -pron- can just use a linter if the former be a concern
--------------------------------------------------------------------------------------------------
[2015-10-21T21:24:48.885Z]	<LPGhatguy>	be there any other highlight for implement at present
[2015-10-21T21:25:03.008Z]	<LPGhatguy>	i notice that all of -pron- gulp tooling break again with hah
[2015-10-21T22:03:36.386Z]	<LPGhatguy>	be there a reasonable way to say any string should be a valid key into this class
[2015-10-21T22:03:53.804Z]	<LPGhatguy>	would that just mean inherit from key string any
[2015-10-21T22:06:51.324Z]	<LPGhatguy>	i would expect that js class something key string any would allow -pron- to access any key without any typechecking
[2015-10-21T22:15:36.755Z]	<LPGhatguy>	better yet be there a way to say this type box this other type like proxy object
--------------------------------------------------------------------------------------------------
[2015-10-21T22:28:05.740Z]	<LPGhatguy>	do this make any sense
[2015-10-21T23:35:29.639Z]	<DanielRosenwasser>	-pron- depend what -pron- mean by box
[2015-10-21T23:35:38.631Z]	<DanielRosenwasser>	what exactly be -pron- try to accomplish
--------------------------------------------------------------------------------------------------
[2015-10-22T08:14:02.833Z]	<Souldrinker>	a couple of day ago -pron- mention that -pron- disable the condition false in -pron- vs project file to disable typescript compiling but that -pron- still have intellisense etc do -pron- by any chance use experimental feature like typescriptexperimentalasyncfunction etc because when i set condition false or reharper start complain about miss etc which be quite annoying the reason i ask be that when i have vs transpile enable fail when use async await cause build error due to miss promiseconstructorlike so i would rather for now have a gulp build do the transpiling but still be able to code in where i  <user> have -pron- webapi etc
--------------------------------------------------------------------------------------------------
[2015-10-22T09:43:59.152Z]	<RamaMuthukrishnan>	anybody to help -pron- how to use configuring pushstate in typescript
[2015-10-22T11:37:06.144Z]	<Souldrinker>	forget -pron- comment above -pron- seem like the issue i have with async await in be due to a code error i have specify -pron- method as async getinfo any and the any cause -pron- issue when i remove -pron- everything work fine in strange though that gulp typescript do fail on that
--------------------------------------------------------------------------------------------------
[2015-10-23T04:24:17.468Z]	<gsong>	great presentation tonight at the pdx meetup
--------------------------------------------------------------------------------------------------
[2015-10-23T04:25:47.833Z]	<duncanmak>	be there slide online or a recording
[2015-10-23T06:47:54.798Z]	<DanielRosenwasser>	thanks may have a recording sometime soon
[2015-10-23T06:49:41.488Z]	<DanielRosenwasser>	there be a little snag i run into on stage but that apparently because i be run off of an experimental branch -pron- already be fix for
[2015-10-23T06:51:16.549Z]	<DanielRosenwasser>	if -pron- want i can put the slideshow -pron- up
[2015-10-23T12:10:32.825Z]	<grofit>	quick query guy about error object
[2015-10-23T12:10:51.978Z]	<grofit>	in ts -pron- can now do export class myerror extend error and everything be great
[2015-10-23T12:11:15.174Z]	<grofit>	but when -pron- use to have to do myerror do -pron- still need to do this
[2015-10-23T12:11:22.630Z]	<grofit>	or be -pron- just handle for -pron- in the output
[2015-10-23T12:17:11.450Z]	<grofit>	i only ask as the syntax seem to throw an error as if do not exist
--------------------------------------------------------------------------------------------------
[2015-10-23T14:24:34.987Z]	<lorthirk>	hello everyone just one quick question how do i use bracket notation to access object property exactly
[2015-10-23T14:25:01.759Z]	<jbrantly>
[2015-10-23T14:25:16.958Z]	<lorthirk>	yep in theory
[2015-10-23T14:25:43.849Z]	<jbrantly>	what not work
[2015-10-23T14:25:55.204Z]	<lorthirk>	but then i get an error index signature of object type implicitly have an any type
[2015-10-23T14:26:16.902Z]	<lorthirk>	here come the snippet
[2015-10-23T14:27:32.064Z]	<lorthirk>	interface ichronothermostat id string description string min number max number heating array ichronothermostatday cool array ichronothermostatday and then where be a radio button control value that could be either heating or cool
[2015-10-23T14:28:59.177Z]	<jbrantly>	i think the issue be that -pron- specify noimplicitany option but since that interface do have an explicit indexer -pron- get an implicit any indexer which violate the noimplicitany rule
[2015-10-23T14:29:19.463Z]	<lorthirk>	ok that why i  <user> try the follow
[2015-10-23T14:30:11.283Z]	<lorthirk>	interface ichronothermostatdictionary key string ichronothermostat interface ichronothermostat id string description string min number max number heating array ichronothermostatday cool array ichronothermostatday and change type to ichronothermostatdictionary
[2015-10-23T14:30:29.637Z]	<lorthirk>	but still the same error
[2015-10-23T14:31:43.526Z]	<jbrantly>	the issue be the assignment -pron- the access mean -pron- on so change the type of be go to change anything -pron- need to add -pron- indexer to ichronothermostat
[2015-10-23T14:34:27.038Z]	<lorthirk>	mh -pron- not sure how to do this -pron- try to reasearch some more
[2015-10-23T14:34:57.796Z]	<jbrantly>	add key string array ichronothermostatday to ichronothermostat
[2015-10-23T14:37:01.115Z]	<lorthirk>	yep interface ichronothermostat id string description string min number max number program key string array ichronothermostatday heating array ichronothermostatday cooling array ichronothermostatday this do the trick
[2015-10-23T14:37:22.459Z]	<lorthirk>	so i need to put both cooling and heating in a separated array
[2015-10-23T14:37:25.144Z]	<lorthirk>	thank
--------------------------------------------------------------------------------------------------
[2015-10-23T17:34:33.896Z]	<cjbarre>	hey there i would really like to try and contribute to ts would be a good place to start
[2015-10-23T17:41:55.487Z]	<gsong>	i think anything tag with effort easy be suppose to be a good place to start so probably yes
[2015-10-23T17:42:05.451Z]	<gsong>
[2015-10-23T17:44:07.769Z]	<cjbarre>	thank appreciate the info
[2015-10-23T18:11:11.522Z]	<zachrip>	hello i have a file which have an export clerk class as well as some interface -pron- try to export a module so i can do where a transport be a class -pron- try a few thing without success import tps module transport export gt module transports export import generictransport
[2015-10-23T18:23:36.315Z]	<zachrip>	get -pron-
[2015-10-23T19:35:34.955Z]	<cjbarre>	thank for the info i really appreciate -pron- what the good way to find out where the relevant bit of code be for an issue -pron- read the spec on how static member be treat and i be try to find some test or something in the test directory that would maybe point -pron- in the right direction
[2015-10-23T19:45:43.621Z]	<cjbarre>	thank so much all of that be incredibly helpful d
[2015-10-23T20:09:10.222Z]	<cjbarre>	-pron- in the spec reserve word -pron- think that those property name may fall under the the follow keyword have special meaning in certain contexts but be valid identifier category
[2015-10-23T20:11:00.414Z]	<cjbarre>	i guess -pron- be really keyword
[2015-10-23T20:11:01.122Z]	<cjbarre>	though
--------------------------------------------------------------------------------------------------
[2015-10-23T19:29:09.441Z]	<MartyIX>	-pron- can pick any issue from community milestone note that some effort easy task may occasionally turn out to be hard than expect in the process at least that what happen to -pron- once
[2015-10-23T19:39:25.562Z]	<MartyIX>	well -pron- a newbie as well however i tackle issue this way
[2015-10-23T19:40:03.484Z]	<MartyIX>	clone github repo and run jake local to compile typescript compiler
[2015-10-23T19:40:29.563Z]	<MartyIX>	then create a minimal script file with the bug
[2015-10-23T19:40:57.743Z]	<MartyIX>	run node build local
[2015-10-23T19:42:43.237Z]	<MartyIX>	then have a look to folder and try to figure out what -pron- be look for and when -pron- find something that may be -pron- then go to build folder and edit file and add some to find out if -pron- be on the right track
[2015-10-23T19:43:07.958Z]	<MartyIX>	editing in a plaintext editor be very easy and -pron- do need to recompile anything
[2015-10-23T19:45:17.006Z]	<MartyIX>	for -pron- specific issue i think -pron- be good to check out the follow two file reading of a ts file and emit final file
[2015-10-23T19:46:44.932Z]	<MartyIX>	-pron- be welcome
--------------------------------------------------------------------------------------------------
[2015-10-23T23:45:36.134Z]	<joostverdoorn>	hey there -pron- get a question why can i do the follow type a a number type b b number type c a b function a b function b a function c c if a in x return b return a see this do typecheck at line error overload signature be not compatible with function implementation i know this can be fix set the return type of the final declaration to any but i wonder why c be a valid return type as well
--------------------------------------------------------------------------------------------------
[2015-10-24T14:03:44.607Z]	<removed~kataras>	hello i have a problem use global variable inside -pron- namespace in meteor app use typescript
[2015-10-24T14:04:11.566Z]	<removed~kataras>	i have a class which i want to compile to home function not to var home function
[2015-10-24T14:04:26.887Z]	<removed~kataras>	i know i can do -pron- like declare var homestatic home
[2015-10-24T14:04:29.697Z]	<removed~kataras>	be there any way
[2015-10-24T14:06:40.036Z]	<removed~kataras>	or show -pron- where can i change the tsc compiler code in order to fix -pron- for meteor app
--------------------------------------------------------------------------------------------------
[2015-10-24T14:18:09.156Z]	<gsong>	what the proper way to import something like jquery in typescript -pron- struggle to figure out the syntax
--------------------------------------------------------------------------------------------------
[2015-10-24T17:32:34.536Z]	<lucamorelli>	how can i debug a ts application that use aurelia and from vs -pron- use visual studio to develop and application but vs do stop at breakpoint
[2015-10-24T19:33:20.394Z]	<patwritescode>	make sure -pron- map file be be generate and then set breakpoint in whichever browser dev tool -pron- be use do set breakpoint in
[2015-10-24T19:37:42.058Z]	<lucamorelli>	ok
[2015-10-24T19:37:52.093Z]	<lucamorelli>	thank
[2015-10-24T21:43:18.364Z]	<cjbarre>	so when i need to change a test i need to do the full jake runtest before diff then baseline accept
[2015-10-25T12:32:23.663Z]	<daniele-zurico>	morning all guy someone of -pron- use a good tool to generate documentation
[2015-10-25T12:38:58.830Z]	<daniele-zurico>	-pron- use typedoc but -pron- lack in something like -pron- do show the file in tree structure but -pron- flat
[2015-10-25T14:58:14.135Z]	<KeyurRamoliya>
[2015-10-25T17:21:03.628Z]	<gsong>	any idea why tsc be recognize document
[2015-10-25T17:21:22.620Z]	<gsong>	use late
[2015-10-25T17:21:49.629Z]	<gsong>	error can not find name document
[2015-10-25T18:14:59.058Z]	<electricessence>	typedoc ftw work awesome what -pron- be do be use -pron- to generate documentation to a folder call documentation who a thunk that folder be in the for that branch but then i have a gh page branch that documentation live in which then allow -pron- to publish the documentation straight to github -pron- need to add a file to the root and viola -pron- work
[2015-10-25T18:16:03.247Z]	<electricessence>	 <user> the owner of the project be pretty quick to respond to issue
[2015-10-25T18:46:56.366Z]	<electricessence>	apparently mix the return type be the issue just use c as the return type the signature can enforce that
[2015-10-25T19:25:48.589Z]	<scottwio>	any one know how to get vs code to pick up file inside on the folder
[2015-10-26T00:32:30.703Z]	<mike-morr>	i be convert an electron boilerplate to ts and -pron- be understandably tell -pron- -pron- can find a module for this line of code import style from
[2015-10-26T00:32:50.861Z]	<mike-morr>	try to figure out how to get around that
[2015-10-26T00:40:12.699Z]	<jbrantly>	what be -pron- use to bundle
[2015-10-26T00:41:30.109Z]	<jbrantly>	actually -pron- probably do matter the answer be likely to use var style
[2015-10-26T00:41:42.287Z]	<mike-morr>	webpack
[2015-10-26T00:41:50.573Z]	<jbrantly>	note to self i really need to find the time to write up a blog post about this
[2015-10-26T00:42:12.853Z]	<jbrantly>
[2015-10-26T00:43:19.292Z]	<mike-morr>	thank while i have -pron-
[2015-10-26T00:43:47.150Z]	<mike-morr>	do -pron- know why ts loader be output ts error with both relative and absolute url
[2015-10-26T00:44:05.755Z]	<jbrantly>	probably a case issue funny i recently run into that -pron-
[2015-10-26T00:44:49.389Z]	<jbrantly>	so if in one file -pron- import and in another -pron- use then thing get funky
[2015-10-26T00:45:30.105Z]	<jbrantly>	there be some support come in ts to detect that so that be the long term answer do have the issue handy but -pron- out there
[2015-10-26T00:45:32.776Z]	<mike-morr>	i write a problem matcher and none of the file link be work
[2015-10-26T00:46:03.617Z]	<mike-morr>	-pron- check -pron- code for that
[2015-10-26T12:16:47.173Z]	<slikts>	be there some way to reflect on an interface at runtime -pron- like to serlialize unserialize an object base on the interface
[2015-10-26T15:15:15.387Z]	<grofit>	in other libs when i have have issue like this normally i would do import as enumerable from linq
--------------------------------------------------------------------------------------------------
[2015-10-24T23:55:40.539Z]	<theduke>	hey guy could anyone help -pron- out with this
--------------------------------------------------------------------------------------------------
[2015-10-25T18:52:43.916Z]	<joostverdoorn>	that kind of disappointing why should this work be any there philosophical downside
--------------------------------------------------------------------------------------------------
[2015-10-26T00:55:18.503Z]	<jbrantly>	fwiw i open for that
[2015-10-26T00:55:29.142Z]	<mike-morr>	thank
[2015-10-26T01:24:17.751Z]	<electricessence>	i do have a solid answer for -pron- other than -pron- still javascript under the hood -pron- be not true overload like c or other language declare one type parameter that  <user> change the output type be guarantee so -pron- basically say nice try that say when the more update user typeguard come out this may actually work but until then -pron- guess the typescript compiler can not assert the type because there be really any aside from all that i would never recommend have a divergent return type -pron- should simply change the name of the method slightly and then return only the type -pron- expect imo declare -pron- intention through how the method work be well than have a single function that do all the magic
[2015-10-26T15:12:19.899Z]	<jbrantly>	be -pron- run ts targeting or
[2015-10-26T15:20:27.515Z]	<jbrantly>	i think though to support the import as enumerable from linq case -pron- need to change the so to that the export currently in enumerablestatic be instead top level export of the module
--------------------------------------------------------------------------------------------------
[2015-10-26T14:19:08.808Z]	<brunolm>	be -pron- possible to use on visual studio community project instead of the project setting to compile on save and build
[2015-10-26T14:57:08.443Z]	<grofit>	anyone have any success use linqj linq on npm via typescript with module syntax
[2015-10-26T14:58:11.563Z]	<grofit>	i be try import enumerablestatic as enumerable from linq with the off definitely type but -pron- just fail to resolve the type correctly even after set the file for linq to expose via declare module linq oppose to -pron- normal one
[2015-10-26T15:04:26.929Z]	<jbrantly>	be -pron- try to use enumerable in a type position or in a value position
[2015-10-26T15:07:02.264Z]	<grofit>	as a static
[2015-10-26T15:07:16.379Z]	<grofit>	the usage be normally
[2015-10-26T15:08:56.150Z]	<grofit>	so a real use case could be return x return
[2015-10-26T15:09:51.728Z]	<grofit>	i originally use fromjs as -pron- be more succinct but do not have a and i do not have time to make one i have sugarjs for some stuff as that have the same sort of method for any where etc but some of the other like singleordefault be not on -pron-
[2015-10-26T15:10:05.296Z]	<grofit>	so i think i would try revisit and fix up the but -pron- just not play ball
[2015-10-26T15:13:18.849Z]	<grofit>	the output target be
[2015-10-26T15:14:06.211Z]	<jbrantly>	in that case easy way be to not use import syntax use import enumerable -pron- still need to change the slightly
[2015-10-26T15:14:07.747Z]	<grofit>	common to be specific
[2015-10-26T15:14:26.585Z]	<grofit>	the import syntax work fine for other libs
[2015-10-26T15:14:55.307Z]	<grofit>	assume i do want the easy way and i want to support syntax
[2015-10-26T15:16:01.512Z]	<grofit>	i have multiple output in mind as i be try system module output but -pron- seem a bit sketchy so i just turn that off and stick with common for now
[2015-10-26T15:17:50.339Z]	<jbrantly>	the answer then be -pron- depend on what -pron- use to do -pron- module loading and if -pron- use another transpiler and exactly how -pron- want to be able to use -pron- import statement like if -pron- want to be able to support a default export or not
[2015-10-26T15:18:11.541Z]	<grofit>	well this be an interesting topic and without muddy the context
[2015-10-26T15:18:14.298Z]	<grofit>	-pron- be load multiple way
[2015-10-26T15:19:28.990Z]	<grofit>	on node js -pron- use require on client -pron- may use jspm not entirely sure which module loader to use atm
[2015-10-26T15:22:16.113Z]	<jbrantly>	so instead of typescript declare module linq interface enumerablestatic choice content t enumerable t choice t enumerable t -pron- use typescript declare module linq export function choice content t enumerable t export function choice t enumerable t
[2015-10-26T15:27:37.704Z]	<grofit>	yeah i may just do that
[2015-10-26T15:27:47.924Z]	<grofit>	i do not mind hack up the file to use the syntax
[2015-10-26T15:27:58.628Z]	<grofit>	i be just wonder if anyone else have already do -pron- save -pron- re tread the same ground
--------------------------------------------------------------------------------------------------
[2015-10-26T15:35:56.426Z]	<jbrantly>	most of the definition on definitely type be not -pron- a big problem area right now imo
[2015-10-26T15:38:47.735Z]	<grofit>	yeah
[2015-10-26T15:39:14.359Z]	<chilversc>	i think tsd  <user> have to support target different platform so -pron- can pull in the correct def for the platform -pron- use
[2015-10-26T15:39:15.185Z]	<grofit>	the syntax make everything nice in the js world so sooner everyone adopt -pron- the well
[2015-10-26T15:41:40.251Z]	<jbrantly>	there  <user> the issue of maintainability of definition not have to duplicate stuff for instance so there be some onus on typescript to better support the situation as well imo
[2015-10-26T15:43:49.124Z]	<grofit>	i have the same issue with chance js
[2015-10-26T15:43:57.449Z]	<grofit>	but again not much i can do other than just hack up the file
--------------------------------------------------------------------------------------------------
[2015-10-26T19:44:44.436Z]	<mikedon>
--------------------------------------------------------------------------------------------------
[2015-10-26T20:34:21.841Z]	<cantide5ga>	-pron- like some thought on how to structure code in this scenario example -pron- like to extend a class define in the google maps type definition in a way that the compile code  <user> represent the extension upon callback of the asynchronously load google maps api script how be this usually deal with do that make any sense
[2015-10-26T21:55:26.887Z]	<DanielRosenwasser>	-pron- mean that -pron- be load a module asynchronously and -pron- like to extend a class in the module after loading correct
[2015-10-26T22:08:00.012Z]	<DanielRosenwasser>	try create a type predicate that take a c and make -pron- implementation return any until -pron- get fix function c c be a return a in c
[2015-10-26T22:10:09.894Z]	<DanielRosenwasser>	do -pron- figure out issue on import syntax  <user> what about use document october microsoft
[2015-10-26T22:10:21.183Z]	<DanielRosenwasser>	what kind of flag be -pron- pass in
[2015-10-26T22:10:45.507Z]	<cjbarre>	function node void what be an example of a decorator
[2015-10-26T22:10:50.977Z]	<cjbarre>	markdown fail
[2015-10-26T22:15:53.598Z]	<DanielRosenwasser>	first off -pron- may help to take a look at the describe type of decorator
[2015-10-26T22:17:33.074Z]	<DanielRosenwasser>	here check this post out
[2015-10-26T22:18:13.605Z]	<cjbarre>	thank smile
[2015-10-26T22:23:59.137Z]	<DanielRosenwasser>	no problemo
[2015-10-26T22:43:22.373Z]	<gsong>	i think the issue with document be a vsc problem when i switch to atom the error go away so i think vsc be report false positive
[2015-10-26T22:43:54.268Z]	<gsong>	i plan on do a talk about -pron- here perhaps at the ts meetup
[2015-10-26T22:44:59.694Z]	<gsong>	for -pron- -pron- be definitely quite the learn curve to get the infrastructure set up around typescript and understand how all the piece fit together
[2015-10-26T22:45:19.489Z]	<gsong>	-pron- talk be just in time to at least lead -pron- down the right direction
[2015-10-26T22:51:03.596Z]	<gsong>	n m the readme have update -pron- yet
--------------------------------------------------------------------------------------------------
[2015-10-26T22:42:14.469Z]	<gsong>	nice to see -pron- i convert a babel project to ts over the weekend
[2015-10-26T22:42:53.521Z]	<DanielRosenwasser>	nice any interesting detail in -pron- experience
[2015-10-26T22:48:10.507Z]	<DanielRosenwasser>	smile that really awesome to hear -pron- not sure whether the last talk be definitely go to be the last talk of the year but -pron- be worth ping and
[2015-10-26T22:49:28.698Z]	<gsong>	-pron- go to round -pron- out with gulp build process for deployment as well
--------------------------------------------------------------------------------------------------
[2015-10-26T22:51:23.173Z]	<kenhowardpdx>	-pron- be open to have -pron- present -pron- will be do anything in nov dec due to holiday and crazy schedule
[2015-10-26T22:52:24.368Z]	<gsong>	no worry that give -pron- some time to prepare -pron- be a jspm gulp workflow base typescript experience around angular
[2015-10-26T22:53:00.921Z]	<kenhowardpdx>	have -pron- run into issue where ts do down level to that -pron- augment -pron- with babel that be interesting to see too
[2015-10-26T22:53:29.392Z]	<gsong>	no i do run into that issue
[2015-10-26T22:54:15.847Z]	<DanielRosenwasser>
[2015-10-26T22:54:32.746Z]	<gsong>	when would the next open slot be for presentation
[2015-10-26T22:55:06.431Z]	<DanielRosenwasser>	by the way i just try use vs code with document maybe check for update if -pron- still run into -pron- let -pron- know
[2015-10-26T22:55:18.859Z]	<kenhowardpdx>	-pron- talk with and see if january be open -pron- be think of do a hack night to start off the year but maybe -pron- do this instead
[2015-10-26T22:55:48.750Z]	<gsong>	-pron- work in a very simple project but for whatever reason -pron- would not recognize document or on this project
[2015-10-26T22:57:32.806Z]	<cjbarre>	do -pron- use vs or vsc when work on the compiler
[2015-10-26T22:57:50.734Z]	<kenhowardpdx>	-pron- likely be do something similar with webpack angular typescript so -pron-  <user> be nice to compare note
[2015-10-26T22:58:44.018Z]	<gsong>	sweet
[2015-10-26T23:06:35.382Z]	<gsong>	overall -pron- be a bit frustrating but once i get -pron- -pron- be a lot more smooth sailing
[2015-10-26T23:19:36.792Z]	<DanielRosenwasser>	i personally use vs but -pron- have people work in vs code and sublime
--------------------------------------------------------------------------------------------------
[2015-10-26T23:19:55.019Z]	<cjbarre>	good debugging experience
[2015-10-26T23:21:00.244Z]	<DanielRosenwasser>	i typically just debug -pron- language service and visual studio lend a pretty sweet experience for that but that do use the node debugger
[2015-10-26T23:21:32.282Z]	<DanielRosenwasser>	-pron- use windows script debugger
[2015-10-26T23:21:52.006Z]	<DanielRosenwasser>	either vs or vscode be great option for debug node
[2015-10-26T23:22:31.018Z]	<DanielRosenwasser>	vscode have -pron- build in vs have the tool plugin
[2015-10-26T23:23:15.314Z]	<cjbarre>	ah -pron- be use vscode but have try debug yet but i do think -pron- get far in -pron- understanding of the compiler with out -pron- at this point
--------------------------------------------------------------------------------------------------
[2015-10-27T06:11:43.924Z]	<LPGhatguy>	what the good way to signal via that api  <user> be available at runtime without target
[2015-10-27T06:11:58.718Z]	<LPGhatguy>	i figure -pron- be some variation of reference but i can figure out how to actually reference -pron-
--------------------------------------------------------------------------------------------------
[2015-10-27T06:37:05.375Z]	<RamaMuthukrishnan>	hi all i be confused about custom attribute in aurelia anybody guide -pron- how to use -pron- in typescript transpiler
[2015-10-27T07:10:48.352Z]	<LPGhatguy>	eh i guess i can use typescript lib for now
[2015-10-27T07:11:10.558Z]	<LPGhatguy>	be there a recommend design pattern when -pron- build a generic class that need the type for both type hinting and runtime shenanigan
[2015-10-27T07:11:25.230Z]	<LPGhatguy>	-pron- not a fan so far of derive
--------------------------------------------------------------------------------------------------
[2015-10-27T08:27:48.821Z]	<DanielRosenwasser>	-pron- could use the definition file for
[2015-10-27T08:28:13.485Z]	<DanielRosenwasser>	can -pron- explain what -pron- mean by derive
--------------------------------------------------------------------------------------------------
[2015-10-27T09:59:48.435Z]	<chilversc>	so -pron- can install a new version of typescript to get the bug fix for thing like vs integration but target the old version for language feature
[2015-10-27T10:20:44.559Z]	<chilversc>	 <user> be there any simple way to automatically link the output file to the source file in vs so that if -pron- delete the source file the output be  <user> remove
[2015-10-27T12:19:51.214Z]	<chilversc>	be there a short cut to define a getter on an object in the same way -pron- can do return valid or only make valid a property instead
[2015-10-27T12:47:47.529Z]	<gsong>	 <user> within a getter or setter this refer to the object
[2015-10-27T12:55:29.477Z]	<gsong>	i do understand let x a get b return
[2015-10-27T12:55:57.364Z]	<gsong>	what be -pron- say about
[2015-10-27T13:01:29.351Z]	<chilversc>	class foo a function test var self this return get b return
[2015-10-27T13:04:35.443Z]	<chilversc>	and more when work with say angular controller a short cut for class foo a any a enumerable true get
[2015-10-27T13:14:49.268Z]	<gsong>	class foo constructor test return b
[2015-10-27T13:15:21.040Z]	<chilversc>	that copy the value though rather than create a property that always reflect foo value
[2015-10-27T13:16:47.184Z]	<gsong>	so in the context of the foo class say -pron- instantiate a foo object what be -pron- try to do
[2015-10-27T13:16:56.962Z]	<chilversc>	b copy the value of a while get b return give -pron- property that always return the value of a
[2015-10-27T13:18:39.212Z]	<gsong>	i think that a really strange pattern to emit an object which have dependency of -pron- value on another object
[2015-10-27T13:19:07.171Z]	<gsong>	why would -pron- just query the foo object to begin with
[2015-10-27T13:19:29.585Z]	<chilversc>	i be look to build filter object to project a read only interface for certain consumer
[2015-10-27T13:21:20.304Z]	<chilversc>	i do but foo  <user> have other method and setter i want to create a separate object such as a view model that only have a sub set of those property
--------------------------------------------------------------------------------------------------
[2015-10-27T12:38:41.833Z]	<gsong>
[2015-10-27T12:41:26.341Z]	<chilversc>	so no arrow which mean back to use good old self var self this return get valid return
[2015-10-27T12:41:47.200Z]	<chilversc>	can see any shortcut to set a property on an exist object though
[2015-10-27T12:44:54.632Z]	<gsong>	what do -pron- mean -pron- just set -pron-
[2015-10-27T12:48:01.725Z]	<gsong>	so no trickery need
[2015-10-27T12:49:07.684Z]	<chilversc>	yes but that return a new object that contain a property that refer to the current this
[2015-10-27T12:49:34.949Z]	<chilversc>	likewise with the scope example -pron- would be add a property to scope that refer to the current this
[2015-10-27T13:14:55.756Z]	<gsong>	be that what -pron- go after
[2015-10-27T13:16:05.945Z]	<gsong>	what copy what value
[2015-10-27T13:16:10.105Z]	<chilversc>	i be look to see if there be a short expression for set property on exist object and define a property on a new object that use arrow function
--------------------------------------------------------------------------------------------------
[2015-10-27T13:20:17.037Z]	<gsong>	so why not just have getter on foo directly why emit another object
[2015-10-27T13:21:48.989Z]	<gsong>	what the reason for do that
[2015-10-27T13:21:58.959Z]	<gsong>	-pron- do trust the other person use the object
[2015-10-27T13:22:15.853Z]	<cantide5ga>
[2015-10-27T13:22:50.843Z]	<gsong>	-pron- try to understand the use case as -pron- not come across this pattern
[2015-10-27T13:23:01.424Z]	<cantide5ga>	that be exactly -pron-
[2015-10-27T13:24:36.673Z]	<cantide5ga>	-pron- mean that -pron- be load a module asynchronously and -pron- like to extend a class in the module after loading correct
[2015-10-27T13:25:00.116Z]	<gsong>	if -pron- specifically talk about angular the way i would approach -pron- be to have -pron- mutable datum store in a service and then -pron- can construct whatever object or class -pron- want around that datum
[2015-10-27T13:27:58.619Z]	<gsong>	i think -pron- good bet be to use a service to hold datum that need to be share among different object within angular
[2015-10-27T13:28:01.113Z]	<gsong>	imo
--------------------------------------------------------------------------------------------------
[2015-10-27T13:25:06.859Z]	<chilversc>	i have a controller and a view model the controller have a busy property that -pron- use for -pron- internal logic eg if busy return to guard method but i  <user> want to expose that same value on the view model the view model do not exactly match the controller
[2015-10-27T13:26:21.633Z]	<chilversc>	by use a property the value stay in sync otherwise -pron- need a function but that would break a view that be expect a simple field
[2015-10-27T13:26:58.828Z]	<chilversc>	or -pron- have to have the controller check if return or -pron- have to make sure that both and remain in sync
--------------------------------------------------------------------------------------------------
[2015-10-27T13:35:56.070Z]	<LabEG>	where be i can find tool for generate update jsdoc in typescript file
[2015-10-27T14:33:46.293Z]	<jbrantly>	may be useful
--------------------------------------------------------------------------------------------------
[2015-10-27T13:49:46.455Z]	<cantide5ga>	et al actually this be a script that do a callback once -pron- be finish load in this case -pron- be googlemap -pron- like some thought on how to structure code in this scenario example -pron- like to extend a class define in the google maps type definition in a way that the compile code  <user> represent the extension upon callback of the asynchronously load google maps api script how be this usually deal with do that make any sense create a class on the root scope like the below create js that fail on page load because the script have yet fully load this be understandable class htmloverlay extend in pure js i resolve this issue by declare the htmloverlay function outside of any closure then call an additional function to extend the prototype once be define function htmloverlay function initcustomoverlay function new any suggestion for how to design this in typescript
[2015-10-27T14:17:54.197Z]	<chilversc>	would -pron- just asynchronously load -pron- script as well that way -pron- only load -pron- script once overlayview be available
[2015-10-27T14:32:31.693Z]	<cantide5ga>	thank for the suggestion i think that would work too what -pron- try now be to put the class in a function and return the class i do know this be support perhaps -pron- hacky and would appreciate feedback if a well way exist something like let initcustomoverlay any class htmloverlay extend return htmloverlay var htmloverlay function ondefinedgooglemap htmloverlay initcustomoverlay new htmloverlay this be create -pron- object correctly now though not yet jive with the api maybe suggestion be the well way
[2015-10-27T15:16:48.314Z]	<cantide5ga>	unfortunately the transpiled js code be the same as in -pron- original example when extend -pron- outright the prototype inheritance happen on root scope however -pron- do help to clean up -pron- current go and get rid of redundancy let htmloverlay class htmloverlay extend return htmloverlay new htmloverlay
--------------------------------------------------------------------------------------------------
[2015-10-27T16:01:51.372Z]	<electricessence>	chime in
[2015-10-27T16:02:52.492Z]	<chilversc>	well clearly -pron- have to be the static type checking since just about everything else be
[2015-10-27T16:54:54.286Z]	<JKillian>	be the whitespace rule for jsx document anywhere
[2015-10-27T16:58:30.390Z]	<cantide5ga>	hate to spam but the above be wrong should be let htmloverlay class htmloverlay extend return htmloverlay new class constructor note the difference in instantiation this feel hacky again put makeup on -pron- do make -pron- too bad let htmloverlayfactory class htmloverlay extend return htmloverlay var htmloverlay function ondefinedgooglemap htmloverlay htmloverlayfactory new htmloverlay still open to suggestion but thank for all the help for now
[2015-10-27T16:59:34.827Z]	<JKillian>	specifically whitespace in jsx as handle by typescript
[2015-10-27T17:09:30.666Z]	<jbrantly>	-pron- not sure if -pron- document anywhere however i believe ts want to try to stay in alignment with the official stuff which be currently babel if -pron- notice a difference in whitespace handle between babel and typescript -pron- probably like a report
[2015-10-28T00:54:01.775Z]	<gsong>
--------------------------------------------------------------------------------------------------
[2015-10-27T17:21:24.530Z]	<JKillian>	thank i think that make sense for typescript by chance do -pron- know if babel or whoever be most official document -pron- anywhere i be able to find a helpful blog quick look at render white space use jsx in by somebody look for a place to link people who have question about whitespace behavior
[2015-10-27T17:22:53.678Z]	<jbrantly>	-pron- only aware of
[2015-10-27T17:23:16.355Z]	<jbrantly>	which do seem to talk much about whitespace in particular
[2015-10-27T17:24:50.865Z]	<JKillian>	no unfortunately not ha can figure out the appropriate emoticon here
[2015-10-28T00:53:27.711Z]	<DanielRosenwasser>	 <user> what target module and moduleresolution flag be -pron- use do -pron- import use a path begin with or
[2015-10-28T00:54:44.239Z]	<gsong>	this be for gulp
--------------------------------------------------------------------------------------------------
[2015-10-27T19:50:39.248Z]	<RyanCavanaugh>	i be  <user> unable to find whitespace documentation the typescript implementation attempt to match the behavior of the online jsx compiler in term of whitespace elide preservation
[2015-10-27T19:52:35.768Z]	<RyanCavanaugh>	basically -pron- take each line as -pron- see -pron- and trim each line except for the rule that the start and end tag be special endpoint that prevent trim
[2015-10-27T19:52:56.147Z]	<RyanCavanaugh>	so div have significant whitespace but div do not
[2015-10-27T19:56:59.634Z]	<JKillian>	the issue i have encounter be with code like this html p a sentence span a span on the next -pron- a little unexpected how -pron- have to put the literal space in there to get proper spacing
[2015-10-27T20:00:29.219Z]	<RyanCavanaugh>	yea i do know why -pron- remove trail whitespace on a line
[2015-10-27T20:01:05.364Z]	<RyanCavanaugh>	remove leading whitespace make sense because indent though arguably trail whitespace be invisible and should thus be consider irrelevant
[2015-10-27T20:01:50.026Z]	<JKillian>	i guess either way have -pron- pitfall -pron- would be confusing if invisible whitespace have meaning but -pron-  <user> confusing to have the behavior differ from what -pron- expect in html
[2015-10-28T00:33:59.147Z]	<gsong>	use the language service which i assume be what atom typescript be do compile successfully error
[2015-10-28T00:34:20.655Z]	<gsong>	and tsc be complain about not be able to find a local relative pathed module
[2015-10-28T00:36:15.199Z]	<gsong>	tsc
[2015-10-28T00:39:32.596Z]	<DanielRosenwasser>	may  <user> know something about any difference in behavior
[2015-10-28T00:41:59.749Z]	<gsong>	error can not find module config
[2015-10-28T00:58:03.009Z]	<gsong>	ok give -pron- min and i should have something for -pron- to try
[2015-10-28T01:07:21.179Z]	<gsong>	be sure to use the build branch
[2015-10-28T01:07:42.605Z]	<gsong>	-pron- just try to compile the in root of the project
--------------------------------------------------------------------------------------------------
[2015-10-27T23:19:57.732Z]	<ReubenBond>	newbie question  <user> be non experimentally available in the next typescript release i see a bunch of async relate issue in the milestone but have no milestone assign
[2015-10-27T23:20:22.015Z]	<DanielRosenwasser>	async await  <user> be available when target
[2015-10-27T23:20:42.874Z]	<DanielRosenwasser>	which currently mean -pron-  <user> work on node and any runtime that support generator
[2015-10-27T23:22:39.127Z]	<ReubenBond>	i see thank -pron- so currently that mean -pron-  <user> probably work on recent build of chrome ff but not edge
[2015-10-28T00:02:41.732Z]	<DanielRosenwasser>	actually i do think that necessarily true
[2015-10-28T00:02:42.853Z]	<DanielRosenwasser>	one second
[2015-10-28T00:05:56.299Z]	<DanielRosenwasser>	take a look at this blog post from the edge asynchronous code get easy with function support in chakra and microsoft to enable and experiment with the current async function support in microsoft edge navigate to about flag in microsoft edge and select the enable experimental javascript feature flag as below
[2015-10-28T00:06:53.977Z]	<DanielRosenwasser>	so not only do edge support generator in experimental mode but -pron-  <user> support
[2015-10-28T00:07:14.524Z]	<DanielRosenwasser>	though i guess -pron- mean that -pron- do want the user to have to turn -pron- on
[2015-10-28T00:33:46.611Z]	<DanielRosenwasser>	no prob
[2015-10-28T00:33:54.507Z]	<DanielRosenwasser>	where be -pron- see that
[2015-10-28T00:34:55.600Z]	<DanielRosenwasser>	that may be atom specific issue or a versioning issue
[2015-10-28T00:35:41.325Z]	<DanielRosenwasser>	do -pron- see the same issue in vscode sublime or another editor
[2015-10-28T00:35:51.661Z]	<DanielRosenwasser>	not entirely sure what version of the atom plugin be -pron- use and which version of typescript be -pron- use
[2015-10-28T00:36:05.722Z]	<DanielRosenwasser>	 <user> what the complaint from tsc
[2015-10-28T00:39:12.570Z]	<DanielRosenwasser>	what the specific error -pron- get
[2015-10-28T00:49:21.720Z]	<DanielRosenwasser>	would -pron- be able to share the project at all
[2015-10-28T00:49:52.363Z]	<DanielRosenwasser>	alright -pron- be easy to help then
[2015-10-28T00:56:49.654Z]	<DanielRosenwasser>	i wonder if this be relate
[2015-10-28T00:57:06.164Z]	<DanielRosenwasser>	until i can try the project out i can be sure
--------------------------------------------------------------------------------------------------
[2015-10-28T00:14:54.966Z]	<cjbarre>	be there a helper function for check if a node have a static modifi or should check manually
[2015-10-28T00:31:59.602Z]	<ReubenBond>	thanks
[2015-10-28T00:32:30.732Z]	<ReubenBond>	though i guess -pron- mean that -pron- do want the user to have to turn -pron- on i do mean that but this at least mean -pron- come soon to a browser near -pron-
[2015-10-28T00:33:30.499Z]	<gsong>	-pron- see inconsistent behavior between the service and tsc
[2015-10-28T00:35:25.853Z]	<gsong>	hmm any idea why tsc would complain about a relative pathed import
[2015-10-28T00:38:14.195Z]	<gsong>	atom typescript
[2015-10-28T00:38:32.784Z]	<gsong>	vsc have the same complaint
[2015-10-28T00:49:31.536Z]	<gsong>	in a bit yes
[2015-10-28T00:51:28.043Z]	<cjbarre>	ah node flag
[2015-10-28T00:54:31.712Z]	<gsong>	target be
[2015-10-28T00:54:39.062Z]	<gsong>	no moduleresolution set
--------------------------------------------------------------------------------------------------
[2015-10-28T00:58:09.465Z]	<gsong>	do -pron- have atom instal
[2015-10-28T01:07:15.786Z]	<gsong>	ok here -pron- be
[2015-10-28T01:11:57.560Z]	<gsong>	n m -pron- module resolution
--------------------------------------------------------------------------------------------------
[2015-10-28T01:24:44.330Z]	<gsong>	interesting atom typscript generate cjs export even though target
--------------------------------------------------------------------------------------------------
[2015-10-28T01:38:48.191Z]	<cjbarre>	woohoo so check for the static modifi
--------------------------------------------------------------------------------------------------
[2015-10-28T03:23:20.415Z]	<LPGhatguy>	i want to call a method to generate a mixin since that still do have language support
[2015-10-28T03:23:53.145Z]	<LPGhatguy>	so to do that -pron- pass in the type to generate the signature with union type and pass in the type -pron- to do the actual mixing
[2015-10-28T03:24:23.870Z]	<LPGhatguy>	which require -pron- to do thing like mix firstclass secondclass which be no fun
[2015-10-28T06:24:44.000Z]	<DanielRosenwasser>	-pron- have to see the type of mix as -pron- stand
[2015-10-28T07:23:21.605Z]	<DanielRosenwasser>	atom be use ntypescript which be basically a slightly modify version of -pron- nightlie
[2015-10-28T07:23:47.344Z]	<DanielRosenwasser>	so -pron- possible that -pron- see behavior that  <user> be fix in
[2015-10-28T07:25:16.974Z]	<DanielRosenwasser>	if -pron- install and set in -pron- personal user preference to the appropriate folder -pron- may see the appropriate change
--------------------------------------------------------------------------------------------------
[2015-10-28T12:26:00.117Z]	<gsong>	good to know
--------------------------------------------------------------------------------------------------
[2015-10-28T13:01:55.004Z]	<cjbarre>	where do declaration merging occur in the compiler
[2015-10-28T13:26:24.503Z]	<alfrescian>	hi guy -pron- a question regard good practice in large ts project when use -pron- use browser field to provide alias for -pron- own internal module to prevent import with relative path be there any good practice on how to prevent import with relative path for ts module src lib core export class a src lib ui somewhereelse import a from lib core
[2015-10-28T13:50:11.577Z]	<cjbarre>	be typescript influence by ceylon at all
--------------------------------------------------------------------------------------------------
[2015-10-28T16:12:23.517Z]	<chilversc>	-pron- should need to preserve the trail whitespace there though since the newline be consider as whitespace by html so html should trim that all down to a single space anyway thus the trimming should be equivalent to what html already do
[2015-10-28T16:14:22.782Z]	<JKillian>	oh good point the problem then be that jsx do insert a single space in place of the newline -pron- just get rid of -pron- all together
[2015-10-28T16:15:18.646Z]	<chilversc>	ah this bug or
[2015-10-28T16:17:03.832Z]	<chilversc>	look like jsx be be overly eager and consider all whitespace before after a tag as insignificant so do play nice with mixed content
[2015-10-28T16:18:48.007Z]	<chilversc>	seem jsx be track a few issue directly about whitespace and how -pron- should work as well
[2015-10-28T16:19:32.929Z]	<JKillian>	and there be  <user> this discussion awhile back
[2015-10-28T16:21:52.231Z]	<chilversc>	though i run in to this problem all the time in html as well want to split tag over multiple line for readability but that make a big change for vs li img text
--------------------------------------------------------------------------------------------------
[2015-10-28T16:42:26.382Z]	<kenhowardpdx>	why not use dirname import a from dirname lib core
[2015-10-28T16:53:27.390Z]	<alfrescian>	hopefully  <user> lead to a solution that  <user> be support by the different ide editor without any module bundler specific thing
[2015-10-28T16:54:46.075Z]	<kenhowardpdx>	i do realize this be a browser application i assume -pron- be use node sorry
[2015-10-28T16:57:27.960Z]	<alfrescian>	no prob i do mention -pron-
[2015-10-28T17:05:13.199Z]	<kenhowardpdx>	that -pron- editor do that typescript do care about -pron- format
[2015-10-28T17:06:26.963Z]	<chilversc>	oh i think that be handle by the format service
[2015-10-28T17:06:42.855Z]	<DanielRosenwasser>	-pron- depend what editor be -pron- use
[2015-10-28T17:06:49.601Z]	<chilversc>	visual sudio
[2015-10-28T17:07:02.459Z]	<DanielRosenwasser>	yup that a bug on -pron- end
[2015-10-28T17:07:42.130Z]	<DanielRosenwasser>	would -pron- mind file a bug
[2015-10-28T17:08:50.252Z]	<DanielRosenwasser>	declaration merging be perform within file in the binder and across file if necessary in the checker
[2015-10-28T17:09:17.350Z]	<DanielRosenwasser>	but that only happen if -pron- program do use module
[2015-10-28T17:09:17.823Z]	<chilversc>	 <user> do
[2015-10-28T17:10:43.455Z]	<kenhowardpdx>	srsly -pron- be battle that just think -pron- be a vs bug show how much i pay attention good find
[2015-10-28T17:12:24.207Z]	<chilversc>	yeah -pron- nice -pron- mean any editor can support typescript if -pron- can be plug in to the format service and -pron- get the same layout in -pron- all
--------------------------------------------------------------------------------------------------
[2015-10-28T16:51:06.723Z]	<alfrescian>	i just come across with describe the issue very well for now -pron- go with relative import in the module -pron- root base import when refer to other part via webpack import baseentity from lib core base entity model export class myentity extend baseentity import myentity from
[2015-10-28T17:04:06.941Z]	<chilversc>	typescript indentation for multi line object array be odd -pron- keep want to use function foo return -pron- would name test -pron- would name example
--------------------------------------------------------------------------------------------------
[2015-10-28T17:15:36.350Z]	<gsong>	the only non js external module that ts understand be
--------------------------------------------------------------------------------------------------
[2015-10-28T17:41:46.367Z]	<JKillian>	how do everyone like the wiki setup that typescript use on github i want to start make an up to date comprehensive wiki for tslint -pron- only hesitation be that github wiki do support prs do have a separate repo for the wiki work well
--------------------------------------------------------------------------------------------------
[2015-10-28T18:23:19.726Z]	<kenhowardpdx>	i think -pron- make sense to create a wiki repo and locally -pron- either push to -pron- public facing repo or to the gh wiki repo after prs be merge
--------------------------------------------------------------------------------------------------
[2015-10-28T18:31:36.332Z]	<JKillian>	i wish there be a pr system build in by default for wiki agree though i want a system where public contribution be possible
[2015-10-28T19:15:38.388Z]	<DanielRosenwasser>
[2015-10-28T19:16:49.155Z]	<DanielRosenwasser>	microsoft thumb microsoft blob
[2015-10-28T19:16:57.179Z]	<DanielRosenwasser>	so -pron- have that at the bottom of every wiki page
[2015-10-28T19:17:06.462Z]	<DanielRosenwasser>	but i do want -pron- to be super distracting
[2015-10-28T19:17:16.805Z]	<DanielRosenwasser>	which be why -pron- write like that
--------------------------------------------------------------------------------------------------
[2015-10-28T19:19:04.390Z]	<gsong>	do -pron- have a moment for a typing declaration question
[2015-10-28T19:20:03.956Z]	<gsong>	in ts i have to import the systemjs builder use the syntax import as builder from systemjs builder
[2015-10-28T19:20:25.784Z]	<gsong>	afaik i can locate the typing via tsd
[2015-10-28T19:20:39.368Z]	<gsong>	so -pron- write a little shim type file just to get by
[2015-10-28T19:21:08.036Z]	<gsong>	i have declare module systemjs builder export class builder string ouffile string string dst string option any
[2015-10-28T19:21:09.436Z]	<JKillian>	-pron- think -pron- may just go with github page instead of the wiki system and maintain everything all in the same repo although i think the two repo setup be a good decision if -pron- use the build in wiki
[2015-10-28T19:21:12.014Z]	<gsong>	but that do work
[2015-10-28T19:49:44.643Z]	<gsong>	i think i get -pron- actually
--------------------------------------------------------------------------------------------------
[2015-10-28T19:31:19.667Z]	<DanielRosenwasser>	-pron- do work at runtime or at compile time
[2015-10-28T19:31:29.147Z]	<DanielRosenwasser>	what be the issue -pron- run into
[2015-10-28T19:33:38.546Z]	<gsong>	i think -pron- export the wrong thing but not sure what -pron- suppose to be export
[2015-10-28T19:37:33.994Z]	<DanielRosenwasser>	how be -pron- import builder -pron- look like the package use a commonjs export package systemjs which -pron- can achieve with typescript declare module systemjs builder export class builder string ouffile string string dst string option any export builder that way -pron- can import -pron- use import require syntax typescript import builder builder new
[2015-10-28T19:39:00.376Z]	<DanielRosenwasser>	or if -pron- use a default export -pron- use typescript declare module systemjs builder export default class builder string ouffile string string dst string option any with typescript import builder from systemjs builder new
[2015-10-28T19:41:09.027Z]	<gsong>	i try the second case and that do work since -pron- transpile to
[2015-10-28T19:41:52.555Z]	<DanielRosenwasser>	yeah this package seem to be write mostly in a commonjs style
[2015-10-28T19:42:01.573Z]	<DanielRosenwasser>	afaict
[2015-10-28T19:46:45.833Z]	<gsong>	what the difference between declare module systemjs builder class builder string ouffile string string dst string option any export builder and declare module systemjs builder export class builder string ouffile string string dst string option any
[2015-10-28T19:46:55.140Z]	<gsong>	the top one work and the bottom one do
[2015-10-28T19:49:49.718Z]	<gsong>	thank for -pron- help
--------------------------------------------------------------------------------------------------
[2015-10-28T19:33:18.751Z]	<gsong>	work runtime but tsc complain can not use new with and expression whose type lack a call or construct signature
--------------------------------------------------------------------------------------------------
[2015-10-28T19:50:19.293Z]	<JKillian>	-pron- find this a helpful resource
[2015-10-28T19:52:00.613Z]	<gsong>	thank -pron- very helpful
[2015-10-28T19:52:34.157Z]	<gsong>	-pron- only familiar with style import and export so the ts syntax be trip -pron- up
[2015-10-28T19:52:47.135Z]	<gsong>	especially have to deal with cjs module
[2015-10-28T19:53:30.350Z]	<jbrantly>	may or may not be of help -pron- can ignore the webpack bit
[2015-10-28T19:53:47.095Z]	<gsong>	find the key phrase unlike default export declaration which be just shorthand for an export name default export equal declaration designate an entity to be export in place of the actual module
[2015-10-28T19:53:49.157Z]	<jbrantly>	but -pron- cover use in ts but interop with cjs
[2015-10-28T19:54:27.304Z]	<gsong>	that be the key of -pron- lack of understanding of what go on
[2015-10-28T19:54:51.402Z]	<gsong>	thank -pron-  <user> read that as well
[2015-10-28T19:55:11.403Z]	<gsong>	slowly but surely -pron- get this typing file stuff
--------------------------------------------------------------------------------------------------
[2015-10-28T21:19:33.210Z]	<OliverJAsh>	hi -pron- new to typescript -pron- use with typescript i want a type immutable record map an object call person with an interface of name string age number be this possible sorry if -pron- terminology be not entirely clear
[2015-10-28T21:51:04.766Z]	<chilversc>	-pron- look like already provide the definition and -pron- use generic
[2015-10-28T22:10:58.423Z]	<OliverJAsh>	can -pron- provide an example of how this be use -pron- still get -pron- head around the syntax of type definition file
[2015-10-28T22:11:03.799Z]	<OliverJAsh>	thank for -pron- reply
[2015-10-28T22:11:57.641Z]	<OliverJAsh>	i do some googling and end up copy but -pron- not sure i understand -pron-
[2015-10-28T22:29:10.878Z]	<chilversc>	-pron- just make sure that the type definition be correctly reference then -pron- should be able to use something like var map new number person
[2015-10-28T22:29:29.706Z]	<chilversc>	exactly how -pron- reference the other module depend on what module system -pron- use
[2015-10-28T22:35:36.043Z]	<OliverJAsh>	okay so -pron- try to get that work interface person name string age number var map number person name foo age not sure how this would work number person
[2015-10-28T22:37:37.040Z]	<chilversc>	neither be i since i use the immutable library but normally a map require a key and a value
[2015-10-28T22:42:47.014Z]	<chilversc>	-pron- may expect something like import immutable interface person name string age number var map number person name foo age where would be the key perhaps the person -pron- would
[2015-10-28T22:43:29.818Z]	<chilversc>	that first import line be go to depend on what module system -pron- use with typescript
--------------------------------------------------------------------------------------------------
[2015-10-28T22:46:20.254Z]	<DanielRosenwasser>	no problemo
--------------------------------------------------------------------------------------------------
[2015-10-28T22:52:52.918Z]	<basarat>	if -pron- have issue relate to atom -pron- always watch
--------------------------------------------------------------------------------------------------
[2015-10-28T23:42:09.588Z]	<ChristopherElliott>	this seem like a bug but not sure if -pron- be in msbuild target for tsc or tsc -pron- i have a single file and -pron- output to file include a source map however in the msbuild output i see the report generatedjavascript collection include and later in the build chain this cause an error because of the miss file
[2015-10-28T23:43:27.013Z]	<DanielRosenwasser>	-pron- have look into -pron-
[2015-10-29T00:06:23.329Z]	<ChristopherElliott>	thanks yeah look like the problem be definitely in if string str be hard code
[2015-10-29T07:46:25.770Z]	<grofit>	when -pron- have a file which export the module like declare module blah and internally contain export interface something
[2015-10-29T07:47:15.315Z]	<grofit>	if i want to extend something all i need to do be make -pron- own file and put in declare module blah export interface something var ace number right
[2015-10-29T07:48:33.082Z]	<grofit>	as i be extend express as -pron- augment the express app and request object through middleware but although the ide recognize the change the tsc do not
[2015-10-29T08:16:47.127Z]	<grofit>	i do not mean to add the var keyword there btw be on auto pilot
[2015-10-29T08:33:15.668Z]	<LPGhatguy>	mix signature be mix a a b b a b
[2015-10-29T08:33:38.969Z]	<LPGhatguy>	i switch -pron- to mix a a b new b a b i do believe
--------------------------------------------------------------------------------------------------
[2015-10-29T00:05:55.179Z]	<DanielRosenwasser>	i open up in the mean time -pron- can change -pron- jsx emit to react instead of preserve
--------------------------------------------------------------------------------------------------
[2015-10-29T09:13:50.922Z]	<OliverJAsh>	can anyone else -pron- with this issue i have use with typescript -pron- a beginner
[2015-10-29T10:58:06.683Z]	<chilversc>	be there any simple way to have the same set of interface share between multiple file in the same directory something similar to c an interface declare in the same namespace can just be use without any prefix -pron- try to avoid have to prefix every type with something arbitrary such as import as type from var x the good i can think of at the moment would be to explicitly import each type the file use import shape from var x shape
[2015-10-29T11:00:00.299Z]	<chilversc>	one annoyance i find with the import shape method be vs syntax highlighter stop highlight the symbol shape as an interface
[2015-10-29T11:01:50.733Z]	<chilversc>	i could use import as t from type shape but that just seem awkward though -pron- do highlight shape as a type again
[2015-10-29T11:21:56.267Z]	<DomBlack>	quick question do think -pron- possible though if i have an interface where everything be require typescript interface isomethe a string b string be there a way to creation a function like typescript isomething override isomething isomethe where the override object simply have to be a partial isomething not a complete one
[2015-10-29T11:59:18.757Z]	<chilversc>	nope -pron- have to be different type if -pron- do care so much about intellisense -pron- could declare override as any
[2015-10-29T12:02:59.498Z]	<chilversc>	be there a shortcut for export default as foo from
[2015-10-29T12:05:41.730Z]	<chilversc>	i be hope for say export foo from as -pron- follow the same pattern as import foo from
[2015-10-29T15:44:09.210Z]	<slikts>	i  <user> really really hate that the only time prototype come up in ts docs be in generate code sample js be a prototypal language with class only as syntactic sugar so why do ts pretend that -pron- a classical oo language
[2015-10-29T15:45:43.418Z]	<slikts>	if -pron- want to use a prototypal approach the doc be no help and -pron- leave with figure out what a target construct signature be on -pron- own
[2015-10-29T17:21:01.744Z]	<chilversc>
[2015-10-29T17:24:16.742Z]	<chilversc>	odd i have interface foo name string value number class bar implement foo name test var b new bar typescript show as an error which be annoying when implement an interface where some external function  <user> later create the optional value
[2015-10-29T17:26:31.156Z]	<chilversc>	i get this a lot with angular form bind -pron- like to avoid have to put a redundant form undefined in each file i  <user> find -pron- annoying that i can just use form undefined and have typescript infer form from the interface instead -pron- type -pron- as any
[2015-10-29T18:52:07.869Z]	<kenhowardpdx>	anyone know if this be a bug i have an interface call ifilter and i can dot into -pron- here the setup interface ifilter key string var filter ifilter name null isactive false if this part be fail a work around be use
[2015-10-29T19:54:51.604Z]	<JKillian>	-pron- interface only define index access
[2015-10-29T19:55:19.747Z]	<JKillian>	so that mean if -pron- have something type ifilter -pron- can only do
[2015-10-29T20:07:19.219Z]	<JKillian>	-pron- could make a second interface if -pron- want interface ifilter key string interface iuser name stre isactive boolean var filter ifilters iuser isactive false if yay
[2015-10-29T20:07:54.940Z]	<slikts>	ifilter user what be this call
[2015-10-29T20:29:21.600Z]	<JKillian>	interestingly a module that use export to export a non module entity in place of the module -pron- must be import use the exist import x syntax as be the case today from but perhaps that be out of date
--------------------------------------------------------------------------------------------------
[2015-10-29T13:44:41.452Z]	<jbrantly>	-pron- could try to resurrect
[2015-10-29T13:50:14.863Z]	<DomBlack>	even though that closed -pron- seem like be a replacement for -pron-
[2015-10-29T13:53:19.868Z]	<jbrantly>	awesome thank
[2015-10-29T13:53:28.732Z]	<jbrantly>	hope -pron- not dismiss this time around
--------------------------------------------------------------------------------------------------
[2015-10-29T15:24:22.552Z]	<slikts>	i wish ts do function overload properly instead of the current weird way i wish -pron- generate the argument type checking and call the right method
[2015-10-29T15:24:48.980Z]	<slikts>	the current way just look stupid and be valid anyway
--------------------------------------------------------------------------------------------------
[2015-10-29T20:00:44.655Z]	<slikts>	 <user> how do -pron- make sense to limit the notation in this case
[2015-10-29T20:00:52.780Z]	<kenhowardpdx>	yeah except the object have the property typescript should block -pron- from access the property just because the interface do include the property
[2015-10-29T20:03:22.932Z]	<JKillian>	all the compiler know about filter when -pron- try to do be the fact that filter follow the ifilter interface this mean all the compiler know be that -pron- be indexable
[2015-10-29T20:04:12.952Z]	<JKillian>	if -pron- want to disregard type checking -pron- can declare let filter any
[2015-10-29T20:04:46.571Z]	<JKillian>	of course -pron- lose a lot of the benefit of typescript then
[2015-10-29T20:06:14.889Z]	<JKillian>
[2015-10-29T20:08:33.447Z]	<JKillian>	type intersection sort of the opposite of type union the operator
[2015-10-29T20:08:50.595Z]	<JKillian>	-pron- mean that the variable implement both ifilter and iuser
[2015-10-29T20:09:31.125Z]	<JKillian>	i  <user> make the name field optional since -pron- be just declare -pron- to be null anyways
[2015-10-29T20:10:43.981Z]	<JKillian>	i believe then -pron- could  <user> do something like type user ifilters iuser let filter user
[2015-10-29T20:10:57.469Z]	<JKillian>	that make -pron- a little bit nicer imo
[2015-10-29T20:22:39.614Z]	<JKillian>
--------------------------------------------------------------------------------------------------
[2015-10-29T20:15:27.252Z]	<kenhowardpdx>	the point of ifilter be to have one definition for all the various property that may be add to -pron- create another interface specific to the object negate -pron- purpose of ifilter
[2015-10-29T20:18:31.912Z]	<JKillian>	i do understand what -pron- end goal be -pron- want typescript to do typechecking without ever declare type information beyond an index signature
[2015-10-29T20:20:37.776Z]	<JKillian>	or anyone else -pron- try to do -pron- mostly work well but -pron- struggle just a little bit thank for the article about ts and module btw
[2015-10-29T20:21:50.338Z]	<JKillian>	how would -pron- correctly import commonjs modules that declare -pron- export as function
[2015-10-29T20:25:46.865Z]	<kenhowardpdx>	have -pron- try import default as findup from findup sync
[2015-10-29T20:26:16.540Z]	<kenhowardpdx>	i have do any target so -pron- not sure if that work
[2015-10-29T20:28:11.967Z]	<JKillian>	that a good idea and should work i be kind of curious if there be a way to do thing without explicitly access the default field like that but regardless -pron- a good solution
[2015-10-29T20:31:49.092Z]	<kenhowardpdx>	further reading
[2015-10-29T20:34:10.433Z]	<JKillian>	if i try to do import findup sync i get this error import assignment can not be use when target ecmascript module consider use import as ns from mod import a from mod import d from mod or another module format instead
[2015-10-29T20:41:04.646Z]	<JKillian>	ha this be -pron- current solution to avoid type error import as findupsync from findup sync const findup any
--------------------------------------------------------------------------------------------------
[2015-10-29T21:03:05.078Z]	<slikts>	i do get -pron- the import work fine before but now -pron- suddenly do and i do even know what change
[2015-10-29T21:03:49.087Z]	<slikts>	-pron- say can not find module
--------------------------------------------------------------------------------------------------
[2015-10-29T21:04:10.976Z]	<JKillian>	-pron- see different behaviour in exist code -pron- have -pron- just try this all for the first time so i can say if there a new bug or not
[2015-10-29T21:04:32.653Z]	<JKillian>	be -pron- target i have to add the moduleresoultion node option
[2015-10-29T21:05:27.034Z]	<slikts>	what be moduleresolution
--------------------------------------------------------------------------------------------------
[2015-10-29T21:05:59.832Z]	<dsebastien>	a way to tell typescript how to look for dependency typing
[2015-10-29T21:06:28.002Z]	<dsebastien>	do anyone know if ts  <user> support jspm in addition to node moduleresolution
[2015-10-29T21:07:17.107Z]	<slikts>	moduleresolution do change anything
[2015-10-29T21:08:54.520Z]	<slikts>	and atom typescript be eff up as well -pron- target but -pron- do give -pron- the error about use import assignment
[2015-10-29T21:09:04.027Z]	<slikts>	while tsc do
[2015-10-29T23:18:27.956Z]	<DanielRosenwasser>	module that be export with be describe use a special export syntax
[2015-10-29T23:20:07.319Z]	<DanielRosenwasser>	-pron- be not compatible with the way default module be describe so -pron- would write import findup sync
[2015-10-29T23:20:55.601Z]	<DanielRosenwasser>	be -pron- use commonjs
[2015-10-29T23:39:48.258Z]	<kenhowardpdx>	i think this look better import findup
[2015-10-30T07:06:16.774Z]	<DanielRosenwasser>	sorry about that that should be fix by work in typescript -pron- be able to target while use commonjs modules
[2015-10-30T09:14:32.651Z]	<chilversc>	that sound like a webpack issue then with the way the react module be be bundle
--------------------------------------------------------------------------------------------------
[2015-10-30T00:01:25.746Z]	<JKillian>	i would do that but -pron- have typing for findup and that  <user> give a typing error then again i could probably just delete the typing since -pron- method ignore -pron-
[2015-10-30T00:02:05.094Z]	<JKillian>	tsc give -pron- an error when do import findup sync and try to target
[2015-10-30T01:03:32.372Z]	<kenhowardpdx>	how be -pron- define -pron- findup sync module in -pron- typing file i believe -pron- need to declare the module with quote for the old sync to map properly i could be mis speak but i think -pron- should be something like this declare module findup sync function findupsync export findupsync
[2015-10-30T01:09:31.437Z]	<JKillian>	be what -pron- use but the typing be actually work -pron- just the import method just do make -pron- line up
[2015-10-30T07:51:49.547Z]	<mike-morr>	i be have an issue with import react use webpack and typescript import as react from react typescript be perfectly happy with this but the react module do resolve after bundle get the error referenceerror react be not define at
--------------------------------------------------------------------------------------------------
[2015-10-30T11:17:30.604Z]	<fursad>	hi anyone know how i get the in typescript i be send a function as a parameter to a method in an another class in classb the name be just contain bind how can i fix that
[2015-10-30T12:41:28.554Z]	<grofit>	be descend into madness with a file which refuse to work
[2015-10-30T12:41:48.331Z]	<grofit>	can anyone confirm can -pron- use style import with file
[2015-10-30T12:42:41.441Z]	<grofit>	import foo from bar declare module express export interface application getfoo foo
[2015-10-30T12:43:20.990Z]	<grofit>	even if i be to use the reference style approach -pron- do not seem to fix -pron- issue but the ide seem to think this be fine
[2015-10-30T12:45:17.537Z]	<grofit>	as whenever i try to use this getfoo method -pron- just tell -pron- in tsc that -pron- do not exist on type application
[2015-10-30T12:47:01.974Z]	<grofit>	-pron- inclusion of express look like import request response application from express
[2015-10-30T12:49:12.849Z]	<chilversc>	do -pron- mean declare module express if -pron- use style module
[2015-10-30T12:54:51.234Z]	<grofit>	try that originally
[2015-10-30T12:54:52.470Z]	<grofit>	still fail
[2015-10-30T12:54:57.661Z]	<grofit>	 <user> try -pron- again now to confirm
[2015-10-30T12:55:23.224Z]	<grofit>	nope still fail
[2015-10-30T12:55:48.840Z]	<grofit>	at the top of the though -pron- have a section which be
[2015-10-30T12:56:02.940Z]	<grofit>	declare module express these open interface may be extend in an application specific manner via declaration merging see for example method export interface request export interface response export interface application
[2015-10-30T12:56:18.224Z]	<grofit>	so i move to try the express vs express inclusion neither work though
[2015-10-30T12:56:22.425Z]	<grofit>	and i know the be be include
[2015-10-30T12:56:26.765Z]	<grofit>	when -pron- building
[2015-10-30T12:56:41.587Z]	<grofit>	and -pron- just express other custom file be work fine
[2015-10-30T13:03:19.184Z]	<chilversc>	typescript do consider generic non generic interface to be different type
[2015-10-30T13:04:59.859Z]	<grofit>	possibly but how would that effect this scenario
[2015-10-30T13:06:08.865Z]	<chilversc>	-pron- do i be just try to declare an tcontroller
[2015-10-30T13:06:30.448Z]	<grofit>	lol
[2015-10-30T13:11:41.972Z]	<grofit>	anyone else have any idea on the express issue
[2015-10-30T13:11:55.087Z]	<grofit>	i make a so question on -pron- and not have much luck there either
--------------------------------------------------------------------------------------------------
[2015-10-30T13:17:10.886Z]	<lifenautjoe>	how do i define default value on an ambient declaration of class be that possible
[2015-10-30T13:18:06.098Z]	<grofit>	in a
[2015-10-30T13:18:09.021Z]	<lifenautjoe>	yup
[2015-10-30T13:18:14.739Z]	<grofit>	-pron- do not define value in
[2015-10-30T13:18:22.324Z]	<grofit>	-pron- be just for type information afaik
[2015-10-30T13:18:45.769Z]	<lifenautjoe>	hmm alright
[2015-10-30T13:18:46.993Z]	<lifenautjoe>	thank
[2015-10-30T13:33:00.920Z]	<grofit>	well incase anyone else fancy a go at help
[2015-10-30T13:33:01.535Z]	<grofit>
[2015-10-30T13:33:09.658Z]	<grofit>	 <user> stop spamme for a while now
--------------------------------------------------------------------------------------------------
[2015-10-30T13:59:07.222Z]	<shivinsky>	hi be there difference
[2015-10-30T13:59:11.304Z]	<shivinsky>	export interface test boolean boolean
[2015-10-30T13:59:14.525Z]	<shivinsky>
[2015-10-30T14:01:00.336Z]	<grofit>	if -pron- just in a i believe -pron- would be treat the same
[2015-10-30T14:01:25.986Z]	<LabEG>	this be similar
[2015-10-30T14:01:34.556Z]	<grofit>	as i think -pron- be both treat as function -pron- an implementation detail if -pron- need the this scoping offer by arrow
[2015-10-30T14:21:16.567Z]	<chilversc>	not really semantically -pron- could say the first be indicate a property on the object that value be a function while the second be declare a function on the object
[2015-10-30T14:23:15.424Z]	<grofit>	but regardless -pron- would be a function
[2015-10-30T14:23:41.619Z]	<grofit>	be -pron- a value which hold the function or an explicit function
[2015-10-30T14:23:58.111Z]	<grofit>	-pron- probably know better than -pron- though if there be an actual difference in how -pron- would be process
[2015-10-30T14:24:41.278Z]	<grofit>	but i be pretty sure i have a which contain foo but -pron- implementation look like public foo
[2015-10-30T14:48:41.108Z]	<jbrantly>	-pron- blog post be suppose to address -pron- question i think d
[2015-10-30T14:50:43.071Z]	<jbrantly>	since -pron- use babel if -pron- do import blah from blah then babel  <user> do some magic on the transpiled import to handle the cjs module use export but -pron- probably need to update the typing so that ts be happy with -pron-
[2015-10-30T14:51:46.754Z]	<grofit>	hmm after read more about declaration merging and extension
[2015-10-30T14:52:11.631Z]	<grofit>	do the import foo from somehow treat the module differently when factor in declaration extension
[2015-10-30T14:52:52.203Z]	<jbrantly>	alternatively -pron- could use import as blah from blah
[2015-10-30T14:53:19.997Z]	<JKillian>	maybe -pron- more a quirk in babel then that -pron- deal with
[2015-10-30T14:54:34.791Z]	<JKillian>	oh wait i think -pron- right that -pron- actually typing cause the error
[2015-10-30T14:55:46.817Z]	<JKillian>	actually i have no clue the typing look like this declare module findup sync import minimatch interface ioption extend cwd stre function string string opt ioption string namespace mod literally work around a bug in ts export mod
[2015-10-30T14:56:19.140Z]	<JKillian>	i can do import findup from findup sync because error module findup sync have no default export
[2015-10-30T14:56:59.860Z]	<JKillian>	i can do import as findup from findup sync but then to use i have to do
[2015-10-30T14:59:18.183Z]	<JKillian>	the weird namespace mod line be there because if -pron- not ts give the error error module findup sync resolve to a non module entity and can not be import use this construct
[2015-10-30T15:04:13.940Z]	<JKillian>	regardless though the blog post be helpful i like the workaround of target and babel
[2015-10-30T15:04:20.663Z]	<chilversc>	no difference in the processing only really semantic when be read by a human
[2015-10-30T15:06:01.753Z]	<jbrantly>	-pron- need to change the definition to use export default mod instead of export mod
[2015-10-30T15:06:26.166Z]	<jbrantly>	since import findup from findup sync mean import the default export d
[2015-10-30T15:07:44.541Z]	<jbrantly>	check out the typing section on the blog give a couple tip about -pron-
[2015-10-30T15:08:17.614Z]	<jbrantly>	but in the simple case just use export default mod for -pron- stuff
[2015-10-30T15:08:53.671Z]	<JKillian>	for sure i think the typing -pron- have be pull of tsd so that what make -pron- hesitant to change -pron- cause stuff get out of sync then
[2015-10-30T15:09:22.678Z]	<jbrantly>	yea -pron- a major pita right now which be why -pron- always try to bring awareness to
--------------------------------------------------------------------------------------------------
[2015-10-30T15:09:49.473Z]	<grofit>	right i think i have find -pron- issue
[2015-10-30T15:10:10.359Z]	<grofit>	if i put import foo from bar in a file -pron- throw no error but just ignore everything past -pron-
[2015-10-30T15:10:26.921Z]	<jbrantly>	if -pron- use import as findup from findup sync i think -pron- will need to change the typing and the js  <user> come out the same
[2015-10-30T15:11:04.328Z]	<jbrantly>	-pron- not sure why -pron- say -pron- need to use in that case
[2015-10-30T15:13:02.194Z]	<grofit>	just check and the tsc be output import within file so syntax must be right but -pron- failing silently on -pron- if i remove typing and any import -pron- seem to compile correctly
[2015-10-30T15:22:32.324Z]	<JKillian>	i think mess with the typing be -pron- good bet thank for the help
[2015-10-30T15:25:48.721Z]	<jbrantly>	 <user>
[2015-10-30T15:32:35.116Z]	<lifenautjoe>	how can i declare an internal module in the sense that i can use -pron- as import jenv from src libraries jenv thank
[2015-10-30T15:34:08.383Z]	<lifenautjoe>	do this as an initial setup
[2015-10-30T15:37:21.177Z]	<lifenautjoe>	indeed
[2015-10-30T15:37:34.469Z]	<lifenautjoe>	no time to move -pron- all to typescript
[2015-10-30T15:38:14.861Z]	<jbrantly>	i believe -pron- can create a file call so vanilla src libraries
[2015-10-30T15:38:36.506Z]	<jbrantly>	typescript  <user> pick -pron- up and use -pron- for type information
[2015-10-30T15:38:40.278Z]	<lifenautjoe>	oh
[2015-10-30T15:45:05.965Z]	<lifenautjoe>	oh wow
[2015-10-30T15:45:07.266Z]	<lifenautjoe>	that work
[2015-10-30T15:45:11.724Z]	<lifenautjoe>	awesome d
[2015-10-30T15:45:19.061Z]	<lifenautjoe>	thank
[2015-10-30T15:45:40.125Z]	<jbrantly>	 <user> ts look for file first but if -pron- can find -pron-  <user> fall back to
[2015-10-30T15:45:44.785Z]	<jbrantly>	can
[2015-10-30T15:45:51.510Z]	<jbrantly>	or something like that d
[2015-10-30T15:46:05.873Z]	<lifenautjoe>	hahaha good to know
--------------------------------------------------------------------------------------------------
[2015-10-30T15:11:32.872Z]	<hansrwindhoff>	be -pron- bar module a local module that be in -pron- project or a if -pron- be local i believe -pron- need to import -pron- with a import foo from note the or possible a longer relative path if -pron- be not in the same folder as the import file
[2015-10-30T15:11:50.886Z]	<grofit>	-pron- in a use node module resolution
[2015-10-30T15:12:02.609Z]	<grofit>	there be an in the root folder
--------------------------------------------------------------------------------------------------
[2015-10-30T15:36:37.789Z]	<jbrantly>	-pron- assume jenv be a typescript module
--------------------------------------------------------------------------------------------------
[2015-10-30T19:30:19.570Z]	<grofit>	really strange issue
[2015-10-30T19:30:41.042Z]	<grofit>	can someone tell -pron- what -pron- would expect this to be output as assume common module type
--------------------------------------------------------------------------------------------------
[2015-10-30T19:31:17.345Z]	<lifenautjoe>	jesus i almost have a heart attack the gitter chat message sound
[2015-10-30T19:32:37.662Z]	<grofit>	as -pron- do not seem to be output the import
[2015-10-30T19:33:27.499Z]	<grofit>	so -pron- say -pron- can not find chance
[2015-10-30T19:36:19.445Z]	<DanielRosenwasser>	be chance a node module
[2015-10-30T19:43:23.612Z]	<DanielRosenwasser>	be chancestatic a value in the chance module that do sound like the correct import
[2015-10-30T20:08:44.355Z]	<grofit>	i think -pron- should be import chance from chance but the new be on chancestatic
--------------------------------------------------------------------------------------------------
[2015-10-30T19:32:17.618Z]	<grofit>	import iaction from import chancestatic as chance from chance var chance new chance export abstract class action implement iaction app public getrandom number
[2015-10-30T19:42:30.425Z]	<DanielRosenwasser>	i would expect the output of that to be something like typescript var var chance new var action function function app function return foo
[2015-10-30T19:48:04.832Z]	<chilversc>	-pron- expect chancestatic to be an interface so -pron- get something like declare var chance chancestatic export chance
--------------------------------------------------------------------------------------------------
[2015-10-30T20:08:20.315Z]	<grofit>	truth be tell i be not entirely sure how chance should be consume via
[2015-10-30T20:09:00.876Z]	<DanielRosenwasser>	if then -pron- should be import like this typescript import chance
[2015-10-30T20:09:24.012Z]	<grofit>	-pron- have export
[2015-10-30T20:09:37.784Z]	<grofit>	so i believe chancestatic as chance be valid right
[2015-10-30T20:09:44.916Z]	<DanielRosenwasser>	just like how -pron- do typescript var chance
[2015-10-30T20:09:48.301Z]	<grofit>	i be try to to resort to non include
[2015-10-30T20:11:17.404Z]	<grofit>
--------------------------------------------------------------------------------------------------
[2015-10-30T20:09:58.766Z]	<grofit>	as i export to common and system
[2015-10-30T20:10:10.977Z]	<DanielRosenwasser>	import be compatible with commonjs blah override
[2015-10-30T20:10:55.651Z]	<DanielRosenwasser>	can -pron- link -pron- to the package documentation -pron- use and the file -pron- use
[2015-10-30T20:11:33.099Z]	<grofit>
[2015-10-30T20:14:27.294Z]	<DanielRosenwasser>	if -pron- look at chancestatic -pron- see that -pron- have a function on -pron- call chance
[2015-10-30T20:15:11.404Z]	<DanielRosenwasser>	so -pron- can use typescript import chance from chance var chance chance
[2015-10-30T20:15:23.221Z]	<grofit>	that do not work let -pron- confirm again
[2015-10-30T20:15:27.818Z]	<DanielRosenwasser>	new be for if -pron- use the import form at the bottom
[2015-10-30T20:15:50.232Z]	<grofit>	error only a void function can be call with the new keyword
[2015-10-30T20:16:00.874Z]	<grofit>	oh wait
[2015-10-30T20:16:04.864Z]	<DanielRosenwasser>	-pron- say do call -pron- with a new keyword
[2015-10-30T20:16:10.803Z]	<grofit>	yep yep -pron- mistake let -pron- try that
[2015-10-30T20:16:15.994Z]	<DanielRosenwasser>	though i instal chance
[2015-10-30T20:16:23.392Z]	<DanielRosenwasser>	look like -pron- can use -pron- with a new keyword
[2015-10-30T20:16:29.473Z]	<DanielRosenwasser>	but -pron- not document
[2015-10-30T20:16:29.811Z]	<grofit>	the doc say to use -pron- that way
[2015-10-30T20:16:49.265Z]	<grofit>	load chance var chance instantiate chance so -pron- can be use var chance new chance use chance here var
[2015-10-30T20:17:34.295Z]	<grofit>	anyway let -pron- see what -pron- output with what -pron- suggest
--------------------------------------------------------------------------------------------------
[2015-10-30T20:12:44.640Z]	<grofit>	i have have a few issue where the file can not be use in without a bit of tweak then i generally do something like import as chance from chance if i be to use chance the same way
--------------------------------------------------------------------------------------------------
[2015-10-30T20:15:12.492Z]	<grofit>	-pron-  <user> have the new though right which would be inline with the expect usage do not get -pron- wrong i think -pron- be odd have something name static which could be newe up
--------------------------------------------------------------------------------------------------
[2015-10-30T20:17:04.525Z]	<grofit>	again that s vanilla js
[2015-10-30T20:17:32.208Z]	<DanielRosenwasser>	right but the analogous code for that is typescript import chance var chance new chance var randstr
--------------------------------------------------------------------------------------------------
[2015-10-30T20:17:22.113Z]	<grofit>	so i be expect to have -pron- ts output the code line basically hence why i be use new
--------------------------------------------------------------------------------------------------
[2015-10-30T20:17:40.780Z]	<chilversc>	look like -pron- support both commonjs and
[2015-10-30T20:17:57.338Z]	<chilversc>	though -pron- do export a default
[2015-10-30T20:18:20.961Z]	<DanielRosenwasser>	exactly what i mean
[2015-10-30T20:18:37.294Z]	<DanielRosenwasser>	and there be no analog for commonjs style default in
[2015-10-30T20:18:48.734Z]	<DanielRosenwasser>	there be default but -pron- be semantically different
[2015-10-30T20:19:18.069Z]	<grofit>	hmmm yeah as the above method will not be compatible in js
[2015-10-30T20:19:21.328Z]	<grofit>	ok so take a step back then
[2015-10-30T20:19:35.520Z]	<chilversc>	can -pron- just use and -pron- would be compatible
[2015-10-30T20:19:38.547Z]	<grofit>	as i be output to system too if i use import chance
[2015-10-30T20:19:55.132Z]	<grofit>	i be happy to hack the file
[2015-10-30T20:20:01.033Z]	<grofit>	i have have to for other
[2015-10-30T20:20:58.385Z]	<grofit>	anyway if i be to use the import syntax for common style would that work when output to system
[2015-10-30T20:21:20.908Z]	<chilversc>	should be able to use import chance from chance var chance new chance though i think the definition for chance need fix first
[2015-10-30T20:21:24.675Z]	<grofit>	or  <user> system only compile down the import as blah from turds style syntax
[2015-10-30T20:21:36.259Z]	<grofit>	yeah that be -pron- first try chilv do not work
[2015-10-30T20:21:39.875Z]	<grofit>	i get the error i post above
[2015-10-30T20:21:58.761Z]	<grofit>	that s why i end up use the static as -pron- compile then but never output the require line in the outputted js
[2015-10-30T20:22:33.853Z]	<grofit>	i think i can use what daniel suggest
[2015-10-30T20:22:42.195Z]	<grofit>	as from the later version -pron- can use -pron- convenience without the new
[2015-10-30T20:24:03.277Z]	<grofit>	anyway thank for the chat guy i  <user> try use the other approach for the new version as that should work with without the new
[2015-10-30T20:26:11.761Z]	<chilversc>	-pron- rename chancestatic to chanceconstructor remove the var chance and the export line then in the module -pron- just have something like declare module chance export var chance
--------------------------------------------------------------------------------------------------
[2015-10-30T20:38:44.059Z]	<DanielRosenwasser>	-pron- send a pr to definitelytype
[2015-10-30T20:39:16.228Z]	<DanielRosenwasser>	so -pron- should be able to new as well as call chance when -pron- import -pron- that way
--------------------------------------------------------------------------------------------------
[2015-10-31T12:39:11.157Z]	<slikts>	how to get a constructor that not a class work in ts function foo bla new foo do work
[2015-10-31T12:39:50.807Z]	<lifenautjoe>	perhaps declare -pron- as a variable with the new function
[2015-10-31T12:39:59.965Z]	<slikts>	how do -pron- mean
[2015-10-31T12:40:22.812Z]	<lifenautjoe>	sec
[2015-10-31T12:40:26.041Z]	<lifenautjoe>	open editor
[2015-10-31T12:42:09.996Z]	<lifenautjoe>	wait be that -pron- constructor function or just use -pron- with the ambient declaration
[2015-10-31T12:42:11.210Z]	<slikts>	to be precise what do work be a constructor with parameter
[2015-10-31T12:42:31.240Z]	<slikts>	function stre x let bla new foo
[2015-10-31T12:45:19.253Z]	<slikts>	or actually -pron- confused -pron- now seem to work at least in the playground
[2015-10-31T12:45:34.193Z]	<lifenautjoe>	hahahaha i be just test -pron- there as well
[2015-10-31T12:45:40.746Z]	<lifenautjoe>	because -pron- work on -pron- machine as well
[2015-10-31T12:46:13.281Z]	<slikts>	another  <user> in paradise i start atom and -pron- flood -pron- screen with error that be there yesterday
[2015-10-31T12:46:36.474Z]	<lifenautjoe>	hahaha the support in webstorm be insane man
[2015-10-31T12:46:44.806Z]	<lifenautjoe>	for typescript
[2015-10-31T12:47:02.366Z]	<slikts>	-pron- good in atom as well when -pron- work
[2015-10-31T12:47:27.010Z]	<lifenautjoe>
[2015-10-31T13:55:29.217Z]	<slikts>	function string
[2015-10-31T13:55:29.325Z]	<slikts>	function any
[2015-10-31T13:55:29.327Z]	<slikts>
[2015-10-31T13:55:29.327Z]	<slikts>	x
[2015-10-31T13:55:29.327Z]	<slikts>	function number
[2015-10-31T13:55:32.215Z]	<slikts>	let bla new
[2015-10-31T13:55:34.761Z]	<slikts>	why do fix the only a void function can be call with the new keyword i get here
[2015-10-31T13:57:29.773Z]	<slikts>	be there any example of do constructor without class in ts
[2015-10-31T14:00:10.878Z]	<lifenautjoe>	hmmmm
[2015-10-31T14:00:36.631Z]	<slikts>	s why do how do
[2015-10-31T14:03:31.444Z]	<lifenautjoe>	any particular reason -pron- be use constructor function instead of class
[2015-10-31T14:03:44.991Z]	<slikts>	do i need a reason
[2015-10-31T14:03:53.988Z]	<slikts>	i want to know how to do -pron-
[2015-10-31T14:05:01.833Z]	<slikts>	despite ts insistence on pretend that js have class
--------------------------------------------------------------------------------------------------
[2015-10-31T14:04:20.124Z]	<slikts>	 <user> js be not a classical oo language so maybe i want to use oo the js way
--------------------------------------------------------------------------------------------------
[2015-10-31T14:10:59.778Z]	<jbrantly>	welp the error kinda tell -pron- what -pron- need to do
[2015-10-31T14:11:34.640Z]	<jbrantly>	typescript function string void function any true var foo new
[2015-10-31T14:12:19.607Z]	<slikts>	i try that and -pron- do work
[2015-10-31T14:12:30.477Z]	<jbrantly>	-pron- compile for -pron-
[2015-10-31T14:13:24.428Z]	<slikts>	function number void
[2015-10-31T14:13:24.586Z]	<slikts>	function any
[2015-10-31T14:13:24.596Z]	<slikts>	let foo new
[2015-10-31T14:13:24.654Z]	<slikts>
[2015-10-31T14:13:24.655Z]	<slikts>	x
[2015-10-31T14:13:54.635Z]	<slikts>	oops okay
[2015-10-31T14:14:43.227Z]	<slikts>	not sure why i get only a void function can be call with the new keyword for have a wrong parameter type though
[2015-10-31T14:15:26.208Z]	<jbrantly>	ah cause the second overload do have the return type sorry that be -pron- bad
[2015-10-31T14:15:45.110Z]	<jbrantly>	so just add void to the second overload as well
[2015-10-31T14:18:27.860Z]	<slikts>	why do the ts repo have almost open issue
[2015-10-31T14:19:19.205Z]	<jbrantly>	hmm play with -pron- a bit there be some more weirdness go on i believe there may be an error return that be not the most descriptive but -pron- can definitely get -pron- to work
[2015-10-31T14:19:32.986Z]	<jbrantly>	because -pron- an incredibly popular and complex product
[2015-10-31T14:21:00.505Z]	<slikts>	there plenty of way more popular project with way less open isue
[2015-10-31T14:21:23.525Z]	<jbrantly>	cool react have open issue -pron- not something unique to typescript
[2015-10-31T14:22:03.290Z]	<slikts>	and time the issue
[2015-10-31T14:23:38.682Z]	<jbrantly>	i do know what to tell -pron- man -pron- always in here spew sometimes misinform disgust for typescript -pron- not sure why -pron- bother
--------------------------------------------------------------------------------------------------
[2015-10-31T14:21:38.003Z]	<slikts>	react have time more star and contributor
[2015-10-31T14:26:41.255Z]	<jbrantly>	despite ts insistence on pretend that js have class
--------------------------------------------------------------------------------------------------
[2015-10-31T14:25:54.124Z]	<slikts>	point -pron- to what i should read to be more informed then
[2015-10-31T14:26:13.327Z]	<slikts>	the handbook or ts deep dive do answer what i want to know
[2015-10-31T14:26:54.794Z]	<jbrantly>	-pron- pretend that js class be a typescript invention
[2015-10-31T14:27:02.147Z]	<slikts>	what about -pron- js do have class -pron- have class syntax
--------------------------------------------------------------------------------------------------
[2015-10-31T14:27:09.638Z]	<lifenautjoe>	perhaps -pron- be try to do something people do not usually do with typescript
[2015-10-31T14:27:14.143Z]	<slikts>	the class keyword in js be syntactic sugar and js -pron- be a prototypal language
[2015-10-31T14:27:25.992Z]	<jbrantly>	and -pron- something else in typescript
[2015-10-31T14:28:33.040Z]	<slikts>	the point be that typescript doc neglect prototypal oo
[2015-10-31T14:29:08.256Z]	<jbrantly>	hey there -pron- go now -pron- have a solid argument go and create a productive issue on -pron- and -pron- become a contribute member of open source
[2015-10-31T14:31:06.424Z]	<jbrantly>	fwiw i agree that ts in general need to support more js y paradigms -pron- slowly get there -pron- just recently add support for the this type for example
[2015-10-31T14:32:42.011Z]	<slikts>	can -pron- maybe skip the personality please
--------------------------------------------------------------------------------------------------
[2015-11-01T01:03:09.909Z]	<timkindberg>	-pron- use the sinonjs library and the method returnsthis be not in the file even though -pron- a valid function how to i tell typescript this be ok
[2015-11-01T01:03:48.913Z]	<timkindberg>	i try add to the sinonstub interface like this js interface sinonstub returnsthis sinonstub
[2015-11-01T01:03:53.211Z]	<timkindberg>	but that do not work
--------------------------------------------------------------------------------------------------
[2015-11-01T02:05:00.477Z]	<briantopping>	hi all -pron- new to ts and curious if there a great way to use eg in -pron- ts code -pron- see good reason not to use polyfill but rabid googling have turn up anything obvious be this something that be typically do
[2015-11-01T02:11:13.084Z]	<JKillian>	i do see anything wrong with use a polyfill and then use method in -pron- code -pron- want to add typing to -pron- project that have the new method if -pron- do this though
[2015-11-01T02:17:43.555Z]	<briantopping>	i see make sense thank -pron- seem like a general class of evolutionary problem that seem like -pron-  <user> be eventually support be there a pattern for how this go i be  <user> look for love in but then realize esx dom
[2015-11-01T02:23:39.529Z]	<JKillian>	the polyfill should do all the work for -pron- if one  <user> all the browser -pron- be target support the feature -pron- can just remove -pron- -pron- not sure how ts decide which dom method to include in -pron- typing by default
[2015-11-01T02:24:37.180Z]	<briantopping>	yes thank
[2015-11-01T18:43:02.010Z]	<DanielRosenwasser>	so -pron- have text ts spec test js spec test
[2015-11-01T18:45:02.340Z]	<DanielRosenwasser>	for typescript -pron- have a src ts and js
[2015-11-02T02:26:08.769Z]	<DanielRosenwasser>	that because the type of option be infer to be
[2015-11-02T02:27:49.414Z]	<ntilwalli>	ah i see
--------------------------------------------------------------------------------------------------
[2015-11-01T08:16:24.970Z]	<xstof>	disclaimer -pron- new to typescript -pron- struggle with the follow and be wonder if this be a known issue or due to -pron- understanding of ts i have a electron node app with an app ts dir which get compile towards the app js dir with definition go into app definition through gulp typescript i do -pron- testing through jasmine in a very different directory spec ts compile into spec js when i do a require in -pron- test inside spec ts i need a relatieve reference to a commonjs module for which the compile time dir app ts be very different from -pron- runtime resolution directory app js this mean there no way to get the test to compile and get the test to resolve the require at runtime this be because the path go into require would need to be different for each
[2015-11-01T18:41:04.671Z]	<DanielRosenwasser>	-pron- could reverse the way -pron- order thing
[2015-11-01T18:57:15.275Z]	<xstof>	thx daniel that would mean -pron- source go underneath ts let say in the dir spec and the test for that source would live in ts test right both would then compile into the js dir i assume do this mean there no good way to keep -pron- test completely separate in an independent directory structure just curious
--------------------------------------------------------------------------------------------------
[2015-11-01T19:03:19.335Z]	<electricessence>	ok here -pron- be please criticism be welcome
[2015-11-01T19:04:28.579Z]	<electricessence>	a lot of work and love have go into this so far any comment issue criticism be openly welcome i really want to make this lib top
[2015-11-01T19:05:59.204Z]	<slikts>	why be -pron- use qunit
[2015-11-01T19:07:10.968Z]	<slikts>	 <user> have the compile file and source together be a bit messy
[2015-11-01T19:11:17.611Z]	<lifenautjoe>	migrate all exist qunit test to mocha
[2015-11-01T19:13:32.835Z]	<lifenautjoe>	wait the description read a javascript friendly base library port to typescript what javascript friendly base library be that
[2015-11-01T19:15:01.033Z]	<jbrantly>	i think -pron- mean port from but the wording be a little confusing
[2015-11-01T19:15:06.652Z]	<lifenautjoe>	-pron- pretty confusing
[2015-11-01T19:15:08.439Z]	<lifenautjoe>	yeah
[2015-11-01T19:20:07.710Z]	<slikts>	javascript friendly could be hyphenate
[2015-11-01T19:40:35.720Z]	<lifenautjoe>	why not publish -pron- as a regular javascript library as a port and publish the ambient declaration for whoever want to benefit with the fact that -pron- be write in typescript
[2015-11-01T19:41:11.061Z]	<jbrantly>
[2015-11-01T22:41:00.747Z]	<electricessence>	love all the feedback make change
[2015-11-01T22:42:18.020Z]	<electricessence>	be use qunit then move to mocha but i do want to throw out the qunit test since -pron- be good smoke test for amd
[2015-11-01T22:42:58.546Z]	<electricessence>	port have be remove add hyphen
[2015-11-01T22:44:16.374Z]	<slikts>	-pron-  <user> weird to -pron- that the ts type information be duplicate in the comment
[2015-11-01T22:49:19.598Z]	<electricessence>	do -pron- mean the js doc
[2015-11-01T22:50:49.391Z]	<electricessence>	webstorm auto populate the jsdoc information -pron- be a bit redundant -pron- say but if the api change for any reason webstorm  <user> give a warning that the signature do match
[2015-11-01T22:51:27.341Z]	<electricessence>	i could pull -pron- out but most of the time -pron- simply auto add
[2015-11-01T22:55:21.017Z]	<slikts>	the reason ts exist be to reduce redundant boilerplate like that
[2015-11-01T22:55:45.721Z]	<slikts>	and not sure what the value of warning that jsdocs be outdate be
[2015-11-01T22:55:47.657Z]	<electricessence>	not sure what -pron- mean be -pron- say publish -pron- as a monolith and then export the declaration definition if that be what -pron- say that exactly how this all start i comment in the readme about the move to module and -pron- a tough decision but i believe necessary since over time there simply be too much code and ask a web developer to use a huge library be inappropriate i mean if all -pron- need be a few class then -pron- should only get those class
[2015-11-01T22:56:12.721Z]	<electricessence>	-pron- be outdate because of typedoc
[2015-11-01T22:56:20.431Z]	<electricessence>	that how i export the documentation
[2015-11-01T22:57:37.398Z]	<electricessence>	as well as people who be not use typescript at all can still get some benefit from the jsdocs -pron- consume library with jsdocs in webstorm and -pron- have give -pron- the warning that i be use a method incorrectly
[2015-11-02T01:59:26.975Z]	<electricessence>	anyone have any reference to how to use name module so that node can easily find -pron- like below but where thing be not a relative path but a name module import thing from thing
[2015-11-02T02:25:29.619Z]	<ntilwalli>	-pron- have trouble with destructuring and i do know why when -pron- use this code function datum var somevar option -pron- get this error type have no property somevar and no string index signature anyone have an idea
[2015-11-02T02:26:18.151Z]	<DanielRosenwasser>	namely an object with no property
[2015-11-02T02:27:00.718Z]	<DanielRosenwasser>	if -pron- default initialize option with option somevar -pron- should work
[2015-11-02T02:27:11.485Z]	<DanielRosenwasser>	or alternatively give -pron- a type annotation ts function datum option somevar any var somevar option
[2015-11-02T02:28:30.739Z]	<ntilwalli>	thx
[2015-11-02T02:28:54.388Z]	<DanielRosenwasser>	what do -pron- mean by so node can easily find -pron- if -pron- use commonjs for module loading -pron- should work almost the same way node work
[2015-11-02T02:30:03.031Z]	<DanielRosenwasser>	either where -pron-  <user> search -pron- folder for an appropriate package file or -pron- declare -pron- in a separate file like this ts declare module thing export class thing
[2015-11-02T07:20:51.041Z]	<electricessence>	ok i think i may understand -pron- try -pron- and come back if i still have trouble
[2015-11-02T16:08:21.674Z]	<electricessence>	i  <user> definitely check those out consider that the inter dependency within a single library can get pretty crazy this one be no exception have to manage so many repos would be somewhat of a nightmare but i can see the value in break some thing apart place linq as -pron- own repo may be the way to go -pron- just that -pron- still en up download the rest for many reason for example the notion of ienumerable t be universal and be use throughout so i guess each sub module could be break up but then again the management nightmare increase the last part be this be not intend for npm originally and i want -pron- to remain agnostic in that -pron- can be use by multiple different module loader originally this be a pure js dual monolith library with system as one and as another with some amd compatibility maybe -pron- just chase -pron- tail in the end javascript friendly come second to be able to consume the lib directly in typescript
--------------------------------------------------------------------------------------------------
[2015-11-02T08:26:54.901Z]	<sarod>	hi when i use typescript rewrite language construct to be valid code that great however i do find a way to make typescript happy when i use the new function available on standard object like from what i understand of typescript do not want to provide polyfill which be ok however i do find an way to tell typescript that i add an function polyfill on -pron- own and that -pron- should consider that the function be available do i miss anything in the configuration or be -pron- a miss feature
[2015-11-02T08:58:13.209Z]	<sarod>	ok i think i figure -pron- out the idea be to use the polyfill and add the file for the polyfill right this seem obvious once write but for some reason i expect the compiler option target to deal with that maybe the handbook be lake a page on what the target be and be not or at least i do find -pron-
[2015-11-02T10:31:21.100Z]	<lifenautjoe>	if the idea be to provide decoupled component each of the component that the user may be able to require should be self contain in -pron- own repository if a component be dependent on another component then -pron- can use the sweetness of npm to resolve this dependency
[2015-11-02T10:32:49.922Z]	<lifenautjoe>	and create a centralized project as whole repository that would provide an example on how to use the entire framework
[2015-11-02T10:33:55.585Z]	<lifenautjoe>	for example take a look at laravel or symfony or for a node library sail
[2015-11-02T20:10:41.342Z]	<OliverJAsh>	be there a name for this syntax var square square
[2015-11-02T20:10:53.087Z]	<OliverJAsh>	i can find -pron- referenced anywhere in the handbook
[2015-11-02T20:27:27.652Z]	<JKillian>	-pron- typically call a type assertion
[2015-11-02T20:28:08.916Z]	<JKillian>	-pron- could  <user> call -pron- a type cast as well but i believe type assertion be more correct
[2015-11-02T20:41:58.700Z]	<OliverJAsh>	thank
[2015-11-02T20:45:43.393Z]	<JoshVarty>	hey guy -pron- teammate be have some bizarre issue with typescript in -pron- intermittently can seem to find the typescript module i should note that -pron- use the async branch
[2015-11-02T20:47:31.233Z]	<JoshVarty>
[2015-11-02T20:47:58.145Z]	<JoshVarty>	i notice -pron- mispelle the path after fix -pron- but -pron- seem to work have anyone see something similar or have any tip
--------------------------------------------------------------------------------------------------
[2015-11-02T21:56:47.718Z]	<zachrip>	hey guy be there any way to ignore specific error type when compile with tsc
[2015-11-02T21:57:53.536Z]	<zachrip>	some typing in a project -pron- base -pron- off of be not define correctly and be cause a tsc to throw a fit which cause npm to revert installation
[2015-11-02T21:59:19.953Z]	<zachrip>
[2015-11-03T07:12:58.227Z]	<lifenautjoe>	what
[2015-11-03T07:17:32.494Z]	<lifenautjoe>	how be that a typescript trouble
[2015-11-03T07:17:48.297Z]	<Yunlong2cn>	like this import template from
[2015-11-03T07:18:26.183Z]	<Yunlong2cn>	typescript error src app page home error can not find module what the console show -pron- these error
[2015-11-03T07:19:28.596Z]	<lifenautjoe>	use the fs module for that
[2015-11-03T07:20:03.657Z]	<Yunlong2cn>	this be -pron- task with gulp function var bundler src app app tsconfig return function error js
[2015-11-03T07:22:46.005Z]	<Yunlong2cn>	import template from if i can use this way to do
[2015-11-03T07:24:49.306Z]	<DanielRosenwasser>	no that a module import
[2015-11-03T07:25:27.050Z]	<DanielRosenwasser>	-pron- need to actually load the file -pron- whether that be with an http request or use the api module in
--------------------------------------------------------------------------------------------------
[2015-11-03T02:32:40.240Z]	<ShawnTalbert>	-pron- tip be to switch to webstorm idea
--------------------------------------------------------------------------------------------------
[2015-11-03T06:14:34.123Z]	<Yunlong2cn>	hi everyone i have a trouble with typescript
[2015-11-03T06:15:11.420Z]	<Yunlong2cn>	how to compile html into js file by import template from
--------------------------------------------------------------------------------------------------
[2015-11-03T07:17:14.610Z]	<Yunlong2cn>	import html as string
[2015-11-03T07:20:39.090Z]	<lifenautjoe>	uhm
[2015-11-03T07:21:23.324Z]	<lifenautjoe>	use the file system module to require non js and json file
[2015-11-03T07:21:59.994Z]	<lifenautjoe>
[2015-11-03T07:22:14.676Z]	<lifenautjoe>	and the type definition be on definitelytype
--------------------------------------------------------------------------------------------------
[2015-11-03T07:25:52.898Z]	<Yunlong2cn>	ok i know thank
[2015-11-03T07:26:05.949Z]	<DanielRosenwasser>	-pron- welcome
[2015-11-03T07:26:15.597Z]	<Yunlong2cn>	here be the same problem
[2015-11-03T07:26:28.154Z]	<DanielRosenwasser>	yeah i be just look at that
[2015-11-03T07:26:41.055Z]	<DanielRosenwasser>	but -pron- want to load -pron- file as a string
[2015-11-03T07:26:52.878Z]	<DanielRosenwasser>	that issue pertain to a template system
[2015-11-03T07:27:23.229Z]	<DanielRosenwasser>	so there  <user> be some sort of compilation step for -pron- html file that  <user> turn -pron- into a loadable module for runtime
[2015-11-03T07:27:36.539Z]	<DanielRosenwasser>	at least from what i understand of that issue
[2015-11-03T07:28:19.947Z]	<Yunlong2cn>	o
[2015-11-03T07:29:00.693Z]	<DanielRosenwasser>	well
[2015-11-03T07:29:03.480Z]	<DanielRosenwasser>	sort of
[2015-11-03T07:30:36.265Z]	<Yunlong2cn>	import template from in fact this way look like very nice
[2015-11-03T07:32:25.576Z]	<Yunlong2cn>	this repo  <user> use this way
--------------------------------------------------------------------------------------------------
[2015-11-03T12:57:59.221Z]	<StrahilKazlachev>	be there a way to declare a a class use a symbol
[2015-11-03T17:21:21.317Z]	<electricessence>	could -pron- be more specific not sure what -pron- mean by symbol
--------------------------------------------------------------------------------------------------
[2015-11-03T17:28:45.557Z]	<tomduncalf>	hey -pron- try to work with import module in this case express and export mode from typescript so i can use async await but struggle to get -pron- work
[2015-11-03T17:28:52.422Z]	<tomduncalf>	do anyone know if this should be possible
[2015-11-03T17:30:02.746Z]	<tomduncalf>	simple test case be import as express from express let app express which when run with tsc babel node build output var app express typeerror express be not a function
[2015-11-03T17:30:50.628Z]	<tomduncalf>	-pron- read some of the discussion on this topic but could work out if -pron- have be resolve and i be do something wrong or not
[2015-11-03T17:55:58.291Z]	<JKillian>	that the full compile code that seem weird to -pron- because there no import or require statement at the top
[2015-11-03T18:07:23.331Z]	<tomduncalf>	ah sorry perhaps i be clear
[2015-11-03T18:07:31.654Z]	<tomduncalf>	when i execute the compile code i get that output in the terminal
[2015-11-03T18:07:58.858Z]	<tomduncalf>	backend tsc babel node build td development layout sharing backend build var app express typeerror express be not a function
[2015-11-03T18:11:16.906Z]	<tomduncalf>	the compiled output appear to be identical to the input which make sense as i be try to use mode
[2015-11-03T18:13:29.374Z]	<JKillian>	ah that make more sense what do the express object look like at that point in -pron- code
[2015-11-03T18:14:32.632Z]	<tomduncalf>	when use output mode with commonjs module style -pron- be a function
[2015-11-03T18:14:39.990Z]	<tomduncalf>	but when use output mode -pron- be an object
[2015-11-03T18:14:51.677Z]	<tomduncalf>	which otherwise look identical but obviously do have a constructor
[2015-11-03T18:17:07.407Z]	<tomduncalf>	change the file so -pron- end with export default than export e get the constructor work but then other property of the object appear to be miss
[2015-11-03T18:34:16.642Z]	<tomduncalf>	ah ha
[2015-11-03T18:34:27.794Z]	<tomduncalf>	i  <user> have a look into that good idea
[2015-11-03T18:35:00.853Z]	<tomduncalf>	perhaps there be flag i can pass to get this working -pron- aware -pron- pretty cut edge so i may have to compromise on the have the stuff but would be great to get -pron- work
[2015-11-03T18:37:25.747Z]	<tomduncalf>	have think -pron- may be a babel rather than ts problem thank
[2015-11-03T18:53:29.310Z]	<tomduncalf>	use vanilla js with babel the module need to be import like import express from express for -pron- to work
--------------------------------------------------------------------------------------------------
[2015-11-03T18:28:45.170Z]	<JKillian>	-pron- may have well luck figure out what go on if -pron- run -pron- code through tsc then through babel and then run -pron- with node i know babel have some special feature build in to try to improve comonjs module interopability
--------------------------------------------------------------------------------------------------
[2015-11-03T18:52:57.814Z]	<tomduncalf>	ahh so i have clear up -pron- problem a little
--------------------------------------------------------------------------------------------------
[2015-11-03T18:53:43.114Z]	<tomduncalf>	which make sense now i think about -pron- import would import all the function export member but not the constructor -pron- i guess
[2015-11-03T18:54:12.936Z]	<tomduncalf>	however if i do the same import express from express with typescript i get error module express have no default export
[2015-11-03T18:55:09.620Z]	<tomduncalf>	and if i change to export default e rather than export e i then get different error typing serve static serve error module express have no export member response typing serve static serve error module express have no export member handler
[2015-11-03T18:58:12.150Z]	<tomduncalf>	one other thing i try be import express but this be allow in typescript mode
[2015-11-03T18:58:29.941Z]	<tomduncalf>	-pron- reread perhaps there be a useful conclusion in there that i miss as the issue be closed
--------------------------------------------------------------------------------------------------
[2015-11-03T19:30:09.773Z]	<JKillian>	may  <user> be helpful
[2015-11-03T19:51:58.832Z]	<tomduncalf>	thanks -pron- read that one i think the conclusion be that what i be try to do be currently not possible the module in question express in this case need to update to module format if i want to be able to use -pron- with ts in mode otherwise -pron- would violate the es specs
[2015-11-03T19:52:15.781Z]	<tomduncalf>	which be initially a little disappointing but interesting to understand the reason why
[2015-11-03T19:52:46.930Z]	<tomduncalf>	and hopefully at some point in the nearish future ts  <user> be able to emit code for async await so i shall live without for now
[2015-11-03T19:56:58.346Z]	<JKillian>	yeah -pron- have luck when the module only export a function i could do import foo from foo and change the typing to export default function and that would play nice with ts and babel
[2015-11-03T19:57:27.478Z]	<JKillian>	but -pron- never try when that function  <user> have other property on -pron-
--------------------------------------------------------------------------------------------------
[2015-11-03T20:04:38.882Z]	<tomduncalf>	yeah exactly express and i think some other like jquery use the export for both
[2015-11-03T20:04:50.704Z]	<tomduncalf>	-pron- hope the benefit of use ts for this project  <user> outweigh any miss feature in any case
[2015-11-03T20:05:42.609Z]	<DanielRosenwasser>	in typescript -pron- be able to target while use commonjs as an output format
[2015-11-03T20:23:26.197Z]	<tomduncalf>	that awesome thank i have try that with and obviously -pron- do work and upgrade to this am but forget to try that again
[2015-11-03T20:23:36.718Z]	<tomduncalf>	a quick test suggest that solve -pron- problem thank -pron-
[2015-11-03T20:26:29.824Z]	<DanielRosenwasser>	yup the nightlie  <user> often have some nice goody smile
--------------------------------------------------------------------------------------------------
[2015-11-03T20:32:29.663Z]	<slikts>	be there a proposal to use symbol for private instance property
[2015-11-03T22:08:21.453Z]	<DanielRosenwasser>	do that once
[2015-11-03T22:08:24.330Z]	<DanielRosenwasser>
[2015-11-03T22:09:10.135Z]	<DanielRosenwasser>
[2015-11-03T22:09:40.840Z]	<DanielRosenwasser>	be there a specific reason -pron- want that
[2015-11-03T22:11:19.877Z]	<slikts>	-pron- just be a nicety make private property actually private ish
[2015-11-03T22:11:59.049Z]	<slikts>	have to use reflection to get to the property would make -pron- more obvious that something may be amiss
[2015-11-03T22:12:15.487Z]	<DanielRosenwasser>	typescript  <user> already tell -pron- that -pron- access a private property
[2015-11-03T22:12:52.134Z]	<slikts>	for instance when make a library the code necessarily be use as ts
[2015-11-03T22:12:56.545Z]	<DanielRosenwasser>	and -pron- language service do reveal private protect property in completion list
[2015-11-03T22:14:01.926Z]	<DanielRosenwasser>	gotcha
[2015-11-03T22:14:50.303Z]	<DanielRosenwasser>	-pron- can always manufacture an object with closure and hide private that way
[2015-11-03T22:15:53.728Z]	<DanielRosenwasser>	but overall the performance hit be a decent problem when -pron- try symbol out
[2015-11-03T22:16:22.201Z]	<slikts>	i can and that would be actual privacy but since the private instance property be there -pron- could be make to work better
--------------------------------------------------------------------------------------------------
[2015-11-03T22:16:55.871Z]	<slikts>	since -pron- about emit code that ts -pron- enforce privacy be really relevant
[2015-11-03T22:22:44.124Z]	<slikts>	performance could be something that js vms improve especially if symbol start get use more and -pron- would be behind a flag anyway
--------------------------------------------------------------------------------------------------
[2015-11-04T06:49:53.335Z]	<electricessence>	-pron- slip on the terminology bandwagon when refer to symbol in ts what be everyone mean
[2015-11-04T06:50:23.583Z]	<DanielRosenwasser>	there a thing in ecmascript call symbol
[2015-11-04T06:50:41.913Z]	<electricessence>	could -pron- paraphrase
[2015-11-04T06:50:52.609Z]	<DanielRosenwasser>	-pron- can index into object the same way -pron- would with string
[2015-11-04T06:51:04.209Z]	<DanielRosenwasser>	-pron- create with the symbol function and each invocation create a completely unique symbol
[2015-11-04T06:51:26.896Z]	<electricessence>	interesting
[2015-11-04T06:51:49.663Z]	<electricessence>	so -pron- kind of like a dictionary thing that allow non primitive key
[2015-11-04T06:52:17.809Z]	<electricessence>	read this
[2015-11-04T06:53:06.922Z]	<electricessence>	hmm wish i understand what this be good for
[2015-11-04T06:54:54.679Z]	<duncanmak>	one way this be use be to restrict access
[2015-11-04T06:55:25.708Z]	<duncanmak>	if -pron- just a dictionary anyone who know the key can construct a string and use that as a key to get a value
[2015-11-04T06:55:59.000Z]	<duncanmak>	when the dictionary use symbol as the key -pron- can restrict access by selectively hand out the symbol to people -pron- want to give access to
[2015-11-04T06:56:20.058Z]	<lifenautjoe>	or to define a custom way for -pron- object to be iterate
[2015-11-04T06:57:33.458Z]	<lifenautjoe>	oh and perhaps even share information within an iframe by use the global symbol when browser support -pron- of course
--------------------------------------------------------------------------------------------------
[2015-11-04T15:14:01.641Z]	<endash>	if someone could give -pron- a pointer on how to get override and implementation method signature to match -pron- be greatly appreciative string string number baz string string stre number baz string stre return give -pron- overload signature be not compatible with function implementation no matter what i try
[2015-11-04T15:47:43.537Z]	<slikts>	string number stre number baz stre foo return
[2015-11-04T15:48:46.074Z]	<endash>	sorry the lack of a body be just to prevent spamme i still need access to the argument
[2015-11-04T15:49:22.839Z]	<endash>	or do i just use the argument array
[2015-11-04T15:50:08.936Z]	<slikts>	string number stre number baz stre baz return bar baz
[2015-11-04T15:50:38.920Z]	<endash>	bingo the question mark do -pron- thank
[2015-11-04T15:51:27.017Z]	<slikts>	the main use for symbol be to avoid naming collision privacy be not a great use for -pron- since -pron- accessible via reflection
[2015-11-04T15:52:05.456Z]	<slikts>	although symbol property could be see as private ish
[2015-11-04T15:53:51.055Z]	<slikts>	or -pron- can just do stre number baz stre return bar baz without overload
[2015-11-04T16:03:22.140Z]	<endash>	yeah in this case -pron- implement a set of override in an interface
[2015-11-04T16:03:44.463Z]	<slikts>	not sure what -pron- mean
[2015-11-04T16:09:13.046Z]	<endash>	what i mean be that that be -pron- first attempt and -pron- fail so i assume i could just have a single implemntatin without specify the override again but that be without question mark so never mind
[2015-11-04T16:10:04.276Z]	<endash>	in -pron- defense the actual method signature be so much more complicated
--------------------------------------------------------------------------------------------------
[2015-11-04T18:59:37.359Z]	<JoshVarty>	so async await be available on right
[2015-11-04T19:00:39.596Z]	<JoshVarty>	do the branch implement this by rewrite source
--------------------------------------------------------------------------------------------------
[2015-11-04T19:17:13.747Z]	<cspotcode>	should i put a jsdoc comment before each overload of a function when write a file
[2015-11-04T19:47:14.403Z]	<JoshVarty>	ok -pron- look like that stuff be happen in the file
--------------------------------------------------------------------------------------------------
[2015-11-04T22:58:03.351Z]	<DanielRosenwasser>	the async branch be a little old at this point experiment with use tree transform in the near future for downlevele
[2015-11-04T22:58:33.951Z]	<DanielRosenwasser>	generally yes that way -pron- get appropriate signature help quickinfo
--------------------------------------------------------------------------------------------------
[2015-11-05T07:15:33.633Z]	<chalkers>	hey be there any universal typescriptonly tsx app sample out there
[2015-11-05T08:23:36.319Z]	<DanielRosenwasser>	what do -pron- mean by universal
[2015-11-05T08:23:46.495Z]	<DanielRosenwasser>	there a tiny one at
[2015-11-05T08:24:46.510Z]	<DanielRosenwasser>	there  <user>
[2015-11-06T01:50:49.538Z]	<chalkers>	thanks i mean universal or isomorphic front end and backend jsx
--------------------------------------------------------------------------------------------------
[2015-11-05T12:29:48.225Z]	<erkieh>	hi guy what do the salsa label mean on some typescript issue in github
--------------------------------------------------------------------------------------------------
[2015-11-05T20:55:09.303Z]	<RyanMetin>	hey when i compile with thevelourfog slush blob master i get an empty outfile and compile file next to the original i want that concatenation what be i miss
[2015-11-05T20:57:00.397Z]	<DanielRosenwasser>	-pron- experiment with a javascript language service power by typescript and that -pron- codename
[2015-11-05T20:59:00.077Z]	<DanielRosenwasser>	-pron- module and outfile do play correctly together if -pron- just output a script use outfile but if -pron- use module -pron- can use webpack webpack or
[2015-11-05T21:21:36.570Z]	<RyanMetin>	do realize that thank
[2015-11-06T20:13:38.449Z]	<DanielRosenwasser>	always use string for type
--------------------------------------------------------------------------------------------------
[2015-11-06T18:55:54.829Z]	<simonh1000>	hi all what be the difference between string and string and why do array not have error property include do not exist on type string
[2015-11-06T18:59:21.372Z]	<JKillian>	possibly because include be an feature maybe -pron- just have be implement yet
[2015-11-06T19:00:42.432Z]	<JKillian>	hmm see and
[2015-11-06T19:07:49.677Z]	<JKillian>	as far as string vs string string be simply a type whereas string be a js value -pron- recommend just use string
[2015-11-06T19:08:32.348Z]	<JKillian>	unless -pron- need to do thing like that be
[2015-11-06T20:14:03.770Z]	<DanielRosenwasser>	in string be a the object -pron- all know and love in js
[2015-11-06T20:14:45.295Z]	<DanielRosenwasser>	as a specific explanation string describe all stre literal type while string describe the method that all have
[2015-11-06T21:25:39.351Z]	<simonh1000>	get -pron- thank
[2015-11-07T07:10:40.165Z]	<DanielRosenwasser>	a sample configuration file with all option be available palantir tslint blob master doc
[2015-11-07T07:10:56.391Z]	<DanielRosenwasser>	so just copy that config file and modify -pron- with the rule -pron- want in place
--------------------------------------------------------------------------------------------------
[2015-11-07T01:14:35.142Z]	<choopage>	i have a tslint question not sure if this be the right place to ask i have do this npm install tslint next i want to find -pron- not in the folder local lib tslint i reckon i have not generate -pron- how do i generate
[2015-11-07T07:10:25.321Z]	<DanielRosenwasser>
[2015-11-07T14:23:12.225Z]	<choopage>	thank -pron- for point -pron- to the sample file cheer
[2015-11-08T01:52:43.516Z]	<choopage>	two typescript short question up to today have a standard for use of quote in typescript firm double or single why be tslint recommend double quote for text instead of single quote -pron- aware that this can be set in setting however this curious -pron- because many javascript style guide recommend single quote to begin and since typescript be a superset of javascript i casually see that be the standard for typescript but not the case for tslint reference stackoverflow what be the standard for use of quote in what be the standard for use of quote in typescript
[2015-11-09T01:21:35.405Z]	<LPGhatguy>	alternatively if -pron- know what -pron- target module system be like commonjs -pron- can use that directly environment allow
--------------------------------------------------------------------------------------------------
[2015-11-07T17:00:14.156Z]	<shlomiassaf>	hi guy i have a question i would like to use mixin to extend -pron- class that be quite straightforward the problem arise when i want to enable type information for those mixin i do not want to hardcode -pron- in the base class if a user add a mixin -pron- should be able to add that type information i guess -pron- involve add type information via file any tought
[2015-11-07T17:53:33.710Z]	<ntilwalli>	be there a way to have tsc include all file that be contain within a project directory in child grandchild folder etc when only compile one file directly from the command line -pron- currently include all file when compile one file by add -pron- to the file list with a find command like tsc find -pron- like to avoid explicitly call that find and have tsc do -pron- implicitly
[2015-11-07T18:00:44.953Z]	<ntilwalli>	be that what generic be about -pron- sound like -pron- use case be similar to what describe here
[2015-11-07T18:05:19.073Z]	<shlomiassaf>	-pron- will not solve the problem a basemixin t can expose for example property of type t but -pron- can not append to -pron- property
[2015-11-07T18:06:21.483Z]	<shlomiassaf>	what i need be an aggregative interface where the compiler ide  <user> the code and add property from different file
[2015-11-07T18:06:59.258Z]	<shlomiassaf>	this  <user> make sure every mixin can publish logic into the class -pron- but  <user> metadata to the compiler ide
[2015-11-07T18:20:03.015Z]	<shlomiassaf>	could not get -pron- to work nicely with webpack
[2015-11-07T18:20:28.056Z]	<shlomiassaf>	first of all use class not interface be talk about mixin
[2015-11-07T18:20:54.625Z]	<shlomiassaf>	and webpack class be inside module so namespacing do not add up nicely for -pron-
[2015-11-07T18:41:47.824Z]	<shlomiassaf>	target be typescript webpack where use mostly import that work nicely with webpack
[2015-11-08T02:05:02.979Z]	<appsoa>	i suppose -pron- a personal preference i use single quote to infer string literal across most language else -pron- end up get -pron- string process for expression
[2015-11-08T02:10:22.696Z]	<appsoa>	johnpapa be a good place to start at least
[2015-11-08T19:15:52.991Z]	<MartyIX>	i would like to know that too
[2015-11-08T19:54:35.113Z]	<slikts>	double quote for string literal be more common in so i guess someone just want ts to be more like those language
[2015-11-08T19:55:48.179Z]	<slikts>	oops -pron- reply to something from hour ago
[2015-11-08T19:58:56.562Z]	<appsoa>	do forget php heh
--------------------------------------------------------------------------------------------------
[2015-11-07T18:16:38.964Z]	<ntilwalli>	how be that different from declaration merge for interface
[2015-11-07T18:28:07.142Z]	<appsoa>
[2015-11-07T18:29:00.376Z]	<ntilwalli>	i see
[2015-11-07T18:30:30.519Z]	<appsoa>	nice very nice to know
[2015-11-07T18:43:59.424Z]	<appsoa>	ya -pron- have no issue with that setup
[2015-11-07T18:44:17.382Z]	<appsoa>	include split common bundle
[2015-11-07T18:44:54.234Z]	<appsoa>	until i nuke by webpack config file by accident and neglect somehow to not put -pron- in change control haha
[2015-11-07T18:52:03.179Z]	<ntilwalli>	lol welcome
--------------------------------------------------------------------------------------------------
[2015-11-08T10:40:21.294Z]	<lorthirk>	hello be there any release date for typescript
--------------------------------------------------------------------------------------------------
[2015-11-08T19:59:22.108Z]	<slikts>	-pron- different in php since single quote disable string interpolation there
[2015-11-08T19:59:47.729Z]	<slikts>	so there a tiny performance difference between use -pron-
[2015-11-08T20:00:16.975Z]	<appsoa>	nevermind -pron- say double quote for literal i misread
[2015-11-08T20:00:23.046Z]	<appsoa>	life be hard
[2015-11-08T20:02:54.992Z]	<slikts>	double quote be popular enough in js though use in of case
[2015-11-08T20:03:16.899Z]	<slikts>	i like how ts handbook use both single and double quote sometimes in the same code snippet
[2015-11-08T20:11:14.579Z]	<slikts>	the more modern style be definitely single quote though
--------------------------------------------------------------------------------------------------
[2015-11-08T20:37:48.124Z]	<tomduncalf>	hey wonder if anyone know what the easy way to ignore a party library import that do yet have file for a quick prototype so i do really want to spend time type -pron- be
[2015-11-08T20:38:37.459Z]	<tomduncalf>	so i want to say import linkcontainer from react router bootstrap and have tsc not complain even think -pron- know nothing or as little as possible about react router bootstrap
[2015-11-08T20:40:09.404Z]	<tomduncalf>	i think i read today somewhere that be be release and -pron- be go straight to
[2015-11-08T20:40:20.782Z]	<tomduncalf>	that be what -pron- look like from the version history i may be wrong though
[2015-11-09T01:19:12.180Z]	<appsoa>	copy pasta
[2015-11-09T01:20:28.666Z]	<LPGhatguy>	-pron- could always do a quick declare module react router bootstrap with a catch all index
--------------------------------------------------------------------------------------------------
[2015-11-08T20:41:25.170Z]	<lorthirk>	that would explain why resolve to an nightly thank
[2015-11-08T20:42:39.055Z]	<lorthirk>	by the way can someone give -pron- an help with implement udp command acknowledge communication protocol in node js and
--------------------------------------------------------------------------------------------------
[2015-11-09T00:38:04.519Z]	<slikts>	why be angular user so often add reference to file instead of just add to file in tsconfig
--------------------------------------------------------------------------------------------------
[2015-11-09T08:57:06.044Z]	<donaldpipowitch>	hi
[2015-11-09T08:57:23.279Z]	<donaldpipowitch>	be -pron- possible to use module syntax with node module resolution
[2015-11-09T08:58:16.833Z]	<donaldpipowitch>
[2015-11-09T09:00:17.521Z]	<donaldpipowitch>	var rx work but not import observable from rx
[2015-11-09T09:00:31.575Z]	<donaldpipowitch>	this throw src error can not find module rx
[2015-11-09T12:04:02.695Z]	<donaldpipowitch>	solve -pron- this of course need the right definition file
--------------------------------------------------------------------------------------------------
[2015-11-09T17:46:20.253Z]	<ntilwalli>	all -pron- try to understand why one of -pron- default import be not work -pron- use an external websocket testing library mock socket which be write in and -pron- create some file for some of the module which have a default export the one that give -pron- trouble look like this interface interface extend eventtarget declare var server export default server in -pron- code -pron- import the module use this line import default as mockserver from mock socket server but the compiler give -pron- the error error can not find name mockserver -pron- upload the code to any idea
[2015-11-09T17:50:25.312Z]	<appsoa>	add the extension to the filename or set the default
[2015-11-09T17:59:39.665Z]	<ntilwalli>	if i add the extension the compiler do find -pron- at all i do think the typescript compiler recognize file as module plus i think with module the file -pron- create get substitute during compile time and the equivalent file get use during run time explicitly set the file extension would allow that behind the scene switchover to if -pron- correct
[2015-11-09T17:59:54.525Z]	<ntilwalli>	what do -pron- mean by set the default -pron- mean in the import statement
[2015-11-09T18:09:25.511Z]	<appsoa>	ah -pron- can put -pron- declare in -pron- file
[2015-11-09T18:09:31.945Z]	<appsoa>
--------------------------------------------------------------------------------------------------
[2015-11-09T18:18:21.174Z]	<ntilwalli>	the declare actually be in -pron- file the top code snippet be from -pron- declaration file the bottom be from the source
[2015-11-09T18:42:29.771Z]	<JKillian>	tslint really be suppose to recommend double quote over single quote if -pron- appear like that sorry in the future -pron- want to have a command to generate a sensible start but right now -pron- entirely up to -pron- i personally prefer single quote less keystroke
[2015-11-09T22:41:09.580Z]	<ntilwalli>	what be the proper way to create a declaration file for an amd commonjs module with solely a default export -pron- create a declaration that look like this declare class server extend eventtarget string static string server any callback any any any option any any any datum any any any any client any any any export default server -pron- try two style for the import in file the first look like this import mockserver from mock socket server let someserver new this give -pron- an error at run time say have no property default the second look like this import mockserver mock socket server let someserver new in this case i get a compile time error error can not use new with an expression whose type lack a call or construct signature what the right way
[2015-11-09T22:48:39.460Z]	<ntilwalli>	nm i just try change the declaration to export server and the compile time error go away
--------------------------------------------------------------------------------------------------
[2015-11-10T01:45:38.541Z]	<buzinas>	if anybody here can help with use tslint as a task runner in vscode
[2015-11-10T01:45:55.206Z]	<buzinas>	there be a bounty for who solve this
[2015-11-10T04:16:54.867Z]	<buzinas>	-pron- do have but i try to put one nothing change
[2015-11-10T04:33:25.511Z]	<buzinas>	do -pron- know what do the watch variable stand for
[2015-11-10T04:50:42.098Z]	<buzinas>	btw test both regex on and theoretically -pron- work
[2015-11-10T04:50:58.180Z]	<buzinas>	unfortunately the error persist
--------------------------------------------------------------------------------------------------
[2015-11-10T01:46:42.508Z]	<slikts>	doesn t vscode provide monitoring by -pron-
[2015-11-10T01:46:55.643Z]	<slikts>	why do -pron- need gulp
[2015-11-10T01:47:44.861Z]	<buzinas>	how would -pron- do -pron- the example of eslint in vscode website be always use gulp
[2015-11-10T01:48:09.547Z]	<buzinas>	the guy who open the question have the same problem i have
[2015-11-10T01:48:37.369Z]	<buzinas>	exactly the same in fact everything work fine when use the task runner when build
[2015-11-10T01:48:58.853Z]	<buzinas>	but when try to use -pron- to watch for change then -pron- never erase the previous error
[2015-11-10T01:49:25.453Z]	<buzinas>	not sure if -pron- an error of vscode or gulp tslint or if there be something wrong in -pron- configuration
[2015-11-10T01:50:29.841Z]	<slikts>	i would expect vs code to have a tslint plugin
[2015-11-10T01:50:49.470Z]	<weswigham>	-pron- have a vscode problem matcher and jake task for a tslint server in the typescript repo -pron- sure -pron- can adapt the jake task to an equivalent gulp task
[2015-11-10T01:51:30.518Z]	<weswigham>	 <user> i would totally expect vscode to have a tslint plugin once vscode have a public extensibility model that go beyond theme
[2015-11-10T01:57:17.615Z]	<buzinas>	yeah i expect vs code to have a tslint plugin  <user> but -pron- do have yet about the problem matcher i create one and -pron- work pretty fine -pron- current problem be about the iswatche property when i enable -pron- the first error show as expect but when i fix -pron- and make some new error instead of get only the new error i get all the error back when open
[2015-11-10T01:57:22.079Z]	<buzinas>	any thought
[2015-11-10T01:58:32.905Z]	<weswigham>	do -pron- problem matcher have a watchedtaskbeginsregexp and watchedtaskendsregexp
[2015-11-10T04:25:47.364Z]	<weswigham>	huh an appropriate begin and end regex should be all -pron- need for a watch matcher if -pron- line match regex -pron- right
--------------------------------------------------------------------------------------------------
[2015-11-10T07:17:45.599Z]	<MartyIX>	hi i try research this issue i just wonder if -pron- be correct though i could not find more about the stuff from official source
[2015-11-10T07:18:02.417Z]	<MartyIX>	do anyone have a well answer
[2015-11-10T07:18:11.497Z]	<MartyIX>	thank
[2015-11-10T07:19:33.921Z]	<DanielRosenwasser>	i vex about that change a lot
[2015-11-10T07:19:58.877Z]	<DanielRosenwasser>	so i can probably explain that a bit
[2015-11-10T07:20:31.820Z]	<DanielRosenwasser>	basically the idea be that in javascript object literal be use a lot as a property bag
[2015-11-10T07:21:17.538Z]	<DanielRosenwasser>	so -pron- can imagine that instead of pass in parameter to some function -pron- just pass in an object literal where -pron- can specifically give the value -pron- interested and name -pron-
[2015-11-10T07:21:40.892Z]	<DanielRosenwasser>	and -pron- very common to make most of those property optional
[2015-11-10T07:23:38.297Z]	<DanielRosenwasser>	property -pron- do give  <user> get default value so instead of call ts foo color blue size big smell smelly shyness medium -pron- call ts foo color blue
[2015-11-10T07:24:27.555Z]	<DanielRosenwasser>	now the problem with this be that if all of those property have default value -pron- be optional
[2015-11-10T07:25:42.255Z]	<DanielRosenwasser>	-pron- could imagine foo be define like this ts interface foooption color stre size stre smell stre shyness string function foooption
[2015-11-10T07:26:25.482Z]	<DanielRosenwasser>	now imagine -pron- call this function and -pron- british
[2015-11-10T07:27:15.515Z]	<DanielRosenwasser>	ts foo size small colour smell moderate
[2015-11-10T07:27:33.776Z]	<DanielRosenwasser>	notice that -pron- misspell color as colour
[2015-11-10T07:28:27.520Z]	<DanielRosenwasser>	this be a problem let think about how type checking work for this
[2015-11-10T07:28:54.527Z]	<DanielRosenwasser>	size and smell be both property common to foooption
[2015-11-10T07:29:09.483Z]	<DanielRosenwasser>	and both of -pron- be so -pron- fine
[2015-11-10T07:29:55.747Z]	<DanielRosenwasser>	what about colour well foooption do know anything about colour so -pron- alright with -pron-
[2015-11-10T07:30:22.030Z]	<DanielRosenwasser>	and since color be optional -pron- okay that -pron- be in the interface
[2015-11-10T07:30:50.004Z]	<DanielRosenwasser>	so this come up a lot and be a problem for many practical use case
[2015-11-10T07:31:25.508Z]	<DanielRosenwasser>	this be where structural typing and optionality have some undesirable property
[2015-11-10T07:31:59.862Z]	<DanielRosenwasser>	and the general feeling be that -pron- could catch many bug where excess property be misspell and silently ignore
[2015-11-10T07:32:43.972Z]	<DanielRosenwasser>	the downside of this be that structural typing become hard to explain because -pron- now take away the simple syntax for create an object
[2015-11-10T07:33:02.593Z]	<DanielRosenwasser>	and  <user> there be a bit of exist code that use this
[2015-11-10T07:36:09.924Z]	<DanielRosenwasser>	-pron- make the change and and take a look at what break on definitelytype and -pron- real world code suite -pron-  <user> push the change out for a beta
[2015-11-10T07:36:42.901Z]	<DanielRosenwasser>	so i do a full pass through definitelytype check what issue come up
[2015-11-10T07:37:59.485Z]	<DanielRosenwasser>	and what -pron- find be almost no bug come up after the beta release nor after the official release a surprising majority of the break in definitelytype be actually bug
[2015-11-10T07:39:06.858Z]	<DanielRosenwasser>	so yeah -pron- have some gross consequence but the workaround have usually not be too terrible either add a type assertion or use an intermediate assignment
[2015-11-10T07:39:26.918Z]	<DanielRosenwasser>	hope that be too in depth
--------------------------------------------------------------------------------------------------
[2015-11-10T11:02:01.058Z]	<MartyIX>	thank a lot
--------------------------------------------------------------------------------------------------
[2015-11-10T14:39:38.694Z]	<choopage>	thank for -pron- clarification regard i prefer single to double too -pron- would be good if could be generate base on popular style guide i could generate -pron- preferred if i like google style guide or john papa to name only a few example here
--------------------------------------------------------------------------------------------------
[2015-11-10T14:55:25.225Z]	<chilversc>	could just have a folder in the github repository with some sample tslint file to pick from something like github have for gitignore file
[2015-11-10T16:38:49.886Z]	<JKillian>	both good idea and in the meantime -pron- can always grab the one typescript microsoft typescript blob master or the one tslint use just watch out because the typescript one probably have some custom rule -pron- use as well the tslint one be a little bit more strict for well or bad
--------------------------------------------------------------------------------------------------
[2015-11-10T20:56:06.625Z]	<adrianhara>	-pron- have a tough time import momentj in a typescript file i do import moment from moment but i get module moment have no default export though look into moment i see a module with export moment what be i do wrong
[2015-11-10T21:03:33.314Z]	<ghalle>	export need the import as syntax as -pron- do really have a default export typescript import as moment from moment
[2015-11-10T21:04:10.960Z]	<JKillian>	do import as moment from moment work
[2015-11-10T21:04:37.659Z]	<JKillian>	whoops do see that last comment d
[2015-11-10T21:09:14.137Z]	<adrianhara>	well the import work but then how do i use -pron- normally to create a moment object -pron- do moment or
[2015-11-10T21:09:37.001Z]	<adrianhara>	but do import as moment from moment seem to import moment not as a function but rather as an object
[2015-11-10T21:11:33.598Z]	<ghalle>	-pron- should still work as a function even if -pron- be  <user> an object
[2015-11-10T21:11:44.874Z]	<adrianhara>	do not moment be not a function
[2015-11-10T21:12:00.053Z]	<adrianhara>	i see -pron- have a function on -pron- which return a moment object
[2015-11-10T21:12:07.776Z]	<adrianhara>	not sure if that what i want
[2015-11-10T21:13:11.158Z]	<ghalle>	be the definition file -pron- be use from definitelytype
[2015-11-10T21:14:13.860Z]	<adrianhara>	yes i instal -pron- use tsd
[2015-11-10T21:15:24.440Z]	<adrianhara>	in the moment i see the interface momentstatic have this moment this should theoretically be a function with no param which return a moment instance right
[2015-11-10T21:20:20.505Z]	<adrianhara>	however do simply moment compile to moment which at runtime throw that moment be not a function which be correct i see in the dev tool that moment be an object not a function and -pron- have a default property which be a function that when call in the console return a valid moment instance however this default function be nowhere in the file so i have no clue how to actually create a moment object in -pron- typescript code
[2015-11-10T21:20:28.388Z]	<adrianhara>	be i make any sense smile
[2015-11-10T21:22:25.168Z]	<ghalle>	typescript import as moment from moment const time moment get compile to javascript var moment var time moment and work for -pron- what be the result of the compilation for -pron-
[2015-11-10T21:24:00.515Z]	<adrianhara>	right sorry forget to mention -pron- use module system
[2015-11-10T21:24:50.725Z]	<adrianhara>	so the import get compile to
[2015-11-10T21:25:14.598Z]	<adrianhara>	the usage be the same as for -pron- moment compile to moment
--------------------------------------------------------------------------------------------------
[2015-11-10T21:40:03.199Z]	<adrianhara>	there be  <user> this question on stackoverflow
[2015-11-10T21:43:37.254Z]	<adrianhara>	except that -pron- mention import moment date work which do actually work for -pron- the ts compiler say do exist rightly so -pron- not a property on the momentstatic interface in the file
--------------------------------------------------------------------------------------------------
[2015-11-10T23:51:07.654Z]	<ntilwalli>	what be the appropriate way to extend from eventtarget do a simple extend cause an typeerror illegal constructor at run time class foo extend eventtarget constructor super let fooinstance new foo do this work
--------------------------------------------------------------------------------------------------
[2015-11-11T00:47:43.376Z]	<DanielRosenwasser>	i think -pron- just want to implement eventtarget
[2015-11-11T00:48:34.226Z]	<DanielRosenwasser>	eventtarget be an interface implement by object that can receive event and may have listener for -pron-
[2015-11-11T00:48:59.277Z]	<DanielRosenwasser>	so i guess by interface -pron- mean that -pron- can actually construct -pron-
[2015-11-11T00:50:25.650Z]	<DanielRosenwasser>	even though -pron- callable -pron-  <user> always throw an error very odd
[2015-11-11T01:40:29.956Z]	<ntilwalli>	those may not be difficult function to implement but there actually be an implementation in the browser i can see -pron- by run -pron- a function which fully conform to the interface as describe in for eventtarget -pron- wonder if there be a way to extend off that function without the compiler complain
[2015-11-11T01:44:40.247Z]	<ntilwalli>	what -pron- not clear about be whether declaration merge expose this as a class the declaration in look like interface eventtarget string listener eventlisteneroreventlistenerobject usecapture boolean void event boolean string listener eventlisteneroreventlistenerobject usecapture boolean void declare var eventtarget prototype eventtarget new eventtarget if -pron- understanding be correct this use the class decomposition approach describe in the typescript handbook -pron- separate the static and instance member of a class and use declaration merge to bring -pron- back together base on the fact that -pron- name the same i think this be equivalent to declare a class directly but -pron- seem the compiler do recognize eventtarget to be anything other than an interface be i correct
--------------------------------------------------------------------------------------------------
[2015-11-11T01:50:01.167Z]	<weswigham>	equivalent insofar as structurally similar -pron- can still use -pron- in an extend if that what -pron- get at
[2015-11-11T01:51:22.366Z]	<weswigham>	-pron- may not be mark class in quick info but -pron- new up like a class and -pron- extendable like a class so -pron- pretty much a class
[2015-11-11T01:55:12.025Z]	<weswigham>	interestingly -pron- valid syntax to subclass eventtarget in chrome use syntax but attempt to call the subclass constructor still yield an illegal constructor error
[2015-11-11T01:56:09.669Z]	<ntilwalli>	yeah -pron- odd
[2015-11-11T01:56:52.898Z]	<weswigham>	give that -pron- a runtime error to use the constructor if -pron- like the functionality and shape make a class which implement eventtarget rather than -pron- -pron- need to provide implementation but the shape there for -pron- already
[2015-11-11T01:57:21.006Z]	<ntilwalli>	yeah -pron- consider that -pron-  <user> consider explicitly set the proto property to get the behavior i want
[2015-11-11T01:58:12.148Z]	<weswigham>	yeah something tell -pron- that may or may not work
[2015-11-11T01:59:28.746Z]	<ntilwalli>	-pron- lean against -pron- just from an aesthetic perspective -pron- def would cause the compiler to complain but -pron- should work right
[2015-11-11T02:03:04.009Z]	<weswigham>	no -pron- get -pron- doubt that -pron- work at runtime
[2015-11-11T02:03:16.868Z]	<weswigham>	mostly because i just try -pron- out in the devtools
[2015-11-11T02:05:03.852Z]	<weswigham>	the canonical how to use javascript eventtarget seem to be create a dummy dom fragment for fire event from
[2015-11-11T02:05:29.107Z]	<weswigham>	or alternatively -pron- could just implement the logic -pron-
--------------------------------------------------------------------------------------------------
[2015-11-11T02:23:54.352Z]	<ntilwalli>	-pron- try -pron- out in devtools but yeah -pron- implement -pron- right now -pron- guarantee that way
--------------------------------------------------------------------------------------------------
[2015-11-11T08:01:15.917Z]	<adrianhara>	regard -pron- previously mention issue with use momentjs with typescript and systemjs -pron- look like the code compile from ts be correct not sure yet why -pron- generate in the setter moment while rename the ts file into a js file and compile with babel yield moment which seem the correct way to do -pron- as be the actual factory function i can see in the source code any idea why the ts compiler generate -pron- differently thus cause the variable moment to refer to an object instead of a function and subsequently offer no way to create a moment instance because the file do declare the default function off the momentstatic class
[2015-11-11T23:56:59.331Z]	<DanielRosenwasser>	-pron- question do seem to have be ask maybe a connection fault
[2015-11-11T23:57:12.326Z]	<DanielRosenwasser>	a module be not a namespace
[2015-11-11T23:57:29.545Z]	<DanielRosenwasser>	-pron- use to call namespace module but that get confuse
[2015-11-11T23:57:51.147Z]	<DanielRosenwasser>	so now a module refer to something -pron- can require
[2015-11-11T23:58:02.418Z]	<DanielRosenwasser>	or be similar to what call a module
[2015-11-11T23:58:22.064Z]	<DanielRosenwasser>	and a namespace be basically a local container that separate declaration from each other
[2015-11-11T23:58:48.791Z]	<DanielRosenwasser>	so a namespace be something like ts namespace foo export var bar export interface baz
[2015-11-11T23:59:03.894Z]	<DanielRosenwasser>	a file that export thing at the top level be a module
--------------------------------------------------------------------------------------------------
[2015-11-11T23:59:56.470Z]	<DanielRosenwasser>	how be -pron- import
--------------------------------------------------------------------------------------------------
[2015-11-12T00:03:45.560Z]	<vasylbo>	hey i need to port this library for use code be do but i can not figure out how to build -pron- -pron- have try grunt typescript but -pron- simply concatenate file so i get error that one class can not override another cause -pron- have not be declare yet i know that i can rewrite -pron- use require but maybe there be some util that can do -pron- for -pron-
[2015-11-12T00:04:05.387Z]	<vasylbo>	library
[2015-11-12T06:40:29.779Z]	<adrianhara>	import as moment from moment
[2015-11-12T08:05:49.539Z]	<DanielRosenwasser>	-pron- understanding be that typescript behavior be more in line with the intended behavior while babel be do some hacky stuff to avoid gotcha for user
[2015-11-12T08:06:25.850Z]	<DanielRosenwasser>	which be understandable but -pron- complicate thing more
[2015-11-12T11:30:50.137Z]	<vasylbo>	-pron- be concatenate in too with warning though but still the thing be mocule base with commonjs of amd type of concatenation can only be use with require if i get -pron- right -pron- be use grunt ts
[2015-11-12T11:32:14.719Z]	<vasylbo>	hmm -pron- right
[2015-11-12T11:32:43.428Z]	<vasylbo>	-pron- have to have right file order in result
[2015-11-12T11:33:14.044Z]	<vasylbo>	have -pron- provide start point file
[2015-11-12T11:37:24.141Z]	<vasylbo>	ouh i see -pron- be use webstorm so can not help here sorry
[2015-11-12T11:38:14.080Z]	<vasylbo>	try add type declaration for datum to have intelisence just guess
[2015-11-12T14:13:17.903Z]	<jbrantly>	see i believe that the issue -pron- be run into
[2015-11-12T17:04:30.222Z]	<StrahilKazlachev>	i have code like the follow function mytype string string return string val and i get can not invoke an expression whose type lack a call signature can someone explain
[2015-11-13T00:50:44.406Z]	<weswigham>	what build tool be -pron- use or be -pron- just use tsc
--------------------------------------------------------------------------------------------------
[2015-11-12T12:14:26.943Z]	<chilversc>	why do -pron- want to publish obfuscate source to npm
[2015-11-12T12:15:12.753Z]	<chilversc>	though for bundling -pron- just use commonjs module and webpack to bundle -pron- -pron- can set webpack to output a library
[2015-11-12T15:59:35.103Z]	<jbrantly>	 <user>
--------------------------------------------------------------------------------------------------
[2015-11-12T15:52:40.833Z]	<ultrasonicsoft>	hi everybody i be run tsc command on directory with few file i have one javascript library which i want to call directly from typescript now this be valid javascript code as -pron-  <user> resolve path from lib file just curious to know if there be any option where i can ask tsc compiler to skip javascript code snippet while compilation thank
[2015-11-12T15:55:25.422Z]	<jbrantly>	if i understand -pron- correctly -pron- can just declare -pron- library as any so declare var myjavascriptlibrary any somewhere in -pron- program and then -pron- can do what -pron- want
[2015-11-12T15:57:51.786Z]	<ultrasonicsoft>	i try that after that code -pron- start give error like can call function sayhi of undefined
[2015-11-12T15:59:03.437Z]	<ultrasonicsoft>	ah i put that line outside -pron- class and -pron- work like a charm
[2015-11-12T15:59:12.313Z]	<ultrasonicsoft>	thank a lot
[2015-11-12T15:59:15.390Z]	<ultrasonicsoft>	smile
[2015-11-12T16:01:23.920Z]	<ultrasonicsoft>	one more question do know should -pron- be here or in as -pron- have class and in -pron- have abstract class  <user> be -pron- go to have any feature for bootstrappe like unity bootstrap for example i  <user> have -pron- interface a with two implementation and while bootstrappe i can configure which one to use through out application
[2015-11-12T16:01:54.820Z]	<ultrasonicsoft>	sorry if -pron- not right forum but i be core c guy and now learn with typescript
[2015-11-12T16:02:22.943Z]	<ultrasonicsoft>	i know in there be bootstrap and bind and feature but that do exactly solve the problem
[2015-11-12T16:11:39.833Z]	<zachrip>
--------------------------------------------------------------------------------------------------
[2015-11-12T17:14:21.968Z]	<zachrip>	be async await available for target or do i need to target
[2015-11-12T17:15:14.759Z]	<StrahilKazlachev>
[2015-11-12T17:15:28.419Z]	<zachrip>	do -pron- have any reference i can look at
[2015-11-12T17:16:03.682Z]	<StrahilKazlachev>
[2015-11-12T17:16:49.314Z]	<zachrip>	thank
[2015-11-12T18:33:56.394Z]	<DanielRosenwasser>	where do -pron- get that error
[2015-11-12T18:34:00.237Z]	<DanielRosenwasser>	on the call to map
[2015-11-12T18:35:47.812Z]	<DanielRosenwasser>	i see -pron- now
[2015-11-12T18:36:41.582Z]	<DanielRosenwasser>	the problem be that be of a type that have a call signature
[2015-11-12T18:36:57.836Z]	<DanielRosenwasser>	-pron- a union of two different type that have two different call signature
[2015-11-12T18:37:04.011Z]	<DanielRosenwasser>	which be very subtle
[2015-11-12T20:55:47.178Z]	<StrahilKazlachev>	ah i get -pron- so that why when i do declare type myuniontype mytype string and substitute mytype string with myuniontype -pron- work
[2015-11-13T00:53:52.973Z]	<DanielRosenwasser>	yeah -pron- could  <user> write mytype string
[2015-11-13T00:57:59.237Z]	<weswigham>	could -pron- show -pron- what set of compiler option -pron- use
[2015-11-13T01:26:55.244Z]	<DanielRosenwasser>	do use or with
[2015-11-13T01:26:58.600Z]	<DanielRosenwasser>	-pron- do work correctly
[2015-11-13T01:30:13.001Z]	<weswigham>	-pron- only support with amd and system and only in the late nightly build
[2015-11-13T01:57:53.183Z]	<weswigham>	module block be know as nowadays and the namespace keyword be prefer -pron- should really use if -pron- use -pron- and share -pron- across file
[2015-11-13T02:02:18.529Z]	<weswigham>	-pron- use when each of -pron- file be mean to be a separate modular file much like how individual js file be use within node
[2015-11-13T03:09:52.318Z]	<weswigham>	if -pron- have multiple file within which -pron- do something akin to module mystuff
[2015-11-13T03:10:23.004Z]	<weswigham>	then the flag be for -pron-
--------------------------------------------------------------------------------------------------
[2015-11-13T14:13:37.113Z]	<OdeToCode>	use and try to figure out support for iterator and new array method consider the follow code let foo string for let bar of foo let let iterator case generate a for in statement instead of use an iterator in case and tsc do appear to know about or symbol read through the repository issue -pron- sound like and should be support or be i misunderstand
[2015-11-13T22:30:05.209Z]	<OdeToCode>	driscoll hmm yes double check that this be in a nodejs tool for visual studio project  <user> try with vs code too
[2015-11-14T00:51:08.802Z]	<DanielRosenwasser>	what about ts interface knownoption require boolean message string key string stre boolean regexp interface option index string knownoption option
[2015-11-14T00:52:20.645Z]	<DanielRosenwasser>	be work on bundling but -pron- depend what -pron- mean by can be use in internal module namespace project
--------------------------------------------------------------------------------------------------
[2015-11-13T15:38:45.869Z]	<david-driscoll>	be -pron- target without ts do load the type for iterator
--------------------------------------------------------------------------------------------------
[2015-11-13T22:46:11.947Z]	<zachrip>	be there a way to do typing so that subkey of something be type
[2015-11-13T22:46:18.316Z]	<zachrip>	sec -pron- give an example
[2015-11-13T22:49:36.514Z]	<zachrip>	if -pron- look at -pron- module -pron- see that -pron- can do var checkpoint var registercheckpoint checkpoint username require true method post test regex test message username be require password require true method post message password be require -pron- like to be able to dynamically type username and password etc so -pron- have the optional field
[2015-11-13T22:52:56.495Z]	<jbrantly>	typescript interface field require boolean message string interface option index string field
[2015-11-13T22:53:01.168Z]	<jbrantly>	do that work
[2015-11-13T22:53:04.370Z]	<zachrip>	nope
[2015-11-13T22:53:06.523Z]	<zachrip>	i try that
[2015-11-13T22:53:17.840Z]	<zachrip>	at least intellisense do work for -pron-
[2015-11-13T23:14:01.947Z]	<joelday>	be there a way to bundle an external module project and get a that can be use in internal module namespace project
[2015-11-14T00:52:25.940Z]	<DanielRosenwasser>	how do -pron- want to use -pron-
[2015-11-14T03:33:44.319Z]	<zhishaofei3>	有人能听懂我说话吗
[2015-11-14T05:48:52.902Z]	<Hongbo-Miao>	en
[2015-11-14T05:52:28.340Z]	<Hongbo-Miao>	but suggest use english here so people can help each other
[2015-11-14T23:04:19.171Z]	<DanielRosenwasser>	what do -pron- mean nothing get update
[2015-11-14T23:04:55.645Z]	<DanielRosenwasser>	-pron- probably wan to use amd as -pron- module kind and -pron- need to use something like
[2015-11-15T02:11:20.531Z]	<appsoa>	try npm install over update i have to do the same thing  <user> check -pron- to see if there be a at the beginning of the version number else -pron- probably peg at whatever version -pron- already have
[2015-11-15T06:47:58.153Z]	<JKillian>	 <user> have be release on npm yet -pron- can use to see what version have be
[2015-11-16T07:44:31.566Z]	<RamaMuthukrishnan>	i have one doubt durandal router navigation the require module be load and unload to browser depend on router in aurelia the router navigation the require module be one time load then -pron- not increase s the browser memory or not
--------------------------------------------------------------------------------------------------
[2015-11-14T09:38:54.003Z]	<RamaMuthukrishnan>	hi be use aurelia bundle js i require the third party js
--------------------------------------------------------------------------------------------------
[2015-11-14T12:16:42.002Z]	<daslicht>	i just instal the ts plugin for
[2015-11-14T12:16:56.090Z]	<daslicht>	but i get the warning that -pron- compiler be v
[2015-11-14T12:17:03.405Z]	<daslicht>	and the plugin want
[2015-11-14T12:17:28.859Z]	<daslicht>	and that i should run npm update typescript if i do so nothing get update
[2015-11-16T12:57:12.538Z]	<adrianhara>	thank read through the issue look like that exactly -pron- problem wait for that flag now smile
--------------------------------------------------------------------------------------------------
[2015-11-14T13:17:35.728Z]	<RamaMuthukrishnan>	be not use node js only use aurelia bundle js
--------------------------------------------------------------------------------------------------
[2015-11-15T13:42:22.318Z]	<DominicBoettger>	i have a problem when export a public static function i get the error that the default export be use the private name
[2015-11-15T13:42:27.330Z]	<DominicBoettger>	be this not allow
[2015-11-15T19:29:21.132Z]	<DominicBoettger>	yes thank
--------------------------------------------------------------------------------------------------
[2015-11-15T18:59:18.829Z]	<vivainio>	-pron- should export the class not a static function within -pron-
--------------------------------------------------------------------------------------------------
[2015-11-16T17:22:10.654Z]	<daslicht>	hi i create a simple express app use typescript and start -pron- with teh debugger which work as expect
[2015-11-16T17:22:29.890Z]	<daslicht>	but add breakpoint to the ts file do not have any effect
[2015-11-16T17:22:51.948Z]	<daslicht>
[2015-11-16T17:24:15.509Z]	<daslicht>	place the breakpoint in teh js file work
[2015-11-16T17:24:18.916Z]	<daslicht>	be that as -pron- should be there really no way to simply add breakpoint to the ts file
[2015-11-16T18:01:29.853Z]	<DanielRosenwasser>	what editor be -pron- add breakpoint in
[2015-11-16T18:21:30.141Z]	<daslicht>	vs code i apologize that i miss that info
[2015-11-17T04:55:53.114Z]	<daslicht>	i be new to sourcemaps
[2015-11-17T04:56:03.169Z]	<daslicht>	i  <user> read about -pron-
[2015-11-17T04:56:34.423Z]	<daslicht>
[2015-11-17T04:56:44.888Z]	<daslicht>
[2015-11-17T04:56:46.206Z]	<daslicht>
--------------------------------------------------------------------------------------------------
[2015-11-17T01:18:29.855Z]	<Seikho>	there be configuration in the launch task to hook up source map when debug
--------------------------------------------------------------------------------------------------
[2015-11-17T16:57:07.634Z]	<simonh1000>	so point available for a typescript expert
[2015-11-17T19:25:12.280Z]	<Foxandxss>	for typing -pron- do matter boolean vs boolean
[2015-11-17T20:28:40.517Z]	<weswigham>	boolean be the primitive type boolean be the object wrapper false vs new
[2015-11-17T20:29:02.208Z]	<weswigham>	boolean be generally prefer since almost nobody use the object wrapper
[2015-11-17T20:51:08.981Z]	<Foxandxss>	thank -pron- sir
[2015-11-17T20:51:19.309Z]	<weswigham>	welcome
[2015-11-17T20:51:27.626Z]	<Foxandxss>	-pron- be do angular work and -pron- want to do the right thing
--------------------------------------------------------------------------------------------------
[2015-11-17T21:33:00.356Z]	<aleksey-bykov>	be there any plan to put correctness and soundness into the design goal otherwise -pron- look like a lot of hard work go to waste thank
--------------------------------------------------------------------------------------------------
[2015-11-18T13:03:34.580Z]	<gastrodia>	some time super bust be the first line of constructor but some time not need
--------------------------------------------------------------------------------------------------
[2015-11-18T20:09:52.786Z]	<LPGhatguy>	be there a design pattern i should be use as an analogue to initializer list
[2015-11-18T20:10:54.955Z]	<LPGhatguy>	i feel like i do a fair bit of class a x number y string number y string x y
[2015-11-18T20:23:31.127Z]	<xogeny>	much easy class a x number protect y number
[2015-11-18T20:23:43.523Z]	<xogeny>	or public if -pron- want -pron- public
[2015-11-18T20:23:52.533Z]	<LPGhatguy>	neat
[2015-11-18T20:27:06.679Z]	<LPGhatguy>	look like what i be look for thank a bunch
--------------------------------------------------------------------------------------------------
[2015-11-18T21:20:40.093Z]	<xogeny>	anybody have any suggestion for good testing tool -pron- currently try to use mocha but -pron- do understand typescript i know -pron- can specify compiler to use on the command line but -pron- get very confused what -pron- like be a decent unit testing framework where i can enable a watch feature to continuous rerun test tricky part so far seem to be get the ts code to compile any suggestion
[2015-11-18T21:21:02.609Z]	<DanielRosenwasser>	tricky part so far seem to be get the ts code to compile any suggestion
[2015-11-18T21:21:05.594Z]	<DanielRosenwasser>	what do -pron- mean by this
--------------------------------------------------------------------------------------------------
[2015-11-18T22:30:37.453Z]	<xogeny>
--------------------------------------------------------------------------------------------------
[2015-11-19T01:49:35.987Z]	<babeal>	how be people avoid the etc hell when use external module i try the approach and assume the root would be map with but -pron- be run into all sort of issue
--------------------------------------------------------------------------------------------------
[2015-11-19T09:14:59.246Z]	<zewa666>	hi there be there any chance to suppress ts warning for instance i have the error can not find module xxx because -pron- use jspm with
[2015-11-19T09:19:49.430Z]	<Souldrinker>	in what situation do -pron- get that warning -pron- use jspm with and typescript in aurelia and have see that one
[2015-11-19T09:23:56.595Z]	<zewa666>	ok i think i find the issue for that one at least -pron- be a miss module declaration in the file
[2015-11-19T09:24:08.321Z]	<zewa666>	hi btw aurelia guy everywhere
[2015-11-19T09:24:39.461Z]	<zewa666>	nevertheless -pron- would be interesting to know whether -pron- generally possible to suppress error
[2015-11-19T09:24:56.338Z]	<zewa666>	like -pron- do with lint comment
[2015-11-19T09:25:37.584Z]	<Souldrinker>	ok do know about that i usually do get any ts error or warning unless i do something wrong
[2015-11-19T09:27:12.869Z]	<zewa666>	well how about legacy code
[2015-11-19T09:30:17.508Z]	<minro>	haha that make -pron- laugh out loud at the office
[2015-11-19T09:30:34.698Z]	<Souldrinker>	yeah have have much of legacy code -pron- write stuff from scratch in ts and if i import javascript library and get issue i try to fix -pron- have convert js to ts so i guess i have run into much of those issue yet
[2015-11-19T09:31:36.104Z]	<zewa666>	ok here a fun one then angular mock import as mock from angular mock
[2015-11-19T09:32:01.629Z]	<zewa666>	yeah -pron- with the dark side i know
[2015-11-19T09:55:42.111Z]	<zewa666>	ok nvm get -pron- be just a crazy way how the stuff get import dat weird ng stuff
[2015-11-19T09:56:00.022Z]	<Souldrinker>	better with aurelia come back into the light
[2015-11-19T09:57:50.882Z]	<zewa666>	agree a job be a job though
[2015-11-19T09:58:57.817Z]	<zewa666>	foo now i have just one leave c text cssstyle complain about wrong number of argument
[2015-11-19T09:59:53.608Z]	<zewa666>	hmm an interface maybe
[2015-11-19T10:00:10.017Z]	<zewa666>	yep work interface console any optionalparam any void
[2015-11-19T10:02:17.811Z]	<zewa666>	sometimes -pron- help have other people just listen to -pron- problem laugh
[2015-11-19T10:04:35.566Z]	<Souldrinker>	yup i know that one usually -pron- just help try to explain to someone and i find the solution -pron-
[2015-11-19T12:51:33.309Z]	<jbrantly>	i realize this be an answer to -pron- question but if -pron- want to use ts to transform for browser usage -pron- should change -pron- target to the target be the output target so as be ts  <user> output
--------------------------------------------------------------------------------------------------
[2015-11-19T10:44:39.326Z]	<SilentImp>	hi i be try to use typescript to transform for browser usage and i use gulp as task runner why i may get empty file as output var ts typescript function return out target removecomment true path be ok -pron- work if i try to use but babel be baggy as hell so i try typescript
--------------------------------------------------------------------------------------------------
[2015-11-19T13:10:54.528Z]	<xogeny>	anybody here know anything about invoke the typescript compiler programmatically -pron- try to improve the mocha support for ts but -pron- like to figure out stuff like which file if any apply to a give ts file -pron- just look for some pointer so i can make mocha smart about ts
[2015-11-19T13:19:01.161Z]	<SilentImp>	if i use as target then i get error no async await
[2015-11-19T13:20:21.644Z]	<SilentImp>	i solve problem gulp typescript ignore file with extension only work
--------------------------------------------------------------------------------------------------
[2015-11-19T17:50:43.720Z]	<JKillian>	when do typing file what the difference between declare a namespace with method in -pron- a variable that implement an interface with the same method as in the first case
--------------------------------------------------------------------------------------------------
[2015-11-19T18:59:27.433Z]	<bherila>	hey in -pron- treasure trove of sample do -pron- have something that async ifie a function that deal with callback rather than promise what i be work with
[2015-11-19T19:12:49.427Z]	<JKillian>	to clarify obviously if -pron- an interface -pron- can be use as a type wonder about the difference beyond that
--------------------------------------------------------------------------------------------------
[2015-11-19T19:14:09.213Z]	<mikedon>	do this help
--------------------------------------------------------------------------------------------------
[2015-11-19T19:25:09.689Z]	<DanielRosenwasser>	hey ben wesley go to link an npm library for -pron-
[2015-11-19T19:25:20.299Z]	<weswigham>
[2015-11-19T19:26:13.890Z]	<weswigham>	the promise polyfill  <user> have which do what -pron- want
[2015-11-19T19:27:15.802Z]	<weswigham>	bluebird  <user> have a build in promisify method
[2015-11-19T19:29:58.309Z]	<bherila>	yes
[2015-11-19T19:30:15.083Z]	<bherila>	i be actually just have another issue with bluebird
[2015-11-19T19:30:19.158Z]	<weswigham>	-pron- use q so
[2015-11-19T19:30:29.750Z]	<weswigham>	be what -pron- want
[2015-11-19T19:30:37.060Z]	<bherila>	well since -pron- use async await i have to switch the output type to
[2015-11-19T19:30:38.592Z]	<DanielRosenwasser>	if -pron- not look for an automate approach -pron- have a sample project that use async and wrap callback base api in promise
[2015-11-19T19:30:56.517Z]	<bherila>	but now that i switch to i have the issue that which i include be  <user> reference
[2015-11-19T19:31:15.341Z]	<bherila>	and that be pull in promise and result in this issue
[2015-11-19T19:33:19.011Z]	<mikedon>	yea i think -pron- make mose sense to use promise with async await
[2015-11-19T19:34:04.244Z]	<mikedon>	-pron- look like -pron- try to wrap a steam api with promise which i have see any automate way of do
[2015-11-19T19:35:18.798Z]	<weswigham>	callback base api yes stream no
[2015-11-19T19:37:04.882Z]	<weswigham>	look into -pron- have a function for convert stream to promise
[2015-11-19T19:37:07.466Z]	<weswigham>	so have at -pron-
[2015-11-19T20:04:32.382Z]	<JKillian>	where -pron- expose as a global via bower or can be import as a module
[2015-11-19T20:05:12.511Z]	<JKillian>	do the global part be easy enough but i do know how to get -pron- to mesh with the module declaration
[2015-11-19T20:14:35.103Z]	<JKillian>	 <user> confused why i can do export default but not export as default
[2015-11-19T20:44:39.252Z]	<weswigham>	declare module daypicker export somenamespace
[2015-11-19T20:47:04.360Z]	<weswigham>	that because that how the syntax work export default expression vs export identifier as identifiername
--------------------------------------------------------------------------------------------------
[2015-11-19T19:55:45.701Z]	<bherila>	-pron- be all callback i just have to redo the file for because -pron- include bluebird and be break the build when i try to use promise
[2015-11-19T20:04:12.924Z]	<JKillian>	what would be the right way to structure a typing file for this
[2015-11-19T20:45:02.842Z]	<weswigham>	that the pattern use by most browser library on dt
[2015-11-19T21:22:15.005Z]	<JKillian>	this be what i end up with
--------------------------------------------------------------------------------------------------
[2015-11-19T21:25:07.907Z]	<weswigham>	that fine i just want -pron- to know that that not the shape of -pron- js that would imply -pron- js export member be default dateutil localeutil when the reality be that the entire exported object be dateutil localeutil be member on -pron- and there be no default member this variety of typing  <user> work if -pron- loader do some kind of implied default hoisting for -pron- which i believe system do at present
[2015-11-19T21:26:33.354Z]	<weswigham>	but commonjs consumer  <user> likely be sad and -pron- typing will work for -pron-
[2015-11-19T21:27:02.218Z]	<JKillian>	hmm that could be a problem haha i be try to make -pron- match the example code give here specifically the import
[2015-11-19T21:27:03.599Z]	<weswigham>	since -pron- average commonjs module loader do do such magic auto default creation
[2015-11-19T21:27:34.915Z]	<weswigham>	if -pron- look to make -pron- match the example code then -pron- wanna change -pron- js
[2015-11-19T21:28:24.925Z]	<weswigham>	specifically daypicker should be daypicker
[2015-11-19T21:29:08.167Z]	<weswigham>	just know that do this mean actual commonjs consumer without a transpiler end up need to do var daypicker  <user>
[2015-11-19T21:29:30.800Z]	<weswigham>	and thus be the fundamental difference between a default export and export
[2015-11-19T21:29:45.771Z]	<JKillian>	and then when -pron- build for bower as a global instead of be able to do in tsx daypicker -pron- have to do right
[2015-11-19T21:30:29.655Z]	<weswigham>	do the browser global version just export the module as the global daypicker if so then yes
[2015-11-19T21:30:42.877Z]	<JKillian>	yes that what happen right now
[2015-11-19T21:34:56.056Z]	<weswigham>	the difference between the emit for the two import when transpile to a module format be that the first be effectively var daypicker require while the second be var daypicker
[2015-11-19T21:36:04.473Z]	<weswigham>	honestly -pron- really depend on what module format -pron- plan on use
[2015-11-19T21:37:13.301Z]	<JKillian>	that be a nice compiler flag thank for the explanation use export make since -pron- make the typing have the same shape as the js
[2015-11-19T21:37:56.413Z]	<weswigham>	correct
[2015-11-19T21:38:03.191Z]	<weswigham>	match the js be usually the good idea
[2015-11-19T21:38:04.648Z]	<JKillian>	yeah the module compat story for commonjs etc be pretty confusing especially when -pron- throw in different tool and compiler have different workaround
[2015-11-19T21:38:08.904Z]	<weswigham>	since anything else be rely on the runtime
[2015-11-19T21:39:05.532Z]	<weswigham>	plus use export mean people transpile to a module format who use import daypicker require still get the right thing
--------------------------------------------------------------------------------------------------
[2015-11-19T21:33:49.320Z]	<weswigham>	-pron- recomend go for the export form and either advise -pron- ts consumer to do import as daypicker from until get merge at which point with that flag that style declaration  <user> work with import daypicker from form as far as the compiler be concern weather -pron- work at runtime be up to the module loader
--------------------------------------------------------------------------------------------------
[2015-11-19T21:36:35.746Z]	<weswigham>	something something export and export default be fundamentally different in how -pron- be express and the number of shim between -pron- right now be all stopgap
[2015-11-19T21:42:55.418Z]	<JKillian>	look better
[2015-11-19T21:48:25.319Z]	<weswigham>	look right
--------------------------------------------------------------------------------------------------
[2015-11-19T21:50:02.620Z]	<JKillian>	cool thank for the guidance much appreciated
--------------------------------------------------------------------------------------------------
[2015-11-19T22:19:38.902Z]	<masaeedu>	hi there
[2015-11-19T22:20:09.466Z]	<masaeedu>	i notice system be now an option for module format in
[2015-11-19T22:20:33.024Z]	<masaeedu>	do this indicate that support for systemjs module resolution have be incorporate
[2015-11-19T22:22:31.935Z]	<masaeedu>	-pron- be try to follow what the current state of affair be with module resolution -pron- look like -pron- have node style resolution now and there be something in the work for add baseurl and path map option for
[2015-11-19T22:26:17.476Z]	<masaeedu>	-pron- seem like typescript be not go in the direction of be able to consume a generic module loader implement accord to the whatwg standard
[2015-11-19T22:26:57.965Z]	<masaeedu>	this one specifically
[2015-11-19T22:39:49.820Z]	<weswigham>	-pron- not that standard of a standard yet
[2015-11-19T22:39:59.962Z]	<weswigham>	when -pron- approve as a proposal -pron- plan to support -pron-
[2015-11-19T22:40:07.915Z]	<weswigham>	but right now -pron- a moving target
[2015-11-19T23:38:00.459Z]	<masaeedu>	thank any thought on the systemjs angle
[2015-11-20T00:18:18.556Z]	<weswigham>	the system module flag cause -pron- to emit system module -pron- do not yet support path mapping for module resolution -pron- have an open issue regard that to track progress on -pron-
[2015-11-20T15:03:21.187Z]	<daslicht>	be there somewhere an example how to render typescript tsx on the server side with node
[2015-11-20T15:03:47.017Z]	<daslicht>	please
[2015-11-20T16:28:46.859Z]	<oneillci>	anyone know how to get the name of an enum not an enum value as a string say i have export enum myenumhere one two i want to get the string myenumhere i need a solution for any enum type
--------------------------------------------------------------------------------------------------
[2015-11-20T03:44:55.822Z]	<diegohb>	question how do one implement a computed property or observable property in ts target
--------------------------------------------------------------------------------------------------
[2015-11-20T16:31:48.181Z]	<xogeny>	i doubt that be possible i say this from look at the generate js code from the ts compiler perhaps there be an option to output that information among the config option but with -pron- compile option i do see the string of the enum type name anywhere in the generate code
[2015-11-20T16:32:07.963Z]	<xogeny>	now -pron- do look like -pron- can get the name of the enum value as string at least those be in the js code
[2015-11-20T16:34:27.388Z]	<xogeny>	-pron- no expert -pron- just go by what i see in the ts code
[2015-11-20T16:34:30.115Z]	<xogeny>	js code
[2015-11-20T17:20:39.143Z]	<diegohb>	bulb good tool to generate ts interface from json
[2015-11-20T17:34:42.779Z]	<daslicht>	ts reactjs tsx helloworld
--------------------------------------------------------------------------------------------------
[2015-11-20T16:34:02.600Z]	<oneillci>	yeah that what i think from look at the generate output -pron- look for something similar to a nameof operator that in c there an issue and -pron- be propose but have be mark as revisit but be wonder if there a way of do -pron- that i be aware of
--------------------------------------------------------------------------------------------------
[2015-11-20T20:42:52.449Z]	<kvavelin>	hi
[2015-11-20T20:43:33.189Z]	<kvavelin>	i would like to contribute to angular specially write typescript code anyone can explain -pron- how i can setup -pron- project to work on -pron-
[2015-11-20T20:43:46.096Z]	<kvavelin>	i would use visual studio
[2015-11-20T21:04:48.396Z]	<bherila>	that awesome d
[2015-11-20T21:06:10.567Z]	<bherila>	quick question use should this emit code be a function instead of function since -pron- contain a yield function validation if address require if return false what to do after validation var ok yield return ok
[2015-11-20T23:54:10.495Z]	<weswigham>	what be the original typescript
[2015-11-21T07:28:13.768Z]	<bherila>	original typescript typescript public async post validation if address require if return false what to do after validation var ok await return ok
--------------------------------------------------------------------------------------------------
[2015-11-21T15:31:51.014Z]	<migajek>	hi there do anyone know when  <user> be next version of ts release i see and milestone be do but no info when to expect release
[2015-11-21T19:16:49.520Z]	<DanielRosenwasser>	should be come in the next few week
[2015-11-21T19:21:05.266Z]	<DanielRosenwasser>	be -pron- compile with
[2015-11-21T19:22:03.798Z]	<DanielRosenwasser>	if not the emit code be go to be erroneous because -pron- do currently support pre target for async await
[2015-11-23T04:49:19.186Z]	<bherila>	i update to the late and -pron- work
[2015-11-23T04:49:56.399Z]	<bherila>	and confirm the function be there post return void promise function validation if address require if return false what to do after validation var ok yield return ok
[2015-11-23T07:01:52.625Z]	<DanielRosenwasser>	yay
[2015-11-23T07:02:37.238Z]	<DanielRosenwasser>	be there any roadblock with that
[2015-11-23T07:11:16.951Z]	<bherila>	not really
[2015-11-23T07:11:30.111Z]	<bherila>	btw be there a thing like await c equivalent in ts
[2015-11-23T07:12:33.411Z]	<Arnavion>	await
[2015-11-23T07:12:40.732Z]	<bherila>	oh that make so much sense thank
[2015-11-23T10:04:51.468Z]	<ochrons>
[2015-11-23T10:20:54.477Z]	<LabEG>	in -pron- opinion javascript have no system library
[2015-11-23T10:25:04.500Z]	<LabEG>	optimize compiler uglify google closure compiler and other
[2015-11-23T10:28:09.847Z]	<LabEG>	optimize the code performance google closure compiler -pron- remove dead code and make optimization example
[2015-11-23T10:30:53.768Z]	<LabEG>	just ts compiler make only type cheke and transpile all other job make other tool this be modular process
[2015-11-23T10:37:28.642Z]	<LabEG>	ok i  <user> see later
--------------------------------------------------------------------------------------------------
[2015-11-23T10:05:13.551Z]	<ochrons>	hey -pron- just release a new website for
[2015-11-23T10:05:39.562Z]	<ochrons>	would love to hear typescript user comment and feedback on how -pron- perceive
[2015-11-23T10:10:24.434Z]	<LabEG>	microsoft thumb microsoft blob
[2015-11-23T10:10:33.290Z]	<LabEG>	really d
[2015-11-23T10:11:51.845Z]	<LabEG>	strong type system extensive system library optimize compiler macros to extend the language all these point be incorrect
[2015-11-23T10:12:33.321Z]	<LabEG>	reliable code completion this too
[2015-11-23T10:14:53.898Z]	<ochrons>	ok can -pron- elaborate on those
[2015-11-23T10:15:05.478Z]	<ochrons>	for example what be the system library come with ts
[2015-11-23T10:17:13.648Z]	<LabEG>	hhmmm mayba absolutely all js library
[2015-11-23T10:17:40.024Z]	<ochrons>	quite broad definition of a system library
[2015-11-23T10:19:35.586Z]	<ochrons>	for example c have as the system library
[2015-11-23T10:24:12.617Z]	<ochrons>	depend on the environment in the browser -pron- have stuff like dom on a lot more
[2015-11-23T10:25:15.737Z]	<LabEG>	macros to extend the language preprocessify
[2015-11-23T10:26:36.965Z]	<LabEG>	depend on the environment lodash or similar
[2015-11-23T10:27:03.938Z]	<ochrons>	in general an optimize compiler be understand as a compiler that optimize the code performance not just the code size
[2015-11-23T10:28:34.164Z]	<LabEG>	 <user> make inline
[2015-11-23T10:28:35.729Z]	<ochrons>	yea and sjs use gcc too but -pron- not something the ts compiler do
[2015-11-23T10:30:36.751Z]	<ochrons>	and in many case gcc actually lead to bad performance due to the heavy size optimization
[2015-11-23T10:31:30.653Z]	<ochrons>	do ts produce js code that be good for advanced mode in gcc
[2015-11-23T10:31:34.854Z]	<LabEG>	example do have support jsx syntax
[2015-11-23T10:36:39.883Z]	<ochrons>	i  <user> give a presentation on few week back if -pron- interested in a video format
[2015-11-23T10:37:42.278Z]	<ochrons>	but enough advertising all feedback be welcome -pron- do share the common goal of bring type safety in the wild west of js development
--------------------------------------------------------------------------------------------------
[2015-11-23T10:32:43.521Z]	<ochrons>	why bother with jsx when -pron- can have this in normal scala code scala def render div increase decrease reset
[2015-11-23T10:32:50.512Z]	<LabEG>	hmm have
--------------------------------------------------------------------------------------------------
[2015-11-23T10:37:54.887Z]	<4tron>	be i wrong to assume that the html be get generate in javascript
[2015-11-23T10:38:00.600Z]	<4tron>	with
[2015-11-23T10:38:09.430Z]	<LabEG>	but i have one problem i c programm and type script closer for -pron- for development
--------------------------------------------------------------------------------------------------
[2015-11-23T10:39:15.345Z]	<sjrd>	-pron- depend on -pron- architecture and what library -pron- use -pron- be not opinionate -pron- can have good old file with script tag or -pron- can go all the way to generate the entire dom at runtime
[2015-11-23T10:41:26.499Z]	<4tron>	-pron- be just wonder there be another language that do that what s be call
[2015-11-23T10:42:02.800Z]	<sjrd>	be not a language -pron- be a library -pron- can use with
[2015-11-23T10:42:15.857Z]	<4tron>	oh yes right
[2015-11-23T19:45:35.466Z]	<DanielRosenwasser>	add path to typing angularjs to the file portion of -pron-
[2015-11-23T20:09:10.366Z]	<bherila>	be there a recommend way of instal organize the file in an environment that already use no nuget
[2015-11-23T20:37:15.652Z]	<bherila>	namely i want to have a and a to include different file depend if -pron- in or mode
[2015-11-23T20:40:30.625Z]	<bherila>	be that an option i do see -pron- in the schema
--------------------------------------------------------------------------------------------------
[2015-11-23T14:09:57.854Z]	<eilgin>	hi
[2015-11-23T14:09:59.715Z]	<eilgin>	-pron- use typescript as a module transpiler and systemjs to load those module and i would like to know if there a way to reference a module only by use the import statement js import as angular from angular now i can reference angular and tsc will complain
[2015-11-23T14:11:12.026Z]	<eilgin>	atm -pron- get to do this js reference to typing angularjs import as angular from angular now i can ref angular
[2015-11-23T14:12:21.618Z]	<eilgin>	if i do add the reference comment tsc  <user> complain by say that -pron- do know the angular module
[2015-11-23T20:12:52.272Z]	<RichiCoder1>	tsd
[2015-11-23T20:13:07.843Z]	<bherila>	nice thank
[2015-11-23T20:13:14.790Z]	<RichiCoder1>	welcome d
[2015-11-23T20:38:28.504Z]	<eilgin>	or make the difference between dev and test
--------------------------------------------------------------------------------------------------
[2015-11-23T20:36:42.665Z]	<bherila>	 <user> be there a way to specify a custom file to tsc i think -pron- be but -pron- not show up in tsc
--------------------------------------------------------------------------------------------------
[2015-11-23T21:51:52.637Z]	<DanielRosenwasser>	take a folder right now
[2015-11-23T21:52:00.470Z]	<DanielRosenwasser>	but there be a pr to let -pron- accept a specific file
[2015-11-23T21:52:24.353Z]	<DanielRosenwasser>	so right now -pron- can only have one per folder
[2015-11-23T22:09:34.135Z]	<DanielRosenwasser>	could that not be solve by run an extra shell or something of the sort
[2015-11-23T22:09:56.586Z]	<DanielRosenwasser>	i would rather just run tmux -pron- not clear how to interleave error for the two when difference arise
[2015-11-23T22:11:14.760Z]	<DanielRosenwasser>	maybe -pron- not completely understand the scenario though
[2015-11-23T22:11:53.834Z]	<xogeny>	sure but this would make develop npm modules much nice right now create a new npm module in typescript and then develop -pron- concurrently be a pain this multiple shell approach do scale really well event better would be something where -pron- could ask tsc to look into and rebuild those those with typing field in on change
[2015-11-23T22:12:22.423Z]	<xogeny>	the bottom line be that if -pron- work on an application that leverage multiple ts npm module thing be pertty tedious right now -pron- would be nice to make that much smooth would probably improve adoption
[2015-11-23T22:13:01.277Z]	<xogeny>	when -pron- be write in ts
[2015-11-23T22:14:42.526Z]	<xogeny>	first -pron- do have to publish -pron- several of -pron- npm module be private i can just link -pron-
[2015-11-23T22:15:59.881Z]	<xogeny>	i agree if -pron- strictly a consumer developer this would really apply -pron- just publish -pron- typing and be do
[2015-11-23T22:16:32.793Z]	<xogeny>	to -pron- this be an ecosystem issue if -pron- want people to row upstream all the time when develop then -pron- will get the adoption
[2015-11-23T22:16:53.555Z]	<xogeny>	i can develop multiple npm modules in javascript without issue why not make -pron- easy to do the same thing in ts
[2015-11-23T22:17:10.040Z]	<DanielRosenwasser>	gotcha
[2015-11-23T22:17:24.048Z]	<xogeny>	i think that webpack already do this actually let -pron- check
[2015-11-23T22:19:50.845Z]	<xogeny>	-pron- wrong look like ts do take care of recompilation although i swear -pron- do maybe -pron- think of ts -pron- pretty sure i see this working somewhere recently
[2015-11-23T22:20:11.451Z]	<xogeny>	to be clear take care of recompilation of nest npm modules write in ts
--------------------------------------------------------------------------------------------------
[2015-11-23T22:06:47.805Z]	<mattmazzola>	when specify the type for array be these equivalent ithe ithe i have be use the former but -pron- be see the latter in recent code and i think -pron- would mean -pron- want an array with one element of type ithe
[2015-11-23T22:08:01.938Z]	<xogeny>	any chance to have multiple flag this would be useful for case where i want to watch multiple directory npm modules and rebuild any of -pron- on a change
[2015-11-23T22:12:38.204Z]	<DanielRosenwasser>	but when would -pron- have a in -pron- folder
[2015-11-23T22:13:31.697Z]	<DanielRosenwasser>	but why would an author include a when publish a package
[2015-11-23T22:14:28.108Z]	<DanielRosenwasser>	-pron- have the and the
[2015-11-23T22:15:37.364Z]	<xogeny>	similarly if -pron- install from git same thing the point be that if -pron- develop an npm module in ts -pron- certainly go to have a
[2015-11-23T22:15:55.456Z]	<DanielRosenwasser>	i see
[2015-11-23T22:17:14.212Z]	<DanielRosenwasser>	unfortunately i do think that something support that workflow right now
[2015-11-23T22:17:18.421Z]	<DanielRosenwasser>	though tsproject may be useful for that
[2015-11-23T22:17:21.610Z]	<DanielRosenwasser>
[2015-11-23T22:17:31.174Z]	<DanielRosenwasser>	may have some detail
[2015-11-23T22:17:34.261Z]	<DanielRosenwasser>	brb
--------------------------------------------------------------------------------------------------
[2015-11-24T13:20:37.442Z]	<edgarjcfn>	hi everyone could somebody help -pron- figure out something regard typescript and requirejs
[2015-11-24T13:21:01.668Z]	<edgarjcfn>	i implement a single module of -pron- application in typescript with module amd
[2015-11-24T13:21:28.346Z]	<edgarjcfn>	and now -pron- have a hard time consume this module from anything that do use requirejs
[2015-11-24T13:21:50.543Z]	<edgarjcfn>	do i have to convert everything in -pron- application to use requirejs in order to consume this module how do this work
[2015-11-24T13:22:26.776Z]	<edgarjcfn>	or should i use another module system in the typescript part of -pron- app to be able to integrate with the rest
[2015-11-24T13:22:47.353Z]	<kitsonk>	well typescript do care about how the module be load at runtime if the rest of -pron- application be not use an amd module loader then yes
[2015-11-24T13:23:39.700Z]	<kitsonk>	-pron- can use umd which allow the module to be load by both commonjs loader like nodejs require or even a systemjs loader
[2015-11-24T13:25:08.918Z]	<edgarjcfn>	so the typescript part of -pron- application be pretty self contain -pron- have -pron- own internal module and do need a lot of information from the other module -pron- question be more about consume this module now without requirejs be -pron- possible
[2015-11-24T13:25:29.966Z]	<edgarjcfn>	if the rest of -pron- application be not use an amd module loader then yes for which question be the yes
[2015-11-24T15:13:42.034Z]	<eilgin>	-pron- get a problem when i try to exclude a sub directory in -pron- i want to exclude the angular protractor folder from be use by tsc so i set the follow directive in -pron- js exclude typing angular protractor the typing folder contain definition file and since i use -pron- include which result in a conflict with protractor because both of -pron- be use the variable
[2015-11-24T15:14:52.654Z]	<eilgin>	if i compile the folder use project -pron- folder i get bash typing jquery error subsequent variable declaration must have the same type variable must be of type cssselectorhelper but here have type jquerystatic
[2015-11-24T15:15:40.435Z]	<eilgin>	so -pron- seem that typing angular protractor be parse by tsc even if i explicitely exclude -pron- folder
[2015-11-24T15:27:28.106Z]	<eilgin>	-pron- use the version
[2015-11-24T15:50:38.373Z]	<kitsonk>	how be -pron- load module in -pron- application what module loader be -pron- use at run time
[2015-11-24T15:52:03.948Z]	<edgarjcfn>	currently there be no module loader -pron- an angular web page with an embed game the game be do in typescript and i would like to reference -pron- instantiate from angular code
[2015-11-24T15:53:13.449Z]	<edgarjcfn>	i do use any module loader on the angular app and i do di as describe here
[2015-11-24T15:57:10.618Z]	<kitsonk>	well i do know enough about angular but i do know -pron- do use any module in the way the people generally consider a good idea angular use systemjs to load modules and systemjs support and commonjs module iirc someone though who understand angular well be go to have to help -pron- but i do think there be a module format that -pron- actually understand
[2015-11-24T16:01:36.193Z]	<edgarjcfn>	ok one more question then be -pron- still possible for -pron- to concat all file that be create by typescript or be -pron- a requirement for amd that i only export one module per file
[2015-11-24T16:19:16.285Z]	<kitsonk>	if -pron- be use a module format typescript  <user> not concatenate output and if -pron- do -pron- -pron- would have an invalid module most people use secondary build tool like to create a single file build that be valid and can be load in a browser
[2015-11-24T16:39:44.293Z]	<edgarjcfn>	thank -pron- that clear some thing up
--------------------------------------------------------------------------------------------------
[2015-11-24T18:06:53.224Z]	<gdi2290>	the state of typescript package with blake embrey
[2015-11-25T00:40:51.244Z]	<weswigham>	ts at master can concatenate -pron- ts amd or systemjs module for -pron-
[2015-11-25T01:14:08.863Z]	<bherila>	do typescript support auto getter setter on class property
[2015-11-25T02:22:47.401Z]	<bherila>	mmm ok thank
--------------------------------------------------------------------------------------------------
[2015-11-25T01:42:00.057Z]	<weswigham>	errr no that not a feature -pron- ever discuss afaik -pron- do really make sense with js getter setter syntax js class a get foo set be way different than c class a int foo get
[2015-11-25T01:43:20.696Z]	<weswigham>	 <user> unlike in c where -pron- have to worry about library binding codegen issue there be no majorly observable difference between a getter setter pair and a field in js
[2015-11-25T01:43:39.884Z]	<weswigham>	so just do public int foo should be sufficient
[2015-11-25T01:44:22.023Z]	<weswigham>	and if -pron- need side effect readonlyness later then -pron- can swap -pron- to a getter setter pair
--------------------------------------------------------------------------------------------------
[2015-11-25T21:38:19.862Z]	<lucamorelli>	be available some csharp to typescript compatible with compatible with ans
--------------------------------------------------------------------------------------------------
[2015-11-26T08:52:01.760Z]	<lifenautjoe>	-pron- get a unknown compiler option moduleresolution error and can not figure out the reason for -pron-
[2015-11-26T08:57:52.808Z]	<lifenautjoe>	figure -pron- out the guy from the yeoman generator have set a moduleresolution option in the compileroption within the perhaps some outdate param
[2015-11-26T09:26:20.770Z]	<Arnavion>	not oudate new in
[2015-11-26T12:23:26.656Z]	<lifenautjoe>	oh thank
--------------------------------------------------------------------------------------------------
[2015-11-26T14:58:35.536Z]	<felixfbecker>	hi what be -pron- opinion on current state of typescript private class property atm these be not really private when transpile to js transpiled class be wrap in a closure anyway why not pack a weakmap in there with weakmap polyfill for old browser and transpile private property access to
[2015-11-26T15:01:39.737Z]	<felixfbecker>	for example in angular dependency injection -pron- often save the constructor inject service as private variable so -pron- can be access in the class method but because -pron- be not truly private after transpile -pron- be technically add to the scope of the component be -pron- and ts can check type safety inside angular template expression so one may be tempt to use private service like http inside template expression and neither typescript nor angular would throw an error
[2015-11-26T15:13:36.634Z]	<felixfbecker>	to clarify this ts class test private x constructor transpile to js var test function function test return test when -pron- should really be something like this js var test function var privatepropertie new weakmap function test return test
[2015-11-26T15:16:23.297Z]	<ochrons>	sound a bit overprotective to -pron- even in strongly typed language like scala private be a compile time only construct and be expose as public in jvm byte code
[2015-11-26T17:09:04.553Z]	<felixfbecker>	yeah but typescript do compile expression in angular template
[2015-11-26T20:50:19.048Z]	<DanielRosenwasser>	-pron- way slow on current engine to do that
[2015-11-26T23:01:51.734Z]	<Arnavion>	-pron- do want a weakmap to hold property weakmap drop entry if -pron- can be gcd otherwise
[2015-11-26T23:02:15.703Z]	<Arnavion>	-pron- could make the case for private property use symbol key which be not do automatically but can be do manually
[2015-11-26T23:11:03.500Z]	<Arnavion>	error a computed property name in a class property declaration must directly refer to a build in symbol
[2015-11-26T23:11:08.231Z]	<Arnavion>	welp except for that
[2015-11-26T23:18:24.898Z]	<Arnavion>	error symbol reference do not refer to the global symbol constructor object
[2015-11-26T23:18:32.162Z]	<Arnavion>	alas -pron- cunning plan have be foil
[2015-11-27T00:34:58.394Z]	<vip32>	would be interesting to know the effort to add an additional framework aurelia to the generator have some experience with that framework but not with build yo generator
[2015-11-27T00:37:19.597Z]	<vip32>	a work aurelia ts sample can be find here include the gulp stuff
[2015-11-27T06:15:22.105Z]	<ochrons>	ts be a rather thin wrapper over js so definitely -pron- need to understand js first
[2015-11-27T09:28:04.884Z]	<felixfbecker>	weakmap be for associate the private property with a specific instance of the class as -pron- can see i use this as key if -pron- use a regular map the private property would leak memory when the instance be garbage collect as long as the instance exist in memory the private property  <user> exist in memory
[2015-11-27T11:11:16.955Z]	<eilgin>	yeah -pron- entirely -pron- fault i should have test -pron- before buy a webstorm licence just because -pron- use to the jetbrain ide
--------------------------------------------------------------------------------------------------
[2015-11-26T17:58:22.055Z]	<Emigre>	hey guy i have release a new version of -pron- yeoman generator -pron- generate a typescript project with jspm and systemjs maybe -pron- like -pron- or find -pron- useful hope -pron- help
[2015-11-26T17:58:40.738Z]	<Emigre>	cheers
--------------------------------------------------------------------------------------------------
[2015-11-27T00:15:56.169Z]	<vip32>	try -pron- now the more ts generator with jspm the well
[2015-11-27T00:32:06.476Z]	<vip32>	do a quick run and no problem encounter that something new for ts base generator i like that -pron- minimal serve run directly on the src withouth the build step this be something i can use for  <user> to  <user> angular jspm ts project
--------------------------------------------------------------------------------------------------
[2015-11-27T03:26:55.617Z]	<godutch>	hello
[2015-11-27T03:27:26.640Z]	<godutch>	if i be new to javascript learn ts or js first
[2015-11-27T03:27:53.917Z]	<godutch>	i be go to project angular maybe other something new
[2015-11-27T08:43:35.421Z]	<godutch>	thx
--------------------------------------------------------------------------------------------------
[2015-11-27T10:26:37.104Z]	<eilgin>	be there people here use webstorm phpstorm to code in ts
[2015-11-27T10:52:39.784Z]	<eilgin>	i bet vs code be well on this and -pron- free
[2015-11-27T11:04:33.683Z]	<eilgin>	omg -pron- just download vs code and -pron- depressed at how well -pron- recognize the type i definitely do recommend buy a webstorm expensive license if -pron- want an ide
--------------------------------------------------------------------------------------------------
[2015-11-27T10:30:18.707Z]	<arozwalak>	-pron- use intellij and webstorm
[2015-11-27T10:38:33.809Z]	<eilgin>	do -pron- know how to make the auto completion work with the module loader
[2015-11-27T10:39:02.890Z]	<eilgin>	without use the reference thing
[2015-11-27T10:52:11.152Z]	<eilgin>	webstorm typescript support be terrible -pron- do take tslint for the code style format incorrect import completion buggy autocompletion bullshit marketing sell -pron- brilliantly since most of -pron- ts bulletpoint do work
[2015-11-27T11:05:15.803Z]	<eilgin>	-pron- even show -pron- real bug instead of false positive smile
[2015-11-27T11:06:03.493Z]	<arozwalak>	yes vs code be really good
--------------------------------------------------------------------------------------------------
[2015-11-27T10:42:30.566Z]	<arozwalak>	-pron- work now on project with webpack and and -pron- not sure how auto completion work for -pron- and how intellij figure -pron- out but -pron- not use reference in -pron- file
--------------------------------------------------------------------------------------------------
[2015-11-27T11:13:33.881Z]	<jrasanen>	try jetbrain support for -pron- other ide the support have be excellent
[2015-11-27T11:15:21.696Z]	<eilgin>	-pron- never be dissapointe by -pron- support but there already report from other user about these problem
[2015-11-27T11:16:14.785Z]	<jrasanen>	good to know be go to compare vscode webstorm today smile
[2015-11-27T11:16:28.789Z]	<eilgin>	the problem be that -pron- kinda suck for an ide not be capable of auto complete type or method
--------------------------------------------------------------------------------------------------
[2015-11-28T12:53:26.503Z]	<amit-handa>	hi i be new to typescript use atom typescript to generate commonjs transpile js for nodejs what be the good way to convert js project to typescript one i have rename the project js file to ts i be get follow error can not redeclare block scope variable var name thank btw the plugin do successfully
[2015-11-28T12:55:06.073Z]	<ochrons>	ts be not as forgiving of program error as js be
[2015-11-28T12:58:24.643Z]	<amit-handa>	hmmm -pron- code snippet be as follow use strict var mongoose constant ts cry for constant variable
[2015-11-28T13:00:00.612Z]	<ochrons>	sound like -pron- declare somewhere else already
[2015-11-28T13:00:23.878Z]	<amit-handa>	what if i convert var let
[2015-11-28T13:00:41.309Z]	<amit-handa>	do i need to enclose the ts file code into a namespace module
[2015-11-28T13:02:38.685Z]	<amit-handa>	seem like i land a good link to educate -pron-
[2015-11-28T13:02:39.586Z]	<amit-handa>
[2015-11-29T04:16:24.735Z]	<amit-handa>	in typescript i type to see declaration what be the shortcut for return from declaration
--------------------------------------------------------------------------------------------------
[2015-11-28T22:07:39.765Z]	<ericmartinezr>	hey guy a simple question this chatroom be -pron- first guess so sorry if -pron- should go here if a import b can b import a
[2015-11-28T22:13:34.473Z]	<david-driscoll>	generally speak no because -pron- create a circular reference -pron- can however reference interface from a in b and interface in b from a since -pron- do emit any code really
[2015-11-28T22:14:55.884Z]	<ericmartinezr>	thank for the answer driscoll
[2015-11-28T22:15:50.406Z]	<david-driscoll>	now there may be time that -pron- not directly aware of at the moment that -pron- can but even with vanilla node -pron- can cause issue
[2015-11-28T22:38:13.735Z]	<ericmartinezr>	driscoll thank -pron- not have real issue -pron- use so -pron- bootstrap a a import b and -pron- work but when from b i try to import a everything from a be undefined i can change the approach -pron- not a big deal i just want to be sure d
[2015-11-29T14:21:28.343Z]	<4tron>
--------------------------------------------------------------------------------------------------
[2015-11-30T10:18:53.076Z]	<aksharpatel47>	-pron- think of propose typescript with react to use for -pron- next project at -pron- company can anyone share -pron- experience on the same
[2015-12-01T10:55:20.327Z]	<falsandtru>	thank -pron- for a release of typescript smile
--------------------------------------------------------------------------------------------------
[2015-11-30T13:03:15.916Z]	<4tron>
[2015-11-30T13:11:04.476Z]	<4tron>	i honestly do not understand this typing dir i have just move -pron- outside the main application directory and now -pron- be work
[2015-11-30T13:11:22.472Z]	<4tron>	one difference
[2015-11-30T13:12:04.543Z]	<4tron>	closed visual studio and reopen -pron-
[2015-11-30T13:45:46.576Z]	<eilgin>	-pron- link to stackoverflow be break not find page btw -pron- use the typing folder inside -pron- app directory and -pron- work fine i could put -pron- outside but -pron- would require -pron- to include -pron- manually in the
[2015-11-30T13:47:39.106Z]	<eilgin>	-pron- get problem with typing mostly because libs like protactor and jquery export the same variable with different annotate type
[2015-11-30T13:48:53.283Z]	<4tron>	yeah i delete -pron- because the issue be a stupid mistake -pron- have be call out for post question which have time type user issue
[2015-11-30T13:49:16.360Z]	<4tron>	do not want to anger the so god
[2015-11-30T13:49:53.880Z]	<eilgin>	do know those god smile
[2015-11-30T13:50:55.542Z]	<lifenautjoe>	i fucking love typescript just sayin in case some mantainer be around
[2015-11-30T13:51:07.665Z]	<4tron>	hahaha
[2015-12-01T11:26:09.434Z]	<ochrons>	now -pron- have to go and regrex replace all y with x y
--------------------------------------------------------------------------------------------------
[2015-11-30T14:04:24.795Z]	<andrejunges>	hey guy be someone use angular beta with typescript
--------------------------------------------------------------------------------------------------
[2015-11-30T15:07:37.963Z]	<JKillian>	-pron- work pretty nicely typescript have native support for jsx via file and  <user> even do typechecking of jsx attribute
[2015-11-30T15:08:26.855Z]	<JKillian>	of course angular be design for typescript so that strike -pron- as a nice library to use when use ts as well depend what -pron- look for i guess
--------------------------------------------------------------------------------------------------
[2015-11-30T18:41:47.060Z]	<xdansmith>	so i know this be the place to ask but maybe there be a room on gitter that -pron- not aware of that -pron- can tell -pron- to visit
[2015-11-30T18:42:19.496Z]	<xdansmith>	wonder if any of -pron- have migrate a large mvc web api project from to the new
[2015-11-30T18:44:35.984Z]	<DanielRosenwasser>	thank
[2015-11-30T18:46:29.507Z]	<lifenautjoe>	more than welcome
[2015-11-30T18:49:04.005Z]	<DanielRosenwasser>	smile
--------------------------------------------------------------------------------------------------
[2015-12-01T13:06:02.941Z]	<Chris2011>	i really like typescript but i really would like to not compile not work code this  <user> be compile class greeter greeting string string message greet return hello var greeter new var button say hello function i only get the hint that this be not possible to paste a number to a string but to prevent such false -pron- would be good if -pron- can have a flag to deactive compiling of this source
[2015-12-01T13:07:05.911Z]	<Chris2011>	or be such flag already implement
[2015-12-01T13:15:33.059Z]	<Souldrinker>	noemitonerror
[2015-12-01T13:46:44.516Z]	<Chris2011>	cool do know that i work until ts i see -pron- now at google that this flag be already there in
[2015-12-01T13:46:45.884Z]	<Chris2011>	thx
[2015-12-02T09:27:33.638Z]	<scottwio>	export class messagemodel constructor public title string message title public -pron- would number
--------------------------------------------------------------------------------------------------
[2015-12-01T19:34:52.858Z]	<BigDataSamuli>	hi i have some code use async await with the late and step through code seem to behave weirdly the execution cursor jump all over the source file through seemingly unrelated line and the awaiter function be often on the call stack i wonder if this may be a bug or some know limitation breakpoint seem to work fine for the most part at least
--------------------------------------------------------------------------------------------------
[2015-12-01T21:21:35.301Z]	<LPGhatguy>	be there a go to solution for strip unused import like vs can do with code
[2015-12-01T21:36:18.378Z]	<mjohnsonengr>	confession i just delete -pron- all and add -pron- back in error drive i do do that often though
[2015-12-01T22:19:43.643Z]	<mjohnsonengr>	optimize the import anyways so i have be too concerned about -pron- i only do that twice one of those time be because a previous developer have paste a list of import from another file so -pron- do have to type out the one -pron- need
[2015-12-01T22:19:57.255Z]	<mjohnsonengr>	and -pron- paste line of import
[2015-12-01T22:20:47.558Z]	<DanielRosenwasser>	where be -pron- debug
[2015-12-01T22:22:06.867Z]	<DanielRosenwasser>	-pron- can use the no unused variable tslint rule
[2015-12-01T22:31:33.560Z]	<DanielRosenwasser>	can -pron- file an issue with a minimal repro
[2015-12-02T09:27:32.651Z]	<scottwio>	i have what hopefully be a simple question i have a class that look like this
[2015-12-02T09:28:15.663Z]	<scottwio>	i want to make -pron- would an optional parameter how do i do that remove the default parameter cause an error
[2015-12-02T18:33:59.511Z]	<DanielRosenwasser>	and default initialize parameter be only consider optional if -pron- trail
[2015-12-02T18:34:46.909Z]	<DanielRosenwasser>	default initialize parameter can occur anywhere else in -pron- parameter list but purely optional parameter must be at the end of -pron- list with other optional parameter
[2015-12-02T20:41:12.558Z]	<LPGhatguy>
[2015-12-02T20:41:35.933Z]	<LPGhatguy>	woop wrong gitter
--------------------------------------------------------------------------------------------------
[2015-12-01T22:13:20.356Z]	<chrsmrtn->	go old school d
[2015-12-01T22:18:53.463Z]	<mjohnsonengr>	well i wish i have a well solution but i have care enough to find one yet
[2015-12-01T22:22:17.899Z]	<DanielRosenwasser>	though that do actually remove the import
[2015-12-01T22:22:27.108Z]	<chrsmrtn->	-pron- solve the same problem the same way while i like plugin just like any other dev at time i just want to rely on the compiler to tell -pron- what happen
[2015-12-01T22:33:26.573Z]	<BigDataSamuli>	sure have to wait until tomorrow though -pron- get late here
--------------------------------------------------------------------------------------------------
[2015-12-01T22:31:10.613Z]	<BigDataSamuli>	i try both an ntvs console application so debug in vs and an application debug inside chrome and the behavior seem similar though the code be exactly the same  <user> try vs code later and that one actually step between both the ts and js file though -pron- not that familiar with vs code so -pron- might be configure incorrectly
--------------------------------------------------------------------------------------------------
[2015-12-02T09:34:27.885Z]	<romanroe>	public -pron- would number
[2015-12-02T09:56:28.247Z]	<scottwio>	that the one sorry i tire that but forget to remove the default parameter and of course -pron- can have both
--------------------------------------------------------------------------------------------------
[2015-12-02T15:20:28.756Z]	<mona58132>	hi i have a homework and i lose with the typescript when i try to run the command of tsc src app -pron- give -pron- this error
[2015-12-02T15:21:15.780Z]	<mona58132>	error unexpected token module class interface enum import or statement expect
[2015-12-02T15:21:21.221Z]	<mona58132>	any help
--------------------------------------------------------------------------------------------------
[2015-12-02T15:54:38.967Z]	<nstanard>	have -pron- reach out to -pron- teacher
--------------------------------------------------------------------------------------------------
[2015-12-02T17:30:55.614Z]	<ntilwalli>	be -pron- possible to have a class a in one module which reference a class b in another module which extend class a -pron- not a circular reference but a circular extension like so file import b from export class a instanceof b correct file import a from export class b extend a -pron- think not since extend generate code which require a to already be define so -pron- can copy the property of a over to b but a be undefined at that point thought
[2015-12-02T17:32:52.684Z]	<Arnavion>	as long as -pron- load first -pron- work
[2015-12-02T17:33:14.127Z]	<Arnavion>	see if -pron- can convince -pron- module loader to do that
[2015-12-02T17:47:11.246Z]	<ntilwalli>	awesome yeah when i change -pron- to load before -pron- work thank
--------------------------------------------------------------------------------------------------
[2015-12-02T18:33:35.391Z]	<DanielRosenwasser>	optional parameter all have to be trail
--------------------------------------------------------------------------------------------------
[2015-12-03T07:34:16.156Z]	<Paca-Vaca>	good  <user> to everyone could someone advise -pron- on how could i make a file with babel and ts loader
[2015-12-03T07:34:45.406Z]	<Paca-Vaca>	or there be some helpful article on the internet
[2015-12-03T13:15:51.426Z]	<miroslavhornak>	the result be that even the be declare to be a number -pron- hold an object after above assignment i would expect the compiler to scream in such case but -pron- be quiet why
[2015-12-03T15:42:26.082Z]	<zachrip>	oh sorry i guess i misunderstood
[2015-12-03T15:47:15.209Z]	<jbrantly>	lol grin
[2015-12-03T15:48:50.806Z]	<jbrantly>	glad to hear -pron- helpful
[2015-12-03T15:49:29.622Z]	<mjohnsonengr>
[2015-12-03T15:49:40.676Z]	<mjohnsonengr>
[2015-12-03T17:57:41.498Z]	<Paca-Vaca>	thank -pron-
[2015-12-04T07:34:05.650Z]	<DanielRosenwasser>	-pron- definitely a priority for -pron- and -pron- work on -pron-
--------------------------------------------------------------------------------------------------
[2015-12-03T12:46:31.035Z]	<miroslavhornak>	hello -pron- go through the master typescript book scratch -pron- head on the overloaded constructor function when there be a class class complextype implement icomplextype -pron- would number name string number namearg string string namearg string any namearg any idarg namearg etc why be -pron- allow to assign any to which be declare to be number or to the name which be declare to be string i could understand if -pron- be an oposite way that be class variable must be of type any in case there be multiple constructor assign to those variable different type any clarification
[2015-12-03T13:08:29.975Z]	<miroslavhornak>	call constructor with var complextype new true properly generate error argument of type boolean be not assignable to parameter of type string but have method in complextype any any and call -pron- with true name test work fine why
[2015-12-03T13:25:33.414Z]	<miroslavhornak>	full example interface icomplextype -pron- would number name string print stre any any class complextype implement icomplextype -pron- would number name string number name string -pron- would name print stre return -pron- would name any anyarg var complextype complextype new some string true name test print string
--------------------------------------------------------------------------------------------------
[2015-12-03T14:56:43.614Z]	<cantide5ga>	be jsx support specific to the use of react or could i somehow use -pron- to do something like appendchild i recall a few example early on with jsx be use this way with vanilla javascript as if -pron- be an element or node
[2015-12-03T15:24:56.267Z]	<jbrantly>	-pron- can use preserve which  <user> just keep the jsx intact for use by another tool to transform -pron- however -pron- like
[2015-12-03T15:26:23.976Z]	<cantide5ga>	thank  <user> this jive with react in the case i want to use -pron- alongside a react project
[2015-12-03T15:26:40.441Z]	<zachrip>	that what -pron- for
[2015-12-03T15:27:06.879Z]	<jbrantly>	erm from the ts side -pron- all or nothing mean all of -pron- file can be transform into call or all of -pron- file can be preserve
[2015-12-03T15:28:55.795Z]	<jbrantly>	depend on what -pron- mean by alongside that may not matter
[2015-12-03T15:29:56.936Z]	<cantide5ga>	mean in some file i need -pron- transform into and other i need to preserve would be ask way to much to expect this to work in the same file
[2015-12-03T15:30:15.129Z]	<cantide5ga>	-pron- guess even the former will work as -pron- can specify which be which
[2015-12-03T15:30:18.389Z]	<jbrantly>	but all file be typescript
[2015-12-03T15:30:23.475Z]	<cantide5ga>	yes
[2015-12-03T15:31:19.607Z]	<jbrantly>	within the context of a single compilation -pron- can tell typescript to preserve some file and not other to -pron- knowledge
[2015-12-03T15:31:47.107Z]	<cantide5ga>	yeah -pron- read the same now -pron- be correct -pron- seem
[2015-12-03T15:32:22.956Z]	<jbrantly>	what -pron- could possibly do depend on -pron- toolchain be tell typescript to preserve all file and then selectively apply other tool to specific file afterwards ie run babel on the react file for the react jsx and run whatever other tool on the other file for appendchild
[2015-12-03T15:32:55.467Z]	<cantide5ga>	use a party library with react flux so be able to juggle both jsx transformation would be great thank for the help -pron- make sense now
[2015-12-03T15:33:14.953Z]	<cantide5ga>	that a good idea
[2015-12-03T15:33:55.645Z]	<cantide5ga>	probably  <user> get this current project out the door and come back and do exactly that
[2015-12-03T15:36:39.827Z]	<cantide5ga>	unless -pron- know a trick -pron- read -pron- comment as contrary
[2015-12-03T15:42:53.816Z]	<zachrip>	 <user> have the right idea then
[2015-12-03T15:44:15.041Z]	<zachrip>	oh that where i know -pron- from i know the name i have realize that i occasionally steal -pron- typescript webpack setup when start a new project
--------------------------------------------------------------------------------------------------
[2015-12-03T17:08:19.610Z]	<JKillian>	vaca this article may be helpful -pron- depend on what -pron- look for exactly
[2015-12-04T07:30:52.007Z]	<zachrip>	for reference ts be now on
--------------------------------------------------------------------------------------------------
[2015-12-03T19:46:06.649Z]	<mariowise>	hi can anybody help -pron- with this proof of concept abstract class animal abstract talk stre makesound stre return talk class  <user> extend animal talk stre return wuof in the abstract class the talk call be not recognize s
[2015-12-03T19:47:52.948Z]	<Arnavion>	property need explicit this in javascript -pron- should be have nothing to do with abstract
[2015-12-03T19:49:11.973Z]	<mariowise>	ou right let -pron- put this again -pron- an error
[2015-12-03T19:49:38.217Z]	<mariowise>	abstract class animal abstract talk stre static makesound stre return class  <user> extend animal talk stre return wuof
[2015-12-03T19:50:03.633Z]	<mariowise>	the makesound can not be static
[2015-12-03T19:50:21.305Z]	<Arnavion>	how would a static method know what this refer to
[2015-12-03T19:55:36.352Z]	<mariowise>	yea totally true
[2015-12-03T19:55:58.833Z]	<mariowise>	thanks re think the whole thing xd
[2015-12-03T19:58:55.299Z]	<zachrip>	i do know why makesound would be static anyways
[2015-12-03T20:00:58.517Z]	<mariowise>	-pron- be a bad example let -pron- think if i can express better what -pron- try to do
[2015-12-04T07:30:41.763Z]	<zachrip>	-pron- do give too much insight into actual tangible progress but -pron- something
--------------------------------------------------------------------------------------------------
[2015-12-04T06:26:44.396Z]	<electricessence>	async await and what the status on that how can -pron- make that work
[2015-12-04T07:19:26.968Z]	<zachrip>	-pron- on the roadmap for
[2015-12-04T07:30:22.679Z]	<zachrip>	-pron- may  <user> find this article useful
--------------------------------------------------------------------------------------------------
[2015-12-04T14:56:55.487Z]	<omnipresentminded>	microsoft typescript cnpl thumb microsoft typescript cnpl blob
[2015-12-04T14:57:00.512Z]	<omnipresentminded>
[2015-12-04T14:57:28.619Z]	<omnipresentminded>	i be new to typescript since i be learn aurelia i be try to follow an example that user jquery i can not find how to get around the keyword this
--------------------------------------------------------------------------------------------------
[2015-12-04T15:05:43.329Z]	<datoml>	hello everyone
[2015-12-04T15:07:23.755Z]	<datoml>	have someone achieve the following task -pron- want to use typescript with visual studio for debug this work well when target but when -pron- target to get all feature ts provide -pron- have to use babel for transpile but then -pron- be not able to debug in visual studio anymore
[2015-12-04T15:23:08.034Z]	<eilgin>	so if i understand this -pron- actually do this transpilation workflow ts target js babel js be -pron- too much just to get thing like async await
[2015-12-04T15:36:00.048Z]	<datoml>	-pron- only an idea
[2015-12-04T15:36:19.006Z]	<datoml>	currently -pron- be go with target js
[2015-12-04T15:36:29.433Z]	<datoml>	and use polyfill for thing like and so on
[2015-12-04T15:37:35.823Z]	<datoml>	so i think y not use and use stufff that come with ts and then kick out babel but i guess -pron- right -pron- pretty much overkill
[2015-12-04T16:18:14.614Z]	<electricessence>	a daunting task t smile pun intend speak of  <user> async await be limit to promise or  <user> there be a way to await on other thing like getawaiter
[2015-12-04T16:20:11.807Z]	<electricessence>	generator try to wrap -pron- head around -pron- why be -pron- call generator be this a totally new concept do -pron- arise with
[2015-12-04T16:21:29.330Z]	<zachrip>	if -pron- read the article i link -pron- may give -pron- some insight
[2015-12-04T16:22:34.922Z]	<electricessence>	-pron- be do a lot of reading include the many of the post in github -pron- look for the short answer
[2015-12-04T16:22:54.675Z]	<electricessence>	-pron- look like generator be simply the ienumerable t yield return pattern
[2015-12-04T16:23:10.903Z]	<electricessence>	but that where -pron- brain stop work
[2015-12-04T16:24:46.080Z]	<zachrip>	generator be an feature yes
[2015-12-04T16:25:32.543Z]	<electricessence>	ah i do see the mdn article thx
[2015-12-04T16:28:04.673Z]	<zachrip>	 <user>
[2015-12-04T16:31:17.910Z]	<electricessence>	i wonder why the end up be a requirement -pron- seem so elegant that if yield be include in a method that -pron- automatically compile that way just like c
[2015-12-04T16:33:57.228Z]	<zachrip>
[2015-12-04T16:34:27.338Z]	<zachrip>	ah nope
[2015-12-04T16:34:45.119Z]	<zachrip>	just go to delete that so i do spread misinformation
[2015-12-04T16:34:49.655Z]	<electricessence>	ha
[2015-12-04T16:34:55.909Z]	<electricessence>
[2015-12-04T16:38:01.551Z]	<zachrip>	find this
[2015-12-04T16:40:38.302Z]	<electricessence>	thank
[2015-12-04T16:49:36.693Z]	<zachrip>	-pron- just one asterisk
--------------------------------------------------------------------------------------------------
[2015-12-04T16:47:08.959Z]	<electricessence>	uhg this be where -pron- disdain for js reawaken -pron- only -pron- opinion but if be implement for readability why not just use a completely different keyword altogether like generate x maybe ts can save js from bs
--------------------------------------------------------------------------------------------------
[2015-12-04T16:49:28.044Z]	<zachrip>	i do understand the concern
--------------------------------------------------------------------------------------------------
[2015-12-04T17:12:33.119Z]	<electricessence>	-pron- a matter of elegance there be a point where i worry that the evolution of the language ecma could go on a tangent in -pron- brain when i see function that look like a typo and an error again -pron- not the committee i just happen to start code use jscript and move to c because js be inherently type weird syntax like have to be add for readability where if -pron- be inherently type would be unnecessary in a weird way add the be js scream i need type i just hope ecma do evolve -pron- into a weird world of loosely type forever -pron- seem so backwards that type not be introduce since numerous ecma base language have type and typing have be around in js conceptually forever but as ander have say just never implement
[2015-12-04T17:16:24.095Z]	<ochrons>	ecma evolve into an assembly language for web
[2015-12-04T17:16:25.280Z]	<JKillian>	-pron- funny i use to love actionscript -pron- be an ecmascript language with a sane typing system sane scoping etc now -pron- almost dead and nobody do flash work anymore haha but ts be even well
[2015-12-04T17:17:02.608Z]	<JKillian>	except i still miss write once run the same everywhere behavior haha
[2015-12-04T17:18:42.710Z]	<electricessence>
[2015-12-04T17:20:44.914Z]	<electricessence>	i have to completely agree be a flash designer developer since i would have though the next obvious evolution in ecma would be add type again this be where i worry that the lesson of the past be be forget ignore
[2015-12-04T18:43:53.691Z]	<ochrons>	and if -pron- want even well type there always
--------------------------------------------------------------------------------------------------
[2015-12-04T17:29:15.498Z]	<JKillian>	-pron- see both as and ts have do a nice job with optional typing i really like the type but still high level and lightweight style language python ruby have be move this direction as well
--------------------------------------------------------------------------------------------------
[2015-12-04T18:50:52.156Z]	<MaherJendoubi>	hi
[2015-12-04T18:52:22.583Z]	<MaherJendoubi>	what do the following message mean can not compile module unless the flag be provide
[2015-12-04T18:52:42.880Z]	<kirjs>	i assume -pron- have to specify module type
[2015-12-04T18:53:09.324Z]	<zachrip>	be correct
[2015-12-04T18:53:37.920Z]	<MaherJendoubi>	here the code
[2015-12-04T18:53:41.085Z]	<MaherJendoubi>	doctype html html head meta title angular script script script script script transpiler typescript typescriptoption emitdecoratormetadata true body -pron- app loading app
[2015-12-04T18:54:08.641Z]	<Arnavion>	-pron- need to provide the cli flag module option when compile
[2015-12-04T18:54:44.563Z]	<Arnavion>	since -pron- use systemjs -pron- can use system or module system respectively
[2015-12-04T18:54:49.934Z]	<MaherJendoubi>	how please
[2015-12-04T18:54:57.867Z]	<MaherJendoubi>	-pron- use
[2015-12-04T18:55:13.729Z]	<Arnavion>	so do -pron- have a project file
[2015-12-04T18:55:27.903Z]	<MaherJendoubi>	no
[2015-12-04T18:56:25.071Z]	<MaherJendoubi>	sorry
[2015-12-04T18:56:30.429Z]	<Arnavion>	not sure if there any other way to specify -pron- -pron- and there atleast one issue where -pron- imply there no other way to do -pron-
[2015-12-04T18:56:37.857Z]	<MaherJendoubi>	i have
[2015-12-04T18:56:41.291Z]	<MaherJendoubi>	compileroption target module commonjs sourcemap true emitdecoratormetadata true experimentaldecorator true removecomment false noimplicitany false
[2015-12-04T18:58:37.303Z]	<Arnavion>	do -pron- actually have the in there that wrong and not a valid json file
[2015-12-04T18:59:32.371Z]	<MaherJendoubi>	-pron- follow this tutorial
[2015-12-04T18:59:34.841Z]	<Arnavion>	wait nvm i guess -pron- just gitter format
[2015-12-04T19:02:42.855Z]	<MaherJendoubi>	yes i have
[2015-12-04T19:03:17.860Z]	<Arnavion>	remvoe -pron- then
[2015-12-04T19:05:25.535Z]	<MaherJendoubi>	ok thank
[2015-12-04T19:06:28.542Z]	<Arnavion>	ah yes now i understand what happen
[2015-12-04T19:06:44.138Z]	<Arnavion>	-pron- copy everything from the first opening brace which be why -pron- have the etc
[2015-12-04T19:07:03.033Z]	<MaherJendoubi>	exact sorry about that
[2015-12-04T19:07:05.505Z]	<Arnavion>	when -pron- paste -pron- in gitter the web interface interpret -pron- as a list and helpfully reorder the first to a and so on
[2015-12-04T19:07:26.755Z]	<Arnavion>	but the irc interface send -pron- as be which be why i see the in front of compileroption
[2015-12-04T19:08:06.347Z]	<Arnavion>	-pron- just talk about why -pron- look different on browser vs irc no need to apologize
[2015-12-04T19:09:16.559Z]	<MaherJendoubi>	ok
[2015-12-04T19:09:25.287Z]	<MaherJendoubi>	so what about -pron- question then
[2015-12-04T19:10:41.530Z]	<MaherJendoubi>	how to provide the cli flag module option when compile
[2015-12-04T19:11:03.232Z]	<MaherJendoubi>	use of course visual studio
[2015-12-04T19:11:37.234Z]	<Arnavion>	the file be just probably get ignore since -pron- have the etc that make -pron- an invalid json file
[2015-12-04T19:11:46.171Z]	<Arnavion>	once -pron- take those out -pron- may start work
[2015-12-04T19:13:21.371Z]	<MaherJendoubi>	thank
--------------------------------------------------------------------------------------------------
[2015-12-04T18:58:59.517Z]	<ochrons>	triple back quote help with copy paste code here like this
[2015-12-04T19:00:03.573Z]	<Arnavion>	silly irc bridge
[2015-12-04T19:03:22.263Z]	<Arnavion>	remove
[2015-12-04T19:07:27.391Z]	<MaherJendoubi>	yes sorry for that
[2015-12-04T19:11:16.303Z]	<Arnavion>	-pron- already have -pron- there
[2015-12-04T19:11:22.762Z]	<Arnavion>	module commonjs
--------------------------------------------------------------------------------------------------
[2015-12-04T22:28:26.413Z]	<erichooshmand>	since be the last support for definitely type and now -pron- get a tree folder struction of file instead of one large file how be -pron- compile successfully this be vs update with typescript
[2015-12-04T22:44:33.603Z]	<zachrip>	the compiler  <user> go and find the typing automagically
[2015-12-04T22:45:20.843Z]	<zachrip>	like i say the module have a key in -pron- call typing and -pron- direct the compiler to where -pron- typing be
[2015-12-04T23:07:40.595Z]	<MaherJendoubi>	hi
[2015-12-04T23:07:49.090Z]	<MaherJendoubi>	how can i fix this
[2015-12-04T23:07:59.682Z]	<MaherJendoubi>	microsoft thumb microsoft
[2015-12-04T23:12:50.673Z]	<DanielRosenwasser>	try npm install
[2015-12-04T23:21:17.380Z]	<MaherJendoubi>	i do -pron- but still the same issue
[2015-12-04T23:21:38.934Z]	<MaherJendoubi>	microsoft thumb microsoft
--------------------------------------------------------------------------------------------------
[2015-12-04T23:23:56.700Z]	<DanielRosenwasser>	try tsc commonjs and reopen vs code
[2015-12-04T23:24:36.289Z]	<MaherJendoubi>	ok
[2015-12-04T23:25:57.959Z]	<MaherJendoubi>	tsc be not know
[2015-12-04T23:26:06.503Z]	<MaherJendoubi>	i think that the issue
[2015-12-04T23:26:40.664Z]	<DanielRosenwasser>	npm install typescript smile
[2015-12-04T23:27:22.004Z]	<MaherJendoubi>	yes
[2015-12-04T23:29:42.218Z]	<MaherJendoubi>	tsc commonjs error a file be already define at
[2015-12-04T23:31:52.330Z]	<MaherJendoubi>	i delete the file
[2015-12-04T23:32:06.624Z]	<MaherJendoubi>	tsc commonjs message successfully create a file
[2015-12-04T23:32:34.538Z]	<DanielRosenwasser>	okay try open up vscode and if -pron- still see error tell -pron- what -pron- be
[2015-12-04T23:34:22.933Z]	<MaherJendoubi>	microsoft typescript qmmk thumb microsoft typescript qmmk
[2015-12-04T23:35:55.961Z]	<MaherJendoubi>	appcomponent
[2015-12-04T23:36:14.839Z]	<MaherJendoubi>	still that class not recognize
[2015-12-04T23:39:48.995Z]	<MaherJendoubi>	any idea how to fix that
--------------------------------------------------------------------------------------------------
[2015-12-04T23:49:43.026Z]	<erichooshmand>	that do automagically work for -pron- across project in the same solution -pron- seem
[2015-12-04T23:51:15.541Z]	<erichooshmand>	 <user> be -pron- expect that each project in a vs solution have -pron- own directory  <user> i see a lot of mention of not need reference thank to tsconfig that do seem to work in
[2015-12-05T00:47:20.408Z]	<DanielRosenwasser>	just add experimentaldecorator to -pron-
[2015-12-05T00:56:06.479Z]	<MaherJendoubi>	the be fix but still the
[2015-12-05T00:56:22.741Z]	<DanielRosenwasser>	what
[2015-12-05T00:56:41.447Z]	<DanielRosenwasser>	sorry what wrong with
[2015-12-05T00:59:57.510Z]	<MaherJendoubi>	microsoft typescript giuk thumb microsoft typescript giuk
[2015-12-05T01:16:13.015Z]	<MaherJendoubi>	can not find name reflect
[2015-12-05T01:16:48.964Z]	<MaherJendoubi>	at line
[2015-12-05T01:19:03.622Z]	<MaherJendoubi>	and invalid left hand side of assignement expression at line
[2015-12-05T01:21:15.468Z]	<DanielRosenwasser>	do worry about the reflect stuff
[2015-12-05T01:21:23.017Z]	<DanielRosenwasser>	one sec though
[2015-12-05T01:23:25.555Z]	<MaherJendoubi>
[2015-12-05T01:23:41.741Z]	<DanielRosenwasser>	yeah -pron- aware
[2015-12-05T01:23:42.665Z]	<DanielRosenwasser>	one sec
[2015-12-05T01:24:08.021Z]	<DanielRosenwasser>	but here the problem be -pron- define a function and immediately assign to -pron-
[2015-12-05T01:29:31.487Z]	<MaherJendoubi>	ok
[2015-12-05T01:29:43.623Z]	<DanielRosenwasser>	so -pron- js be not invalid
[2015-12-05T01:29:57.003Z]	<MaherJendoubi>	exact
[2015-12-05T01:29:59.603Z]	<DanielRosenwasser>	the problem be that vs code use typescript language service
[2015-12-05T01:30:27.560Z]	<DanielRosenwasser>	typescript error when -pron- reassign to a function declaration
[2015-12-05T01:30:30.838Z]	<MaherJendoubi>	so if i test on visual studio -pron-  <user> disappear
[2015-12-05T01:31:13.070Z]	<DanielRosenwasser>	yes -pron- probably fine with that -pron- can try out the js language service or tool on visual studio and -pron- will see that in -pron- output js
[2015-12-05T01:31:47.780Z]	<DanielRosenwasser>	but really there nothing wrong with -pron- js even if -pron- use vs code so -pron- can just keep write in typescript in vs code and -pron-  <user> be fine
[2015-12-05T01:32:38.662Z]	<MaherJendoubi>	awesome thank a lot daniel
[2015-12-05T01:32:47.043Z]	<DanielRosenwasser>	no problemo
[2015-12-05T01:33:02.867Z]	<DanielRosenwasser>	sorry -pron- take a little long to help out jump back and forth between task
[2015-12-05T01:33:26.668Z]	<DanielRosenwasser>	but -pron- go to report that as a vs code bug
[2015-12-05T01:33:30.390Z]	<MaherJendoubi>	i really appreciate -pron-
[2015-12-05T01:37:01.565Z]	<MaherJendoubi>	please share the link of the issue when -pron- report -pron-
--------------------------------------------------------------------------------------------------
[2015-12-05T01:48:18.965Z]	<DanielRosenwasser>
--------------------------------------------------------------------------------------------------
[2015-12-05T03:53:45.586Z]	<zachrip>	yes
--------------------------------------------------------------------------------------------------
[2015-12-05T16:52:14.321Z]	<manekinekko>	hi guy be there any way i can grab the annotation metadata from a class i be try to extract an ast from a file but -pron- stick for annotation
[2015-12-05T21:29:28.496Z]	<kenhowardpdx>	-pron- be get vstsc out of stack space error all week -pron- appear to be random anyone else get these kind of error in vs -pron- on ts and have instal update
[2015-12-05T21:29:57.257Z]	<kenhowardpdx>	i  <user> notice these erro on appveyor vs environment
[2015-12-05T22:15:39.953Z]	<kirjs>	hi all can someone take a look
[2015-12-05T22:16:06.737Z]	<kirjs>	-pron- try to compile typescript code on jsbin and make -pron- work with exist systemjs module like
[2015-12-05T22:16:53.594Z]	<kirjs>	just fix the link
[2015-12-05T22:19:18.462Z]	<kirjs>	-pron- use but in generates anonymous module and i can find a good way to run -pron-
[2015-12-05T22:19:26.818Z]	<kirjs>	suggestion welcome
[2015-12-05T23:57:50.618Z]	<colinshen>
[2015-12-06T06:01:00.769Z]	<DanielRosenwasser>	how do -pron- then use swig the documentation be load for -pron-
[2015-12-07T06:59:52.897Z]	<DanielRosenwasser>	what version of typescript for visual studio be -pron- run
[2015-12-07T14:22:53.947Z]	<arianra>	i generally always just type function as any to get around this but for instance the following function  <user> give an error when i pass the assign function as parameter export const foreachkey function collection object assign function void assign
[2015-12-07T18:04:45.372Z]	<aksharpatel47>	-pron- do need to explicitly specify that foreachkey be a function typescript be smart enough to understand by the assignment that foreachkey be a function with collection and assign as parameter and void as return value
[2015-12-07T18:05:39.768Z]	<aksharpatel47>	-pron- write -pron- as follow
[2015-12-07T18:06:06.185Z]	<aksharpatel47>	typescript import as swig from swig
[2015-12-07T18:06:28.667Z]	<JKillian>	the signature of be value t index number array t void thisarg any void
[2015-12-07T18:06:30.165Z]	<aksharpatel47>	and then have module system as commonjs in the
[2015-12-07T18:07:44.207Z]	<JKillian>	-pron- want -pron- assign argument to match the signature of callbackfn most likely -pron- can make foreachkey a generic function
[2015-12-07T20:21:21.118Z]	<weswigham>	ts export const foreachkey function collection object assign function void assign should probably instead be ts export const foreachkey collection any assign key string index number name string void void assign the difference not use the type function for the assign parameter in general -pron- should always use actual signature the type function be only infer to thing make via new function though callable thing have -pron- apparent member so be structurally compatible no type node on the export const foreachkey ts can infer -pron- from the signature of the arrow function be assign so there no need to specify
[2015-12-07T20:22:14.659Z]	<weswigham>	additionally use any instead of object this be just to match the way be type in the stdlib
[2015-12-08T07:42:46.661Z]	<LabEG>	where be i can find instruction for write tsx descriptor file as
[2015-12-08T07:43:16.640Z]	<DanielRosenwasser>
[2015-12-08T07:43:27.140Z]	<DanielRosenwasser>	check that out that may give some insight
[2015-12-08T07:43:46.746Z]	<DanielRosenwasser>	though may know more
[2015-12-08T07:44:28.034Z]	<DanielRosenwasser>	basically there -pron- need a jsx namespace export an intrinsicelement interface
[2015-12-08T07:45:27.907Z]	<DanielRosenwasser>	property define there  <user> become available as lowercase tag name
[2015-12-08T07:46:08.623Z]	<LabEG>	thank -pron-
[2015-12-08T07:46:27.668Z]	<DanielRosenwasser>	-pron- welcome
[2015-12-08T07:47:00.435Z]	<DanielRosenwasser>	just curious what be -pron- work on
[2015-12-08T07:47:03.904Z]	<DanielRosenwasser>	if -pron- do mind -pron- ask that is smile
[2015-12-08T07:50:31.861Z]	<LabEG>	for mithril
[2015-12-08T07:50:45.199Z]	<LabEG>
[2015-12-08T07:55:11.986Z]	<LabEG>	react be so fat framework for -pron-
[2015-12-08T08:03:58.811Z]	<LabEG>	reference react export function getview use strict return div тест
[2015-12-08T08:04:07.117Z]	<LabEG>	declare namespace jsx interface element test string interface elementclass test string interface elementattributesproperty test string interface intrinsicattribute key stre number interface intrinsicclassattribute t ref stre classinstance t void interface intrinsicelement elemname string any
[2015-12-08T08:04:20.505Z]	<LabEG>	src main webappsrc clientapps test script app view error can not find name react
[2015-12-08T08:04:38.736Z]	<DanielRosenwasser>	thing
[2015-12-08T08:04:46.838Z]	<LabEG>	nice error i not use react and not plane
[2015-12-08T08:04:57.256Z]	<DanielRosenwasser>	-pron- misspell react in -pron- reference be -pron- use react
[2015-12-08T08:05:13.026Z]	<DanielRosenwasser>
[2015-12-08T08:05:30.299Z]	<DanielRosenwasser>
[2015-12-08T08:05:49.160Z]	<LabEG>	yes this be custom
[2015-12-08T08:05:59.007Z]	<LabEG>	preserve
[2015-12-08T08:06:23.417Z]	<DanielRosenwasser>	hm
[2015-12-08T08:06:24.444Z]	<DanielRosenwasser>	one sec
[2015-12-08T08:13:39.370Z]	<LabEG>	what be -pron- work on in -pron- company -pron- be use several frameworks vanilajs angular and mithrill and i figure out how to make the code universal for controller service model and other and now i try make universal view for diference framework
[2015-12-08T08:17:48.968Z]	<DanielRosenwasser>	that very odd -pron- not get this if i put -pron- all in one file
[2015-12-08T08:17:52.977Z]	<DanielRosenwasser>	one minute
[2015-12-08T08:22:56.424Z]	<DanielRosenwasser>	yeah -pron- not see that error
[2015-12-08T08:23:01.602Z]	<DanielRosenwasser>	what version of typescript be -pron- run
[2015-12-08T08:24:03.650Z]	<LabEG>	typescript
--------------------------------------------------------------------------------------------------
[2015-12-05T23:58:04.894Z]	<colinshen>	hello how can i use swig express in typescript from swig docs i need to use swig
--------------------------------------------------------------------------------------------------
[2015-12-06T11:00:37.619Z]	<VladislavRybin>	hello
[2015-12-06T11:00:43.415Z]	<VladislavRybin>	be anyone here
[2015-12-06T14:53:27.705Z]	<VladislavRybin>	reload visual studio usually help
--------------------------------------------------------------------------------------------------
[2015-12-06T14:07:54.392Z]	<AloeDream>	ok i have and mvc web app from template -pron- add typescript and -pron- compile  <user> add angular and type definition for angular and get no intellisence any help
--------------------------------------------------------------------------------------------------
[2015-12-07T14:21:33.129Z]	<arianra>	hey guy perhaps a dumb question but i can seem to figure out how to assign type function to a fat arrow implementation -pron- always give -pron- error
[2015-12-07T14:27:14.446Z]	<arianra>	-pron- go to take a wild guess and say i need to create an interface for the expect foreach parameter but perhaps -pron- a bad example because in general i can seem to get function with type function to work
--------------------------------------------------------------------------------------------------
[2015-12-08T08:24:25.768Z]	<geyang>	oh man i think i have an ambitious project lol
[2015-12-08T08:27:27.626Z]	<DanielRosenwasser>	haha -pron- not able to repro -pron- with two file if -pron- can reduce an example and put that up on github i can look into -pron-
[2015-12-08T08:28:20.834Z]	<DanielRosenwasser>	so just put together an example where -pron- get that error with a and a
[2015-12-08T08:34:07.325Z]	<DanielRosenwasser>	alternatively -pron- can wait for to wake up in hour and maybe -pron- can help smile
[2015-12-08T08:35:32.589Z]	<geyang>	i have a question about generic type
[2015-12-08T08:35:45.719Z]	<DanielRosenwasser>	what up
[2015-12-08T08:36:57.602Z]	<geyang>	hey so i have the following interface define typescript library file call export interface reducerfunction tstate action key and -pron- try to use -pron- in -pron- reducer definition typescript test file jasmine create by ge on import action reducerfunction from interface state counter number var reducer reducerfunction reducer function state state action if inc return state else if dec return state else return state
[2015-12-08T08:37:35.484Z]	<geyang>	but when i run the compiler i get the follow error error error ge projects escherpad new component luna src error type state state action action state be not assignable to type reducerfunction index signature be miss in type state state action action state ge projects escherpad new component luna src error type state state action action state be not assignable to type reducerfunction index signature be miss in type state state action action state
[2015-12-08T08:38:23.703Z]	<geyang>	if i comment out the index line in the interface reducerfunction definition everything work fine
[2015-12-08T08:39:02.723Z]	<DanielRosenwasser>	hmm
[2015-12-08T08:39:21.167Z]	<DanielRosenwasser>	i know the easy work around be to add a type assertion
[2015-12-08T08:39:54.260Z]	<geyang>	the tstate be only available in the user file and the be intend to be part of the library
[2015-12-08T08:40:01.590Z]	<geyang>	type assertion
[2015-12-08T08:40:39.876Z]	<geyang>	some code example would be helpful
[2015-12-08T08:42:13.574Z]	<geyang>	never see this before and i just read the typescript handbook for the third time
[2015-12-08T08:44:46.609Z]	<geyang>	i want to treat reducer function and a hash of reducer with key for each individual store as the same thing
[2015-12-08T08:45:14.379Z]	<geyang>	-pron- think so
[2015-12-08T08:45:16.333Z]	<geyang>	uhm
[2015-12-08T08:45:38.976Z]	<DanielRosenwasser>	but i could be wrong
[2015-12-08T08:46:01.935Z]	<geyang>	yeah -pron- be indeed two different type of thing
--------------------------------------------------------------------------------------------------
[2015-12-08T08:40:13.915Z]	<DanielRosenwasser>	-pron- like a cast but -pron- have not runtime impact
--------------------------------------------------------------------------------------------------
[2015-12-08T08:40:55.067Z]	<LabEG>	can reduce an example and put that up on github yes a little later
[2015-12-08T08:41:08.216Z]	<DanielRosenwasser>	so -pron- write ts let reducer reducerfunction state action action state if inc return state else if dec return state else return state
[2015-12-08T08:41:25.343Z]	<DanielRosenwasser>	or
[2015-12-08T08:41:34.823Z]	<DanielRosenwasser>	ts let reducer state action action state if inc return state else if dec return state else return state as reducerfunction
[2015-12-08T08:41:51.242Z]	<DanielRosenwasser>	both be valid -pron- a matter of style
[2015-12-08T08:42:03.650Z]	<DanielRosenwasser>	that should work
[2015-12-08T08:42:10.322Z]	<DanielRosenwasser>	however why do -pron- need the index signature
[2015-12-08T08:42:11.587Z]	<Arnavion>	-pron- genuinely do have an indexer be that the more curious thing
[2015-12-08T08:42:45.221Z]	<DanielRosenwasser>	-pron- be work to get the documentation update type assertion be definitely on the to do list
[2015-12-08T08:43:02.966Z]	<geyang>	so -pron- write -pron- own reactive redux library and be plan on open source -pron- for the community
[2015-12-08T08:43:27.358Z]	<geyang>	so redux allow combination of reducer function use this script
[2015-12-08T08:43:53.146Z]	<geyang>
[2015-12-08T08:45:00.720Z]	<geyang>	and run -pron- through the combinereducer function without the user do -pron- manually
[2015-12-08T08:45:04.984Z]	<DanielRosenwasser>	-pron- look more like there be two separate concept there
[2015-12-08T08:46:48.840Z]	<geyang>	-pron- like the homomorphism from a set to -pron- be homomorphic to the set
--------------------------------------------------------------------------------------------------
[2015-12-08T08:45:27.255Z]	<DanielRosenwasser>	a reducer map x string reducer and a reducer function
[2015-12-08T08:46:12.118Z]	<geyang>	but i think conceptually -pron- be the same
[2015-12-08T08:46:29.686Z]	<geyang>	because there exist a transform that go from reducer map to reducer
[2015-12-08T08:47:43.386Z]	<geyang>	let -pron- try the type assertion and brb
--------------------------------------------------------------------------------------------------
[2015-12-08T08:47:49.846Z]	<DanielRosenwasser>	wait
[2015-12-08T08:48:21.549Z]	<geyang>	nice -pron- work oh god
[2015-12-08T08:48:24.638Z]	<geyang>	-pron- go to cry -pron- work
--------------------------------------------------------------------------------------------------
[2015-12-08T08:48:30.745Z]	<johnfn>	how can i configure visual studio to use the next version of typescript -pron- try the step list here but -pron- run into problem although the error underline in visual studio seem accurate and the type information include thing that could only be with the next version when i try to compile -pron- seem like -pron- use an incorrect version of typescript to compile -pron- script and -pron- generate a ton of error be there anything else i need to do
[2015-12-08T08:48:37.509Z]	<Arnavion>	i do think -pron- work like -pron- want -pron- to
[2015-12-08T08:48:52.129Z]	<geyang>	be this response to -pron-
[2015-12-08T08:48:55.902Z]	<Arnavion>	yes
[2015-12-08T08:49:08.353Z]	<Arnavion>	all -pron- do be force the compiler to treat the function as have a magic indexer
[2015-12-08T08:49:08.452Z]	<geyang>
[2015-12-08T08:49:22.439Z]	<DanielRosenwasser>	i agree with -pron- not see what a homomorphism have to do with anything here i feel like -pron- probably want to use union type
[2015-12-08T08:49:23.855Z]	<Arnavion>	be -pron- sure -pron- want the reducer function -pron- to have the indexer
[2015-12-08T08:49:33.594Z]	<Arnavion>	i think -pron- jsut want to be able to either pass in a function or a hash of function
[2015-12-08T08:49:38.379Z]	<Arnavion>	in which case a union type be more appropriate
[2015-12-08T08:49:51.370Z]	<DanielRosenwasser>	open up and type in where tsc
[2015-12-08T08:50:02.099Z]	<DanielRosenwasser>	tsc
[2015-12-08T08:50:16.458Z]	<johnfn>
[2015-12-08T08:50:26.542Z]	<geyang>	and that definitely make sense and -pron- keep thing simple
[2015-12-08T08:50:26.589Z]	<Arnavion>	remove the indexer from reducerfunction and change the function that accept -pron- to take reducerfunction key string reducerfunction
[2015-12-08T08:50:30.200Z]	<johnfn>	which be approximately where i point the registry key
[2015-12-08T08:50:33.989Z]	<DanielRosenwasser>	okay now rwite tsc
[2015-12-08T08:50:39.985Z]	<DanielRosenwasser>	hm
[2015-12-08T08:50:45.148Z]	<johnfn>
[2015-12-08T08:51:21.649Z]	<DanielRosenwasser>	see for a bit about union type
[2015-12-08T08:51:22.092Z]	<Arnavion>	btw how much do i have to bribe -pron- to  <user> hang out in
[2015-12-08T08:51:45.266Z]	<geyang>	so if i do that how would i tell the difference between the two in the function
[2015-12-08T08:51:51.746Z]	<geyang>	hahaha
[2015-12-08T08:51:54.475Z]	<Arnavion>	typeof
[2015-12-08T08:52:16.878Z]	<geyang>	like
[2015-12-08T08:52:29.933Z]	<DanielRosenwasser>	if typeof x function and then assert -pron- appropriately
[2015-12-08T08:52:54.919Z]	<Arnavion>	do -pron- need the assert still
[2015-12-08T08:52:56.108Z]	<geyang>	kk get -pron- thanks and i  <user> read the advanced type
[2015-12-08T08:52:56.510Z]	<DanielRosenwasser>	i just want a nice quiet evening of play video game and then -pron- gitter window be open
[2015-12-08T08:53:08.035Z]	<geyang>	hahahahahaha
[2015-12-08T08:53:09.959Z]	<Arnavion>	pfft
[2015-12-08T08:53:16.087Z]	<johnfn>
[2015-12-08T08:53:19.559Z]	<Arnavion>	get -pron- custom build of hexchat that work with gitter and use -pron- for both
[2015-12-08T08:53:28.316Z]	<DanielRosenwasser>	 <user>
[2015-12-08T08:53:33.377Z]	<Arnavion>	though unfortunately gitter do seem very interested in -pron- irc bridge
[2015-12-08T08:53:52.147Z]	<DanielRosenwasser>	-pron- probably not in -pron- good interest
[2015-12-08T08:54:11.570Z]	<Arnavion>	-pron- certainly set up the infrastructure for -pron-
[2015-12-08T08:54:17.655Z]	<Arnavion>	and -pron- work
[2015-12-08T08:54:24.659Z]	<DanielRosenwasser>	-pron- consider grab hexchat tomorrow and set -pron- up
[2015-12-08T08:54:25.307Z]	<Arnavion>	just buggy and non compliant
[2015-12-08T08:55:28.858Z]	<DanielRosenwasser>	i think -pron- may need to look into enable dev mode for the command line compiler as well
[2015-12-08T08:56:11.014Z]	<Arnavion>	hmm yes -pron- do still need the assert despite the typeof
[2015-12-08T08:56:50.020Z]	<johnfn>	hmm interesting i be actually unsure if this be the correct way of get the next version of typescript configure with visual studio -pron- be tricky to find the documentation
[2015-12-08T08:57:03.738Z]	<Arnavion>	no typeof reducer function typeof be a js operator in this context anyway that return a string with a certain set of value
[2015-12-08T08:57:37.519Z]	<geyang>	i think -pron- be  <user> use by typescript somewhere specially
[2015-12-08T08:58:22.362Z]	<Arnavion>	eg class t var x typeof t x be now the static interface of t
--------------------------------------------------------------------------------------------------
[2015-12-08T08:54:32.645Z]	<geyang>	can i do this typescript if typeof reducer reducerfunction
[2015-12-08T08:57:28.163Z]	<Arnavion>	for user function -pron- return function
[2015-12-08T08:57:51.030Z]	<Arnavion>	yes when use in type signature
--------------------------------------------------------------------------------------------------
[2015-12-08T08:58:23.083Z]	<geyang>	yeah here typescript class greeter static standardgreeting hello there greeting string greet if return hello else return var greeter new greeter var greetermaker typeof greeter greeter hey there var greeter new greetermaker
--------------------------------------------------------------------------------------------------
[2015-12-08T08:58:30.536Z]	<Arnavion>	but in this case -pron- the regular js typeof operator
[2015-12-08T08:59:22.460Z]	<geyang>	so this mean if the two type be both hash then there be no non hacky way to tell the difference
--------------------------------------------------------------------------------------------------
[2015-12-08T08:58:38.461Z]	<geyang>	i see thank a bunch
--------------------------------------------------------------------------------------------------
[2015-12-08T08:59:30.992Z]	<LabEG>	i try make example in vscode and everything be work fine i  <user> find the problem in -pron- build system browserify
[2015-12-08T08:59:55.034Z]	<geyang>	would difference in the tsconfig be the reason i have be bite by this quite many time thing like src
[2015-12-08T09:00:22.377Z]	<LabEG>	no
[2015-12-08T09:00:29.277Z]	<Arnavion>	if -pron- be both arbitrary hash then the difference would be in the type of the value of each key
[2015-12-08T09:00:32.121Z]	<LabEG>	maybe in tsify
[2015-12-08T09:00:50.117Z]	<Arnavion>	otherwise -pron- usually have union of two different type that -pron- can distinguish by the presence of specific member
[2015-12-08T09:01:50.890Z]	<geyang>	i see yeah so -pron- manually test for the different key tsify read
[2015-12-08T09:02:15.078Z]	<DanielRosenwasser>	-pron- try to check tomorrow with other teammate how to accomplish this
[2015-12-08T09:03:27.139Z]	<LabEG>	no i set manually tsify target module commonjs noimplicitany true jsx preserve removecomment false preserveconstenum false sourcemap false suppressimplicitanyindexerror true experimentaldecorator true experimentalasyncfunction true
[2015-12-08T09:04:50.148Z]	<geyang>	i see i set -pron- in because i have a few different build path here be -pron- just so that -pron- can compare typescript compileroption target module commonjs moduleresolution node noimplicitany true experimentaldecorator true emitdecoratormetadata true outdir dist rootdir sourcemap true exclude
[2015-12-08T09:23:54.736Z]	<LabEG>	thank i  <user> try later
[2015-12-08T09:24:49.158Z]	<geyang>	so both the assertion and the union type work
--------------------------------------------------------------------------------------------------
[2015-12-08T09:06:10.796Z]	<grofit>	hey can not stop long but i have a quick query about observerlocator
[2015-12-08T09:06:34.486Z]	<grofit>	historically when i want to be able to subscribe to property in a model i be tell i would need to inject the observerlocator and then use that but there be some quirk
[2015-12-08T09:06:51.588Z]	<grofit>	oops wrong gitter channel as -pron- be people
[2015-12-08T09:20:38.219Z]	<DanielRosenwasser>	just send -pron- a pm on gitter and i can let -pron- know
[2015-12-08T09:21:20.645Z]	<DanielRosenwasser>	no worry smile
[2015-12-08T09:21:58.428Z]	<DanielRosenwasser>	thank for help out all good
[2015-12-08T09:25:24.299Z]	<DanielRosenwasser>	the type assertion be a way to silence the type checker
[2015-12-08T09:25:35.561Z]	<DanielRosenwasser>	say no i know better this have type blah
[2015-12-08T09:26:19.435Z]	<geyang>	i see so i should rely on -pron-
[2015-12-08T09:26:59.255Z]	<geyang>	so if i define the following interface -pron- be still technically a generic type typescript export interface reducerfunction tstate action
[2015-12-08T09:27:28.351Z]	<geyang>	because i notice that the follow function can be cast without specifiye the tstate
[2015-12-08T09:27:43.591Z]	<geyang>	typo fix lol -pron- favirote feature in gitter be the edit i edit -pron-
[2015-12-08T09:29:06.531Z]	<DanielRosenwasser>	wait -pron- not a generic type but -pron- have a generic signature
[2015-12-08T09:30:55.027Z]	<DanielRosenwasser>	mean that the type -pron- have no clue about tstate
[2015-12-08T09:31:07.299Z]	<geyang>	so i take that a function with a generic signature have the type contraint automatically deduct base on the function be assign
--------------------------------------------------------------------------------------------------
[2015-12-08T09:06:43.887Z]	<johnfn>	cool thanks -pron- go to bed now would there be any way for -pron- to check back in tomorrow in an asynchronous manner
[2015-12-08T09:24:55.229Z]	<geyang>	thank for the help
[2015-12-08T09:25:10.910Z]	<DanielRosenwasser>	the union type be the right way to do -pron-
[2015-12-08T09:27:25.548Z]	<DanielRosenwasser>	can tell if serious or joke on the first part smile
[2015-12-08T09:27:41.923Z]	<DanielRosenwasser>	yup -pron- still generic
[2015-12-08T09:27:59.398Z]	<DanielRosenwasser>	oh wait
[2015-12-08T09:28:32.698Z]	<DanielRosenwasser>	haha
[2015-12-08T09:30:05.601Z]	<geyang>	uhm
[2015-12-08T09:30:20.311Z]	<DanielRosenwasser>	yeah
--------------------------------------------------------------------------------------------------
[2015-12-08T09:31:21.352Z]	<Arnavion>	-pron- edit do not fool the all see irc client
[2015-12-08T09:31:36.268Z]	<geyang>	hahahahaha nice
[2015-12-08T09:31:46.930Z]	<DanielRosenwasser>	definitely get to get the irc client
[2015-12-08T09:31:58.676Z]	<Arnavion>
[2015-12-08T09:31:59.626Z]	<geyang>	the go to -pron- then
[2015-12-08T09:32:29.653Z]	<Arnavion>	wait till -pron- see what happen when people edit code blocks
[2015-12-08T09:32:35.159Z]	<DanielRosenwasser>	oh god
[2015-12-08T09:32:41.731Z]	<Arnavion>	three monitor worth of edit
[2015-12-08T09:32:52.275Z]	<geyang>	lol the next challenge be to write the combinereducer function
[2015-12-08T09:33:38.964Z]	<DanielRosenwasser>	so -pron- could do this two way
[2015-12-08T09:34:44.852Z]	<DanielRosenwasser>	the current way -pron- have -pron- like this ts export interface reducerfunction tstate state tstate action var x reducerfunction number x a b return undefined
[2015-12-08T09:35:44.522Z]	<DanielRosenwasser>	the way -pron- do -pron- mean that the type -pron- have no knowledge of the type argument and the type system  <user> infer the type argument give the way -pron- call -pron-
[2015-12-08T09:36:48.272Z]	<DanielRosenwasser>	-pron- get very self conscious about -pron- edit now
[2015-12-08T09:37:04.158Z]	<Arnavion>	heh
[2015-12-08T09:37:19.806Z]	<geyang>	i like the current way because have the type explicitly set make other functional stuff more difficult
[2015-12-08T09:37:31.968Z]	<geyang>	like the combinereducer function -pron- write now
[2015-12-08T09:37:35.089Z]	<DanielRosenwasser>	this way -pron- need to explicitly state the type argument each time on the type -pron- but -pron- do have to declare the type of a and b in the example
[2015-12-08T09:37:40.613Z]	<DanielRosenwasser>	yeah the current way be correct
[2015-12-08T09:37:53.235Z]	<DanielRosenwasser>	and -pron- do -pron- that way
[2015-12-08T09:37:54.186Z]	<DanielRosenwasser>	-pron- just explain the pro and con
[2015-12-08T09:37:55.590Z]	<geyang>	oh i see
[2015-12-08T09:38:24.216Z]	<DanielRosenwasser>	let see combinereducer
--------------------------------------------------------------------------------------------------
[2015-12-08T09:38:12.585Z]	<geyang>	so -pron- get like errror message for the combinereducer function
[2015-12-08T09:38:23.119Z]	<geyang>	let -pron- work on -pron- a bit and  <user> show -pron- to -pron- guy
[2015-12-08T09:38:25.745Z]	<DanielRosenwasser>	sure
[2015-12-08T09:49:31.611Z]	<geyang>	here -pron- go with error include
[2015-12-08T09:49:40.373Z]	<geyang>	typescript import action reducerfunction reducermap from helper function function reducermap var initialresult reducermap return key if typeof function return result initialresult mixed reducer type be not support but i want to add -pron- later on export function const finalreducer reducermap const key var combinedreducer reducerfunction combinedreducer tstate tstate action action var initialresult tstate return key action return result initialresult return combinedreducer
[2015-12-08T09:50:39.642Z]	<geyang>	typescript error component luna src util error parameter result implicitly have an any type component luna src util error parameter result implicitly have an any type error component luna src util error type be not assignable to type tstate component luna src util error type be not assignable to type tstate error component luna src util error index signature of object type implicitly have an any type component luna src util error index signature of object type implicitly have an any type error component luna src util error index signature of object type implicitly have an any type
[2015-12-08T09:52:54.305Z]	<geyang>	-pron- oh no the error be go
--------------------------------------------------------------------------------------------------
[2015-12-08T09:50:29.585Z]	<DanielRosenwasser>	what be the error -pron- get
--------------------------------------------------------------------------------------------------
[2015-12-08T09:51:47.669Z]	<geyang>	by the way -pron- keep think about build a gitter where the code block be real time collaborative
[2015-12-08T09:51:57.638Z]	<DanielRosenwasser>	type result as reducermap
[2015-12-08T09:52:08.816Z]	<geyang>	in the return line
[2015-12-08T09:52:25.780Z]	<DanielRosenwasser>	in the function -pron- pass to reduce in pickreducer
[2015-12-08T09:52:41.601Z]	<geyang>	half of the error disappear
[2015-12-08T09:52:54.909Z]	<DanielRosenwasser>	smile
[2015-12-08T09:52:58.560Z]	<DanielRosenwasser>	haha
[2015-12-08T09:53:02.302Z]	<DanielRosenwasser>	the problem be that -pron- can infer -pron- a much dumb problem than that
[2015-12-08T09:53:47.166Z]	<geyang>	so what be the problem here be the updated error
--------------------------------------------------------------------------------------------------
[2015-12-08T09:53:52.623Z]	<geyang>	typescript error component luna src util error type be not assignable to type tstate component luna src util error type be not assignable to type tstate error component luna src util error index signature of object type implicitly have an any type component luna src util error index signature of object type implicitly have an any type error component luna src util error index signature of object type implicitly have an any type
--------------------------------------------------------------------------------------------------
[2015-12-08T09:55:34.631Z]	<DanielRosenwasser>	the problem be which be really easily solvable
--------------------------------------------------------------------------------------------------
[2015-12-08T09:57:11.393Z]	<geyang>	-pron- so new to typescript that i can really distinguish between bug and feature cry
[2015-12-08T09:57:34.468Z]	<4tron>	how do -pron- mean
[2015-12-08T09:58:00.650Z]	<DanielRosenwasser>	do worry -pron- be fix soon
[2015-12-08T09:58:10.638Z]	<geyang>	oh i mean i do understand when -pron- be -pron- own mistake and when -pron- be a problem with the library
[2015-12-08T09:58:27.496Z]	<geyang>	so be there a way to get the code to work now
[2015-12-08T09:58:33.399Z]	<DanielRosenwasser>	one ec
[2015-12-08T09:58:56.819Z]	<4tron>	library error should show up in the console no
[2015-12-08T09:59:12.418Z]	<DanielRosenwasser>	with the error the problem be that -pron- try to say that -pron- have a tstate but then -pron- try to assign -pron- a tstate could have be anything like number or string so -pron- not quite valid to assign to -pron-
[2015-12-08T09:59:25.738Z]	<DanielRosenwasser>	this be where -pron- have to tell the type system no i know what -pron- do
[2015-12-08T09:59:30.164Z]	<geyang>	i see
[2015-12-08T09:59:58.503Z]	<DanielRosenwasser>	so make -pron- ts let initialresult as tstate
[2015-12-08T10:00:38.288Z]	<geyang>	ah let -pron- try -pron-
[2015-12-08T10:00:47.942Z]	<geyang>	can i use var instead
[2015-12-08T10:01:28.632Z]	<geyang>
[2015-12-08T10:01:55.190Z]	<DanielRosenwasser>	yeah var be fine
[2015-12-08T10:05:04.964Z]	<geyang>	error component luna src util error index signature of object type implicitly have an any type component luna src util error index signature of object type implicitly have an any type typescript import action reducerfunction reducermap from helper function function reducermap var initialresult reducermap return reducermap key if typeof function return result initialresult mixed reducer type be not support but i want to add -pron- later on export function const finalreducer reducermap const key var combinedreducer reducerfunction combinedreducer tstate tstate action action var initialresult as tstate return tstate key string action return result initialresult return combinedreducer
[2015-12-08T10:06:29.761Z]	<DanielRosenwasser>	-pron- now need to add a constraint to tstate so that -pron- have some kind of index signature
[2015-12-08T10:07:31.525Z]	<DanielRosenwasser>	so tstate extend key string
[2015-12-08T10:07:55.081Z]	<DanielRosenwasser>	where may just be any in -pron- case -pron- not familiar enough with the library to be totally sure
[2015-12-08T10:09:29.291Z]	<geyang>	that sound right so can i do instead of the any
[2015-12-08T10:11:10.222Z]	<geyang>	 <user> on a separate note -pron- a bit worried that if a user define a state interface as typescript interface state someattribute string someother number i will be able to access the attribute via typescript var somestate state someattribute haha someother do this work
[2015-12-08T10:14:47.064Z]	<geyang>	i guess i can just test this
[2015-12-08T10:15:16.368Z]	<geyang>	all error be go
[2015-12-08T10:16:51.196Z]	<DanielRosenwasser>	-pron- can be an arbitrary variable for now
--------------------------------------------------------------------------------------------------
[2015-12-08T10:15:07.586Z]	<geyang>
--------------------------------------------------------------------------------------------------
[2015-12-08T10:15:20.243Z]	<geyang>	thank for the help -pron- go to go into the clean room now have experiment to do
[2015-12-08T10:16:15.409Z]	<DanielRosenwasser>	do this work
[2015-12-08T10:16:18.532Z]	<DanielRosenwasser>	-pron- do work
[2015-12-08T10:16:34.446Z]	<DanielRosenwasser>	but -pron- have to be a string literal for -pron- to work
[2015-12-08T10:17:01.615Z]	<DanielRosenwasser>	anyhow glad to help good luck with the rest of -pron-
--------------------------------------------------------------------------------------------------
[2015-12-08T10:19:08.708Z]	<geyang>	-pron- mean the key have to be a number or a string literal and the key -pron- can not be an object where javascript support use object as key if this be the case -pron- fine
--------------------------------------------------------------------------------------------------
[2015-12-08T12:15:43.159Z]	<arianra>	bit late but thank that be exactly what i be miss
[2015-12-08T12:16:33.258Z]	<weswigham>	welcome
--------------------------------------------------------------------------------------------------
[2015-12-08T14:29:50.231Z]	<erradi>	where can i find the new typescript todomvc sample in and nodejs that ander present during connect thank
--------------------------------------------------------------------------------------------------
[2015-12-08T15:49:29.928Z]	<mark-norgate>	hi there new here can anyone explain why -pron- import as express from express be yield a can not find module express in visual studio code i have the follow
[2015-12-08T15:49:40.198Z]	<mark-norgate>	compileroption target file
[2015-12-08T15:50:34.371Z]	<lifenautjoe>	do -pron- have the type definition for express
[2015-12-08T15:55:45.093Z]	<JKillian>	norgate i believe the issue be with how ts do module resolution when -pron- target
[2015-12-08T15:56:28.325Z]	<mark-norgate>	yeah -pron- confused about the whole module import require fiasco
[2015-12-08T15:56:38.073Z]	<mark-norgate>	so do -pron- know the resolution
[2015-12-08T15:57:06.488Z]	<JKillian>	so -pron- essentially look for node style module resolution while target right -pron- have expres instal inside a directory right
[2015-12-08T15:57:11.257Z]	<mark-norgate>	even -pron- require be an unknown entity
[2015-12-08T15:57:27.483Z]	<mark-norgate>	yes
[2015-12-08T15:57:53.476Z]	<mark-norgate>	to both i do mind which style module resolution i target nor if i use just something that work would be nice
[2015-12-08T15:59:10.142Z]	<mark-norgate>	even if i try in mode -pron- require be produce a can not find name require as in var controller
[2015-12-08T15:59:31.090Z]	<JKillian>	be -pron- build a web app -pron- take -pron- not a node library
[2015-12-08T16:00:12.944Z]	<JKillian>	uh -pron- bad
[2015-12-08T16:00:34.516Z]	<JKillian>	if -pron- import express -pron- obviously look at a node runtime and not in browser haha
[2015-12-08T16:01:38.041Z]	<JKillian>	i would target just because -pron- actually run on node and add a module commonjs line to -pron- tsconfig file under compileroption
[2015-12-08T16:02:34.665Z]	<mark-norgate>	yes a web app
[2015-12-08T16:03:13.069Z]	<mark-norgate>	-pron- already try that -pron- have help add webpack to the mix
[2015-12-08T16:03:14.670Z]	<JKillian>	-pron-  <user> want to include the typing for express like suggest
[2015-12-08T16:04:50.946Z]	<JKillian>	basically install the typing use tsd or just copy -pron- from definitelytype definitelytyped blob master express and then add -pron- to -pron- list of file in
[2015-12-08T16:05:54.430Z]	<JKillian>	-pron-  <user> want to add the node typing as well in the same way
[2015-12-08T16:06:56.640Z]	<JKillian>	-pron- recommend use tsd to do this instead of find and copy all the typing -pron- need by hand
[2015-12-08T16:07:14.690Z]	<mark-norgate>	i have -pron- all already have use tsd
[2015-12-08T16:07:51.527Z]	<mark-norgate>	may help if i actually ref -pron- hold on a mo
[2015-12-08T16:44:49.824Z]	<mark-norgate>	yep kinda help although now i have a different problem
[2015-12-08T16:45:54.573Z]	<mark-norgate>	reference express import as express from express this yield a nice red squiggly under -pron- import statement can not compile module unless the flag be provide
[2015-12-08T16:46:26.913Z]	<mark-norgate>	this be in both and mode
[2015-12-08T16:46:45.680Z]	<mark-norgate>	what be -pron- on about i tell thee
[2015-12-08T16:47:52.787Z]	<mark-norgate>	i have scour the globe for an answer well i google and stackoverflowe
[2015-12-08T16:48:00.598Z]	<mark-norgate>	no direct hit
[2015-12-08T16:48:17.672Z]	<david-driscoll>	-pron- need to tell the compiler -pron- intend to be use external module set in -pron- tsconfig should be enough
[2015-12-08T16:49:56.057Z]	<mark-norgate>	yeah that be -pron- understanding but -pron- not work compileroption target file controller controller
[2015-12-08T16:50:12.991Z]	<mark-norgate>	oo hold on miss the module
[2015-12-08T16:50:54.270Z]	<mark-norgate>	vsc do like the setting of module to not in the allow value list
[2015-12-08T16:51:55.971Z]	<david-driscoll>	then try commonjs be a new version of the compiler
--------------------------------------------------------------------------------------------------
[2015-12-08T17:13:45.518Z]	<JKillian>	i think commonjs be what -pron- want anyway as -pron- use node for -pron- runtime
--------------------------------------------------------------------------------------------------
[2015-12-08T17:53:09.839Z]	<darrylryan>	hey guy i be struggle with write file for more complex js do anyone know of any good video tutorial that explain how to approach -pron-
[2015-12-08T19:29:39.138Z]	<DominicBoettger>	how can i prevent typescript from remove unused import
[2015-12-08T19:31:17.968Z]	<ChristopherElliott>	have a similar question and come across this discussion
[2015-12-08T19:32:29.439Z]	<ChristopherElliott>	but have to duplicate every reference be kind of a deal breaker for -pron- so -pron- hold back switch to amd because of that
--------------------------------------------------------------------------------------------------
[2015-12-08T19:32:41.533Z]	<JKillian>	 <user> check out
[2015-12-08T19:40:05.094Z]	<DominicBoettger>	thank
--------------------------------------------------------------------------------------------------
[2015-12-09T10:13:00.512Z]	<elhigu>	hi be there a way to call static method from an instance method when both method have the same name return
[2015-12-09T10:13:31.950Z]	<elhigu>	that give -pron- an error rror property filteredjson do not exist on type function
[2015-12-09T10:14:51.972Z]	<elhigu>	ofcourse i could just choose different name for the static method but i would like to do -pron- needlessly
[2015-12-09T11:11:07.706Z]	<elhigu>	get -pron- work let staticpart any return
--------------------------------------------------------------------------------------------------
[2015-12-09T10:25:03.227Z]	<zewa666>	hi there be there any work sample for typescript code coverage with gulp and karma
[2015-12-09T10:34:36.617Z]	<narcotics726>	check
[2015-12-09T11:15:26.394Z]	<zewa666>	thank  <user> check -pron- out
[2015-12-09T13:41:40.651Z]	<arianra>	hey guy another question about generic and static typing for function i have the follow setup private create function any newproperty any any object private defaultparsesetter ao newproperty ao ao the create method expect a defaultparsersetter implementation but i can seem to be able to apply generic to -pron- instead i have to set any any way to approach this well i apologize for not read enough on the subject
[2015-12-09T16:47:35.614Z]	<JKillian>	one tip be that create function can just be create ts can automatically infer a more specific type for -pron- base on the type of the arrow function on the rhs
[2015-12-09T16:55:27.749Z]	<JKillian>	something similar to this should work for -pron- typescript type parsesetter t oldprop t newprop t t class someclass class someotherclass private create parsesetter t t private defaultparsesetter parsesetter someclass
[2015-12-09T20:13:16.007Z]	<vivainio>	apparently the roadmap have be update external module bundling be there anymore but this remain in
[2015-12-09T20:13:57.094Z]	<vivainio>	be that now the solution -pron- be suppose to use if -pron- want to simplify -pron- toolchain use systemjs that concatenation mechanism
[2015-12-10T00:22:06.676Z]	<kamikaze>	if
[2015-12-10T00:22:20.104Z]	<kamikaze>	-pron- be
[2015-12-10T00:23:35.852Z]	<ihorskyi>	so -pron- what ts compiler say or actual running app
[2015-12-10T00:24:45.287Z]	<kamikaze>	require external module ts node register unable to compile typescript property endswith do not exist on type string
[2015-12-10T00:26:35.160Z]	<panKt>	-pron- should check -pron- target
[2015-12-10T00:26:42.764Z]	<panKt>	and  <user>
[2015-12-10T00:27:08.122Z]	<kamikaze>	target be
--------------------------------------------------------------------------------------------------
[2015-12-09T14:54:41.225Z]	<DominicBoettger>	can i limit the line length of the output file
--------------------------------------------------------------------------------------------------
[2015-12-09T17:19:32.978Z]	<geyang>	hey guy i have a question about a reduce function
[2015-12-09T17:58:13.128Z]	<geyang>	actually
[2015-12-09T17:58:26.751Z]	<geyang>	how do -pron- guy run karma jasmin test
[2015-12-09T17:58:34.217Z]	<geyang>	i have karma jasmine typescript setup
[2015-12-09T17:58:48.019Z]	<geyang>	however the test only show when i choose not to concatenate the output
[2015-12-09T18:01:03.501Z]	<geyang>	the problem occur when i want to include the reactivejs library
[2015-12-09T18:01:49.004Z]	<geyang>	when i choose not to incldue -pron- -pron- get a require be not define error
--------------------------------------------------------------------------------------------------
[2015-12-09T20:54:02.690Z]	<JKillian>	be ts able to correctly infer type of object when deal with nested object literal and type union
[2015-12-09T20:58:36.626Z]	<JKillian>	ah i see -pron- be very cool
--------------------------------------------------------------------------------------------------
[2015-12-10T00:20:03.902Z]	<kamikaze>	what could -pron- be property endswith do not exist on type string
[2015-12-10T00:21:21.710Z]	<ihorskyi>	should -pron- be endswith instead of endswith
[2015-12-10T00:24:56.550Z]	<kamikaze>	try to build
[2015-12-10T00:25:11.976Z]	<kamikaze>	with ts
--------------------------------------------------------------------------------------------------
[2015-12-10T00:27:15.152Z]	<DanielRosenwasser>	no but -pron- can run the emit through a pretty printer
[2015-12-10T00:27:30.797Z]	<kamikaze>	typescript service commit
[2015-12-10T00:28:52.078Z]	<weswigham>	yes
[2015-12-10T00:29:24.235Z]	<ihorskyi>	try to change target temporarily to to see if error persist
[2015-12-10T00:29:59.312Z]	<Arnavion>	endswith be only in yes
[2015-12-10T00:34:12.273Z]	<ihorskyi>	-pron- could  <user> try instal while still have target -pron- can use to have those function in environment
[2015-12-10T00:39:46.405Z]	<kamikaze>	now -pron- tell -pron- duplicate identifier promise duplicate identifier promise duplicate identifier promise duplicate identifier promise
[2015-12-10T00:39:50.816Z]	<kamikaze>	doh
[2015-12-10T00:43:00.185Z]	<ihorskyi>	i guess -pron- be b c -pron- have one promise from node bluebird and another from
[2015-12-10T00:44:08.572Z]	<ihorskyi>	btw which version of node -pron- use to build -pron- all
[2015-12-10T00:44:46.558Z]	<kamikaze>
--------------------------------------------------------------------------------------------------
[2015-12-10T00:45:06.320Z]	<panKt>	npm
[2015-12-10T00:46:25.692Z]	<ihorskyi>	i look at project page -pron- say note that this  <user> project require node or high and npm
[2015-12-10T00:48:48.283Z]	<kamikaze>	as i have
[2015-12-10T00:55:58.917Z]	<kamikaze>	if i make empty everything work just fine
[2015-12-10T00:56:08.678Z]	<kamikaze>	dirty hack
[2015-12-10T00:56:27.746Z]	<ihorskyi>	ok i be just able to smoothly install start use node npm
[2015-12-10T00:57:36.993Z]	<ihorskyi>	-pron- should actually ask these question on but i guess -pron- have various node npm version instal
--------------------------------------------------------------------------------------------------
[2015-12-10T01:06:00.344Z]	<nevercast>	how do i define a definition for a function that transform the argument of a function pass in
[2015-12-10T01:06:33.695Z]	<nevercast>	i have a function that convert node style callback function in to promise a common transform how can i write a definition for that
[2015-12-10T01:07:09.447Z]	<nevercast>	the promise generic return type be the argument of the callback function which be the second argument to the function provide
[2015-12-10T01:07:17.461Z]	<nevercast>	be this too complex for a tsd
[2015-12-10T01:10:41.660Z]	<nevercast>	-pron- assume -pron- would be something like arg any error result t promise t but t be a dynamic type
[2015-12-10T01:11:45.602Z]	<nevercast>	actually the return type would be the arg  <user> arg targs promise t
[2015-12-10T01:12:16.046Z]	<DanielRosenwasser>	something like this
[2015-12-10T01:13:12.407Z]	<DanielRosenwasser>	be experiment with idea to avoid need to write an overload for every arity
[2015-12-10T01:38:57.592Z]	<esfand>	i get the following error on the return class extendedclass extend clazz statement type any be not a constructor type how can i type clazz in the first statement to avoid the error export function extendable clazz function extend option object return class extendedclass extend clazz constructor arg object args
[2015-12-10T01:54:55.814Z]	<esfand>	in other word what be the type of a constructor function clazz
[2015-12-10T02:10:57.314Z]	<Arnavion>	ts interface constructable object args any constructable extend any export function extendable clazz constructable function extend option object return class extendedclass extend clazz constructor arg any args
[2015-12-10T02:13:57.862Z]	<Arnavion>	strangely enough try to keep the extend any separate from constructable via an intersection type clazz constructable extend any do work cause the error to resurface that may be a bug
[2015-12-10T02:15:44.526Z]	<esfand>	fantastic thank
[2015-12-10T02:16:24.750Z]	<Arnavion>	although
[2015-12-10T02:17:10.516Z]	<Arnavion>	no scratch that that not really correct
[2015-12-10T02:17:26.422Z]	<Arnavion>	constructable new should return a constructable
--------------------------------------------------------------------------------------------------
[2015-12-10T02:19:44.983Z]	<joostverdoorn>	hey guy tsc can resolve the npm package in an import statement such as import key from this be a valid npm package name and node can handle -pron- do anyone know why be happen be this by design
[2015-12-10T02:20:40.525Z]	<joostverdoorn>	-pron- seem to be about the dot in the name but there should be nothing wrong with that
[2015-12-10T02:22:41.673Z]	<esfand>	-pron- point -pron- to the right direction -pron- work on -pron- thank a lot
--------------------------------------------------------------------------------------------------
[2015-12-10T07:46:54.283Z]	<falsandtru>	hi i get some error on late nightly build late release build have not these error i think these error  <user> fix before next release because maybe these be temporary error but if these error will fix when should i report these error please tell -pron-
--------------------------------------------------------------------------------------------------
[2015-12-10T08:45:46.006Z]	<Arnavion>	if -pron- have error with that be in then -pron- definitely appear in when -pron- get release if -pron- do report -pron-
[2015-12-10T08:59:48.456Z]	<falsandtru>	-pron- report those error thank -pron-
--------------------------------------------------------------------------------------------------
[2015-12-10T12:35:05.992Z]	<MaherJendoubi>	hi do anyone know if  <user> be available through bower in the future
--------------------------------------------------------------------------------------------------
[2015-12-10T14:19:09.553Z]	<cantide5ga>	mostly off topic be there an active discord irc gitter channel for jest -pron- try to find a project as a reference for write jest typescript to test flux react code  <user> write in typescript with browserify throw into the mix
--------------------------------------------------------------------------------------------------
[2015-12-10T16:12:46.449Z]	<scottwio>	hi question i have an object and i want to only allow certain string to be assign to a value how would i enforce this in typescript
[2015-12-10T16:13:30.579Z]	<scottwio>	state type stre add edit add snippetselecte object null
[2015-12-10T16:14:04.551Z]	<scottwio>	something like that but obviously that not go to work
[2015-12-10T16:22:05.831Z]	<JKillian>	come soon to a typescript near -pron-
[2015-12-10T16:22:39.361Z]	<JKillian>	-pron- should be able to use -pron- now if -pron- use a nightly version of ts
[2015-12-10T16:23:45.318Z]	<scottwio>	arrr get -pron- -pron- a little to early thank
[2015-12-10T16:39:24.647Z]	<scottwio>	sorry another question if i want to mark a normal function as private how would i do that again something like private function update
[2015-12-10T16:49:22.315Z]	<JKillian>	private only apply to class member afaik if -pron- work in a module context -pron- either be export or not export
[2015-12-10T16:50:38.193Z]	<scottwio>	oh ok so -pron- can mark a function as private try to get rid of all the functionname
[2015-12-11T04:54:45.551Z]	<johnfn>	so i be make a game which have sprite in -pron- i want to do something like and get a list of all sprite -pron- would be awesome if i could do and get all enhance sprite as well but i can think of any good way to write a type for -pron-
[2015-12-11T05:13:05.957Z]	<DanielRosenwasser>	there no automate way to do that -pron- just do static all enhancedsprite each time though -pron- could just have the type infer from each implementation
--------------------------------------------------------------------------------------------------
[2015-12-10T20:05:17.879Z]	<erichooshmand>	in vs update how do -pron- reference cross project ts and file such that the import statement like import modulename from work -pron- look like reference xml statement be not enough since -pron- can not resolve -pron- -pron- stop -pron- build
[2015-12-10T20:28:46.822Z]	<Arnavion>	private to what
[2015-12-10T20:29:05.421Z]	<Arnavion>	if private to class the private keyword get -pron- that if private to the module then just do export -pron-
[2015-12-11T05:20:57.293Z]	<Arnavion>	-pron- amount to the same thing
--------------------------------------------------------------------------------------------------
[2015-12-10T22:12:07.047Z]	<nevercast>	how can i hide a global declare in -pron- declare promise however -pron- like to import another promise library and not use native promise at this stage async await should work fine with another promise library and -pron- like to use bluebird on -pron- server which be write in typescript cheer
[2015-12-10T22:15:03.111Z]	<nevercast>	look at the transpiled output -pron- should work but the intellisense and reference do work -pron- point to instead of
[2015-12-11T05:05:31.594Z]	<DanielRosenwasser>	be all a static method or an instance method
[2015-12-11T05:10:18.933Z]	<johnfn>	static
[2015-12-11T05:11:01.510Z]	<johnfn>	honestly -pron- do have to be in exactly that form i just want some sort of mapping between name of class that extend from sprite and list of that type
[2015-12-11T05:13:54.460Z]	<johnfn>	hmm yeah that what i be think thank
[2015-12-11T05:16:48.607Z]	<Arnavion>	how -pron- implement -pron- be up to -pron- of course
[2015-12-11T05:17:36.940Z]	<johnfn>	right but as i understand typeof t do not actually work
[2015-12-11T05:20:50.651Z]	<Arnavion>	well -pron- can replace that with arg any t
--------------------------------------------------------------------------------------------------
[2015-12-11T05:16:28.814Z]	<Arnavion>	in general the function signature -pron- look for be something like function all typeof t t
[2015-12-11T05:17:30.846Z]	<Arnavion>	say an map with constructor as the key and list of instance as the value or a regular object map with as the string key
[2015-12-11T05:18:30.986Z]	<Arnavion>	oh yeah typeof require real type
[2015-12-11T05:18:37.538Z]	<johnfn>	yeah
[2015-12-11T05:21:54.867Z]	<johnfn>	ah interesting
[2015-12-11T05:22:17.621Z]	<Arnavion>	for the constraint yes
--------------------------------------------------------------------------------------------------
[2015-12-11T05:22:04.781Z]	<johnfn>	and then i could do t extend sprite
--------------------------------------------------------------------------------------------------
[2015-12-11T19:21:14.845Z]	<JKillian>	anyone know if the defacto standard for string in ts be single or double quote i prefer single but typescript use double in -pron- codebase or be there no standard i know in js -pron- often vary person to person
--------------------------------------------------------------------------------------------------
[2015-12-11T20:38:30.942Z]	<vivainio>	lint tool ofter default to single quote so there that
[2015-12-11T20:39:39.926Z]	<vivainio>	thank
[2015-12-11T20:44:50.966Z]	<JKillian>	yup just what -pron- work on
[2015-12-11T21:15:34.286Z]	<ntilwalli>	be -pron- possible to use the file property in while  <user> have the compiler recurse down the tree to find all the and file or be -pron- mutually exclusive
--------------------------------------------------------------------------------------------------
[2015-12-11T21:33:57.154Z]	<willsoto>	anyone here use mocha to run typescript unit test
[2015-12-11T21:34:09.432Z]	<willsoto>	can -pron- simply pass a compiler to mocha like -pron- would with babel
[2015-12-11T21:37:28.708Z]	<JKillian>	i normally run mocha on the compile js file and have source map set up -pron- may be able to do what -pron- suggest as well but -pron- never try -pron-
[2015-12-11T21:39:46.967Z]	<willsoto>	yeah -pron- like to avoid have to compile the file in that way
[2015-12-11T21:41:05.929Z]	<JKillian>	be -pron- go to be compile the file at some point in -pron- build process anyways though
[2015-12-11T21:42:53.049Z]	<willsoto>	i do wanna compile the test
[2015-12-11T21:42:59.520Z]	<willsoto>	i want the test -pron- to be in typescript
[2015-12-11T21:43:14.803Z]	<willsoto>	i mean the test do get compile but not to disk
[2015-12-11T21:43:29.314Z]	<willsoto>	-pron- would be in memory or maybe mocha clean up after -pron-
[2015-12-11T21:43:44.362Z]	<willsoto>	basically i do want the actual test file be compile to js
[2015-12-11T21:44:00.367Z]	<willsoto>	and then leave there for -pron- to clean up or w e
[2015-12-11T21:44:01.033Z]	<david-driscoll>	i mean -pron- could include the typescript compiler and compile the code to javascript and then just eval -pron-
[2015-12-11T21:44:17.104Z]	<DanielRosenwasser>	i feel like -pron- know of a solution to this there be various package to do just that but i do know of -pron- specifically
[2015-12-11T21:44:25.100Z]	<DanielRosenwasser>	what be the constraint that -pron- can compile to disk
[2015-12-11T21:44:57.853Z]	<willsoto>	because i think this mocha js babel core register
[2015-12-11T21:45:09.938Z]	<willsoto>	be a more elegant solution than write to disk and then run test on that
[2015-12-11T21:45:38.278Z]	<willsoto>	so -pron- be a constraint i just think -pron- be ugly and unecessary as show by the way i achieve -pron- goal with babel
[2015-12-11T21:46:05.972Z]	<willsoto>	the code be transipile in both case so i do see typescript as be special here
[2015-12-11T21:47:27.822Z]	<willsoto>
[2015-12-11T21:47:34.382Z]	<willsoto>	mocha ts node register
[2015-12-11T21:48:10.283Z]	<willsoto>	i be surprised i need a party module for this though i would think typescript would expose an interface similar to babel
[2015-12-11T21:48:27.433Z]	<DanielRosenwasser>	typescript expose an api which -pron- free to hook into
[2015-12-11T21:49:02.887Z]	<willsoto>	oh cool
[2015-12-11T21:49:08.617Z]	<DanielRosenwasser>
[2015-12-11T21:49:35.425Z]	<willsoto>	hmmm
--------------------------------------------------------------------------------------------------
[2015-12-11T22:29:38.100Z]	<erichooshmand>	do anyone know of a tool library for take a hierarchy of type in multiple file into a single file
[2015-12-11T22:52:35.038Z]	<DanielRosenwasser>	there be
[2015-12-11T22:52:43.995Z]	<DanielRosenwasser>	but i do know what the status on that be for -pron-
[2015-12-11T22:59:21.250Z]	<erichooshmand>	thank i read through that earlier today and since i be under a bit of a time crunch i be hope someone have a workaround or temporary solution while i wait for that look at
[2015-12-12T07:12:44.701Z]	<babeal>	-pron- be use dts generator and -pron- work pretty well
[2015-12-12T07:14:13.996Z]	<babeal>	this may not be the write place but do anyone know how to get gulp typescript to emit a pipe error when the typescript compiler return error i want the build to break when there be error
[2015-12-12T17:32:05.262Z]	<4tron>	can i plug -pron- repo
[2015-12-12T17:33:24.523Z]	<vicky002>	bit offtopic but today -pron- repo be trend on github check algowiki all cs resource at one algowiki
[2015-12-12T17:33:52.645Z]	<4tron>	i  <user> take -pron- collective silence as a yes
[2015-12-12T17:34:00.388Z]	<4tron>
[2015-12-12T17:34:14.309Z]	<4tron>	still a but love typescript
--------------------------------------------------------------------------------------------------
[2015-12-12T22:01:48.436Z]	<mfilotto>	hi there i want to refactor -pron- node and gulp code in typescript do -pron- know any blog post tut or doc for a good starting point
[2015-12-13T00:11:28.068Z]	<panKt>	what be the good way to do reusable import i have some ts file that share the same import be there a way to create some ts file which import lot of other file and then just import import that file
[2015-12-13T00:12:24.874Z]	<david-driscoll>	assume syntax -pron- could create a file that do export -pron- import here from to module
[2015-12-13T00:12:42.994Z]	<david-driscoll>	and then all the export  <user> be available in that one file if -pron- import -pron- specificly
[2015-12-13T00:19:52.884Z]	<panKt>	driscoll i just do -pron- as so export ioption ioptionslist onerror from crud utils export irestresponse from table service export ikeymap defaultkeymaphandler from ui utils how do i import -pron- all as one line something like this possible import from
[2015-12-13T00:37:08.117Z]	<david-driscoll>	-pron- can do import as somename from
[2015-12-13T00:37:34.025Z]	<david-driscoll>	and then to reference the type -pron- have to use type
[2015-12-13T00:39:21.738Z]	<panKt>	yes but that will not help i mean -pron- have to add something to exist class instead of write just ikeymap -pron- have to write all over the place and for all other class interface funtion  <user>
[2015-12-13T00:40:27.317Z]	<panKt>	there sould be some solution for this for -pron- in some file there be more import than actual logic code
[2015-12-13T00:41:11.899Z]	<panKt>	and -pron- sure even in medium size project there be issue like i describe
[2015-12-13T00:44:43.266Z]	<panKt>	actually i never have that much import in one file on server side js ts project but for -pron- seem like a regular issue
[2015-12-13T00:55:58.303Z]	<geyang>	hey guy -pron- get a bit tangled in the type again
[2015-12-13T00:56:08.317Z]	<geyang>	-pron- write a redux like library for -pron- project
[2015-12-13T00:56:59.802Z]	<geyang>	here in this script i have a combinereducer function -pron- require a subclass of hash
[2015-12-13T00:57:09.796Z]	<geyang>	typescript import action hash reducer from helper function function var initialresult as reducer return reducer key if typeof function return result initialresult mixed reducer type be not support but i want to add -pron- later on export function combinereducer tstate extend const finalreducer reducer const key var combinedreducer tstate extend tstate action action tstate var initialresult as tstate return tstate key action state call back be not call unless the inner reducer call -pron- state return result initialresult return combinedreducer as reducer
[2015-12-13T00:57:50.699Z]	<geyang>	but tye store state type tstate can be a simple number as show in -pron- test script so when the store call the combinereducer function conditionally typescript report an error
[2015-12-13T00:58:09.675Z]	<geyang>	typescript create by ge on import behaviorsubject subject subscriber from rxj import combinereducer from combinereducer import action reducer hash from const export class store tstate public tstate public rootreducer reducer public action tstate reducer nomergereducer boolean false if nomergereducer typeof rootreducer function combinereducer else rootreducer var initaction action tstate type state initialstate be a stream for action object new be a stream for the state of the store new action var currentstate tstate var state tstate action if typeof state undefined error error error complete action tstate destroy
[2015-12-13T00:58:56.878Z]	<geyang>	i can do export class store tstate extend hash because the tstate can be a simple number
[2015-12-13T00:59:26.556Z]	<geyang>	and i can extend the number class without typescript complain about teststate type and number type can not be add together
[2015-12-13T11:41:10.470Z]	<arianra>	i be
[2015-12-13T11:41:33.269Z]	<arianra>	what issue be -pron- run into
[2015-12-13T18:09:02.033Z]	<DanielRosenwasser>	press to see -pron- browser console
[2015-12-13T18:09:16.504Z]	<DanielRosenwasser>	or change -pron- to an alert
[2015-12-13T18:09:34.289Z]	<DanielRosenwasser>	in any case -pron- appear to work fine
[2015-12-13T20:58:48.994Z]	<jvilk>	at the moment i simply omit argument list for function with no argument but user be complain that -pron- inconsistent with the call syntax of function with argument and i agree example hmm maybe -pron- just use the empty object or something as a workaround
[2015-12-13T21:08:02.797Z]	<Arnavion>	even non empty tuple type can have more member than -pron- arity so i would rely on -pron- get only as many member as the arity allow anyway eg var x string number
[2015-12-13T21:08:22.363Z]	<jvilk>	oh that good to know
[2015-12-13T21:09:05.495Z]	<Arnavion>	basically tuple type extend with a union of -pron- constituent in some case so string number be sometimes the same as string number
[2015-12-13T21:09:41.141Z]	<Arnavion>	which  <user> make a such as string similar to stre
[2015-12-13T21:11:45.967Z]	<jvilk>	hmm interesting -pron- mental model of tuple be quite naive then either way -pron- force to use -pron- in this scenario due to how -pron- vm work
[2015-12-13T21:15:16.641Z]	<Arnavion>	well since the function name be enough to disambiguate overload i guess -pron- do really need the length of the array for anything
--------------------------------------------------------------------------------------------------
[2015-12-13T10:06:44.597Z]	<josiahhaswell>	hi folk be anyone use typescript with jspm systemjs
[2015-12-13T10:07:07.371Z]	<josiahhaswell>	-pron- try to import some standard javascript modules and i can quite get -pron- right
--------------------------------------------------------------------------------------------------
[2015-12-13T17:23:58.040Z]	<crystalbyte>	can someone please explain the follow situation for -pron- interface budget amount number private budget budget public any void x do not work although x have property amount
[2015-12-13T17:25:06.617Z]	<DanielRosenwasser>	budget and method need to be inside of a class
[2015-12-13T17:25:27.268Z]	<DanielRosenwasser>	see
[2015-12-13T17:25:45.730Z]	<crystalbyte>	-pron- be i just omit -pron- for clarity
[2015-12-13T17:26:17.231Z]	<crystalbyte>	the problem be the assignment everything else work peachy
[2015-12-13T17:26:26.963Z]	<DanielRosenwasser>	in any case the playground do seem to have any problem with -pron-
[2015-12-13T17:26:37.534Z]	<DanielRosenwasser>	so what do work exactly
[2015-12-13T17:27:20.241Z]	<crystalbyte>	be still undefined after the line x
[2015-12-13T17:27:46.986Z]	<crystalbyte>	if i change the property to private budget any the assignment work
[2015-12-13T17:28:12.419Z]	<DanielRosenwasser>	can -pron- post a full concrete example
[2015-12-13T17:32:16.924Z]	<crystalbyte>	i type -pron- down unfortunately the run button do work
--------------------------------------------------------------------------------------------------
[2015-12-13T20:55:54.611Z]	<jvilk>	any particular reason why typescript do support empty tuple type -pron- use abuse -pron- for argument list to jvm function for -pron- javascript jvm
--------------------------------------------------------------------------------------------------
[2015-12-13T21:24:22.347Z]	<DanielRosenwasser>	-pron- would be problematic to have an empty array type since in theory -pron- be structurally the same as array or potentially array void
[2015-12-13T21:24:30.093Z]	<DanielRosenwasser>	so user would probably run into more problem as a result
[2015-12-13T21:51:52.938Z]	<jvilk>	gotcha now that i have a well handle on how -pron- work -pron- make sense
--------------------------------------------------------------------------------------------------
[2015-12-13T23:20:45.295Z]	<basarat>	i do wanna compile the test i want the test -pron- to be in typescript i mean the test do get compile but not to disk ts node do this even have mocha integration rise
--------------------------------------------------------------------------------------------------
[2015-12-14T01:48:44.012Z]	<mfilotto>	hi there i want to refactor -pron- node and gulp code in typescript do -pron- know any blog post tut or doc for a good starting point
[2015-12-14T04:37:36.193Z]	<geyang>	pro tip use webpack instead of gulp unless -pron- want to spend more time
[2015-12-14T04:38:00.647Z]	<geyang>	just use typescript and do use babel unless -pron- want to compile to first
[2015-12-14T09:46:28.124Z]	<MaherJendoubi>
[2015-12-14T13:40:39.798Z]	<willsoto>	ty i take a look at that later in the evening have have a chance to try -pron- out yet though
[2015-12-14T19:29:15.182Z]	<ryanwischkaemper>	yes i try class library mvc web app plain website and just include file as solution item none work
[2015-12-14T19:29:35.867Z]	<ryanwischkaemper>	the dnx project be the only one that respect file right now i think
[2015-12-14T19:30:29.125Z]	<ryanwischkaemper>	but -pron- be use a dnx web app that house -pron- source and a separate dnx class library that house -pron- and i get full intellisense
[2015-12-14T19:30:58.577Z]	<ryanwischkaemper>	i do have to add a in -pron- unit test library that have a reference to a single file in -pron- web project
[2015-12-14T19:32:56.580Z]	<ryanwischkaemper>	not to a single file i use gulp typescript to compile -pron- source file to in -pron- webapp and i use a karma plugin to compile -pron- spec on the fly so i never have compile unit test write to disk
[2015-12-15T01:48:50.231Z]	<ryanwischkaemper>	install community then go to file new project and select visual c web class library package
[2015-12-15T01:49:31.758Z]	<ryanwischkaemper>	or use the new dotnet dotnet cli
[2015-12-15T01:50:11.612Z]	<babeal>	well nice that s new to -pron- i find -pron- be that add in the rc
[2015-12-15T01:50:27.129Z]	<ryanwischkaemper>	the cli
[2015-12-15T01:50:47.698Z]	<ryanwischkaemper>	the cli be not -pron- still pretty new and very unpolished
[2015-12-15T01:51:02.116Z]	<babeal>	no the web class library package -pron- suggest that -pron- support typescript  <user> not just c code
[2015-12-15T01:51:34.651Z]	<ryanwischkaemper>	-pron- support file -pron- respect -pron- rather
[2015-12-15T01:52:16.370Z]	<babeal>	ok cool this be good to know -pron- assume -pron- be much different that the empty web application project except -pron- miss a couple of file
[2015-12-15T01:52:17.445Z]	<ryanwischkaemper>	but yes -pron- work pretty well with typescript
[2015-12-15T01:52:42.112Z]	<ryanwischkaemper>	no -pron- pretty different structurally
[2015-12-15T01:53:11.743Z]	<babeal>	-pron- can use rc yet because the team decide to break excluded folder so there be no production development scenario that allow -pron- to work with source control and not have to remove build file every time a gulp task be run
[2015-12-15T01:53:15.478Z]	<ryanwischkaemper>
[2015-12-15T01:53:56.182Z]	<ryanwischkaemper>	not sure i understand that be -pron- something that can handle
[2015-12-15T01:54:23.837Z]	<ryanwischkaemper>	i use at -pron- job on an old app and have no problem
[2015-12-15T01:55:11.838Z]	<babeal>	well pre rc gitignore actually work however -pron- use tfsvc tfsvc do support tfignore and therefore add any file copy or create at any time under the folder structure
[2015-12-15T01:55:23.111Z]	<ryanwischkaemper>	ah
[2015-12-15T01:55:37.812Z]	<babeal>	so every time -pron- build all the artifact be add to -pron- pende change
[2015-12-15T01:55:52.815Z]	<ryanwischkaemper>	yea that be extremely annoying
[2015-12-15T01:56:16.679Z]	<babeal>	now supposedly rc git be break at least that on the tooling site -pron- show the pende change but git still ignore -pron- on check in i do confirm -pron- and -pron- sound like from -pron- comment this be the case
[2015-12-15T01:56:56.094Z]	<ryanwischkaemper>	i use github bitbucket at work and have run into any issue
[2015-12-15T01:58:12.867Z]	<ryanwischkaemper>	when -pron- do get around to use typescript in dnx project turn on display virtual project when a solution be load at tool option text editor typescript project really help when get cross project reference work and set up
[2015-12-15T01:58:40.639Z]	<babeal>	what do that do
[2015-12-15T01:58:56.500Z]	<babeal>	i actually turn off that option because i have no clue what -pron- dd
[2015-12-15T02:00:24.978Z]	<babeal>	and would this be support in other editor like web storm and vs code right now to get intellisense -pron- be have to compile all -pron- file into a typing and add that to the other project
[2015-12-15T02:00:26.457Z]	<ryanwischkaemper>	-pron- show -pron- the typescript virtual project in solution explorer basically the behind the scene tooling that visual studio use for typescript stuff but turn -pron- on let -pron- see every folder file that -pron- file have access to
[2015-12-15T02:02:13.156Z]	<ryanwischkaemper>	i use definitelytyped tsd so in -pron- source project i have a with reference to -pron- party typing then in -pron- separate test project i add one file and i add a reference inside of -pron- that point at the in -pron- source project then everything work beautifully
[2015-12-15T02:03:01.053Z]	<ryanwischkaemper>	the pathing be all relative from the file do the referencing i use and style import
[2015-12-15T02:04:20.966Z]	<babeal>	that what -pron- use -pron- be have issue with gulp and file folder outside of the current root and i assume -pron- would be a problem for everything so i do think of cross the tsd however do -pron- contain reference to all -pron- ts file how do the down stream project get reference to those
[2015-12-15T02:04:38.589Z]	<ryanwischkaemper>	but systemjs  <user> allow configuration that allow for aliase path so for example in -pron- spec file i can do import myservice from src app myservice instead of import myservice from app myservice -pron- just a convenience in that regard though either way work
[2015-12-15T02:06:32.977Z]	<ryanwischkaemper>	-pron- only contain reference to third party typing none of -pron- source file be referenced -pron- not sure because i have dig enough into -pron- but i think that just reference one file from another directory  <user> bring in the rest from that directory via the background ts virtual project
[2015-12-15T02:08:09.324Z]	<ryanwischkaemper>	if i be to reference source file in another project folder -pron- gulp task would have to incorporate copy -pron- to the web server root directory or something
--------------------------------------------------------------------------------------------------
[2015-12-14T17:52:10.729Z]	<erichooshmand>	be anyone use and successfully reference ts file across project
[2015-12-14T18:31:26.899Z]	<ryanwischkaemper>	yes
[2015-12-14T18:31:34.853Z]	<ryanwischkaemper>	only the new dnx project type though
[2015-12-14T19:28:09.427Z]	<erichooshmand>	do -pron- try other project type find -pron- faulty with regard to ts referencing
[2015-12-14T19:29:48.046Z]	<erichooshmand>	thank -pron- very much that arm -pron- for a discussion with the other dev on -pron- team
[2015-12-14T19:31:52.596Z]	<erichooshmand>	be -pron- use a generator or compiler to compile -pron- type into a single file
[2015-12-14T19:33:14.930Z]	<erichooshmand>	nice
--------------------------------------------------------------------------------------------------
[2015-12-15T01:28:56.329Z]	<babeal>	why webpack can -pron- give a list of reason why do this  <user> apply to project that use dnx kestrel host and not webpack internal server
[2015-12-15T01:30:07.173Z]	<babeal>	how do -pron- create a dnx class library
[2015-12-15T01:31:54.751Z]	<babeal>	 <user> can someone fill -pron- in on the benefit drawback of use classic or node module resolution
[2015-12-15T02:06:33.129Z]	<babeal>	 <user> something that i do try but -pron- assume -pron- use to bundle before serve if -pron- do and allow to pull file as -pron- incounter -pron- would -pron- not be able to find file outside of the current wwwroot be i miss something here
[2015-12-15T02:06:55.444Z]	<ryanwischkaemper>	-pron-  <user> important to note that i have a file in both -pron- test project and source project
[2015-12-15T02:07:30.462Z]	<ryanwischkaemper>	-pron- would not be able to find source file outside of wwwroot because web server just can do that
--------------------------------------------------------------------------------------------------
[2015-12-15T02:01:39.152Z]	<babeal>	can -pron- explain the cross project reference be -pron- get typescript intellisense across project how do the pathing work
--------------------------------------------------------------------------------------------------
[2015-12-15T02:08:23.876Z]	<ryanwischkaemper>	but the developer experience would suffer -pron- still get intellisense and all
[2015-12-15T02:09:31.418Z]	<babeal>	yea that what -pron- be do and -pron- correct there intellisense would suffer in -pron- tsd file i do include the typescript file i create be -pron- include all the typescript file in the tsd or file
[2015-12-15T02:09:52.962Z]	<babeal>	or be -pron- generate a file on compile
[2015-12-15T02:10:11.992Z]	<babeal>	nevermind i see -pron- answer that
[2015-12-15T02:10:27.748Z]	<babeal>	ahh
--------------------------------------------------------------------------------------------------
[2015-12-15T02:11:20.854Z]	<ryanwischkaemper>	turn on visibility of the ts virtual project lead -pron- to discover how just -pron- one reference from -pron- separate test project would make all of -pron- source project available to -pron-
[2015-12-15T02:11:22.137Z]	<babeal>	ok that make sense i be go to try that right now this  <user> save -pron- a lot of headache i hope -pron- work in webstorm  <user> -pron- have to support both environment because -pron- have mac and windows dev
[2015-12-15T02:12:00.493Z]	<ryanwischkaemper>	i have test webstorm yet but and vscode both work well and this be all with typescript
[2015-12-15T02:12:34.705Z]	<ryanwischkaemper>	but now that -pron- mention -pron- test -pron- out in webstorm now
[2015-12-15T02:12:45.247Z]	<babeal>	yea -pron- get that instal the rest of -pron- dev do but if this work -pron- can move forward tsdoc still do support yet
[2015-12-15T02:12:56.733Z]	<babeal>	sweet awesome
[2015-12-15T02:15:27.585Z]	<ryanwischkaemper>	work the same in webstorm
[2015-12-15T02:15:54.122Z]	<babeal>	dude -pron- awesome glad -pron- be on super helpful
[2015-12-15T02:16:24.907Z]	<ryanwischkaemper>	 <user> hope -pron- work out for ya
[2015-12-15T02:17:45.675Z]	<babeal>	one last one be -pron- go to stick with or be -pron- think about move to webpack
[2015-12-15T02:20:28.823Z]	<ryanwischkaemper>	stick with systemjs for now i do really have any reason to switch
[2015-12-15T02:21:58.159Z]	<ryanwischkaemper>	the only thing i do have work now be which i can do without anyway and code coverage report for -pron- unit test and i have spend much time at all on the former though brief investigation show that use source map and some istanbul plugin  <user> do the trick
[2015-12-15T02:31:37.613Z]	<ryanwischkaemper>	yes node at home and at work
[2015-12-15T02:33:21.221Z]	<ryanwischkaemper>	not that -pron- encounter so far use -pron- on many different type of project
[2015-12-15T02:34:14.069Z]	<ryanwischkaemper>	and web tool
--------------------------------------------------------------------------------------------------
[2015-12-15T02:23:12.441Z]	<DeusProx>	be there some plan release date for typescript
[2015-12-15T02:24:31.608Z]	<ryanwischkaemper>	not that i know of i do think -pron- reveal any date just the microsoft typescript wiki roadmap
[2015-12-15T02:26:08.428Z]	<JKillian>	ts be just release recently so -pron- guess would be not for a month or two but of course that just a guess who know
[2015-12-15T02:32:15.560Z]	<babeal>	be -pron- run into any issue with node like do everything as an extraneous module cause any harm
[2015-12-15T02:33:39.929Z]	<ryanwischkaemper>	nope i just make sure to make -pron- path available before other vs tool
[2015-12-15T02:34:23.249Z]	<babeal>	yea i do that already
[2015-12-15T02:34:40.389Z]	<babeal>	in more than one way
--------------------------------------------------------------------------------------------------
[2015-12-15T02:30:47.246Z]	<babeal>	be -pron- use node npm yet with visual studio
[2015-12-15T02:35:08.969Z]	<babeal>	visual studio command prompt be still reference the original one too so have to alter that file  <user>
--------------------------------------------------------------------------------------------------
[2015-12-15T02:33:01.405Z]	<babeal>	be -pron- have any difficulty with dependency restore when open a project
[2015-12-15T02:33:09.869Z]	<babeal>	the one that initiate by visual studio
[2015-12-15T02:34:32.884Z]	<babeal>	learn that one the hard way about month ago
[2015-12-15T02:34:39.286Z]	<ryanwischkaemper>	hah yea -pron- too
--------------------------------------------------------------------------------------------------
[2015-12-15T02:37:25.375Z]	<babeal>	after i select the show virtual project where  <user> i see the information in the solution explorer
[2015-12-15T02:38:25.249Z]	<ryanwischkaemper>	-pron- only show up if -pron- open a file in one of -pron- project
[2015-12-15T02:38:40.396Z]	<ryanwischkaemper>	and the first time after turn the option on -pron- have to restart vs for -pron- to take effect
[2015-12-15T02:39:05.572Z]	<babeal>	ok -pron- just pop up
[2015-12-15T02:42:24.719Z]	<babeal>	so i reference project b in project a then i should get intellisense in project a for project b correct
[2015-12-15T02:43:43.556Z]	<ryanwischkaemper>	yes but -pron- only keep typing in one project -pron- source project so in -pron- project b reference project a source
[2015-12-15T02:44:02.719Z]	<babeal>	-pron- may
--------------------------------------------------------------------------------------------------
[2015-12-15T02:38:13.313Z]	<ryanwischkaemper>	yeap under a typescript virtual project solution explorer folder
--------------------------------------------------------------------------------------------------
[2015-12-15T02:43:54.765Z]	<ryanwischkaemper>	but i do think those minor detail would matter
--------------------------------------------------------------------------------------------------
[2015-12-15T02:45:11.043Z]	<ryanwischkaemper>	yea maybe do help that this tooling be relatively new and i can find any documentation or good info about -pron-
--------------------------------------------------------------------------------------------------
[2015-12-15T02:46:43.354Z]	<babeal>	in the virtual folder for -pron- framework project i see all the typing for -pron- app which reference -pron- framework and other typing i see none but i see the app and the framework typing under miscellaneous
[2015-12-15T02:47:05.757Z]	<ryanwischkaemper>	and -pron- have file in each one
[2015-12-15T02:47:18.328Z]	<babeal>	yea both project
[2015-12-15T02:48:07.097Z]	<babeal>	well once i delete all the typing out of the app and just keep the one reference the miscellaneous dissapeare
[2015-12-15T02:48:21.297Z]	<babeal>	and now -pron- properly under the correct project here go nothing
[2015-12-15T02:49:12.370Z]	<babeal>	yea still not get intellisense for framework type
[2015-12-15T02:51:18.572Z]	<ryanwischkaemper>	src app source typing test unit
[2015-12-15T02:51:25.646Z]	<ryanwischkaemper>	ugly but that -pron- folder setup
[2015-12-15T02:51:45.576Z]	<ryanwischkaemper>	oh and right next to the test i have -pron- file
[2015-12-15T02:52:22.060Z]	<babeal>	be the reference to the in the reference or the file
[2015-12-15T02:52:39.908Z]	<ryanwischkaemper>	the file i have no in -pron- test project
[2015-12-15T02:53:03.081Z]	<babeal>	be -pron- or just
[2015-12-15T02:53:10.330Z]	<ryanwischkaemper>	just
[2015-12-15T02:53:52.850Z]	<ryanwischkaemper>	and -pron- just have this inside -pron- reference typing
[2015-12-15T02:54:52.498Z]	<ryanwischkaemper>	and -pron- be this compileroption emitdecoratormetadata true experimentaldecorator true module amd target
[2015-12-15T02:56:48.225Z]	<babeal>	i actually have to turn resharper off -pron- be mess everything up for typescript
[2015-12-15T02:57:51.077Z]	<ryanwischkaemper>	-pron- be use resharper and have have any issue yet
[2015-12-15T02:58:44.366Z]	<babeal>	interesting -pron- be run into all sort of reshaper intellisense issue and -pron- be recommend to turn -pron- off for typescript maybe -pron- fix -pron-
[2015-12-15T02:59:01.710Z]	<babeal>	even still though this should work out of the box
[2015-12-15T02:59:21.518Z]	<babeal>	with out have to generate a file for each project and ship -pron- to all depend project
[2015-12-15T02:59:37.719Z]	<babeal>	-pron- use external module right
[2015-12-15T03:01:32.339Z]	<ryanwischkaemper>	by external -pron- mean from npm github i be do that via jspm
[2015-12-15T03:02:44.963Z]	<babeal>	i think by set module -pron- become external i think -pron- show that already with import syntax i be just make sure
[2015-12-15T03:04:59.314Z]	<ryanwischkaemper>	-pron- be off for the night good luck
[2015-12-15T03:06:29.098Z]	<babeal>	thank for the help i appreciate -pron-
--------------------------------------------------------------------------------------------------
[2015-12-15T02:56:27.507Z]	<ryanwischkaemper>	i wonder if -pron- could be resharper provide the intellisense but -pron- work the same in vscode and webstorm for -pron-
--------------------------------------------------------------------------------------------------
[2015-12-15T04:28:29.339Z]	<diegohb>	do late ts use setting from if -pron- present how do -pron- differ from the setting available in the project property typescript build property tab
[2015-12-15T05:02:12.217Z]	<LPGhatguy>	be there a recommend way to bring typing without target
[2015-12-15T05:02:20.691Z]	<LPGhatguy>	core js typing be alright but the version in definitelytyped be a bit out of date
[2015-12-15T08:19:58.798Z]	<DanielRosenwasser>	what out of date about -pron- so far may want to know about that
--------------------------------------------------------------------------------------------------
[2015-12-15T14:06:54.395Z]	<spencerwi>	be there a good guide out there for the recommend way to ship definition with libs write in typescript
[2015-12-15T14:08:03.591Z]	<spencerwi>	-pron- like consumer to be able to use -pron- lib either in browser or in node ideally
[2015-12-15T14:08:20.324Z]	<spencerwi>	from what i understand definition stuff have change between and now
[2015-12-15T20:45:17.237Z]	<adidahiya>	be -pron- library write use namespace or external module
[2015-12-15T20:49:47.759Z]	<spencerwi>	i have one lib write in ts that just a single file with a non exported class that i wrap in a crazy umd wrapper
[2015-12-15T20:50:21.398Z]	<spencerwi>	and another lib that write in js but have a file declare an external module
[2015-12-15T20:50:40.417Z]	<spencerwi>	so needless to say -pron- not necessarily do thing the optimal way
[2015-12-15T21:05:32.719Z]	<babeal>	for front end library what be the benefit drawback for use classic vs node resolution
--------------------------------------------------------------------------------------------------
[2015-12-15T21:27:17.635Z]	<diegohb>	how can i use in to complete after an array of promise of different return type to execute finish these task before proceed be the goal i try this but -pron- not work for -pron-
[2015-12-15T22:24:14.360Z]	<DanielRosenwasser>	use node resolution if -pron- plan to use something like browserify
--------------------------------------------------------------------------------------------------
[2015-12-15T22:26:26.441Z]	<babeal>	-pron- currently use but may move to web pack because of the html include issue and karma
[2015-12-15T22:27:13.293Z]	<babeal>	be there a good explaination anywhere explain the difference -pron- look at the github issue over and over again and i can seem to get a complete grip of which one should be use
[2015-12-15T22:27:38.249Z]	<DanielRosenwasser>	node resolution reflect the way that -pron- perform module resolution
[2015-12-15T22:27:45.150Z]	<DanielRosenwasser>	classic just try to treat everything as relative
[2015-12-15T22:28:05.301Z]	<DanielRosenwasser>	give that many people end up do the wrong thing with the classic mode
[2015-12-15T22:28:33.956Z]	<babeal>	the wrong thing most likely -pron- do that
[2015-12-15T22:29:06.182Z]	<DanielRosenwasser>	-pron- import something from foo and -pron- end up look for instead of foo foo foo etc
[2015-12-15T22:30:34.133Z]	<DanielRosenwasser>	see
--------------------------------------------------------------------------------------------------
[2015-12-15T22:32:11.102Z]	<babeal>	oh ok not do that what i have try to emmulate be the angular approach which use both relative path and absolute path all to minimize the backing up from directory but -pron- then mess up resolution when try to use -pron- in another project unless the name be perfect and map properly by system js be -pron- just good practice to always use relative path or be there another way -pron- seem that classic and visual studio  <user> allow -pron- to start at any parent but that do work when serve the file with out bundle
[2015-12-15T22:34:01.138Z]	<babeal>	thank for that link
--------------------------------------------------------------------------------------------------
[2015-12-16T09:04:57.016Z]	<sinairv>	hi all do anybody know where i can find documentation around the annotation i have look at the typescript handbook and language specification document on github but could find a section about this
[2015-12-16T09:14:56.978Z]	<arianra>	do -pron- mean decorator
[2015-12-16T09:17:13.088Z]	<arianra>	spec and some blog post do know if -pron- any good but seem to be about right
[2015-12-16T09:26:10.748Z]	<sinairv>	awesome seem like what -pron- look for thank
[2015-12-16T11:43:04.333Z]	<oneillci>	have anyone have success in add method to library object -pron- try to add a format method to string by add the method to the interface and then define -pron- on the prototype as per but the compiler be complain that format do not exist same result use either or vs code
[2015-12-16T12:16:56.406Z]	<arianra>	same here work fine on the playground though
[2015-12-16T12:17:25.488Z]	<arianra>	i faintly recall something about be able to extend interface by redefine -pron- so -pron- expect -pron- to be a feature that should work
[2015-12-16T12:20:03.899Z]	<arianra>	oh my bad more like the following but -pron-  <user> seem to work fine
[2015-12-16T18:19:28.301Z]	<JKillian>	-pron- find this to be the most helpful guide for that kind of thing
[2015-12-16T22:55:12.227Z]	<rosendi>	hi guy why do -pron- fail class a interface constructor t extend a arg t class c t extend a getconstructor constructor t return a
--------------------------------------------------------------------------------------------------
[2015-12-16T13:53:15.412Z]	<thegaryroberts>	hi have anyone have success in re export a class directly from a path export myclass from here myclass
[2015-12-16T13:53:34.386Z]	<thegaryroberts>	i could find any mention of -pron- here or elsewhere
[2015-12-16T20:16:12.285Z]	<jussimattila>	i use to do re export more or less successfully but run into some issue with i suppose dynamic loading of re export module use these be painfully hard to debug i have avoid re export stuff since then and have have similar problem
[2015-12-17T01:04:36.746Z]	<rosendi>	-pron- may be interested in a real example with firebase and model attribute type guard snippet
[2015-12-17T01:54:04.587Z]	<babeal>	import from ts index work
[2015-12-17T01:55:16.687Z]	<babeal>	import from ts -pron- make sense why -pron- do work and how transpile into commonjs would enable -pron- to work with the output however -pron- look like the person be get intellisense in typescript when exclude the index part of the path so i be confused and think i would ask
[2015-12-17T02:38:43.012Z]	<geyang>	hi driscoll what be the syntax in specify the type of this keyword in a function
[2015-12-17T02:38:44.330Z]	<geyang>	thank
[2015-12-17T02:40:03.921Z]	<david-driscoll>	the road map say -pron- look at add -pron- in
[2015-12-17T02:40:04.275Z]	<david-driscoll>
[2015-12-17T02:44:41.632Z]	<geyang>	ah thanks
[2015-12-17T02:44:47.367Z]	<geyang>	lol -pron- reaction be oh no
[2015-12-17T02:45:02.943Z]	<geyang>	so this in a function be always go to be any type then
[2015-12-17T02:46:09.762Z]	<geyang>	thank
[2015-12-17T02:46:50.813Z]	<geyang>	uhm so if i want the function to have object a be this can i do the follow
[2015-12-17T02:47:48.263Z]	<geyang>	or
[2015-12-17T02:48:55.346Z]	<david-driscoll>	so because of how the fat arrow work no -pron- will actually do anything to the method i do think -pron-  <user> error mind -pron-
[2015-12-17T02:49:26.669Z]	<david-driscoll>	if -pron- do something like const fn this  <user> be whatever this be already
[2015-12-17T02:49:35.605Z]	<geyang>	right right forget
[2015-12-17T02:49:44.405Z]	<geyang>	so i should stick with apply and call use regular function
[2015-12-17T02:49:54.918Z]	<david-driscoll>	lot of move part lol
[2015-12-17T02:54:23.776Z]	<david-driscoll>	return -pron- a function with this bind to the argument very similar to the fat arrow in a way though there be difference in how -pron- handle in the engine -pron-
--------------------------------------------------------------------------------------------------
[2015-12-16T18:33:42.545Z]	<MrAndMrsK>	-pron- do a lot of typescript as a consumer of library with and without definition but -pron- now try to figure out the right way to package up a library so that -pron- can be use in all the different project scenario be there guidance on how to present new library in typescript
[2015-12-16T19:26:20.593Z]	<spencerwi>	second this request
[2015-12-17T02:49:41.581Z]	<david-driscoll>	which if -pron- do in the global scope -pron- be window global etc
[2015-12-17T02:50:35.657Z]	<geyang>	haha what the difference between and
[2015-12-17T02:54:46.210Z]	<david-driscoll>	call let -pron- invoke a function with a value for this and then args that  <user> be apply to the function
--------------------------------------------------------------------------------------------------
[2015-12-16T23:00:34.318Z]	<ChristopherElliott>	a be not a member of c even if c extend a
[2015-12-16T23:08:27.354Z]	<pimterry>	try substitute other value of be the type for new c b correct for example give class b hi
[2015-12-16T23:09:12.081Z]	<pimterry>	sorry class b extend a hi not necessary but hopefully clear
[2015-12-16T23:10:12.433Z]	<DanielRosenwasser>	-pron- fail because t be not necessarily an a
[2015-12-16T23:17:11.533Z]	<rosendi>	give -pron- a sec -pron- example be clear
[2015-12-16T23:25:58.065Z]	<rosendi>	here be a more specified example
[2015-12-17T00:17:15.304Z]	<DanielRosenwasser>	what be -pron- solution if -pron- do mind -pron- ask
[2015-12-17T01:21:53.861Z]	<babeal>	i see a developer use file in subdirectory and not have to include the index at the end of an import i understand that this be a commonjs feature when i try this typescipt can not find the module be implicit module load with possible or do -pron- always have to include the file name when import
[2015-12-17T01:41:38.138Z]	<david-driscoll>	be -pron- use relative path to folder
[2015-12-17T01:53:31.484Z]	<babeal>	yea
[2015-12-17T01:53:49.507Z]	<babeal>	ex ts
--------------------------------------------------------------------------------------------------
[2015-12-16T23:06:35.169Z]	<rosendi>	where be a connection c be just a generic class and -pron- do extend a and getconstructor return a constructor for some class what extend a
[2015-12-16T23:10:13.230Z]	<rosendi>	nope -pron- do work
[2015-12-16T23:11:01.802Z]	<DanielRosenwasser>	if -pron- have a b that extend a and -pron- have ts var c c b then -pron- get an a instead of a b
[2015-12-16T23:12:08.376Z]	<DanielRosenwasser>	instead of constructor t write constructor a and -pron- work
[2015-12-16T23:28:34.240Z]	<rosendi>	how could i return a fallback constructor in the example above defaultdataserializer
[2015-12-17T00:09:24.467Z]	<rosendi>	-pron- seem that -pron- just find a solution thank -pron-
[2015-12-17T00:23:52.531Z]	<rosendi>	can i text code here directly or via link
[2015-12-17T00:31:09.227Z]	<rosendi>
[2015-12-17T00:35:30.995Z]	<rosendi>	-pron- try to figure out a side effect of this type cast t new datum
--------------------------------------------------------------------------------------------------
[2015-12-17T02:39:38.714Z]	<david-driscoll>	do exist today unless -pron- a method on a class
[2015-12-17T02:45:14.545Z]	<david-driscoll>	-pron- annoying that for sure but -pron- get -pron- soon enough
[2015-12-17T02:47:22.639Z]	<geyang>	typescript const fn fn
[2015-12-17T02:48:05.066Z]	<geyang>	typescript
[2015-12-17T02:55:42.457Z]	<david-driscoll>	apply be the same as call except that instead of multiple argument -pron- give -pron- an array of argument vs
--------------------------------------------------------------------------------------------------
[2015-12-17T03:21:06.153Z]	<geyang>	i see i see so if i want to make a list of function to be call and want -pron- to bind to an object that i should use bind
[2015-12-17T03:21:21.093Z]	<geyang>	thank
[2015-12-17T03:22:50.228Z]	<geyang>	somehow the follow be give -pron- an error typescript create by ge on export interface action tstate type string sync boolean async boolean export interface thunk void class store action if typeof action function if typeof undefined
--------------------------------------------------------------------------------------------------
[2015-12-17T03:24:58.326Z]	<geyang>	error error in default property apply do not exist on type action tstate thunk error in default property type do not exist on type action tstate thunk error in default property state do not exist on type action tstate thunk error in default property state do not exist on type action tstate thunk
[2015-12-17T03:38:45.414Z]	<geyang>	okay i change the union type to
[2015-12-17T03:38:58.078Z]	<geyang>	typescript action tstate thunk
[2015-12-17T03:39:00.492Z]	<geyang>	uhm not work still
--------------------------------------------------------------------------------------------------
[2015-12-17T03:54:53.198Z]	<babeal>	in -pron- dispatch method -pron- include action tstate but be tstate define -pron- generic by -pron- have give any way for -pron- to resolve to a type
[2015-12-17T03:56:06.106Z]	<babeal>	when i change tstate in -pron- function call to something concreete like string or number -pron- work just fine
[2015-12-17T03:58:29.192Z]	<geyang>	oh yeah
[2015-12-17T03:58:38.841Z]	<geyang>	tstate be actually define
[2015-12-17T03:58:49.836Z]	<geyang>	here be the whole function
[2015-12-17T03:58:53.442Z]	<geyang>	typescript create by ge on import behaviorsubject replaysubject subject subscriber from rxj import combinereducer from combinereducer import action thunk reducer hash from const export class store tstate public tstate public rootreducer reducer public action tstate reducer nomergereducer boolean false if nomergereducer typeof rootreducer function combinereducer else rootreducer var initaction action tstate type if initialstate initialstate be a stream for action object new be a stream for the state of the store new behaviorsubject action var currentstate tstate var state tstate action if typeof state undefined error error error complete if typeof initialstate undefined thunk action tstate if typeof action function return if typeof undefined destroy
[2015-12-17T04:00:06.340Z]	<babeal>	ahh ok -pron- define generic in the class and therefore should apply at that function as well ok good let -pron- test again
--------------------------------------------------------------------------------------------------
[2015-12-17T04:00:39.578Z]	<brosbunbo>	from interface car weight number gear number type string interface bicycle weight number gear boolean size string var transport error transport do not have type property so if the constituent type of a union type have no member in common there be nothing -pron- can do on the union type for example if x be of type -pron- can only access tostring and valueof member that be common across these three type
[2015-12-17T04:02:46.207Z]	<babeal>	that use the or operator -pron- swap -pron- to -pron- work on -pron- system
[2015-12-17T04:03:04.986Z]	<geyang>	typescript argument of type action tstate be not assignable to parameter of type thunk action tstate type action tstate be not assignable to type thunk
[2015-12-17T04:03:25.173Z]	<geyang>	the repository be actually here
[2015-12-17T04:03:35.660Z]	<geyang>
[2015-12-17T04:04:30.279Z]	<geyang>	this following error if i set to typescript argument of type action tstate be not assignable to parameter of type thunk action tstate type action tstate be not assignable to type thunk
[2015-12-17T04:05:14.318Z]	<geyang>	oh dear typescript
[2015-12-17T04:05:24.745Z]	<babeal>	ill give -pron- a try
[2015-12-17T04:05:30.809Z]	<geyang>	thank buddy
[2015-12-17T04:15:40.369Z]	<geyang>	sigh look at this
[2015-12-17T04:15:44.454Z]	<geyang>	typescript create by ge on import behaviorsubject replaysubject subject subscriber from rxj import combinereducer from combinereducer import action thunk reducer hash from const export class store tstate public tstate public rootreducer reducer public action tstate reducer nomergereducer boolean false if nomergereducer typeof rootreducer function combinereducer else rootreducer var initaction action tstate type if initialstate initialstate be a stream for action object new be a stream for the state of the store new behaviorsubject action var currentstate tstate var state tstate action if typeof state undefined error error error complete if typeof initialstate undefined action var action action tstate actionthunk thunk if typeof action function actionthunk action as thunk return else action action as action tstate if typeof undefined destroy
[2015-12-17T04:15:50.525Z]	<geyang>	-pron- be completely work now
[2015-12-17T04:15:58.007Z]	<babeal>	something a little weird with -pron- rx typing
[2015-12-17T04:16:11.130Z]	<geyang>	yeah right
[2015-12-17T04:16:11.403Z]	<babeal>	-pron- say -pron- use rx but be -pron- use rx
[2015-12-17T04:16:15.282Z]	<geyang>	oh
[2015-12-17T04:16:20.090Z]	<geyang>	-pron- actually use
[2015-12-17T04:16:26.779Z]	<geyang>	where do -pron- asy i be use
[2015-12-17T04:16:40.063Z]	<babeal>	ok -pron- may want to update that in the
[2015-12-17T04:17:02.482Z]	<babeal>	nevermind
[2015-12-17T04:17:14.683Z]	<babeal>	i click the wrong i have alot of folder up
[2015-12-17T04:17:19.329Z]	<babeal>	sorry about that
[2015-12-17T04:17:21.306Z]	<geyang>	kk gotcha
[2015-12-17T04:17:31.011Z]	<geyang>	so do -pron- see that work version above
[2015-12-17T04:17:57.037Z]	<geyang>	i get -pron- to work wiht bunch of type coersion but -pron- look very excessive driscoll
[2015-12-17T04:18:45.582Z]	<babeal>	yea that would work instead of blend the interface
[2015-12-17T04:20:32.779Z]	<babeal>	 <user> instanceof work here
[2015-12-17T04:23:44.335Z]	<babeal>	nevermind -pron- can since -pron- be interface and not class
--------------------------------------------------------------------------------------------------
[2015-12-17T04:32:22.237Z]	<geyang>	right
--------------------------------------------------------------------------------------------------
[2015-12-17T04:35:14.219Z]	<babeal>	a side question what the thunk method use for
[2015-12-17T04:35:34.170Z]	<geyang>	so be -pron- familiar with actioncreator
[2015-12-17T04:36:07.449Z]	<babeal>	yea in basic flux
[2015-12-17T04:36:41.389Z]	<geyang>	cool so here be the explaination
[2015-12-17T04:36:59.362Z]	<geyang>	what -pron- do be that -pron- try to allow the method take in both
[2015-12-17T04:37:19.744Z]	<geyang>	actioncreator async function as well as normal action object plain object
[2015-12-17T04:37:42.713Z]	<geyang>	 <user> i make the async function access the store object via the this keyword
[2015-12-17T04:37:58.466Z]	<geyang>	because i find the current signature in redux thunk kind of strange
[2015-12-17T04:38:43.122Z]	<geyang>	this be how redux thunk currently do -pron-
[2015-12-17T04:38:46.848Z]	<geyang>	typescript but what do -pron- do when -pron- need to start an asynchronous action such as an api call or a router transition meet thunks a thunk be a function that return a function this be a thunk function invert control return a function that accept dispatch so -pron- can dispatch later thunk middleware know how to turn thunk async action into action return function dispatch return sauce sauce error sandwich shop forperson error thunk middleware let -pron- dispatch thunk async action as if -pron- be action
[2015-12-17T04:38:56.554Z]	<geyang>	i want to turn this into
[2015-12-17T04:39:32.538Z]	<geyang>	typescript but what do -pron- do when -pron- need to start an asynchronous action such as an api call or a router transition meet thunks a thunk be a function that return a function this be a thunk function invert control return a function that accept dispatch so -pron- can dispatch later thunk middleware know how to turn thunk async action into action return function var store this return sauce sauce error sandwich shop forperson error thunk middleware let -pron- dispatch thunk async action as if -pron- be action
[2015-12-17T04:41:19.573Z]	<babeal>	interesting -pron- be get into redux now and i have get to the thunk yet
[2015-12-17T04:42:35.984Z]	<babeal>	so -pron- look like a new store would be create per state type do redux preach a single store state
[2015-12-17T04:42:45.273Z]	<geyang>	-pron- be right
[2015-12-17T04:43:05.665Z]	<geyang>	i think here -pron-  <user> create only a single store
[2015-12-17T04:43:50.254Z]	<babeal>	so tstate would be a single typed object for the app
[2015-12-17T04:44:44.567Z]	<geyang>	uhm i think i may need to change how the tstate be treat in the combinereducer function but
[2015-12-17T04:45:16.971Z]	<geyang>	for the main store i think the tstate would probably just be the typing of the root state
[2015-12-17T04:45:47.392Z]	<babeal>	ahh ok then the reducer handle the change to the sub state object
[2015-12-17T04:45:57.639Z]	<geyang>	reducer define for the sub store need to have the state type of the substore
[2015-12-17T04:46:04.695Z]	<geyang>	yeah
[2015-12-17T04:46:44.314Z]	<geyang>	here be the composition pattern
[2015-12-17T04:46:44.738Z]	<geyang>
[2015-12-17T04:47:07.361Z]	<geyang>	plus the next one composition with object
[2015-12-17T04:48:16.101Z]	<babeal>	ok awesome thank
[2015-12-17T04:48:32.724Z]	<geyang>
--------------------------------------------------------------------------------------------------
[2015-12-17T04:42:31.501Z]	<geyang>	cool egghead tutorial be very good
--------------------------------------------------------------------------------------------------
[2015-12-17T09:24:16.892Z]	<arianra>	question i get error try to return either a string or a boolean in index value
[2015-12-17T09:25:12.729Z]	<arianra>	oh nvm -pron- dumb
[2015-12-17T09:25:18.230Z]	<arianra>
--------------------------------------------------------------------------------------------------
[2015-12-17T14:33:47.534Z]	<LabEG>	let test new why this be not error
[2015-12-17T15:17:45.774Z]	<david-driscoll>	-pron- could  <user> be the typing -pron- pretty horrible at this point -pron- have to do a lot of manual casting -pron- work with the team but -pron- slow go because of the maintenance cost -pron- would add onto -pron-
[2015-12-17T17:13:59.141Z]	<geyang>	i see
[2015-12-17T17:14:12.018Z]	<geyang>	i think i just run into another case that quite strange
[2015-12-17T17:14:34.545Z]	<geyang>	here be something that -pron- super confused about
[2015-12-17T17:14:46.211Z]	<geyang>	typescript create by ge on export interface action tstate type string sync boolean async boolean export interface thunk tstate action tstate void export interface hash tsubstate key export interface reducer tstate action action tstate key let reducer reducer function state number action action tstate if inc return state else if dec return state else return state var rootreducer counter reducer var store new store state
[2015-12-17T17:15:11.223Z]	<geyang>	this be give -pron- the follow error message
[2015-12-17T17:15:48.593Z]	<geyang>	error argument of type counter reducer be not assignable to parameter of type reducer
[2015-12-17T17:16:06.177Z]	<geyang>	this point to the last line of the script
[2015-12-17T17:16:22.776Z]	<geyang>	i try to manually cast the rootreducer to the reducer type but to no prevail
[2015-12-17T17:40:23.615Z]	<david-driscoll>	store be expect the first constructor parameter to be a reducer type yet -pron- give -pron- an object that contain the reducer
[2015-12-17T17:44:27.354Z]	<geyang>	right but reducer type should be able to take in a hash reducer type
[2015-12-17T17:44:49.518Z]	<geyang>	this be actually one of the thing that -pron- be try to do
[2015-12-17T17:45:03.200Z]	<geyang>	be to make functional type able to take on index
[2015-12-17T17:45:16.411Z]	<geyang>	driscoll if -pron- look at the reducer interface
[2015-12-17T17:45:32.627Z]	<geyang>	a hash of reducer should be able to fit do -pron-
[2015-12-17T17:46:39.417Z]	<david-driscoll>	object declaration do immediately imply that -pron- have an indexer so -pron- have to add the type annotation for that var rootreducer key string reducer
[2015-12-17T17:47:17.666Z]	<geyang>	that give -pron- another error message
[2015-12-17T17:47:25.795Z]	<geyang>	say that this can not be cast into the reducer type
[2015-12-17T17:47:31.514Z]	<geyang>	i do
[2015-12-17T17:47:42.912Z]	<david-driscoll>	because the object do have tstate action action tstate which be  <user> on the reducer interface
[2015-12-17T17:47:47.394Z]	<geyang>	typescript var rootreducer reducer counter reducer
[2015-12-17T17:47:54.261Z]	<geyang>	i see i see
[2015-12-17T17:48:04.527Z]	<geyang>	be -pron- possible to make the functional part optional
--------------------------------------------------------------------------------------------------
[2015-12-17T17:49:03.212Z]	<geyang>	by the way i just get -pron- to work with this commit by separate out the reducer and the hash
--------------------------------------------------------------------------------------------------
[2015-12-17T17:54:59.011Z]	<david-driscoll>	tstate action action tstate or tstate action action tstate may make -pron- optional
--------------------------------------------------------------------------------------------------
[2015-12-17T23:05:29.224Z]	<josiahhaswell>	hi folk -pron- try to create a module definition for an external js library
[2015-12-17T23:06:17.784Z]	<josiahhaswell>	i want to be able to use -pron- as new
[2015-12-17T23:06:50.434Z]	<josiahhaswell>
[2015-12-17T23:07:39.901Z]	<josiahhaswell>	but -pron- not sure about the syntax i think -pron- may be export module a export interface b new b
[2015-12-17T23:07:44.377Z]	<josiahhaswell>	but that do seem to work
[2015-12-17T23:11:43.134Z]	<JKillian>	what library be -pron- -pron- try declare module a instead of the first line -pron- have there
[2015-12-17T23:12:07.189Z]	<JKillian>	assume -pron- import -pron- with something like import as a from a
[2015-12-17T23:12:11.018Z]	<josiahhaswell>	here what -pron- do exactly -pron-
[2015-12-17T23:13:06.076Z]	<josiahhaswell>	module vis export interface network new a any b any c any network declare module vis export vis
[2015-12-17T23:13:49.069Z]	<josiahhaswell>	and -pron- call -pron- as import as vis from vis
[2015-12-17T23:14:02.141Z]	<josiahhaswell>	and like when -pron- compile -pron- emit error
[2015-12-17T23:14:07.009Z]	<josiahhaswell>	but produce the expect result
[2015-12-17T23:14:32.745Z]	<josiahhaswell>	well actually -pron- do produce the expect result like that
[2015-12-17T23:14:48.155Z]	<josiahhaswell>	-pron- do when i put the network interface under declare module vis
--------------------------------------------------------------------------------------------------
[2015-12-17T23:47:51.256Z]	<pablodenadai>	hi guy -pron- wonder if i need to implement definitelytype in -pron- project so i can get more feature out of the ide -pron- work with library both write in ts and js like and lodash -pron- current setup be atom ide and ts version be definitelytype recommend by the ts team
[2015-12-17T23:49:05.050Z]	<josiahhaswell>	-pron- be use definitelytype and -pron- very useful
[2015-12-17T23:49:15.155Z]	<josiahhaswell>	not sure if -pron- officially recommend though
[2015-12-17T23:52:01.881Z]	<pablodenadai>	thanks -pron- be interested to know what other people think about -pron- too
[2015-12-18T00:17:58.284Z]	<JKillian>	tsd have -pron- quirk for example only one of these work tsd install somelib vs tsd install somelib and i never can remember which but -pron- pretty much a standard
[2015-12-18T00:18:57.558Z]	<JKillian>	there  <user> this one -pron- never try -pron- but -pron- look like -pron- may fix some of tsd problem
[2015-12-18T00:24:13.505Z]	<pablodenadai>	look promising thank
[2015-12-18T00:49:27.809Z]	<DanielRosenwasser>	need to go last
[2015-12-18T00:49:38.399Z]	<DanielRosenwasser>	i know this because i run into that last night smile
[2015-12-18T01:17:51.809Z]	<JKillian>	ha glad to know -pron- not just -pron-
[2015-12-18T10:18:46.644Z]	<thegaryroberts>	thank for that link to the github issue re modules discussion that actually the good documentation on module as the typescript handbook be hopelessly out of date so that be very useful
[2015-12-18T10:22:20.577Z]	<thegaryroberts>	i appreciate -pron- comment on the peril of re exporting when work with jspm -pron- be try to implement jspm across -pron- solution so would probably be good to avoid that pattern -pron- -pron- just unfortunate the only reasonable maintainable alternative for referencing seem to be batch more class into few file this be irksome come from a c background but i guess -pron- go to be easy not to fight the idiom of the language
[2015-12-18T10:24:31.802Z]	<jussimattila>	i totally agree come from mainly c world -pron- suffer the pain of have the class in different file and have to maintain a tonload of reference to different file
[2015-12-18T10:32:42.057Z]	<jussimattila>	i hope that eventually one can have root relative reference user or user instead of user or even user in some case
[2015-12-18T11:27:11.674Z]	<pimterry>	that tsd bug be actually fix on master now just wait for the next release
[2015-12-18T15:02:25.472Z]	<JKillian>	that great no more worrying about that one anymore
[2015-12-18T22:00:54.841Z]	<DanielRosenwasser>	awesome
--------------------------------------------------------------------------------------------------
[2015-12-18T22:15:05.166Z]	<jwpegler>	any plan for a typescript linq yeah i know that there be a few attempt at a javascript linq out there but would -pron- be great if microsoft include this into typescript -pron-
--------------------------------------------------------------------------------------------------
[2015-12-18T22:15:27.097Z]	<DanielRosenwasser>	like linq syntax
[2015-12-18T22:15:30.816Z]	<DanielRosenwasser>	or the library -pron-
[2015-12-18T22:15:31.230Z]	<jwpegler>	yes
[2015-12-18T22:15:47.509Z]	<DanielRosenwasser>	there have be a proposal yet
[2015-12-18T22:16:17.953Z]	<DanielRosenwasser>	and generally -pron- try not to create new expression level synax unless -pron- part of upcoming version of javascript
[2015-12-18T22:16:43.860Z]	<jwpegler>	let x from customer in customer where washington
[2015-12-18T22:17:32.362Z]	<DanielRosenwasser>
[2015-12-18T22:18:15.849Z]	<DanielRosenwasser>
[2015-12-18T22:19:13.638Z]	<DanielRosenwasser>	-pron- be go to be in but -pron- be drop a little over a year ago
[2015-12-18T22:21:24.987Z]	<falsandtru>	hi be this a spec
[2015-12-18T22:21:29.220Z]	<jwpegler>	i understand that -pron- want to be faithful to the propsed future of javascript but -pron- may be very interesting for ms to add some compelling feature to typescript that everyone would want to use linq would certainly be that -pron- may force the slowpoke work on ecmascript to think a little harder about the future just -pron- cent
[2015-12-18T22:23:48.528Z]	<DanielRosenwasser>	i get that perspective but if -pron- turn out that the committee do decide to adopt the feature but pick even a slightly different syntax that would put -pron- in an extremely bad position
[2015-12-18T22:24:37.335Z]	<DanielRosenwasser>	i be look at that i do see specifically in the typescript spec where signature merging occur for union type
[2015-12-18T22:24:41.376Z]	<jwpegler>	i understand but still
[2015-12-18T22:24:57.926Z]	<DanielRosenwasser>	i know new syntax be awesome
[2015-12-18T22:25:08.289Z]	<DanielRosenwasser>	i completely get -pron-
[2015-12-18T22:26:05.806Z]	<DanielRosenwasser>	but that why -pron- can proceed with thing like
--------------------------------------------------------------------------------------------------
[2015-12-18T22:17:09.693Z]	<DanielRosenwasser>	there be a proposal for array comprehension in ecmascript
--------------------------------------------------------------------------------------------------
[2015-12-18T22:27:54.503Z]	<jwpegler>	why do array comprehension get remove from js
[2015-12-18T22:29:17.631Z]	<DanielRosenwasser>	-pron- not entirely sure i be very familiar with what be go on in the process at the time
[2015-12-18T22:29:42.243Z]	<jwpegler>	thank for the info i appreciate -pron-
[2015-12-18T22:30:30.012Z]	<falsandtru>	i see thank -pron- very much
[2015-12-18T23:10:22.181Z]	<JKillian>	darn -pron- totally for but -pron- make sense to stay consistent with es
--------------------------------------------------------------------------------------------------
[2015-12-19T09:51:58.494Z]	<4tron>	anyone keen to work on an angular typescript material admin theme
[2015-12-19T09:52:51.171Z]	<4tron>	i know i plug here but whatever
[2015-12-19T09:52:51.980Z]	<4tron>
[2015-12-19T10:01:57.691Z]	<vivainio>	iirc not much add value over fat arrow map filter
[2015-12-20T09:58:03.337Z]	<DanielRosenwasser>	yeah that would be what some may call the smart thing to do
[2015-12-20T09:58:12.463Z]	<DanielRosenwasser>	-pron- late i need to sleep
[2015-12-20T10:05:27.738Z]	<LPGhatguy>	be there any sort of smart matching capability in exclude property
[2015-12-20T10:06:28.888Z]	<DanielRosenwasser>	not sure what -pron- specifically mean but be probably what -pron- want
[2015-12-20T10:06:33.665Z]	<DanielRosenwasser>	nighty night
[2015-12-20T10:06:49.849Z]	<LPGhatguy>	i keep app module inside but allow all of wreck -pron- editor performance
[2015-12-20T10:07:14.395Z]	<DanielRosenwasser>	yeah globs would probably fix that
[2015-12-20T10:07:24.143Z]	<DanielRosenwasser>	-pron- instead just glob out the folder -pron- do want to include
[2015-12-20T10:10:20.413Z]	<LPGhatguy>	i guess -pron- deal with the excessive squigglie for a couple version more
--------------------------------------------------------------------------------------------------
[2015-12-19T14:13:36.905Z]	<304NotModified>	can someone help -pron- with
[2015-12-19T14:14:34.645Z]	<304NotModified>
[2015-12-20T09:57:27.865Z]	<304NotModified>	or just use some
[2015-12-20T09:57:34.519Z]	<304NotModified>
[2015-12-20T09:58:32.135Z]	<DanielRosenwasser>	answer be the right one
[2015-12-20T10:02:34.004Z]	<304NotModified>	well good night
--------------------------------------------------------------------------------------------------
[2015-12-19T22:25:22.046Z]	<geyang>	be anyone online atm
[2015-12-20T06:03:02.532Z]	<geyang>	hey guy i have the follow code
[2015-12-20T06:03:05.453Z]	<geyang>	very simple
[2015-12-20T06:03:25.975Z]	<geyang>	the compiler do not allow -pron- to add some to the property
[2015-12-20T06:03:37.664Z]	<geyang>	typescript interface hash t key string t class newclass public hash any constructor haha show var instance new newclass
[2015-12-20T08:04:44.242Z]	<geyang>	problem solve with set the to type any
[2015-12-20T09:50:45.766Z]	<DanielRosenwasser>	-pron- could  <user> use an intersection type like so ts public hash any some string
[2015-12-20T09:50:55.405Z]	<DanielRosenwasser>	but why do -pron- want to do that exactly
--------------------------------------------------------------------------------------------------
[2015-12-20T17:45:25.701Z]	<ArgTang>	hello -pron- be try to set up webpack with typescript i get this error when run throug webpack
[2015-12-20T17:46:08.878Z]	<ArgTang>	version webpack time asset size chunk chunk name kb emit app kb emit app byte build error byte build fail error in module parse fail unexpected token -pron- may need an appropriate loader to handle this file type export function string return hello name
[2015-12-20T17:48:17.008Z]	<ArgTang>	any suggestion i be follow tutorial from here
[2015-12-20T20:20:22.404Z]	<fxbrain>	have -pron- make sure to include a typescript loader ts loader in -pron- webpack config
[2015-12-20T20:21:59.576Z]	<fxbrain>	-pron- webpack config include configuration module loader test loader ts loader
[2015-12-20T21:06:43.123Z]	<ArgTang>	yes like so test exclude loader ts loader
[2015-12-21T17:03:32.524Z]	<Lexicality>	i have no idea why -pron- change be the difference between -pron- work or not as far as -pron- aware in module mode ts do like -pron- to rely on global without import -pron- in some way per file but i could be wrong may i ask why -pron- output commonjs code in a systemjs environment
--------------------------------------------------------------------------------------------------
[2015-12-21T04:23:30.481Z]	<johnfn>	-pron- be wonder over the last few day if there any way to when -pron- override a method to force to be call
[2015-12-21T23:35:12.935Z]	<johnfn>	ah yeah that a cool idea
--------------------------------------------------------------------------------------------------
[2015-12-21T10:24:48.140Z]	<rosendi>	hi guy generally -pron- relate to this issue currently i achieve the same result this way export interface recordconstructor t extend recordattr new arg any t export interface recordattr -pron- would string export class record implement recordattr -pron- would string export function recordfactory t extend recordattr recordconstructor t return recordconstructor test interface itemattr this be pure interface without record logic name string interface itemrecordattr extend recordattr itemattr -pron- implement just for a factory class itemrecord extend recordfactory itemrecordattr -pron- be free of property redeclaration uppername work the issue be that any extended recordattr itemrecordattr in -pron- example interface have always an empty body how can i reduce -pron- something like goal error base return constructor type typescript be not a class or interface class extend recordfactory itemrecordattr recordattr uppername do work
[2015-12-21T11:07:38.447Z]	<rlegrand>	hi all just a little question not sure -pron- be a bug but do find anything about this i be use in -pron- file which cause the error can not find name system only when -pron- tsconfig be like that compileroption module commonjs target experimentaldecorator true emitdecoratormetadata true preserveconstenum true noimplicitany true sourcemap true file trainingapp src components app no problem when -pron- ts file use sourceroot instead compileroption module commonjs target experimentaldecorator true emitdecoratormetadata true preserveconstenum true noimplicitany true sourcemap true sourceroot trainingapp exclude typing any idea to resolve this problem
--------------------------------------------------------------------------------------------------
[2015-12-21T11:27:54.821Z]	<Lexicality>	do -pron- import -pron- via normal method first
[2015-12-21T11:29:03.164Z]	<Lexicality>	import system from systemjs or import system
--------------------------------------------------------------------------------------------------
[2015-12-21T11:59:26.094Z]	<heruan>	hi all -pron- write a plugin and -pron- like to bundle all definition in a declare module -pron- plugin definition file can i generate -pron- with the typescript compiler
--------------------------------------------------------------------------------------------------
[2015-12-21T12:19:29.858Z]	<percepticus>	hi guy i rote in the general room of the chat about -pron- but i suppose here be another good place to ask fro second opinion what -pron- think about use of typescript in large project base on loopback mongodb microservice elasticserach be -pron- good choice for the back end side of the project do -pron- have any pro and con please give -pron- -pron- point of view for this kind of approach typescript as language for the back end side
[2015-12-21T13:08:51.863Z]	<rlegrand>	no i do import -pron- in fact i wonder where -pron- definition come from in the case where -pron- work maybe be -pron- automatically available because of the module commonjs option and in such a case -pron- should  <user> work with -pron- first tsconfig the only difference to make -pron- work or fail be the
[2015-12-21T21:14:11.109Z]	<DanielRosenwasser>	-pron- could probably use a decorator
--------------------------------------------------------------------------------------------------
[2015-12-22T06:17:14.468Z]	<SridharPasham>	hi everyone i be try to learn typescript could anyone point out any simple mvc project use typescript no spa project plz i do not know -pron- yet smile
[2015-12-22T06:18:14.869Z]	<4tron>	good place to learn would be the playground
[2015-12-22T06:18:58.401Z]	<4tron>	or
[2015-12-22T06:24:27.966Z]	<SridharPasham>	i have try that currently i be learn that way i want to see how -pron- can be use in real application i be not a javascript guy in -pron- current project when i need client side logic i be use jquery i be think how to use typescript i like this because -pron- be similar to c in such case the interest here be to know how experienced people organize -pron- typescript code with mvc and how -pron- use etc thank
[2015-12-22T06:24:32.957Z]	<DanielRosenwasser>	todomvc have sample in typescript -pron-
[2015-12-22T06:25:09.146Z]	<DanielRosenwasser>
[2015-12-22T06:25:28.968Z]	<DanielRosenwasser>	i do know what the documentation code quality be like on -pron- but that a strarting point
[2015-12-22T06:26:24.980Z]	<4tron>	-pron- say no spa stuff right be -pron- think more along the line of how can i migrate -pron- current jquery base codebase to typescript
[2015-12-22T06:26:30.565Z]	<DanielRosenwasser>	 <user> angular have documentation use typescript
[2015-12-22T06:26:56.674Z]	<DanielRosenwasser>	oh sorry i do catch the spa part
[2015-12-22T06:27:29.469Z]	<SridharPasham>	look like -pron- be use other javascript framework i do not know any of -pron-
[2015-12-22T06:27:56.118Z]	<4tron>	still useful i think learn spa -pron- could very easily adpate -pron- knowledge base to a static site
[2015-12-22T06:29:09.145Z]	<4tron>	i think -pron- should find a good ebook and walk through that -pron- may get the big picture -pron- look for
[2015-12-22T06:31:08.913Z]	<DanielRosenwasser>	have a pretty good book if -pron- need more material
[2015-12-22T06:31:51.405Z]	<DanielRosenwasser>	if -pron- simply go to write new code that work with the old jquery code then -pron- do -pron- incrementally every time -pron- need to use a function declare -pron-
[2015-12-22T06:32:32.073Z]	<DanielRosenwasser>	if -pron- port -pron- entire project over -pron- start by rename file to and use the appropriate file from definitelytype
[2015-12-22T06:32:52.406Z]	<DanielRosenwasser>
[2015-12-22T06:33:12.890Z]	<SridharPasham>	to give some simple idea let say -pron- mvc project use some client side validation for this currently i be use jquery but when i see the final code -pron- look like not organize properly everywhere function and variable typescript provide organize code like c way that be where i be interested in use typescirpt as a starting point
[2015-12-22T06:33:59.499Z]	<SridharPasham>	thank for share the book link i  <user> go through -pron-
--------------------------------------------------------------------------------------------------
[2015-12-22T08:36:58.739Z]	<johnfn>	be bang -pron- head against a wall for hour over this any help appreciate
[2015-12-22T08:38:11.064Z]	<johnfn>	in general -pron- seem to be very difficult to get that wrapping decorator to be just how i want -pron- need to copy over static property manually and somehow get the name of the function to be correct so if anyone have any example guideline on how to do that -pron- would be super appreciate
[2015-12-22T16:15:42.915Z]	<Lexicality>
[2015-12-22T16:15:46.502Z]	<Lexicality>
[2015-12-22T16:17:49.423Z]	<Lexicality>	-pron- could use module system and something along the line of in -pron- config or use jspm to handle the npm modules for -pron-
[2015-12-22T16:21:32.638Z]	<Lexicality>	as a recent convert to the church of jspm -pron- totally suggest that path but up to -pron-
[2015-12-22T16:22:03.915Z]	<Lexicality>	i really would suggest mix both
--------------------------------------------------------------------------------------------------
[2015-12-22T10:27:52.460Z]	<borriej>	hi all
[2015-12-22T10:28:04.325Z]	<borriej>	-pron- be use typescript on -pron- angular project
[2015-12-22T10:28:30.084Z]	<borriej>	-pron- get a question about cancel a promise in angular
[2015-12-22T10:31:28.194Z]	<borriej>	httpservice service controller
[2015-12-22T10:31:46.300Z]	<borriej>	how do i abort the promise from the controller
--------------------------------------------------------------------------------------------------
[2015-12-22T13:16:20.180Z]	<forforeach>	hello all
[2015-12-22T13:21:41.191Z]	<forforeach>	i have a question how can i compile -pron- typescript module as name modules -pron- like to use -pron- in a next way import something from app prefix module
[2015-12-22T13:23:33.327Z]	<forforeach>	the code of the module should be compile as prefix module var cdspath setting return setter execute function some code here
[2015-12-22T13:23:53.796Z]	<forforeach>
[2015-12-22T13:24:17.786Z]	<forforeach>	what i have now be var cdspath setting return setter execute function some code here
[2015-12-22T13:25:00.512Z]	<forforeach>	and i should export -pron- with a full path like import something from path to -pron- module
[2015-12-22T13:25:18.239Z]	<rlegrand>	ok thank for -pron- help i  <user> maybe try to open an issue for that then -pron- use systemjs because -pron- be use on and i specify commonjs on -pron- tsconfig in order to let typescript retrieve definition from not so much experience about all these concept for now still learn but -pron- be work fine until i try to use system directly and again i do know from where the system typescript definition come from but -pron- be find with the first tsconfig i paste even for -pron- gui plugin
--------------------------------------------------------------------------------------------------
[2015-12-22T16:24:02.499Z]	<rdelima>	hello folk tslint relate question here be there a way to enforce the presence of return type on the call signature
[2015-12-22T16:49:20.985Z]	<david-driscoll>	noimplicitany  <user> force -pron- to do that
--------------------------------------------------------------------------------------------------
[2015-12-22T17:01:00.718Z]	<tejacques>	be there a way to do something like this class c someclassmethod function mymixin arg t return class extend superclass error base constructor return type be not a class or interface type somemixinmethod var m var minstance new m error property someclassmethod do not exist on type mymixin c
[2015-12-22T17:05:47.843Z]	<tejacques>	basically try to see if i can get typescript to play nice with this
[2015-12-22T17:10:16.135Z]	<tejacques>	this work but sort of defeat the point since -pron- not a generic mixin function typeof c return class extend superclass somemixinmethod
[2015-12-22T17:11:03.151Z]	<tejacques>	could find a way to pass in a generic class constructor in this manner
[2015-12-22T18:34:21.677Z]	<tejacques>	if anyone be curious here what the work code come out to interface constructor t new args t interface base class c someclassmethod function mymixin constructor t class mixin extend superclass as constructor base somemixinmethod return mixin as constructor t mixin var m var minstance new m
[2015-12-22T18:43:15.059Z]	<tejacques>	class someclass extend error be not a constructor function type
--------------------------------------------------------------------------------------------------
[2015-12-22T17:41:01.602Z]	<rosendi>	maybe this comment  <user> be helpful
[2015-12-22T18:33:55.619Z]	<tejacques>	that be extremely helpful thank -pron-
[2015-12-22T18:41:42.873Z]	<tejacques>	do seem to work when try to extend -pron- though
[2015-12-22T19:49:20.190Z]	<tejacques>	i think the real issue be that there be no generic class type only typeof classinstance would be happy to be show that not true though
[2015-12-22T20:09:13.655Z]	<rosendi>	can -pron- provide a more specific example
[2015-12-22T20:30:39.075Z]	<rosendi>	-pron- ok
[2015-12-22T20:32:33.573Z]	<rosendi>	get -pron- well
[2015-12-22T20:35:18.542Z]	<rosendi>	yep i know this issue give -pron- a sec -pron- work on the example
[2015-12-22T20:58:10.706Z]	<rosendi>	yup the bind operator solve many issue
--------------------------------------------------------------------------------------------------
[2015-12-22T19:58:44.551Z]	<vivainio>	that would kill static analysis if -pron- work
[2015-12-22T20:00:45.290Z]	<tejacques>	not necessarily
[2015-12-22T20:07:00.610Z]	<vivainio>	if -pron- have to run code to deduce the class structure that would not go well
[2015-12-22T20:30:00.934Z]	<tejacques>	sorry be out
[2015-12-22T20:31:03.016Z]	<tejacques>	-pron- ideally want -pron- to work something like this class somebaseclass string someclassmethod function workingmixin t extend typeof t return class extend superclass somemixinmethod var myinstance new class extend
[2015-12-22T20:31:46.066Z]	<tejacques>	add a bit more
[2015-12-22T20:33:12.360Z]	<tejacques>	as -pron- be right now -pron- can not actually provide a generic class as an argument
[2015-12-22T20:33:55.708Z]	<tejacques>	ahejlsberg workaround work for create constructor but not actual class
[2015-12-22T20:34:09.905Z]	<tejacques>	so -pron- can use -pron- workaround as a class that other class can extend for example
--------------------------------------------------------------------------------------------------
[2015-12-22T20:40:51.081Z]	<tejacques>	-pron-  <user> not like tear up about this or anything i just think that this style afford a very nice way of get trait in a sensible way extension method would  <user> work pretty well here but typescript do have a good solution to that yet i think bind operator specify the this type on function can solve that if that operator get accept
[2015-12-22T20:41:04.875Z]	<tejacques>	so just try to experiment
--------------------------------------------------------------------------------------------------
[2015-12-22T20:45:25.426Z]	<tejacques>	this be  <user> pretty close function t extend typeof t error t be not a constructor function type return class extend superclass somemixinmethod
--------------------------------------------------------------------------------------------------
[2015-12-22T21:01:45.138Z]	<tejacques>	i actually think that last one i post should probably just work
[2015-12-22T21:01:56.935Z]	<tejacques>	if -pron- compile which -pron- do
[2015-12-22T21:02:51.598Z]	<tejacques>	i could just be totally wrong about what t extend typeof somebaseclass mean
[2015-12-22T21:03:02.666Z]	<tejacques>	but typescript believe that mean -pron- be an anonymous class
[2015-12-22T21:03:27.359Z]	<tejacques>	but do allow use -pron- as a constructor function type
[2015-12-22T21:03:40.332Z]	<tejacques>	the result output js works correctly however
[2015-12-22T21:03:55.084Z]	<tejacques>	so i think if -pron- recognize -pron- -pron- would work
[2015-12-22T21:06:43.930Z]	<rosendi>	-pron- emit js code because the noemitonerror be false by default
[2015-12-22T21:06:49.836Z]	<tejacques>	yeah i know
[2015-12-22T21:07:37.700Z]	<tejacques>	i only mention that to clarify that the output js -pron- come up with actually do the right thing
[2015-12-22T21:09:07.626Z]	<tejacques>	though i guess that not really surprising
--------------------------------------------------------------------------------------------------
[2015-12-22T21:46:30.797Z]	<johnfn>	i think this be what -pron- want typedef true call signature
--------------------------------------------------------------------------------------------------
[2015-12-22T21:50:05.271Z]	<vivainio>	could  <user> remove the pressure from have to plan for extension mehtod
[2015-12-22T21:59:00.522Z]	<tejacques>	yes and no the issue with the pipeline operator be that in order to work nicely as an extension method -pron- either need to write extension as method which return a function that take the type -pron- extend or -pron- need to use lambda if there be multiple argument es function bind operator function use this return result es pipeline operator style function return use self return result something or es pipeline operator style function arg use self return result something extensionmethod arg neither of those be as elegant to -pron- as the function bind operator
--------------------------------------------------------------------------------------------------
[2015-12-22T22:47:00.079Z]	<brandonramsey>	hello everyone -pron- new to typescript try to get up and run with good practice and tslint but wonder if the compiler can somehow force this too what -pron- look for be either a tslint setting or a compiler setting that would force type on everything except if -pron- a primitive or -pron- type can be directly and fully infer from somewhere in -pron- code for example export class myclass public myfunction myfunction function string return i want to force member like to have a type but since myfunction be already fully type -pron- would be nice if -pron- could infer that -pron- not really necessary instead of force -pron- to make an interface for the function type and use that in the member declaration do this make sense be i think about -pron- all wrong
[2015-12-22T22:48:39.631Z]	<DanielRosenwasser>	yes i think -pron- have a rule for that in the compiler -pron-
[2015-12-22T22:49:00.656Z]	<DanielRosenwasser>	wait one sec
[2015-12-22T22:50:00.545Z]	<DanielRosenwasser>	yup
[2015-12-22T22:50:01.726Z]	<DanielRosenwasser>
[2015-12-22T22:50:06.893Z]	<DanielRosenwasser>	that be merge into tslint
[2015-12-22T22:50:14.720Z]	<DanielRosenwasser>	the rule name be no inferrable type
[2015-12-22T22:50:32.844Z]	<DanielRosenwasser>	oh wait
[2015-12-22T22:50:42.262Z]	<DanielRosenwasser>	sorry that the opposite of what -pron- want
[2015-12-22T22:50:58.531Z]	<DanielRosenwasser>	use the compiler flag help -pron- here though
[2015-12-22T22:51:21.468Z]	<DanielRosenwasser>	let -pron- know how that work out
[2015-12-22T22:52:38.932Z]	<brandonramsey>	excellent thank a lot for the reply
[2015-12-22T22:59:07.642Z]	<brandonramsey>	be perfect thank -pron-
[2015-12-24T21:02:51.578Z]	<DanielRosenwasser>	but -pron- can make -pron- effectively read only at runtime with a getter
[2015-12-24T21:03:14.770Z]	<DanielRosenwasser>	ts class c get myreadonlyprop return
--------------------------------------------------------------------------------------------------
[2015-12-22T23:04:02.789Z]	<DanielRosenwasser>	-pron- very welcome
[2015-12-23T03:46:42.406Z]	<johnfn>
[2015-12-23T03:47:21.113Z]	<johnfn>
--------------------------------------------------------------------------------------------------
[2015-12-23T15:23:08.058Z]	<shivinsky>	hi there
[2015-12-23T15:26:14.225Z]	<shivinsky>	interface dummy a number why comma be allow b number let dummy dummy a b
[2015-12-23T15:32:22.392Z]	<shivinsky>	class dummy a number but not allow here b number
[2015-12-23T15:33:21.589Z]	<shivinsky>	seem like a bug for -pron-
[2015-12-23T16:12:44.529Z]	<tejacques>	that as per the spec for typescript inferface and class
[2015-12-24T21:02:43.591Z]	<DanielRosenwasser>	-pron- can encode -pron- in the type system with typescript right now
--------------------------------------------------------------------------------------------------
[2015-12-23T18:54:19.463Z]	<DanielRosenwasser>	originally -pron- be only the case that interface object type member could be delimit with a semicolon
--------------------------------------------------------------------------------------------------
[2015-12-24T14:14:14.830Z]	<LabEG>	typescript do not suppoorte const property of class
[2015-12-24T18:11:15.847Z]	<vivainio>	do anything babel support those
[2015-12-25T07:10:15.282Z]	<LabEG>	i do so but constant be easy
--------------------------------------------------------------------------------------------------
[2015-12-25T13:21:06.020Z]	<Kylia669>	hey
[2015-12-25T13:21:15.028Z]	<Kylia669>	can anyone explain -pron- what be wrong
[2015-12-25T13:21:28.195Z]	<Kylia669>	try to compile file into single one
[2015-12-25T13:22:01.639Z]	<Kylia669>	compileroption target module system moduleresolution node sourcemap true emitdecoratormetadata true experimentaldecorator true removecomment false noimplicitany false outfile public js file bin js bin js app
[2015-12-25T13:22:18.662Z]	<Kylia669>	public js always empty
[2015-12-25T13:22:38.097Z]	<Kylia669>	run as tsc
[2015-12-25T13:22:59.705Z]	<ivogabe>	which version of typescript be -pron- use
[2015-12-25T13:23:14.733Z]	<Kylia669>	version
[2015-12-25T13:23:23.318Z]	<ivogabe>	-pron- should work with if -pron- not mistake
[2015-12-25T13:23:49.001Z]	<Kylia669>	thnx try
[2015-12-25T13:29:33.705Z]	<Kylia669>	cool -pron- work
[2015-12-25T20:04:01.085Z]	<rosendi>
--------------------------------------------------------------------------------------------------
[2015-12-25T20:10:44.889Z]	<rosendi>	how do -pron- think -pron- good idea to introduce some swift unwrapping feature or the elvis operator -pron- just an idea without a design and strict proposal check pyramid of doom for more info function get eventtype string eventdata stre if return eventtype event eventdata datum else return null if let a get where value let b somefunc where b value transpile to var a get if a value if b b value etc
--------------------------------------------------------------------------------------------------
[2015-12-26T02:14:56.822Z]	<DeusProx>	hey hello -pron- try to split -pron- project into different tsconfig and try to bundle the code with target module system with tsc and -pron- be work properly but i hat success with ntsc be the system bundle in yet
[2015-12-26T02:18:01.809Z]	<DeusProx>	lol okay just see someone post a similiar question just a few hour ago smile
[2015-12-26T02:23:37.389Z]	<DeusProx>	npm install -pron-
[2015-12-26T13:10:23.032Z]	<4tron>	lost typing in visual studio but why can not find name angular
--------------------------------------------------------------------------------------------------
[2015-12-26T11:00:43.728Z]	<peterps-health>	try to import -pron- first js library into typescript
[2015-12-26T11:01:08.334Z]	<peterps-health>	so far i have do follow npm install js cookie
[2015-12-26T11:01:14.977Z]	<peterps-health>	tsd install js cookie
[2015-12-26T11:01:41.450Z]	<peterps-health>	now in -pron- project -pron- try to reference -pron- with import
[2015-12-26T11:01:51.767Z]	<peterps-health>	which do not work which step have i miss
--------------------------------------------------------------------------------------------------
[2015-12-26T18:35:41.258Z]	<glen-84>	this page show a default target of and this page show a default target of be this intentional when a tsconfig file be use the default change or be this a bug
[2015-12-26T20:28:09.242Z]	<roganov>	hey guy where can i find doc on module in typescript first thing that pop up be but -pron- seem obsolete specifically -pron- interested in module
[2015-12-26T22:13:33.709Z]	<felixfbecker>	-pron- can use module syntax in ts ts be try to be a superset of
[2015-12-26T22:15:35.599Z]	<felixfbecker>	-pron- suck that -pron- can not target when use node just because default parameter be still miss in node -pron- have class and arrow function but just because of the damn default parameter i have to target and get a weird debugging experience because this reference be wrong etc
[2015-12-27T12:32:34.641Z]	<thegaryroberts>	there some good info on module hide away here
[2015-12-27T16:26:07.954Z]	<DanielRosenwasser>	in the option  <user> be able to take any json file
[2015-12-27T16:35:21.733Z]	<DeusProx>	i already get to use but i want to understand if there be or  <user> be a way to support multiple tsconfig per project if i always need an external build tool to compile everything i could just write -pron- own compile config with something like gradle no need for tsconfig at all
[2015-12-27T16:37:21.426Z]	<DeusProx>
[2015-12-27T16:40:41.948Z]	<DanielRosenwasser>	right point to any json file that would be an acceptable
--------------------------------------------------------------------------------------------------
[2015-12-27T01:02:48.117Z]	<LPGhatguy>	have anyone use the mongoose typing with typescript correctly
[2015-12-27T01:03:34.860Z]	<LPGhatguy>	use say i need to use new with -pron- which be correct and the result do have a construct signature but -pron- do
--------------------------------------------------------------------------------------------------
[2015-12-27T10:02:20.238Z]	<ghost~5539edbc15522ed4b3df7357>	hi all i be wonder if i have a server offer a rest api how to i ensure the incoming json be of a certain type i have to strategy in mind but -pron- unsure about which one so i think -pron- ask here first export interface serializable t any t import jsondeserializeerror from import serializable from export class contexttype implement serializable contexttype throw new jsondeserializeerror return this ctype string public description stre ctype description not sure if this be actually an option because -pron- look to -pron- like compile time check not runtime check use interface like describe on the ts website
[2015-12-27T10:04:35.023Z]	<ghost~5539edbc15522ed4b3df7357>	with the first option -pron- force to make a constructor that have all parameter as optional one that be not pretty because logically -pron- contexttype have a require part the ctype but then maybe -pron- not even correct to have this be a class since -pron- just hold datum no state logic so that s why i think option be well but then that s not runtime check but just compile time right
[2015-12-27T10:33:45.884Z]	<roganov>	thanks i think -pron- get -pron- yet another question how do typescript find definition file -pron- instal tsd then invoke tsd install react and typescript just work as nice as -pron- be -pron- like to understand why -pron- work docs say that i need to include a line like reference which i do do yet typescript still find the definition
[2015-12-27T16:26:31.311Z]	<DanielRosenwasser>	-pron- can try -pron- out with npm install
[2015-12-27T16:41:18.434Z]	<DanielRosenwasser>	so -pron- could have a etc
[2015-12-27T16:41:41.448Z]	<DanielRosenwasser>	and when -pron- want to compile those -pron- just write tsc
--------------------------------------------------------------------------------------------------
[2015-12-27T12:50:54.581Z]	<ryansmith94>	hey can anyone help with
--------------------------------------------------------------------------------------------------
[2015-12-27T13:57:28.204Z]	<louy>	do anyone know why typescript add a suffix to all default import variable name like import test from test become var instead of var test
--------------------------------------------------------------------------------------------------
[2015-12-27T14:54:04.557Z]	<DeusProx>	hey be there a way to have several for different part of a project i have a webapp a nodejs server and a share part which be utilize by the server and the webapp
--------------------------------------------------------------------------------------------------
[2015-12-27T16:45:55.823Z]	<DeusProx>	that do seem to be a very viable for a development workflow worried
[2015-12-27T16:46:07.946Z]	<DanielRosenwasser>	why not
[2015-12-27T16:46:55.369Z]	<DanielRosenwasser>	-pron- question be whether there be a way to have multiple
[2015-12-27T16:47:02.981Z]	<DanielRosenwasser>	this be a way to do that
[2015-12-27T16:47:24.438Z]	<DanielRosenwasser>	the only difference be -pron- add a compiler flag
[2015-12-27T16:48:12.087Z]	<DanielRosenwasser>	another approach would be to place -pron- in separate folder
[2015-12-27T16:52:46.759Z]	<DeusProx>	still on the whole -pron- one project for -pron- gui atom i need a tsconfig at the root of the project to utilize the atom typestrong package then i need an external build tool to automate the transpiling think the creator of typescript have tought of a way to solve this one tsconfig find tsconfig in subdir and transpile -pron-
[2015-12-27T16:53:17.437Z]	<DeusProx>	or and inherancing type definition from the parent config
[2015-12-27T16:55:32.795Z]	<DanielRosenwasser>	yeah that a shortcoming -pron- end up need to make one central that encompass all -pron- mini
[2015-12-27T16:58:56.367Z]	<DeusProx>	hope -pron- plan something like that in the future
[2015-12-27T17:09:55.747Z]	<DeusProx>	this sound like the solution
--------------------------------------------------------------------------------------------------
[2015-12-27T17:00:39.727Z]	<dehlak>	-pron- can see the roadmap here
--------------------------------------------------------------------------------------------------
[2015-12-27T18:27:03.541Z]	<diimdeep>	hello learn about typescript and look at this project -pron- pipe compile ts to babel why do this
[2015-12-27T18:54:43.419Z]	<DeusProx>	-pron- transpile ts to most browser do support atm so -pron- utilize babel for this task
[2015-12-27T18:55:43.670Z]	<diimdeep>	think
[2015-12-27T18:55:49.550Z]	<diimdeep>	thank
[2015-12-27T19:01:18.985Z]	<diimdeep>	why -pron- be go to trough babel not directly from ts compiler
[2015-12-27T19:01:43.488Z]	<DeusProx>	probably only -pron- know smile
[2015-12-27T19:02:06.792Z]	<diimdeep>	maybe -pron- can drop some guess
[2015-12-27T19:02:10.254Z]	<diimdeep>
[2015-12-27T19:03:41.495Z]	<DeusProx>	hmm maybe -pron- want to use the builtin map set or other feature which be introduce with if -pron- target directly -pron- need to use shim for example
[2015-12-27T19:08:24.210Z]	<diimdeep>	 <user> not translate such type
[2015-12-27T19:26:53.611Z]	<diimdeep>	thank that be really helpfull
--------------------------------------------------------------------------------------------------
[2015-12-27T19:13:34.286Z]	<DeusProx>	i think -pron- have two different definition file for transpile ts to and ts to so when targette the definition for map and set be there
[2015-12-27T19:13:59.509Z]	<vivainio>	babel support async await for ts do do -pron- yet
--------------------------------------------------------------------------------------------------
[2015-12-27T19:30:07.685Z]	<jamespacileo>	hi can i map an object to a class like in python new
[2015-12-27T19:31:31.876Z]	<jamespacileo>	i have json object store and would like to map -pron- into class rather than have to go via argn argn
[2015-12-27T20:00:01.519Z]	<DeusProx>	i think i just read somewhere that -pron- can use the constructor in the function do test -pron- though
[2015-12-27T20:25:00.567Z]	<jamespacileo>	thanks -pron- check -pron- out someone else suggest type cast too but i guess -pron- be lose any class method
[2015-12-28T08:58:19.755Z]	<felixfbecker>	-pron- can use
[2015-12-28T10:55:50.132Z]	<vivainio>	pass the pojo to ctor and use pojo
[2015-12-28T15:18:38.097Z]	<jamespacileo>	thank guy
[2015-12-28T15:48:42.734Z]	<dotdotcommadot>	here an example
[2015-12-28T19:57:38.422Z]	<LPGhatguy>	there be a lot of solution that exist for runtime type validation one big issue be what to do on a validation error should the method throw fail harder return a value -pron- nigh impossible to be unopinionated while still be useful
[2015-12-29T07:39:10.494Z]	<corneliutusnea>	same compilation use systemjs work but i can use systemjs as -pron- use these in node
[2015-12-29T19:23:48.387Z]	<ryansmith94>	i have a similar issue i think
[2015-12-29T19:30:05.880Z]	<ryansmith94>	i have import as react from react which be give -pron- the error can not find module react in however react be instal in -pron- target and module compiler option be set to the error be give by the typescript sublime text package and gulp typescript with typescript instal globally via npm
[2015-12-29T20:21:06.140Z]	<ravi-mone>	guy i be very new to type script
[2015-12-29T20:21:27.557Z]	<ravi-mone>	can -pron- please suggest -pron- some good tutorial for typescript
[2015-12-29T20:52:34.458Z]	<ryansmith94>
--------------------------------------------------------------------------------------------------
[2015-12-28T05:46:59.955Z]	<nawaf-alhossani>	hi
--------------------------------------------------------------------------------------------------
[2015-12-28T15:37:27.827Z]	<colinshen>	to compile ts file into another folder with -pron- own folder like ts a to js a
[2015-12-28T15:46:54.049Z]	<dotdotcommadot>	have a look the outdir property
[2015-12-28T15:47:14.744Z]	<colinshen>	-pron- be use
[2015-12-28T15:48:40.970Z]	<colinshen>	-pron- do work
--------------------------------------------------------------------------------------------------
[2015-12-28T18:00:21.718Z]	<jcimoch>	hi lastly i have finish quite big project in angular that be -pron- first attempt to typescript at all and i must say that -pron- satisfied use -pron- however i have encounter problem connect with runtime type checking -pron- ofcourse aware that typescript be all about static type check but i be wonder what if -pron- have some option to check type at runtime for example -pron- problem be connect with response from rest service that i be directly assign to model in angular which be the same every time for different reason i be wonder what if -pron- have tool that could scan typescript interface and allow nice and easy runtime type check -pron- idea be to create tool that can be inject for example in gulp task before actual tsc compilation this tool would output some datum represent all type from interface and nice api that allow to check type in runtime base on that data something like checkruntime interfacename callback or even better as decorator for class or method return some object be -pron- good idea or maybe there be well solution already
[2015-12-28T19:15:18.555Z]	<vivainio>	i vaguely recall have some pattern for client server type check
[2015-12-28T20:40:14.422Z]	<jcimoch>	solution that i know be not aware about typescript type interface but -pron- ok cause there be for general js purpose but when -pron- be write ts code -pron- spend time to declare type -pron- would be great to have runtime check for free
[2015-12-29T07:38:29.328Z]	<corneliutusnea>	guy i try to compile some file use commonjs and i get error can not find module path the issue be discuss here but i do understand the resolution
--------------------------------------------------------------------------------------------------
[2015-12-28T20:37:18.474Z]	<jcimoch>	yep i know thera be solution in general but -pron- wonder if there be solution specyfic for typescript solution that augment interface rather than require to redefine type against -pron- want to check during runtime
--------------------------------------------------------------------------------------------------
[2015-12-29T21:15:28.009Z]	<LPGhatguy>	-pron- need typing instal to get type information and node and react do come with any
--------------------------------------------------------------------------------------------------
[2015-12-29T21:15:57.438Z]	<ryansmith94>	i have typing instal for node
[2015-12-29T21:16:03.734Z]	<ryansmith94>	see the repo
[2015-12-29T21:17:13.248Z]	<LPGhatguy>	i can say -pron- have any good luck with the sublime typescript plugin grab the correct file automatically but -pron- take a look
[2015-12-29T21:20:49.799Z]	<ryansmith94>	-pron- not just the plugin -pron- the compiler
[2015-12-29T21:21:04.786Z]	<ryansmith94>	i believe
[2015-12-29T21:21:35.175Z]	<LPGhatguy>	neither the compiler or the plugin like unidentified property and -pron- get nofallthroughcasesinswitch set in -pron-
[2015-12-29T21:22:03.884Z]	<LPGhatguy>	and the st plugin  <user> give up on -pron- wholesale if anything extra be in there and the tsc  <user> throw and report that error
[2015-12-29T21:22:21.823Z]	<ryansmith94>	remove that but -pron- do make a difference
[2015-12-29T21:22:28.683Z]	<LPGhatguy>	do -pron- restart -pron- editor afterwards
[2015-12-29T21:22:59.337Z]	<ryansmith94>	the editor be the problem -pron- the compiler that produce the error
[2015-12-29T21:23:11.571Z]	<ryansmith94>	src error can not find module react
[2015-12-29T21:23:18.111Z]	<ryansmith94>	that from the compiler
[2015-12-29T21:23:28.144Z]	<ryansmith94>
[2015-12-29T21:28:20.455Z]	<LPGhatguy>	-pron- be include -pron- typescript typing file in -pron- gulp inputs
--------------------------------------------------------------------------------------------------
[2015-12-29T21:26:23.144Z]	<LPGhatguy>	-pron- get successful emit outside of duplicate identifier error from ts core file
[2015-12-29T21:26:55.572Z]	<LPGhatguy>	right i see that error with gulp
[2015-12-29T21:28:55.582Z]	<LPGhatguy>	mean -pron- should source from instead of just for that to work out at least
[2015-12-29T21:29:43.028Z]	<ryansmith94>	i think that be require any more
[2015-12-29T21:30:31.540Z]	<LPGhatguy>	only if -pron- use instead of
[2015-12-29T21:30:38.641Z]	<ryansmith94>	that do remove -pron- error so thank
[2015-12-29T21:34:39.772Z]	<ryansmith94>	not sure what -pron- mean by use instead of
[2015-12-29T21:34:55.794Z]	<ryansmith94>	that still require -pron- to use the reference
[2015-12-29T21:39:03.982Z]	<ryansmith94>
[2015-12-29T21:48:41.323Z]	<LPGhatguy>	the idea be that use should pull the same reference that -pron- editor plugin or tsc compiler would use eg all file not sure if -pron- actually work in practice without a file field
[2015-12-29T21:49:50.417Z]	<ryansmith94>	check out -pron- late commit to that repo
[2015-12-29T21:50:07.472Z]	<ryansmith94>	that now work with tsc and gulp however i still need the reference
[2015-12-29T21:55:58.536Z]	<ryansmith94>	i do understand why i think the triple slash reference be no longer necessary
[2015-12-29T21:58:14.458Z]	<ivogabe>	use the tsconfig file all file in -pron- directory be automatically include so -pron- do have to reference the definition file manually
[2015-12-29T21:59:21.857Z]	<ivogabe>	-pron- can  <user> do that with if -pron- add all source there and not only one subdirectory
[2015-12-29T22:12:51.479Z]	<ryansmith94>
[2015-12-29T22:14:09.556Z]	<ryansmith94>	for the record -pron- error in sublime text go away after reinstall the plugin and restart sublime text
[2015-12-29T22:14:18.308Z]	<ryansmith94>	not sure why gulp no longer work though
--------------------------------------------------------------------------------------------------
[2015-12-29T22:12:39.862Z]	<ryansmith94>	ok i remove -pron- manual definition like -pron- say and remove typing directory from -pron- exclude in tsconfig run tsc still work but run gulp do not
--------------------------------------------------------------------------------------------------
[2015-12-29T22:17:45.206Z]	<ivogabe>	what error do -pron- get when -pron- run gulp
[2015-12-29T22:20:59.749Z]	<ryansmith94>	src error can not find module react
[2015-12-29T22:21:18.749Z]	<ryansmith94>
[2015-12-29T22:25:22.327Z]	<ryansmith94>	-pron- think -pron- do have the typing maybe
[2015-12-29T22:29:12.814Z]	<ryansmith94>	ha yes
[2015-12-29T22:29:14.608Z]	<ryansmith94>	fix
[2015-12-29T22:29:44.798Z]	<ryansmith94>	change to
[2015-12-29T22:31:18.790Z]	<ryansmith94>	guy thank -pron- so much d
[2015-12-29T22:32:18.336Z]	<ryansmith94>	this have be bother -pron- since box  <user>
--------------------------------------------------------------------------------------------------
[2015-12-30T03:15:38.928Z]	<corneliutusnea>	-pron- problem be not with external typing -pron- all seem to load correctly -pron- problem be that -pron- own two class do find each other when compile as commonjs but -pron- find each other and compile when use systemjs
--------------------------------------------------------------------------------------------------
[2015-12-30T13:36:23.892Z]	<chrisber>	this be a ts language service question to build an static analyzer for class property and decorator be -pron- possible with the typescript language service to get an object from an node for instance consider the follow pseudo code let input export class car color string yellow door number let sourcefile let carnode let car icar carnode how to do this or do i need to walk to all the syntax kind to reconstruct the class -pron-
--------------------------------------------------------------------------------------------------
[2015-12-31T04:07:28.365Z]	<ericmartinezr>	hey guy be there any option so ts can warn -pron- about possible circular reference a import b b import a boooom there be two user have this issue see how do i inject a parent component into a child component and exception unexpected directive value undefine on the view of component in i be -pron- a victim of -pron- a time ago check microsoft can the compiler throw some warning would -pron- be possible if -pron- be already do i have to add something in the config file can this be a big issue to be file and ask as feature
--------------------------------------------------------------------------------------------------
[2015-12-31T09:05:56.365Z]	<4tron>	visual studio code have remove all -pron- typescript file but why open the solution in visual studio and all the file be there
--------------------------------------------------------------------------------------------------
[2015-12-31T11:28:41.669Z]	<deleonio>	add folder
--------------------------------------------------------------------------------------------------
[2015-12-31T18:18:59.439Z]	<chrisber>	be -pron- possible to instantiate a class from a generic type i have this pseudo example public getclassdecorator string array t c new t find this example but -pron- do not work let decorator new c return decorator call let b icomponent
--------------------------------------------------------------------------------------------------
[2015-12-31T19:30:12.398Z]	<johnfn>	i do think so since type be erase
[2015-12-31T19:30:29.249Z]	<johnfn>	the good i find be to pass the type as an argument rather than a type parameter
[2016-01-01T16:40:15.446Z]	<vivainio>	like sec slow
[2016-01-01T16:40:30.748Z]	<vivainio>	try
[2016-01-01T17:17:59.713Z]	<vivainio>	be -pron- on by any chance
[2016-01-01T17:22:21.324Z]	<vivainio>	btw annoying observation on and system -pron- do recognize file as module even if i do import from elsewhere in the project i have to export something otherwise -pron- end up in toplevel
[2016-01-01T17:23:10.228Z]	<vivainio>	be this worth file a bug for currently run through project add dummy export everywhere
[2016-01-01T20:28:47.631Z]	<vivainio>	be -pron- sure -pron- want to put the string version
--------------------------------------------------------------------------------------------------
[2015-12-31T20:37:41.933Z]	<theosherry>	be there a way to import module relative to the root path of a project -pron- use and node for the moduleresolution in -pron-
[2015-12-31T20:38:49.948Z]	<vivainio>	-pron- have be claim import abspath to module work but -pron- have only be work of the time for -pron-
[2015-12-31T20:39:20.676Z]	<vivainio>	this with tsify commonjs node as moduleresolution
[2015-12-31T20:39:42.273Z]	<vivainio>	-pron- may want to try moduleresolution classic as well
[2015-12-31T21:16:15.234Z]	<theosherry>	thank -pron- try that out
[2016-01-01T16:38:59.586Z]	<vivainio>	be -pron- expect that option be very slow to trigger from change in window
[2016-01-01T17:06:28.888Z]	<felixfbecker>	-pron- be almost instant for -pron- maybe second -pron- on window
[2016-01-01T17:41:39.572Z]	<vivainio>	worth -pron- or not i file the bug
--------------------------------------------------------------------------------------------------
[2016-01-01T19:18:23.064Z]	<jjarrell50>	hi all -pron- new to typescript -pron- think this be an import type error -pron- pouchdb like couchdb -pron- about as simple as -pron- get test var mydb new var myobj -pron- would null world var objasstring response handle response to db response err this be the error -pron- get typeerror can not use in operator to search for -pron- would in world at clipsalive pouchdb dist at clipsalive pouchdb dist at clipsalive pouchdb dist at clipsalive pouchdb dist at clipsalive pouchdb dist at clipsalive bundles at new clipsalive bundle at clipsalive pouchdb dist at clipsalive pouchdb dist at clipsalive pouchdb dist
[2016-01-01T20:27:45.036Z]	<vivainio>	that not type error -pron- a runtime call stack
[2016-01-01T20:59:11.571Z]	<jjarrell50>	yeah i figure -pron- out -pron- should be an object not a json string thx
--------------------------------------------------------------------------------------------------
[2016-01-02T21:17:40.463Z]	<MicahZoltu>	i be get this all over -pron- can not compile module unless the flag be provide in vs code for some reason do anyone here use vs code and know what may be cause this i have a in in the root of -pron- loaded folder but -pron- do seem to be use
[2016-01-02T21:36:05.696Z]	<MicahZoltu>	apparently there be a problem with -pron- and typescript do tell -pron- about -pron-
[2016-01-03T05:12:09.422Z]	<DanielRosenwasser>	i can get some idea why but could -pron- tell -pron- why -pron- feel so
[2016-01-03T05:16:40.713Z]	<DanielRosenwasser>	actually know why but -pron- would be weird to address this one case but not the general issue of be able to describe read only property in general
[2016-01-04T03:09:28.239Z]	<LPGhatguy>	operator can not be apply to type websocket and websocket
[2016-01-04T03:09:40.757Z]	<LPGhatguy>	be there any way to disambiguate type with the same name
[2016-01-04T03:10:19.541Z]	<LPGhatguy>	in this case one of -pron- be from node ws and the other be from typescript browser typing
[2016-01-04T17:45:11.905Z]	<LPGhatguy>	do -pron- not already
[2016-01-04T17:47:18.943Z]	<vivainio>	be for dynamic import right
[2016-01-04T21:54:33.979Z]	<kitsonk>	how come -pron- can not use booleans in overload interface like -pron- can with string for example this work typescript interface foo foo string string void but -pron- can typescript interface bar true string boolean void interface baz number number void
--------------------------------------------------------------------------------------------------
[2016-01-02T22:53:01.216Z]	<joelday>	hi all -pron- a relatively minor thing but -pron- have just languish for waaaay too long have be conflate with i even prototype what the vast majority of bug that get dupe to this be actually ask for
[2016-01-02T22:58:46.784Z]	<joelday>	and just for perspective typescript be at around issue now
[2016-01-04T18:21:47.247Z]	<joelday>	i think the distinction be that the wide discussion cover the issue of deep immutability this be really more about make interface more expressive in a way that be compatible with the implicit interface of object class -pron-  <user> unique in that -pron- be an active guarantee run time failure compile time failure for guarantee run time failure be a big chunk of the practical purpose of the language deep immutability on the other hand be something that introduce a lot of complexity despite have dubious usefulness deep immutability be something on the ecmascript roadmap explicit const be guarantee know implicit const already exist
--------------------------------------------------------------------------------------------------
[2016-01-04T04:58:16.259Z]	<DanielRosenwasser>	sound like a variant of
--------------------------------------------------------------------------------------------------
[2016-01-04T05:14:14.862Z]	<DanielRosenwasser>	-pron- open up
--------------------------------------------------------------------------------------------------
[2016-01-04T08:44:36.673Z]	<LPGhatguy>	thank
--------------------------------------------------------------------------------------------------
[2016-01-04T13:36:50.989Z]	<jbrantly>	be there a ticket open already or other discussion status on typescript support syntax natively
--------------------------------------------------------------------------------------------------
[2016-01-04T18:07:58.124Z]	<JKillian>	with some other tool i be use awhile ago back on window be very slow with a regular command prompt but be a lot faster with a command prompt run with admin right of course -pron- want to be careful with that but perhaps worth a shot
[2016-01-04T18:08:50.547Z]	<JKillian>	i think the tool be rail relate though anyway just something to try out
[2016-01-04T18:17:25.291Z]	<jbrantly>	yes that correct
[2016-01-04T18:23:32.549Z]	<joelday>	if the generally suggest syntax in all of the similar bug that be dupe to can be just get knock down authoritatively with some kind of explanation then -pron- happy to drop -pron- and of course so should everybody else
[2016-01-04T18:26:50.762Z]	<joelday>	another argument be that -pron- do break anything that be already break and even if -pron- can be a compiler option that be enable
--------------------------------------------------------------------------------------------------
[2016-01-04T20:07:58.847Z]	<JKillian>	in this code wonder why a type be foo because the initial value be a bar should a  <user> be a bar t class foo class bar extend foo const fooarray foo const foo b return a bar
--------------------------------------------------------------------------------------------------
[2016-01-04T20:38:38.112Z]	<nuba>	hi folk -pron- be search for dependency injection tooling for -pron- unit test find and any other pointer i use internal module in the browser so -pron- class live at and etc and right now i have plenty of situation like new be call inside constructor and thing like that
[2016-01-04T20:39:19.209Z]	<nuba>	how do -pron- usually do would -pron- place -pron- mock spy on
[2016-01-04T20:40:09.365Z]	<nuba>	or do move these thing as dependency to the constructor argument be really the only way to go
--------------------------------------------------------------------------------------------------
[2016-01-04T21:58:38.934Z]	<am11>	hello guy be typescript host source available on github
[2016-01-04T22:05:19.316Z]	<JKillian>	-pron- because there a special string literal type but not a boolean literal type or a number literal type see however there be a little bit of discussion on microsoft typescript in that thread
[2016-01-05T02:45:27.780Z]	<DanielRosenwasser>	and -pron- definitely something -pron- consider
[2016-01-05T02:47:27.889Z]	<DanielRosenwasser>	in fact with adt concept -pron- hope to get in with stre literal type that would go a long way with boolean literal
[2016-01-05T02:47:35.810Z]	<DanielRosenwasser>	that way people could model generator more easily
[2016-01-05T04:33:07.820Z]	<JKillian>	check out the declare keyword
[2016-01-05T04:35:14.945Z]	<JKillian>	something like this -pron- may want to use a type other than any
[2016-01-05T07:22:18.099Z]	<kitsonk>	i do think the function overload have anything to do with the string literal type as support for the above example be currently in ts and string literal do come until ts and -pron- have be around for a long microsoft typescript src lib
[2016-01-05T10:56:41.697Z]	<kitsonk>	sorry gitter hold back the follow up message for some reason smile
[2016-01-05T15:44:09.614Z]	<DanielRosenwasser>	yeah i be on the team when that decision be make but
[2016-01-05T15:44:35.170Z]	<DanielRosenwasser>	i assume the motivate factor be addeventlistener with -pron- overload
[2016-01-05T15:44:36.264Z]	<DanielRosenwasser>	i may be exaggerate
--------------------------------------------------------------------------------------------------
[2016-01-05T04:31:33.896Z]	<bherila>	how do i tell typescript about something global that already exist in this case a variable raven declare in a scope outside of the file
[2016-01-05T04:32:02.932Z]	<bherila>	if i do var raven -pron-  <user> emit a new var declaration which i do want
[2016-01-05T05:05:05.010Z]	<bherila>	perfect thank
--------------------------------------------------------------------------------------------------
[2016-01-05T15:45:14.526Z]	<jjarrell50>	sorry if this be an obvious question -pron- a noob with typescript -pron- work with pouchdb like couchdb i get the part i be interested in be that be how do i get the object doc into -pron- strongly type object -pron- not sure cast ala duck typing be ok any result be var logentry logentry logentry result be ugh var new logentry
[2016-01-05T15:45:45.665Z]	<DanielRosenwasser>	i have see enthusiasm over non string literal type so i could see that come one release after
[2016-01-05T15:51:35.924Z]	<JKillian>	good point i forget -pron- always be able to do that the language microsoft typescript blob master doc literal type talk about -pron- a little and of course now -pron- expand in
[2016-01-05T16:08:12.307Z]	<jjarrell50>	-pron- come from a c world -pron- define a class and new -pron- up then -pron- get intellisense typscript kinda provide that define a class get intellisense in some editor the thing that be new to -pron- i do an http request -pron- raw json or of type object -pron- want to get -pron- into the right type for use downstream although this be not strictly require by javascript via duck typing maybe -pron- read to much into -pron- maybe -pron- just as simple as cast -pron- to the right type in c -pron- can cast -pron- unless there be some related contract in javascript anything appear to go
[2016-01-05T16:20:18.654Z]	<kitsonk>	in javascript anything appear to go yup that be why -pron- have typescript duck typing be the good way to deal with an anything go language without add load of run time overhead just try to remember typescript be try to put some structure on an anything go language
--------------------------------------------------------------------------------------------------
[2016-01-05T15:47:29.266Z]	<DanielRosenwasser>	how do i get the object doc into -pron- strongly type object most people here be not or at least i be not familiar with this do -pron- have any documentation on this feature
--------------------------------------------------------------------------------------------------
[2016-01-05T16:17:44.335Z]	<Nefarion>	javascript  <user> scream at -pron- at runtime
[2016-01-05T16:17:50.963Z]	<Nefarion>	c do at compile time
--------------------------------------------------------------------------------------------------
[2016-01-05T16:20:19.523Z]	<KenavR>	if the doc attribute match -pron- class attribute -pron- could just use -pron- constructor with destructuring something like new
[2016-01-05T16:21:36.276Z]	<KenavR>	 <user> what say typescript typing be no real type -pron- mostly for convenience more stable app
[2016-01-05T16:22:21.025Z]	<jcimoch>	if -pron- be come from a c world and do have actual experience with pure javascript i encourage -pron- to try to learn basic of js before go to typescript what i mean by that be typescript be great abstraction layer but without understandig philosphy of js world at some point -pron- may scream at typescript that -pron- work as expect learn pure js -pron-  <user> better understand what go under the hood and that oop be strong aspect of js but functional be
[2016-01-05T16:22:24.456Z]	<kitsonk>	one way -pron- can deal with something remote that -pron- be sure of the structure be use custom type guard that  <user> let the design time code path follow the run time code path assume -pron- write -pron- type guard properly
[2016-01-05T17:04:41.266Z]	<kitsonk>	sometimes -pron- have to dual cast to get rid of the warning something any foo or there be the more brute for foo as something which basically say i really know what i be do thank -pron- sir
[2016-01-05T17:10:12.203Z]	<jjarrell50>	there ya go foo as something that what -pron- talk about
--------------------------------------------------------------------------------------------------
[2016-01-05T16:49:34.529Z]	<jjarrell50>	i appreciate the sentiment about pure javascript first i do have an understanding how typscript do approach type and oop as a c orient developer would expect for -pron- in -pron- context -pron- on the bleed edge with and -pron- be remarkably productive there typscript be the path of least resistence as all of the example and doc use typscript what a type guard point -pron- to a reference and -pron- go
[2016-01-05T17:02:19.316Z]	<jjarrell50>	ok -pron- get what a type guard be and that helpful when i do know the structure in -pron- case i do know the structure -pron- just not aware of the good way to coerce -pron- to be a typescript type if i just cast -pron- -pron- work but the typescript compiler give -pron- a warning i could copy -pron- to a new object but that tedious this would seem to be a common use case what do -pron- folk do
[2016-01-05T17:10:19.107Z]	<jjarrell50>	thxs
[2016-01-05T17:49:47.225Z]	<JKillian>	if -pron- use find reference in something like vscode or sublime on the a symbol in the import declaration -pron- do find -pron- usage below same for b
[2016-01-05T17:50:34.245Z]	<JKillian>	reference from foo bar let range for let range of range false false something like this seem to fail
[2016-01-05T17:52:12.774Z]	<JKillian>	yes that another issue -pron- have
--------------------------------------------------------------------------------------------------
[2016-01-05T16:52:05.219Z]	<DanielRosenwasser>	check out
[2016-01-05T16:56:35.144Z]	<JKillian>	or anyone else do -pron- have any idea why ts do find the reference for a and b in the code below -pron- be happy to try to fix this in ts but -pron- not sure what the good place to start import as a from mylib export a import b from foo const bar b -pron- cause bug in tslint unfortunately
[2016-01-05T17:48:55.486Z]	<DanielRosenwasser>	what exactly do -pron- mean
[2016-01-05T17:51:19.952Z]	<DanielRosenwasser>	hmm
[2016-01-05T17:51:23.211Z]	<DanielRosenwasser>	i wonder if that relate to
--------------------------------------------------------------------------------------------------
[2016-01-05T18:05:44.939Z]	<JKillian>	interestingly while find reference renaming do work correctly for a and b goto definition do seem to work
[2016-01-05T18:08:59.964Z]	<JKillian>	getdefinitionatposition in have a special case for when which then use i do think anything like that happen in the code path for finding reference
--------------------------------------------------------------------------------------------------
[2016-01-05T18:35:52.151Z]	<japhar81>	hey guy how do one stub a correctly import koa var app any koa throw an error on the second statement can not invoke an expression whose type lack a call signature not sure what i can put into -pron- to fix that i try export default but that do work
[2016-01-05T18:44:50.588Z]	<JKillian>	oh -pron- wrong getreferencesinnode handle shorthand property assignment when find reference and -pron- work correctly in most case just not with import
[2016-01-05T18:47:08.519Z]	<JKillian>	somebody have a pr for typing for koa definitelytype definitelytype -pron- could probably use those
[2016-01-05T19:30:02.414Z]	<japhar81>	oh look at that ok well that s a few hour save
[2016-01-05T19:30:04.528Z]	<japhar81>	thank -pron- sir
[2016-01-05T20:08:54.924Z]	<JKillian>	i think one problem may be with this code in ts if the symbol be an alias add what -pron- alaise to the list if the problem be that -pron- only get the aliase symbol if an import specifier be use but not for a default import like in -pron- example above if i change -pron- to this -pron- fix some of the issue but break a different test ts if the symbol be an alias add what -pron- alaise to the list if
[2016-01-06T03:57:31.137Z]	<erfangc>	kind of random question apologize if this be not the place to post -pron- but under what circumstance be a require not emit ts import highchart release the output do not contain a require line for highchart release but if i delete a line that declare the module from the file the require come back in the output file but then typescript complaint there be no such module name highchart release
[2016-01-06T15:39:23.031Z]	<JKillian>	the compiler  <user> remove the import if -pron- never use any value from -pron- so somewhere in that file -pron- have to use where somethingorother be not a type interface
[2016-01-06T15:40:31.287Z]	<JKillian>	-pron- not sure that quite answer what -pron- describe though
[2016-01-06T19:43:00.615Z]	<josiahhaswell>	hi folk quick question on structural typing say i have class foo string name string path array string but i want to initialize -pron- use some approximation of javascript initialization let a foo name whatever be there a way to invoke a constructor there or do i need to just have a function accept the javascript and return the foo
[2016-01-06T19:48:09.039Z]	<felixfbecker>	-pron- can use ts let a foo name whatever
[2016-01-06T19:49:10.327Z]	<josiahhaswell>	that invoke with the name or just cast the type
[2016-01-06T19:51:00.584Z]	<felixfbecker>	when -pron- create the object with new -pron-  <user> call the contructor and return a new foo instance -pron- then assign all the property from the argument on -pron- and return -pron- much like the c object initialization i think -pron- be look for
[2016-01-06T19:57:23.604Z]	<felixfbecker>	oh i miss that and why can not -pron- just pass the name as an argument to the constructor ts let a new
[2016-01-06T19:59:16.009Z]	<felixfbecker>	 <user> imo if path be a result of split name then path should either be a getter or name should have a setter that set path
[2016-01-06T19:59:53.204Z]	<felixfbecker>	another option be of course to accept an object literal as constructor argument
[2016-01-06T20:07:36.816Z]	<felixfbecker>	typescript embrace duck type so that would be confuse imo in javascript a class be just a function and if -pron- never actually call that function anywhere with new then there be no reason imo why -pron- should be invoke
--------------------------------------------------------------------------------------------------
[2016-01-05T21:52:04.021Z]	<LPGhatguy>	have the change and addition to polymorphic this type signature be document anywhere yet track this but i see a user mention somewhere that this type signature be in
[2016-01-05T21:52:30.008Z]	<LPGhatguy>	 <user> be there any way i can help with triage organization of issue the core project have almost open issue
--------------------------------------------------------------------------------------------------
[2016-01-06T16:12:25.659Z]	<ianks>	i be have trouble create a generic decorator function if someone smarter than -pron- can help -pron- learn this language i would be forever grateful here be -pron- writeup
[2016-01-06T19:53:25.226Z]	<felixfbecker>	should be define in as something like this ts assign t propertiestoassign key any any t
--------------------------------------------------------------------------------------------------
[2016-01-06T16:20:20.830Z]	<SetTrend>	i do seem to be able to reference a transpiled typescript library that i have create help on this be very much appreciate here the full description
[2016-01-06T18:01:03.899Z]	<seanzer>	do -pron- mean to use reference to
[2016-01-06T19:49:43.183Z]	<JKillian>	yeah be -pron- sure that work seem  <user> to -pron-
[2016-01-06T19:56:06.439Z]	<JKillian>	right but then the part  <user> never happen but if -pron- define a setter for name then -pron- may work as  <user> use getter and setter
--------------------------------------------------------------------------------------------------
[2016-01-06T20:06:13.563Z]	<josiahhaswell>	ok have setter work for -pron- as i expect -pron- would be a nice feature if let a foo call an implicit since the right hand side be structurally of the type foo but the left hand side be nominally of the type scala like constructor be a nice way to incorporate object literal with structural typing
[2016-01-06T20:06:17.231Z]	<josiahhaswell>	thank
[2016-01-06T20:10:34.820Z]	<josiahhaswell>	since object literal be such a heavily use idiom in js i do think user would mind a bit of implicit behavior to more completely integrate -pron- at least i would -pron- a very nice short hand but i agree that there a bit of a mismatch since object literal be singleton in js that would be implicitly convert into an instance in typescript
--------------------------------------------------------------------------------------------------
[2016-01-06T20:13:11.629Z]	<JKillian>	i wish js have name parameter and then -pron- could just do something like new myobj as -pron- be -pron- can make -pron- constructor just take an object as mention above and have an alternative implementation that take the argument individually but -pron- must have at least two argument since override must have a different number of parameter
[2016-01-06T20:13:40.860Z]	<josiahhaswell>	-pron- be ok with that too
[2016-01-06T20:14:44.508Z]	<JKillian>	overload not override and i may be wrong on how overload work -pron- have to look -pron- up real quick haha
[2016-01-06T20:19:04.165Z]	<josiahhaswell>	yeah typescript be sort of hamstrung by the fact that javascript be a very dynamic language that do support multiple dispatch any workaround would probably result in generate code that have few obvious relationship to the typescript source via thunk etc and probably be a lot slow and big
[2016-01-06T20:25:24.493Z]	<JKillian>	just for reference i be way off with overload -pron- basically just declare as many function signature as -pron- want and then one implementation that handle -pron- all i would imagine use union type and optional parameter would be just as effective in current ts
--------------------------------------------------------------------------------------------------
[2016-01-06T20:37:21.353Z]	<SetTrend>	yes -pron- be right i misspell the code in the issue i now correct the typo stackoverflow
[2016-01-06T20:38:46.092Z]	<seanzer>	perhaps -pron- just a copy paste mistake but i believe -pron- need to have reference to note the
[2016-01-06T20:41:54.500Z]	<SetTrend>	oh yes that another typo i make the code in atom vscode be acually alright i just do copy paste to stackoverflow but type -pron- in manually
[2016-01-06T20:46:57.875Z]	<meenie>	interface iuser result number entity user object add boolean loading boolean and then use like import immutable from seamless immutable const initialstate immutable iuser result entity user add false loading false
[2016-01-06T21:31:20.623Z]	<josiahhaswell>	do -pron- mean interface inheritance like interface iuser extend immutable user
[2016-01-06T22:05:52.385Z]	<JKillian>	if i have file which all be the same namespace such as namespace xyz be there a way to use the umd to get a nice cross module system compatible module
[2016-01-06T22:08:41.279Z]	<JKillian>	yeah -pron- current build system concat -pron- all gulp and then i guess i can use a gulp umd wrapper plugin potentially anyways haha
[2016-01-06T22:18:36.736Z]	<josiahhaswell>	-pron- try to use an import as follow import httpclientconfig from aurelia auth which be how -pron- must be use and -pron- have trouble create the typescript definition file -pron- attempt that compile correctly but fail at runtime be declare namespace aureliaauthhttpconfig export interface httpclientconfig configure void declare var httpclientconfig any declare module aurelia auth export aureliaauthhttpconfig
[2016-01-06T22:19:28.926Z]	<josiahhaswell>	if i remove the declare var httpclientconfig the typescript complain that name httpclientconfig be not find
[2016-01-06T22:21:15.797Z]	<josiahhaswell>	sorry i lie that fail at compile time and succeed at runtime if i import -pron- use import httpclientconfig then -pron- succeed at compile time and fail at runtime
[2016-01-06T22:23:57.000Z]	<JKillian>	which version of aurelia auth be -pron- use -pron- look like on the repo there an amd cjs etc version
[2016-01-07T20:50:11.341Z]	<DanielRosenwasser>	module do really support that concept -pron- have default export which get -pron- almost the same thing but -pron- do support that
[2016-01-07T20:51:08.040Z]	<DanielRosenwasser>	so instead -pron- have to use the old style import syntax for that
--------------------------------------------------------------------------------------------------
[2016-01-06T20:45:23.594Z]	<meenie>	quick question for anyone here regard interface and generic -pron- try to write some quick typing for a library that do have any -pron- have one global variable immutable which -pron- pass in an object and -pron- freeze -pron- add some method to -pron- then return -pron-
[2016-01-06T20:45:36.630Z]	<meenie>	what i have so far be this interface iimutable t string value any iimutable t string value any iimutable t object iimutable t declare module seamless immutable export default function immutable object array any iimutable t
[2016-01-06T20:46:20.282Z]	<meenie>	the object that get return have the set setin merge method on -pron- but -pron- do have -pron- own property from -pron- interface i pass in
[2016-01-06T20:47:50.648Z]	<meenie>	when i use -pron- like vb code give -pron- an error say result do exist so -pron- wonder how i can add the interface property in iuser into iimutable
[2016-01-06T21:32:23.833Z]	<meenie>	oh right could go the other way
[2016-01-06T21:52:29.846Z]	<josiahhaswell>	be there a way to have a default export from a module
[2016-01-07T20:48:25.027Z]	<DanielRosenwasser>	people sometimes write module like this
[2016-01-07T20:49:52.597Z]	<DanielRosenwasser>	people do that before default export be a thing
--------------------------------------------------------------------------------------------------
[2016-01-06T22:08:13.616Z]	<josiahhaswell>	which build system be -pron- use gulp and grunt both can concat file
[2016-01-06T22:14:57.342Z]	<JKillian>	what issue be -pron- encounter with a default export in a module declaration
[2016-01-06T22:20:10.918Z]	<josiahhaswell>	the module really only export httpclientconfig but -pron- not sure what the syntax should be
[2016-01-06T22:55:19.481Z]	<josiahhaswell>	that seem to at least mostly work -pron- encounter a problem but -pron- may be unrelated -pron- export a class
--------------------------------------------------------------------------------------------------
[2016-01-06T22:33:32.675Z]	<JKillian>	declare module aurelia auth export default class public configure void import httpclientconfig from aurelia auth the above may work do the module export an object or a class constructor function
--------------------------------------------------------------------------------------------------
[2016-01-06T22:56:50.196Z]	<JKillian>	the difference in different style of import export can be confusing for sure -pron- find this comment helpful in the past though
[2016-01-06T22:57:37.388Z]	<josiahhaswell>	awesome thank this be super helpful
[2016-01-06T23:11:40.012Z]	<josiahhaswell>	yep that do indeed work problem be unrelated
[2016-01-06T23:42:43.920Z]	<JKillian>	glad -pron- help
[2016-01-07T16:10:45.309Z]	<JKillian>	that because when -pron- do this ts any -pron- essentially do this ts if -pron- want to do -pron- in one line -pron- could do something like this ts any
--------------------------------------------------------------------------------------------------
[2016-01-07T09:23:28.116Z]	<arianra>	quick question i have the following angular reference to the document jqlite obj any even typecast -pron- as any -pron- still give -pron- the warning property documentelement do not exist on type htmlelement
[2016-01-07T09:27:56.890Z]	<arianra>	if i split -pron- up the error go away though const document any
[2016-01-07T13:24:30.809Z]	<kitsonk>	ok ideally i want to have an enum in a module which i would want consumer to be able to extend while enum be open end -pron- only seem to be when within the specific module i then want to use that enum a type on other part of the api be the only way for someone to be able to extend an enum in a module to go back and edit the source module or be i miss something
--------------------------------------------------------------------------------------------------
[2016-01-07T17:14:09.282Z]	<SetTrend>	-pron- just read through -pron- wonder if there any difference between import as x from a and import x and export default a and export a the documentation do quite get clear on this -pron- help be appreciate
[2016-01-07T17:26:40.083Z]	<kitsonk>	import x and export a be legacy module format somewhat aligned to commonjs where as import as x from a or import x from a and export a and export default a be align to the current module specification
[2016-01-07T17:28:05.842Z]	<kitsonk>	-pron- be a bit confusing but often -pron- still need both especially if -pron- be work with integration javascript code because if -pron- be use either javascript amd or commonjs modules -pron-  <user> likely need to use legacy syntax though depend on the loader this may or may not be the case
[2016-01-07T17:28:47.025Z]	<JKillian>	-pron- recommend look over microsoft typescript -pron- pretty helpful export a be very different than export default a import as x from a often work similarly to import x as say -pron- definitely can get confusing
[2016-01-07T17:29:49.613Z]	<kitsonk>	if a module have a default export align to systemjs or native typescript -pron-  <user> want to use import a from a as that then a  <user> refer to the default export export a and import as a from a be import and export the same thing but in the legacy way
[2016-01-07T17:32:24.729Z]	<kitsonk>	where as if -pron- export b this would be available as import b from a notice no default therefore -pron- have to destructure the import and -pron- have to be name the same if -pron- want b to be call something different -pron- would do this import b as c from a and b in module a  <user> now be locally name c the default export though  <user> always be name whatever -pron- call -pron- locally
[2016-01-07T20:48:39.004Z]	<DanielRosenwasser>	ts
[2016-01-07T20:49:09.861Z]	<DanielRosenwasser>	so basically instead of tack on property to -pron- just overwrote entirely
--------------------------------------------------------------------------------------------------
[2016-01-07T19:14:13.733Z]	<SetTrend>	thanks for enlighten -pron- on this -pron- read through the suggested issue now yet -pron- still slightly confused about often -pron- still need both especially if -pron- be work with integration javascript code so there be difference in syntax between reference typescript and javascript modules be these all kind of reference to javascript in the end i suspect the emit javascript code to be the same regardless of whether a javascript or a typescript module be get reference and so the typescript i suspect to be the same where be -pron- presumtion wrong here i frankly have quite get -pron- yet
--------------------------------------------------------------------------------------------------
[2016-01-08T00:15:30.267Z]	<SetTrend>	i just finish read the suggest issue phew that be quite a large thread but i feel -pron- be extremely helpful for -pron- in understand the underpinning and reason behind the different syntax i believe i digge -pron- now thank to all of -pron- for -pron- valuable help
[2016-01-08T00:20:38.608Z]	<SetTrend>	follow some link in that issue lead -pron- to the file -pron- contain some strange import export line which i strongly feel i do understand typescript collapse angular into ng import ng angular support amd require declare module angular export angular please can someone explain these line to -pron- what be import without a from why be the module name a string should this be a regular identifier what the difference in today typescript -pron- have write declare namespace instead of declare module right thank a bunch
--------------------------------------------------------------------------------------------------
[2016-01-08T04:31:42.035Z]	<masaeedu>	let say i have a variable let foo foo foo getfoos let say -pron- try to use a ternary type guard like so let result foos instanceof array foo foos if -pron- look at the type of foo in the first clause in foo -pron- see that -pron- have be reduce to foo which be great however for the other branch in foos the type of foo be foo foo would -pron- be reasonable to eliminate the check type from the union in the else clause in this case remove foo foo leave foo which be the expect behavior
[2016-01-08T04:33:30.909Z]	<masaeedu>	right now to get the expect behavior from the example above i have to do let result foos instanceof array foo foo foos which seem unnecessary give the information already available to the compiler
[2016-01-08T04:35:35.974Z]	<DanielRosenwasser>	that actually intentional
[2016-01-08T04:36:54.219Z]	<DanielRosenwasser>	the idea be that something may be structurally compatible with the guard type even if -pron- do share the constructor function
[2016-01-08T04:38:24.300Z]	<DanielRosenwasser>	check out
--------------------------------------------------------------------------------------------------
[2016-01-08T04:57:32.945Z]	<malekpour>	set module in make visual studio ts editor read only for -pron- any idea what be the problem and workaround
[2016-01-08T04:58:04.547Z]	<DanielRosenwasser>	that pretty frightening
[2016-01-08T04:58:10.366Z]	<DanielRosenwasser>	do -pron- have a minimal repro
[2016-01-08T04:58:41.402Z]	<malekpour>	minimal repro
[2016-01-08T04:59:00.105Z]	<DanielRosenwasser>	do that happen only on a specific project
[2016-01-08T04:59:17.061Z]	<DanielRosenwasser>	or can -pron- reproduce the issue with one file and a
[2016-01-08T04:59:20.137Z]	<malekpour>	no try a new project and happen again
[2016-01-08T04:59:23.528Z]	<DanielRosenwasser>	wow
[2016-01-08T04:59:26.199Z]	<DanielRosenwasser>	okay one sec
[2016-01-08T05:00:45.731Z]	<malekpour>	actually -pron- work after -pron- set but after restart vs can not type in the editor
[2016-01-08T05:01:07.057Z]	<DanielRosenwasser>	yeah that horrify
[2016-01-08T05:01:08.092Z]	<DanielRosenwasser>	one sec
[2016-01-08T05:01:20.206Z]	<DanielRosenwasser>	okay strong language but
[2016-01-08T05:01:34.286Z]	<malekpour>	backspace and new line work
[2016-01-08T05:02:16.046Z]	<DanielRosenwasser>	-pron- run into similar thing
[2016-01-08T05:02:27.550Z]	<DanielRosenwasser>	but usually -pron- take a few minute and -pron- work
[2016-01-08T05:02:45.735Z]	<malekpour>	wow really
[2016-01-08T05:02:49.750Z]	<DanielRosenwasser>	well
[2016-01-08T05:03:00.710Z]	<malekpour>	i be blame resharper
[2016-01-08T05:03:06.864Z]	<DanielRosenwasser>	basically the language service be wait to resolve dependency in those case
[2016-01-08T05:03:19.497Z]	<DanielRosenwasser>	but with an empty file there be no dependency
[2016-01-08T05:03:26.527Z]	<DanielRosenwasser>	so the language service be hang somehow
[2016-01-08T05:03:46.717Z]	<malekpour>	and i have async await btw
[2016-01-08T05:06:50.463Z]	<malekpour>	what process be run the language service vs or a
[2016-01-08T05:07:55.465Z]	<DanielRosenwasser>	thank so much for point this out
[2016-01-08T05:08:14.920Z]	<DanielRosenwasser>	-pron- run various part of the language service in -pron- own chakra thread
[2016-01-08T05:08:27.287Z]	<DanielRosenwasser>	chakra be -pron- js engine
[2016-01-08T05:12:09.023Z]	<malekpour>	nice hopefully vs tooling  <user> be opensource soon
[2016-01-08T05:12:46.981Z]	<DanielRosenwasser>	yeah i think -pron- get there eventually
--------------------------------------------------------------------------------------------------
[2016-01-08T07:42:50.636Z]	<lorthirk>	hello everyone be -pron- possible to unit test the adherence of a json file to an interface by write a typescript test
--------------------------------------------------------------------------------------------------
[2016-01-08T09:21:07.489Z]	<adamreisnz>	hi everyone how would -pron- go about have environment dependent constant or even variable object load into -pron- project if the environment be determine and the config file generate at build time how do -pron- prevent -pron- ide or ts compiler from complain about miss unknown reference if the configuration file have not be generate yet but be import from by the rest of -pron- code any thought suggestion other than use a mock configuration file which get overwritten during the build process come from js node where one can do a dynamic or even wrap the require statement in an if clause i find -pron- struggle to come up with a viable alternative in ts which produce the same result give how import export statement can not be dynamic and have to be top level thank in advance for -pron- suggestion
[2016-01-08T09:21:38.484Z]	<windwp>	in tsx file how can i cast type of object in typescript example var type
[2016-01-08T09:25:47.011Z]	<windwp>	i think -pron- can import libary in if condition if -pron- be use browser not nodejs envrioment -pron- can use or -pron- can use systemjs with for script loader
[2016-01-08T09:27:17.923Z]	<adamreisnz>	i be hope there be more straightforward solution as in -pron- code i would like to just use simple static import statement import from
[2016-01-08T09:27:44.144Z]	<adamreisnz>	but since the config file be generate in the build process -pron- do exist yet in the design stage so the editor ide complain
[2016-01-08T09:28:12.370Z]	<adamreisnz>	only solution i could think of be to create a mock config file with the same interface as the generate file and have -pron- be overwritten during the build process
[2016-01-08T09:28:18.748Z]	<adamreisnz>	but -pron- feel hacky
[2016-01-08T09:40:43.015Z]	<windwp>	may be -pron- should create in -pron- folder
[2016-01-08T09:48:03.890Z]	<adamreisnz>	yes that could work i  <user> give -pron- a go
[2016-01-08T09:48:08.700Z]	<adamreisnz>	thank
[2016-01-08T10:22:59.812Z]	<arianra>	thank should know
[2016-01-08T15:30:11.604Z]	<JKillian>	there be a lot of discussion around related issue though and some recent change as well
[2016-01-08T15:30:50.878Z]	<JKillian>	see microsoft typescript wiki new in typing and microsoft typescript wiki new in base type guard for some recent change i expect -pron- talk more about something like though
[2016-01-08T15:37:19.579Z]	<JKillian>	seem  <user> since type information get remove at compile time except for thing already in js like prototype which can be check with instanceof
[2016-01-08T15:39:10.698Z]	<babeal>	that too bad i be hope with decorator and metadata reflection i would be able to do something like this i know -pron- can decorate but i be sure how to get the type information to be include in the transpiled code use one
[2016-01-08T15:43:38.170Z]	<JKillian>	btw do -pron- know a good resource on metadata reflection i briefly be look for one recently
[2016-01-08T15:44:39.362Z]	<babeal>	well the one i be read if i type this correctly -pron- only half way through so -pron- may or may not be a good source
[2016-01-09T05:39:54.937Z]	<LPGhatguy>	do -pron- have a particular example in mind that -pron- have problem with
[2016-01-09T20:38:14.246Z]	<LuigiFrattolillo>	screen shoot at microsoft typescript kjav thumb screen microsoft typescript kjav screen
--------------------------------------------------------------------------------------------------
[2016-01-08T13:23:25.904Z]	<chrismatheson>	do anyone know of a way to cast specify a type for this within the scope of a function
[2016-01-08T15:29:53.619Z]	<JKillian>	no problem in what context obviously a simple way be to just make a temporary variable let ths sometype this or something like that haha
--------------------------------------------------------------------------------------------------
[2016-01-08T15:31:39.060Z]	<japhar81>	hey guy have anyone figure out a way to use the mongo driver with type entity since there s no way to deserialize json into a typescript class -pron- not really sure how to go about read entity from mongo
[2016-01-08T15:33:01.054Z]	<babeal>	question be there a way to reflect on a generic type name in the compile javascript after transpilation for instance if i have a generic function run ttype can i determine in code what the name of the ttype be
[2016-01-08T15:40:48.353Z]	<JKillian>	ah -pron- may be possible with that i think -pron- mean with vanilla ts i have look into -pron- too much though so can help haha
--------------------------------------------------------------------------------------------------
[2016-01-08T19:13:56.153Z]	<jcimoch>	hi where can i find something about use typescript internal api for compilation for example ast tree or extract type information etc
[2016-01-08T19:14:36.077Z]	<josiahhaswell>	probably the good place to look be the typescript source
[2016-01-08T19:15:29.643Z]	<jcimoch>	i mean some example or doc if -pron- exist
[2016-01-08T19:15:45.848Z]	<josiahhaswell>	sorry if -pron- exist -pron- not aware of -pron-
[2016-01-08T19:16:24.187Z]	<jcimoch>	thx anyway
[2016-01-08T19:16:26.990Z]	<josiahhaswell>	although here something from stackoverflow
[2016-01-08T19:17:30.119Z]	<josiahhaswell>	and here another resource
[2016-01-08T19:19:06.724Z]	<jcimoch>	oh thank
[2016-01-08T19:20:05.529Z]	<JKillian>	 <user> and although -pron- may be a touch date
[2016-01-08T19:25:37.352Z]	<jcimoch>	how coul i miss that
[2016-01-08T19:25:49.371Z]	<jcimoch>	thank
[2016-01-09T19:26:46.312Z]	<DanielRosenwasser>	i would file a bug on the plugin microsoft typescript sublime plugin but i have a feeling that may be a general sublime limitation maybe know
[2016-01-09T19:27:21.331Z]	<DanielRosenwasser>	use node classic
--------------------------------------------------------------------------------------------------
[2016-01-08T23:59:27.456Z]	<corneliutusnea>	guy be -pron- possible to make the import in such a sway that -pron- work both when compile for system and commonjs tsc seem to adjust -pron- own import base on the way -pron- compile instead of have a stable predefined way of import and adjust the generate code
--------------------------------------------------------------------------------------------------
[2016-01-09T10:17:22.881Z]	<gaiottino>	-pron- use the sublime plugin be there a way to always keep the error list open -pron- always close when i hit esc
[2016-01-09T20:34:55.169Z]	<LuigiFrattolillo>	hi guy on visual studio for mac -pron- seem fine apparently but actually the browser do recognise the library
[2016-01-09T20:37:15.634Z]	<LuigiFrattolillo>	i mean the knockout library
--------------------------------------------------------------------------------------------------
[2016-01-09T11:37:55.004Z]	<LiamGoodacre>	do -pron- figure out -pron- casting issue var obj type as car
--------------------------------------------------------------------------------------------------
[2016-01-09T20:38:38.206Z]	<d3lm>	can not -pron- import the library via import or do -pron- want to load the knockout script tag in -pron- html file
[2016-01-09T20:39:32.175Z]	<LuigiFrattolillo>	-pron- like to use the library into -pron- script
[2016-01-09T20:40:58.073Z]	<LuigiFrattolillo>	actually -pron- use node module but -pron- seem that typescript load module with the type definition file way be i wrong
[2016-01-09T20:52:42.438Z]	<d3lm>	well if -pron- use node or npm to install knockout then -pron- could use import but i never work with knockout check this
[2016-01-09T20:53:24.070Z]	<LuigiFrattolillo>	and when should i use reference path from file
[2016-01-09T20:55:25.877Z]	<d3lm>	that s for intellisense
[2016-01-09T20:57:35.443Z]	<corneliutusnea>	change the way tsc find the file but the export be still in the way the import be do so -pron- will be really load by commonjs if the file be code in systemjs path format
[2016-01-09T20:57:56.036Z]	<d3lm>	if -pron- for example use visual studio code -pron-  <user> automatically grab those reference file for -pron- if -pron- have a file this  <user> be generate if -pron- install typing via tsd
[2016-01-09T20:58:37.845Z]	<d3lm>	-pron-  <user> get a in which a bundle  <user> be define the bundle point to -pron- file in which all -pron- instal typing  <user> be reference
[2016-01-09T21:11:22.611Z]	<LuigiFrattolillo>	and if i insert direcly file of a specific library without be -pron- possible or would i break -pron- code
[2016-01-09T21:12:11.286Z]	<d3lm>	no -pron- can of course just insert the reference
[2016-01-09T21:14:03.576Z]	<LuigiFrattolillo>	i do know why but if i include the library use import -pron- say require be not define
--------------------------------------------------------------------------------------------------
[2016-01-09T21:15:08.884Z]	<d3lm>	-pron- be use typescript right and instal knockout via npm
[2016-01-09T21:15:29.887Z]	<d3lm>	so -pron-  <user> have a
[2016-01-09T21:15:44.004Z]	<LuigiFrattolillo>	yes
[2016-01-09T21:16:53.055Z]	<LuigiFrattolillo>	compileroption module commonjs noimplicitany true removecomment true preserveconstenum true sourcemap true file exclude wwwroot
[2016-01-09T21:20:51.701Z]	<LuigiFrattolillo>	-pron- could be  <user> another library like jquery
[2016-01-09T21:21:25.300Z]	<LuigiFrattolillo>	this be just a test to understand how ts work with external library
[2016-01-09T21:28:44.877Z]	<d3lm>	or even import from jquery
[2016-01-09T21:35:54.956Z]	<d3lm>	if i be wrong please correct -pron-
[2016-01-09T21:36:19.642Z]	<LuigiFrattolillo>	thank
--------------------------------------------------------------------------------------------------
[2016-01-09T21:27:51.888Z]	<d3lm>	mh well usually as i say before just import jquery if -pron- have no default export or import from jquery or import as jquery from jquery
[2016-01-09T21:33:46.980Z]	<d3lm>	i guess jquery have a default export so import from jquery could work
[2016-01-09T21:34:00.186Z]	<d3lm>	currently not work with jquery
[2016-01-09T21:36:15.829Z]	<LuigiFrattolillo>	ok i  <user> try to install -pron-
--------------------------------------------------------------------------------------------------
[2016-01-10T12:40:58.246Z]	<jcimoch>	hi anbody know how typescirpt ast work -pron- traverse typescript ast from simple file with two interface -pron- goal be to extract type declaration but i see only field name and strange pos end field in every node object but no type
[2016-01-10T12:53:56.367Z]	<felixfbecker>	-pron- can not use both exclude and file in
--------------------------------------------------------------------------------------------------
[2016-01-11T04:11:03.574Z]	<jsobell>	ok major annoyance in something i just do understand about the ts compilation process here -pron- use amd and a gulp script to compile -pron- if i have a line import customeraccountsummary from dtos i would expect that typescript file to be import and callable instead i get the compile time error error can not find module dtos webstorm report that the path be correct but compilation throw an error  <user> if i wrap the class in a module stuff webstorm report unresolved variable or type stuff do anyone have any suggestion what -pron- may be in -pron- setup that cause these issue
[2016-01-11T04:26:02.521Z]	<kmkanagaraj>	be -pron- use typescript external module with amd
[2016-01-11T04:28:14.082Z]	<kmkanagaraj>	-pron- should not use module stuff if -pron- be go with external module a file be consider as a module
[2016-01-11T04:29:12.788Z]	<jsobell>	no -pron- simply a file in a subfolder
[2016-01-11T04:29:30.988Z]	<jsobell>	however i just move all the file to the root folder as a test and -pron- all resolve correctly
[2016-01-11T04:30:01.234Z]	<jsobell>	so -pron- appear that add a relative path be not work during compilation although webstorm seem happy with -pron-
[2016-01-11T04:37:26.261Z]	<kmkanagaraj>	hmm i use relative path everywhere do see any problem
[2016-01-11T04:37:42.531Z]	<jsobell>	so do all of the sample i can find
[2016-01-11T04:37:48.953Z]	<jsobell>	-pron- stump
[2016-01-11T04:38:34.784Z]	<jsobell>	-pron- have to be a stupid config set somewhere in one of the config file spreadeagle all over this typical spa project
[2016-01-11T04:39:19.507Z]	<jsobell>	this be infinitely bad than when i use to write game in assembly language in the
[2016-01-11T04:40:37.114Z]	<kmkanagaraj>	if at all anything -pron- should be in
[2016-01-11T04:41:13.108Z]	<jsobell>	and that appear completely valid
[2016-01-11T04:41:34.534Z]	<jsobell>	version compileonsave false compileroption rootdir sourcemap true target module amd moduleresolution classic declaration false noimplicitany false noresolve true removecomment true nolib false emitdecoratormetadata true experimentaldecorator true filesglob exclude atom rewritetsconfig false
[2016-01-11T04:48:00.009Z]	<kmkanagaraj>	moduleresolution classic should have fix this problem
[2016-01-11T04:48:30.875Z]	<jsobell>	well a few day ago i change -pron- to node and the problem dissapeare
[2016-01-11T04:48:46.862Z]	<jsobell>	the problem reoccurre and i change -pron- back to classic
[2016-01-11T04:49:02.835Z]	<jsobell>	-pron- as though -pron- get overridden but i can see how or where
[2016-01-11T04:49:17.574Z]	<jsobell>	perhaps -pron- something i need to change in the gulp build task
[2016-01-11T04:58:05.906Z]	<jsobell>	and now -pron- just start get this error error can not find module so -pron- not find -pron- in the current directory -pron- randomly appear and dissappearing
[2016-01-11T04:59:02.792Z]	<jsobell>	and now -pron- rain and i do bring -pron- waterproofs for -pron- motorbike
[2016-01-11T04:59:14.240Z]	<jsobell>	what next lighten strike d
[2016-01-11T05:01:09.647Z]	<kmkanagaraj>	so -pron- worth check out what gulp do there
[2016-01-11T05:18:15.881Z]	<jsobell>	i just add clean to the watch task and the error have dissappeare
[2016-01-11T05:18:38.585Z]	<jsobell>	look like something in the watch task be not behave
[2016-01-11T05:19:09.168Z]	<jsobell>	not ideal but -pron-  <user> do until the project get large
[2016-01-11T05:19:20.599Z]	<jsobell>	thank for the help
[2016-01-11T05:24:02.528Z]	<kmkanagaraj>	great smile
--------------------------------------------------------------------------------------------------
[2016-01-11T05:00:52.619Z]	<kmkanagaraj>	gulp build task can override the default from tsconfig while execute tsc
--------------------------------------------------------------------------------------------------
[2016-01-11T12:38:33.622Z]	<jcimoch>	i would be gratefull if someone could take a look at this issue
[2016-01-11T17:56:32.416Z]	<JKillian>	be there a canonical recommend way to build correct typing a namespace global version of a typescript library that be currently use module
[2016-01-11T18:05:03.729Z]	<JKillian>	to elaborate more the start source be external module style ts and build an library version typing be easy build a global bower friendly namespace version of the library be easy enough as well just make a ts file that import and then export everything and use something like webpack to bundle everything up but what the good way to get typing for that something like seem like -pron- would be on the right track but obviously that be available right now and may only work for amd system module
[2016-01-11T22:42:56.254Z]	<tejacques>	assume -pron- use output with the typescript compiler that sound like -pron- may be a babel thing
--------------------------------------------------------------------------------------------------
[2016-01-11T21:34:09.571Z]	<rborosak>	hi -pron- be use typescript and babel to transpile to everything work in chrome and edge but firefox give -pron- an error syntaxerror class be a reserved identifier what be i do wrong i have try add babel polyfill but that do help this be -pron- gulp task for compile typescript typescript function return base wwwroot and this be the error
[2016-01-11T21:34:54.848Z]	<rborosak>	microsoft typescript thumb microsoft typescript
--------------------------------------------------------------------------------------------------
[2016-01-11T22:43:33.950Z]	<tejacques>	-pron- error  <user> do show -pron- the source code that produce the error
[2016-01-11T22:44:10.398Z]	<tejacques>	if -pron- try to run class in the browser that may be why -pron- not work in ff
[2016-01-11T22:44:58.761Z]	<tejacques>	actually that probably not -pron- since that do work in chrome either but post the actual code that run would help and determine whether -pron- a babel or typescript issue
[2016-01-11T22:45:12.431Z]	<rborosak>	here be -pron-
[2016-01-11T22:46:18.464Z]	<rborosak>	compileroption target module amd emitdecoratormetadata true experimentaldecorator true experimentalasyncfunction true removecomment true sourcemap true
[2016-01-11T22:46:47.149Z]	<rborosak>	and -pron- js code
[2016-01-11T22:47:26.567Z]	<tejacques>	ok -pron- target there be so typescript be go to convert class into function that something babel be go to do
[2016-01-11T22:47:39.006Z]	<rborosak>	var awaiter this function thisarg argument promise generator return new resolve reject generator argument function return value instanceof promise promise value new resolve function try value catch e function try value catch e function value var result onreject void export class loadingspinner constructor sourcemappingurl
[2016-01-11T22:48:06.279Z]	<tejacques>	this be probably the relevant part of that function export class loadingspinner constructor
[2016-01-11T22:48:16.367Z]	<rborosak>	yes
[2016-01-11T22:48:22.017Z]	<tejacques>	what be be output by -pron- gulp script
[2016-01-11T22:48:25.671Z]	<tejacques>	what the compile js look like
[2016-01-11T22:48:39.934Z]	<rborosak>	this be the compile js
[2016-01-11T22:49:17.437Z]	<rborosak>	this be -pron- export class loadingspinner constructor
[2016-01-11T22:49:44.988Z]	<rborosak>	after run compile typescript gulp task i get what i post above
[2016-01-11T22:49:53.227Z]	<tejacques>	that the output after
[2016-01-11T22:49:57.264Z]	<rborosak>	yes
[2016-01-11T22:49:59.368Z]	<tejacques>	-pron- not convert the class
[2016-01-11T22:50:02.778Z]	<tejacques>	what -pron- babelrc
[2016-01-11T22:50:13.906Z]	<rborosak>
[2016-01-11T22:50:32.106Z]	<tejacques>	be -pron- use
[2016-01-11T22:50:57.040Z]	<rborosak>	i have only instal gulp babel
[2016-01-11T22:51:24.143Z]	<tejacques>	ok
[2016-01-11T22:52:23.371Z]	<tejacques>	so this be a question that really better suited to since -pron- a babel issue but i think i know what wrong so -pron- answer
[2016-01-11T22:52:36.579Z]	<tejacques>	gulp babel look like -pron- use which be a very modular compiler system
[2016-01-11T22:52:42.892Z]	<tejacques>	by default -pron- do do anything
[2016-01-11T22:52:53.441Z]	<tejacques>	-pron- need to configure -pron- to tell -pron- what to transform
[2016-01-11T22:53:15.668Z]	<tejacques>	there be a bunch of preset that  <user> do most of what -pron- want
[2016-01-11T22:53:16.871Z]	<tejacques>
[2016-01-11T22:53:53.330Z]	<tejacques>	so what -pron- need to do be create a file and add preset as show on that page
[2016-01-11T22:54:22.642Z]	<tejacques>	and run npm install babel preset dev or just
[2016-01-11T22:54:31.902Z]	<rborosak>	ok where should i put -pron- file
[2016-01-11T22:54:45.894Z]	<tejacques>	project root
[2016-01-11T22:55:22.453Z]	<rborosak>	do i need to add babel polyfill as well
[2016-01-11T22:55:39.420Z]	<tejacques>	depend on what feature -pron- want need etc
[2016-01-11T22:55:55.846Z]	<rborosak>	ok i  <user> give -pron- a try
[2016-01-11T22:55:57.158Z]	<tejacques>	if -pron- use async await then yes that feature require -pron-
[2016-01-11T22:56:06.129Z]	<tejacques>	good luck
[2016-01-11T22:56:49.272Z]	<tejacques>	if -pron- encounter any more issue with -pron- -pron- should try the babel slack channel forum -pron-  <user> be much more familiar with babel issue there
--------------------------------------------------------------------------------------------------
[2016-01-11T23:07:54.862Z]	<rborosak>	thank -pron- very much
[2016-01-11T23:07:59.662Z]	<rborosak>	i get -pron- to work
[2016-01-11T23:08:48.883Z]	<rborosak>	clap clap clap
--------------------------------------------------------------------------------------------------
[2016-01-11T23:36:02.997Z]	<dbartholomae>	hi there just get start with typescript after have work with coffeescript any good tutorial that deal specifically with usage in nodejs i can find a way to import node module
[2016-01-11T23:56:02.617Z]	<david-driscoll>	depend what syntax -pron- use but -pron- probably need the node declaration which  <user> let typescript know about the require method and more
[2016-01-11T23:58:55.410Z]	<dbartholomae>	where can i get these
[2016-01-11T23:59:03.409Z]	<tejacques>	super short version that  <user> hopefully help npm install tsd tsd install node add a import thing from node module
[2016-01-11T23:59:28.240Z]	<tejacques>	where node module be something like path fs etc
[2016-01-12T00:04:49.355Z]	<dbartholomae>	thanks that already help -pron-
[2016-01-12T00:04:49.984Z]	<dbartholomae>	how would i use this to work with node global variable like process
[2016-01-12T00:44:30.780Z]	<seanzer>	reference to would give -pron- all of the interface declare in the
[2016-01-12T00:44:55.923Z]	<seanzer>	and namespace
[2016-01-12T00:58:54.401Z]	<LPGhatguy>	triple slash reference be a little bit legacy feeling to -pron- -pron- recommend -pron- add the to -pron- file directive over reference the tsd typing folder from the source directly
--------------------------------------------------------------------------------------------------
[2016-01-12T10:20:56.981Z]	<grofit>	hey i have a strange issue where for some reason -pron- ts file be be output as componentviewmodel instead of componentviewmodel as i be use tsc with commonjs but this mean i can not do the following with the output js var blah component var foo new blah
[2016-01-12T10:21:04.429Z]	<grofit>	as -pron- say -pron- not a constructor
[2016-01-12T10:21:27.491Z]	<grofit>	so be i miss something the declaration of -pron- in ts look like export class componentviewmodel
[2016-01-12T10:39:48.552Z]	<grofit>	actually seem -pron- down to webpack or something stand down people
[2016-01-12T15:58:16.738Z]	<JKillian>	wonder if these all be necessary global to have in seem like this can lead to error can -pron- spot the error here actual scenario ts private handledocumentfocus e focusevent const dialog as htmlelement if as htmlelement
--------------------------------------------------------------------------------------------------
[2016-01-12T15:56:30.710Z]	<JKillian>	microsoft thumb microsoft blob
[2016-01-12T16:01:48.586Z]	<tejacques>	whoopsie
[2016-01-12T16:02:28.211Z]	<JKillian>	yup but there no compiler error because -pron- define as a global unfortunately
[2016-01-12T16:03:07.967Z]	<tejacques>	-pron- would use an alternate
[2016-01-12T16:03:21.189Z]	<tejacques>	but event be there because -pron- a property of window
[2016-01-12T16:03:42.910Z]	<tejacques>	may  <user> be able to have a tslint rule -pron- not sure
[2016-01-12T16:04:21.911Z]	<JKillian>	i guess i question if the benefit of support non standard global be worth kill compile time check in case like this
--------------------------------------------------------------------------------------------------
[2016-01-12T16:05:54.067Z]	<eilgin>	hello there
[2016-01-12T16:05:58.903Z]	<JKillian>	or maybe there should be a strict that do define global and only allow for -pron- access through window
[2016-01-12T16:07:16.273Z]	<eilgin>	do anyone have use jasmine as a bdd lib -pron- get a problem since -pron- compile with the system module js referenceerror can find variable system
[2016-01-12T16:08:27.653Z]	<tejacques>	i like that idea -pron- can do that now by reference -pron- own which remove -pron- -pron- actually may be nice if in the future browser specific definition be split out
[2016-01-12T16:08:58.628Z]	<tejacques>	so that just have universal js definition and have window document event etc
[2016-01-12T16:10:56.182Z]	<JKillian>	actually i think that kind of true right now there and
[2016-01-12T16:11:35.918Z]	<tejacques>	ah well then there -pron- go
[2016-01-12T16:11:41.209Z]	<JKillian>	not sure specifically in -pron- case but if -pron- part of the js library but not part of the typing just add -pron- on -pron- and file a pr if -pron- have the time smile
--------------------------------------------------------------------------------------------------
[2016-01-12T16:58:56.265Z]	<eilgin>	-pron- include the system libs but now -pron- get another error js uncaught typeerror unexpected anonymous call
[2016-01-12T20:42:05.724Z]	<joelday>	so why do the compiler use external module anyway
--------------------------------------------------------------------------------------------------
[2016-01-12T18:36:12.665Z]	<LPGhatguy>	do still include definition like activexobject though
[2016-01-12T18:46:01.590Z]	<JKillian>	not that i see glance over -pron- quickly
--------------------------------------------------------------------------------------------------
[2016-01-13T00:18:13.647Z]	<schalk-b>	be there some way to do a groupby in typescript javascript
[2016-01-13T00:18:32.889Z]	<schalk-b>	by some way i mean be there an already build in helper to achieve this easily
[2016-01-13T00:33:12.448Z]	<schalk-b>	if i use map on an array of string do -pron- have to return a string
[2016-01-13T00:33:43.236Z]	<schalk-b>	i know in c -pron- have the linq method select where -pron- be able to change the type be there an alternative in typescript
[2016-01-13T00:34:52.126Z]	<schalk-b>	an alternative would be to declare an array and do a foreach instead of a map
[2016-01-13T01:26:29.632Z]	<tejacques>	map take a function that take the type of the array and return any type
[2016-01-13T01:26:47.873Z]	<tejacques>	so no -pron- do need to return a string
[2016-01-13T01:27:08.627Z]	<tejacques>	select and map be equivalent in that aspect
[2016-01-13T02:34:54.967Z]	<schalk-b>	can -pron- notice what i be do wrong here
[2016-01-13T02:34:59.695Z]	<schalk-b>	this work var result key key value return result
[2016-01-13T02:35:07.574Z]	<schalk-b>	but not this
[2016-01-13T02:35:08.050Z]	<schalk-b>	return key key value
[2016-01-13T02:36:00.318Z]	<schalk-b>	oh nevermind sorry silly mistake
[2016-01-13T02:36:00.737Z]	<schalk-b>	should be
[2016-01-13T02:36:02.552Z]	<schalk-b>	return return key key value
[2016-01-13T12:27:08.086Z]	<mark-norgate>	can anyone tell -pron- how i get the typescript compiler to ignore unresolved reference i have some code that be use jquery but the transpiler do like -pron- like this ngaftercontentinit checkboxclass orange radioclass orange increasearea
[2016-01-13T12:29:12.578Z]	<Souldrinker>	norgate maybe ngaftercontentinit const myobject any checkboxclass orange radioclass orange increasearea
[2016-01-13T12:30:05.892Z]	<Souldrinker>	or what error do -pron- get
--------------------------------------------------------------------------------------------------
[2016-01-13T09:54:23.449Z]	<clinington>	i do suppose anyone know what the issue with this be
--------------------------------------------------------------------------------------------------
[2016-01-13T12:31:02.047Z]	<mark-norgate>	i get an error complain that jquery be not define i have find a stackoverflow post that indicate i should just declare -pron-
[2016-01-13T12:31:55.617Z]	<Souldrinker>	be -pron- miss the that should take care of the declaration
[2016-01-13T12:32:30.441Z]	<Souldrinker>	the next error -pron-  <user> get then i suppose be that jquery do have an icheck property and to solve that i suppose -pron- hack above should take care of that
[2016-01-13T12:32:54.811Z]	<Souldrinker>
[2016-01-13T12:32:57.278Z]	<mark-norgate>	-pron- kinda fix -pron- now thank
[2016-01-13T12:33:02.470Z]	<Souldrinker>	ok
[2016-01-13T12:33:04.641Z]	<mark-norgate>	just do this
[2016-01-13T12:33:29.717Z]	<mark-norgate>	declare var jquery any
[2016-01-13T12:33:53.551Z]	<mark-norgate>	do really need the type information would like to have as little deal with jquery as possible
[2016-01-13T12:34:42.315Z]	<Souldrinker>	ok sure that work  <user> if -pron- not interested in jquery type checking intellisense yup i suppose avoid jquery as far as possible be a good motto
[2016-01-13T12:35:17.848Z]	<Souldrinker>	but still -pron- sometimes a bit hard to find good library without jquery
--------------------------------------------------------------------------------------------------
[2016-01-13T13:19:20.632Z]	<ghost~5539edbc15522ed4b3df7357>	hey all get a funny one why be this ok but be
[2016-01-13T13:32:32.382Z]	<masaeedu>	be there a way to enforce an interface on a top level function function foo foo number implement icountfoo
[2016-01-13T13:33:19.860Z]	<masaeedu>	where interface icountfoos item foo number
[2016-01-13T13:36:15.153Z]	<jcimoch>	why would -pron- want that
[2016-01-13T13:37:04.936Z]	<jcimoch>	to -pron- -pron- look like missunderstande of what interface be
[2016-01-13T13:50:59.307Z]	<masaeedu>	what would -pron- say an interface be
[2016-01-13T13:54:31.263Z]	<masaeedu>	the reason -pron- want that be because library often export functionality in module with each module supply a particular function these function be incrementally attach to the prototype of some central object and possibly in the future  <user> be invoke use the operator think about jquery plugin or rxjs operator -pron- therefore necessary for the implementation and the consumer to agree on the shape of the function
--------------------------------------------------------------------------------------------------
[2016-01-13T13:58:51.130Z]	<KoenT-IM>	nice to meet -pron- all quick question be there anyone here who have experience work with typescript and react use visual studio ce -pron- try to make a very simple app build and run in but could use some help advice
[2016-01-13T14:06:45.619Z]	<jcimoch>	ok now i thin get -pron- point but -pron- can use implement keyword -pron- be strictly reserve for class as far as i know what -pron- want to do be probably define interface for particular plugin module but not particular function cause function can have -pron- own parameter type and return type and -pron- define -pron- with function -pron-
[2016-01-13T14:08:18.376Z]	<jcimoch>	object module with function attach to -pron- on the other hand can have interface and should
--------------------------------------------------------------------------------------------------
[2016-01-13T14:59:18.843Z]	<DamageLimiter>	be -pron- not possible anymore to initialize an empty array with
[2016-01-13T14:59:24.868Z]	<DamageLimiter>	this here throw an error public validationpropertie array string can not convert type typeof undefined to type string
[2016-01-13T15:27:01.123Z]	<Souldrinker>	what wrong with public validationpropertie new array string
[2016-01-13T15:27:55.310Z]	<Souldrinker>	i suppose public validationpropertie as array string would work too
[2016-01-13T15:28:43.403Z]	<Souldrinker>	typescript seem to have get more strict in the late version
[2016-01-13T15:29:26.089Z]	<tejacques>	what version of ts be -pron- use
[2016-01-13T15:30:56.708Z]	<tejacques>	this give -pron- no error class testclass public stringarray array string tsc version
[2016-01-13T15:33:35.624Z]	<Souldrinker>	well actually that work for -pron- too without error with ts
[2016-01-13T15:35:36.955Z]	<DamageLimiter>	sorry -pron- be in a meeting
[2016-01-13T15:36:04.651Z]	<DamageLimiter>	good question -pron- a brand new project maybe there the ts version be wrong although be instal
[2016-01-13T15:36:50.387Z]	<tejacques>	could have be fix change between and
[2016-01-13T15:37:06.177Z]	<tejacques>	be -pron- able to upgrade to late stable where -pron- use this if so -pron- try that first
[2016-01-13T15:40:55.947Z]	<DamageLimiter>	be instal strange thing be i have another project build on version and -pron- work so i suspect a new feature that forbid to initialize type array with an untyped definition
[2016-01-13T15:41:18.373Z]	<tejacques>	-pron- totally possible that something be introduce which break -pron- then be later fix
[2016-01-13T15:41:35.900Z]	<tejacques>	-pron- do seem to be work in late stable late dev for -pron-
[2016-01-13T15:43:39.056Z]	<DamageLimiter>	ok thank -pron- for -pron- help thumbsup
[2016-01-13T15:43:53.520Z]	<tejacques>	 <user> good luck
[2016-01-13T15:58:36.240Z]	<LabEG>	i try use typescript module for compilation file
[2016-01-13T15:58:51.471Z]	<LabEG>	let ts let program defaultoption void diagnostic
[2016-01-13T15:59:45.024Z]	<LabEG>	file tranpile fine but file have one type error
[2016-01-13T15:59:54.209Z]	<LabEG>	why diagnostic be empty
--------------------------------------------------------------------------------------------------
[2016-01-13T16:05:23.090Z]	<JKillian>	myargsarray maybe
[2016-01-13T19:09:21.202Z]	<JKillian>	be there away to include file in tsconfig so that -pron- can reference -pron- but not build -pron- i have a test dir next to a src dir and i want to reference the file in src but not have -pron- build
[2016-01-13T19:09:48.738Z]	<JKillian>	because the build test file  <user> end up next to already build src file in a different location
--------------------------------------------------------------------------------------------------
[2016-01-13T19:11:23.265Z]	<joelday>	how be -pron- execute tsc or be -pron- use grunt or gulp or something
[2016-01-13T19:12:08.185Z]	<JKillian>	through gulp actually although right now -pron- use the file as indicate by
[2016-01-13T19:12:20.068Z]	<joelday>	and by reference do -pron- mean use reference or just implicitly base on the environment
[2016-01-13T19:12:24.580Z]	<JKillian>	but i see where -pron- go with that
[2016-01-13T19:12:49.749Z]	<JKillian>	the file in test use relative import to import thing from src
[2016-01-13T19:13:52.620Z]	<joelday>	ahh yeah i would just build without -pron- normal tsconfig
[2016-01-13T19:14:26.043Z]	<joelday>	imo set up build process be generally pretty painful depend on what -pron- try to do
[2016-01-13T19:16:57.357Z]	<JKillian>	hahaha fully agree -pron- have spend so much time over the past two day get ts and gulp and webpack to play nice and to build nice commonjs and global bower friendly version of library with typing
[2016-01-13T19:18:59.812Z]	<joelday>	-pron- have some luck with that but the generate be totally wrong for the bower friendly one a lot of big project -pron- see like winjs appear to have manually maintain file which seem
[2016-01-13T19:20:21.713Z]	<JKillian>	i end up add a root level file that re export all of the export that should be public face and a get compile from that
[2016-01-13T19:20:53.521Z]	<JKillian>	i then write a script that read that file and read the other generate file and flatten -pron- into one big friendly bowe friendly file
[2016-01-13T19:23:18.250Z]	<joelday>	ahh nice in general though if -pron- target a bower style lib i have difficulty see the value of external module despite some of the drawback enumerate in atom typescript doc
[2016-01-13T19:27:07.399Z]	<joelday>	yeah especially if -pron- want to support both environment -pron- happy to appeal to community likability but i mean otoh even tsc do use external module
[2016-01-13T19:27:21.981Z]	<joelday>	-pron- not really sure what to infer from that if anything
[2016-01-13T19:28:21.634Z]	<joelday>	ehh i do want to go down a modules debate though just interested to figure out how to good deal with build process and project structure for both scenario
[2016-01-13T19:31:09.265Z]	<JKillian>	right i find external module be pretty nice to work with but in the end -pron- just slightly different way to structure code at least when -pron- come to ts there seem to be no good common way to take a library that write in external module ts and generate an external module version and global namespace bower version both with typing at least not that i could find anywhere on the internet
--------------------------------------------------------------------------------------------------
[2016-01-13T19:25:48.284Z]	<JKillian>	i can see that -pron- tough though because if people want to consume -pron- library through npm -pron- nice for -pron- to be external module style
--------------------------------------------------------------------------------------------------
[2016-01-13T20:27:47.326Z]	<xogeny>	in case anybody be interested i create a todomvc implementation in react redux typescript i think -pron- do a well job of show off good practice than the one currently show on -pron- can find -pron- here
[2016-01-13T20:28:26.909Z]	<xogeny>	 <user> i write some medium post about the pattern i use the main one be here
[2016-01-13T21:54:06.822Z]	<malekpour>	be the new amd module resolution implement in current
--------------------------------------------------------------------------------------------------
[2016-01-13T23:34:46.206Z]	<schalk-b>	please see -pron- reply on the issue could be relate to have resharper instal
[2016-01-15T00:27:15.205Z]	<seanzer>	try the todomvc sample
--------------------------------------------------------------------------------------------------
[2016-01-14T08:15:45.766Z]	<ianbytchek>	greeting everybody i use a bunch definitelytype definition and -pron- code fail with dependency typing bluebird error duplicate identifier promise dependency typing bluebird error duplicate identifier promise dependency typing bluebird error duplicate identifier promise dependency typing error duplicate identifier promise dependency typing error duplicate identifier promise
[2016-01-14T08:17:36.387Z]	<ianbytchek>	i try add those reference only as need per file instead of use a single connected but -pron- still fail apparently -pron- clash somewhere be there a way to deal with this
[2016-01-14T08:25:56.597Z]	<ianbytchek>	i know there be those discussion but -pron- do really provide a solution do -pron-
[2016-01-14T08:32:46.493Z]	<ianbytchek>	guess contain all available information if anyone know a workaround would be great to hear -pron-
--------------------------------------------------------------------------------------------------
[2016-01-14T11:11:47.260Z]	<grofit>	quick query around error object
[2016-01-14T11:12:07.644Z]	<grofit>	so if i be to have export class someerror extend error
[2016-01-14T11:12:43.634Z]	<grofit>	-pron- seem the should be use to indicate the error message
[2016-01-14T11:13:03.479Z]	<grofit>
[2016-01-14T11:13:15.257Z]	<grofit>	however when do this the message never seem to be output
[2016-01-14T11:13:28.693Z]	<grofit>	so i end up have to manually set in the constructor errormessage
[2016-01-14T11:13:56.585Z]	<grofit>	so be i do anything wrong here or should i be ignore the base constructor which take a message and just use explicit message set on the class
[2016-01-14T11:22:03.467Z]	<grofit>	as -pron- seem a pointless step have to send the same message to place
[2016-01-14T11:22:39.699Z]	<grofit>	so can anyone offer any guidance as to which one be right or if both need to be set and why both need set oppose to just one
[2016-01-14T12:39:15.675Z]	<rosendi>	hi guy be -pron- possible to refactor class component say message string let say prop class component constructor say say message string to class component say any say say message string how do -pron- do -pron- with the react redux prop
[2016-01-14T17:58:51.921Z]	<LPGhatguy>	what version of js be -pron- target -pron- work for -pron- in directly with this snippet function use strict class someerror extend error throw new world
[2016-01-14T21:44:24.483Z]	<jsobell>
[2016-01-14T21:45:12.411Z]	<jsobell>	strewth the window desktop version of gitter be buggy
[2016-01-15T09:18:47.962Z]	<grofit>	i be compile to commonjs and consume in nodejs
[2016-01-15T12:24:23.597Z]	<ghost~5539edbc15522ed4b3df7357>	be -pron- just -pron- or do typescript seriously lack a way of deserialize json with error when receive json do not match the interface etc
[2016-01-15T12:25:36.622Z]	<jsobell>	do -pron- mean -pron- want error or do like the fact that there be error
[2016-01-15T12:27:02.187Z]	<ghost~5539edbc15522ed4b3df7357>	well i mean that send an object with a date object as a property -pron- be a date on the one side and a string on the other side that s basic serialise deserialise stuff that java etc abstract from the developer in typescript afaik -pron- have to write -pron- own deserialise method and manually parse -pron- json object to actually be typesafe
[2016-01-15T12:27:39.878Z]	<jsobell>	well
[2016-01-15T12:28:33.250Z]	<jsobell>	-pron- javascript rather than typescript but -pron-  <user> have to remember that json be datum only with no metadata to validate against
[2016-01-15T12:29:35.268Z]	<jsobell>	date format be another thing with two representation but -pron- have xml with xsd or dtds and everyone complain that -pron- want that nice un type safe json instead
[2016-01-15T12:30:48.788Z]	<jsobell>	what -pron- can do with typescript be have -pron- server end generate interface that -pron- client can use to match the datum nicely
[2016-01-15T12:31:20.460Z]	<jsobell>	for example in the c world there servicestack tool that let -pron- query the definition as a file
[2016-01-15T12:31:38.182Z]	<jsobell>	grab all of the metadata for -pron- web api
[2016-01-15T12:31:55.610Z]	<ghost~5539edbc15522ed4b3df7357>	good point so on the language level -pron- can not be implement because then json would loose -pron- universal structure and become typescript javascript from ts dependent if -pron- add the metadata to the json object -pron- so a library opt in that be use on both side could automatically attach a type reference to the json before -pron- send out and read remove -pron- before -pron- be return
[2016-01-15T12:32:28.850Z]	<jsobell>	-pron- can do that yes
[2016-01-15T12:33:05.171Z]	<jsobell>	in fact in servicestack the default be to include a type field or somesuch with every json object send to the client
[2016-01-15T12:33:19.065Z]	<jsobell>	that contain the name of the object -pron- send
[2016-01-15T12:34:06.492Z]	<jsobell>	of course if -pron- know the type then -pron- do need that such as if -pron- api always return object type x to query y
[2016-01-15T12:34:53.391Z]	<jsobell>	-pron- can get out of sync with client and server but that relatively unusual in client server web app where the client be generally supply by the server
[2016-01-15T12:35:20.719Z]	<jsobell>	what technology be -pron- use for the server end
[2016-01-15T12:36:00.977Z]	<ochrons>	 <user> typescript type be not available at runtime so how would -pron- know what to deserialize
[2016-01-15T12:36:35.530Z]	<ochrons>	-pron- would need to generate the deserializer from the interface definition at compile time
[2016-01-15T12:37:06.827Z]	<ochrons>	which be what many scala json parser do use macros
[2016-01-15T12:37:09.072Z]	<jsobell>	define deserialise in java and c -pron- can cast an anonymous object to a class instance as -pron- have to build that object
[2016-01-15T12:38:06.037Z]	<jsobell>	in javascript -pron- nothing but dynamic object with property so -pron- can cast for want of a well word any json structure and tell javascript -pron- an object of type x
[2016-01-15T12:38:30.802Z]	<jsobell>	this be all assume -pron- already know the definition
[2016-01-15T12:38:46.179Z]	<jsobell>	-pron- only need the metadata about the object type if -pron- do have -pron- at both end
[2016-01-15T12:39:31.885Z]	<ochrons>	except if -pron- use browser -pron- be already lose information for example large number will work correctly
[2016-01-15T12:40:36.995Z]	<jsobell>	that a different issue and even occur between operating system in many language
[2016-01-15T12:40:52.428Z]	<ghost~5539edbc15522ed4b3df7357>	any libs for ts available that do an interface serializable and then generate the deserializer at compile time that be then later available at runtime
[2016-01-15T12:41:28.083Z]	<jsobell>	define deserialize
--------------------------------------------------------------------------------------------------
[2016-01-15T12:39:36.603Z]	<jsobell>	if i tell -pron- that i  <user> always send firstname number of child age in a packet then when -pron- receive fred -pron- will have any ambiguity
[2016-01-15T12:40:09.893Z]	<jsobell>	typescript let -pron- create that interface know -pron-  <user> match the server supply datum
--------------------------------------------------------------------------------------------------
[2016-01-15T12:41:34.333Z]	<ochrons>	i have no clue -pron- a user -pron-
[2016-01-15T12:41:37.931Z]	<jsobell>	do -pron- mean validate
[2016-01-15T12:41:53.524Z]	<jsobell>	be a deserializer
[2016-01-15T12:42:10.829Z]	<jsobell>	be a serializer
[2016-01-15T12:43:29.141Z]	<jsobell>
[2016-01-15T12:43:50.412Z]	<jsobell>	not for class what do that mean
[2016-01-15T12:44:07.674Z]	<jsobell>	do -pron- mean -pron- do instantiate a new class object to hold -pron- datum
[2016-01-15T12:44:11.350Z]	<ochrons>	for example r will be able to serialize deserialize correctly
[2016-01-15T12:44:30.683Z]	<jsobell>	that because -pron- not valid json
[2016-01-15T12:44:47.493Z]	<jsobell>	-pron- would serialize though
[2016-01-15T12:44:56.790Z]	<ochrons>	sure but -pron- can be serialize deserialize with json if -pron- know the type
[2016-01-15T12:45:04.029Z]	<jsobell>	-pron- would serialize as r
[2016-01-15T12:46:06.436Z]	<jsobell>	i do think -pron- need any customization be -pron- concerned that people may throw invalid datum from third party system
[2016-01-15T12:47:47.841Z]	<jsobell>	i do understand what -pron- ask
[2016-01-15T12:48:37.330Z]	<jsobell>	metadata can either be pass between system or pre shared
[2016-01-15T12:48:54.304Z]	<jsobell>	in the case of client server app -pron- normally pre shared
[2016-01-15T12:49:26.735Z]	<jsobell>	to do this -pron- share the source interface and make sure when -pron- create an info object -pron- always use a matching info object at the client
[2016-01-15T12:51:18.942Z]	<jsobell>	if i ask for the user name from the server and -pron- send back the number that not a valid response
--------------------------------------------------------------------------------------------------
[2016-01-15T12:43:21.654Z]	<ochrons>	basic json serialization work only for plain datum not for class etc
--------------------------------------------------------------------------------------------------
[2016-01-15T12:44:59.926Z]	<ghost~5539edbc15522ed4b3df7357>	something so i could do this interface foo extend serializable someprop date fooprop string then the lib at compile time could  <user> generate metadata info for the runtime to use during deserialise and at runtime -pron- could modify the to use the metadata to always deserialise correctly and throw error if datum be not structure right
--------------------------------------------------------------------------------------------------
[2016-01-15T12:46:24.963Z]	<jsobell>	in most cs app -pron- have a mirrored setup
--------------------------------------------------------------------------------------------------
[2016-01-15T12:49:32.409Z]	<ghost~5539edbc15522ed4b3df7357>	okay -pron- tell -pron- -pron- story and then -pron- tell -pron- where in an ideal world i would have to change something to make -pron- right angularjs have a datepipe -pron- take either a date object or timeinmilli and give out a ui human readable string but most time -pron- get datum receive from a backend and that  <user> then not be a date object but rather a string that result from date so first -pron- thought be damn -pron- angular why do not -pron- understand the string but then i think well angular say -pron- base on typescript and typescript want to give -pron- type so -pron- be ok to expect a date object instead of a string but then i think where do i get the date object from a client can not be expect to always scan the json for possible date object in the form of string and then convert accordingly that s when i start think -pron- may be a language level issue
[2016-01-15T12:50:48.507Z]	<jsobell>	ok i see what -pron- ask but in this case some of -pron- server be return invalid datum
[2016-01-15T12:51:36.922Z]	<jsobell>	unless -pron- have a very odd name
[2016-01-15T12:51:57.839Z]	<jsobell>	if i define a server end interface as class idata name string childcount number age number
[2016-01-15T12:52:46.473Z]	<jsobell>	i can create a class from that in -pron- server and when i call on -pron- i  <user> always get the same structure send
[2016-01-15T12:53:42.594Z]	<ochrons>	and with typescript class idata name string birthdate date what would -pron- get
[2016-01-15T12:54:00.367Z]	<ochrons>	i mean who store age when -pron- should store a birthdate
[2016-01-15T12:54:42.263Z]	<jsobell>	naive developer
[2016-01-15T12:55:03.589Z]	<jsobell>	-pron- can send a class in javascript
[2016-01-15T12:55:30.174Z]	<jsobell>	-pron- can pass one around in -pron- program but -pron- have to be serialize to send -pron-
[2016-01-15T12:56:09.852Z]	<jsobell>	remember a class only consist of -pron- data value -pron- a static set of code instruction point to an instance identifier and datum item
[2016-01-15T12:56:23.585Z]	<jsobell>	when -pron- send -pron- -pron- only send the data item
[2016-01-15T12:56:33.828Z]	<ghost~5539edbc15522ed4b3df7357>	can -pron- explain the as i have see that before and -pron- may just be what -pron- look for and i just do not read the doc carefully enough angel
[2016-01-15T12:56:53.954Z]	<jsobell>	-pron- simply a cast
[2016-01-15T12:56:57.601Z]	<ochrons>	the as  <user> not help -pron- -pron- just a cast
[2016-01-15T12:57:16.386Z]	<ghost~5539edbc15522ed4b3df7357>	ah darn i think -pron- be something more magical
[2016-01-15T12:57:17.633Z]	<ochrons>	what -pron- need be a custom deserializer
[2016-01-15T12:57:21.167Z]	<jsobell>	if -pron- assign the parse value to a variable of type idata -pron-  <user> do the same thing
[2016-01-15T12:57:57.756Z]	<ochrons>	or in case -pron- use -pron- need a transformation
[2016-01-15T12:58:43.333Z]	<jsobell>	that why i ask -pron- if -pron- mean validate not deserialise
--------------------------------------------------------------------------------------------------
[2016-01-15T12:53:47.479Z]	<jsobell>	if i now share that with a client at compile time then when the client receive -pron- datum -pron- simply say as idata and -pron- know -pron- match exactly what the server send out
--------------------------------------------------------------------------------------------------
[2016-01-15T12:57:48.778Z]	<ghost~5539edbc15522ed4b3df7357>	yeah and i write that but i hate when -pron- class look like this export class context extend basemodel implement serializable context public contexttype contexttype public view string public datum any public id objectid public user string public timestamp date argument if input throw new new return this
--------------------------------------------------------------------------------------------------
[2016-01-15T12:59:34.097Z]	<ghost~5539edbc15522ed4b3df7357>	sorry terminology be -pron- good suit but yeah i suppose i mean validate
[2016-01-15T12:59:38.876Z]	<jsobell>	true if -pron- want to add non prototype function to a set of deserialised datum then -pron-  <user> have to copy the value into a new object
[2016-01-15T13:00:13.014Z]	<jsobell>	but even then the object -pron- create at the client be not the same object as at the server and do need to be
[2016-01-15T13:01:27.113Z]	<ochrons>	like protocolbuffer
[2016-01-15T13:02:33.544Z]	<ochrons>	do -pron- have the same ts class on the server side
--------------------------------------------------------------------------------------------------
[2016-01-15T13:00:51.200Z]	<ghost~5539edbc15522ed4b3df7357>	i just feel like there have to be some sort of generic abstraction layer possible that  <user> keep other people from do this over and over again -pron- feel much too structured to not be possible in a generic way that can then be use by any
--------------------------------------------------------------------------------------------------
[2016-01-15T13:01:15.291Z]	<ochrons>	sure -pron- be -pron- just need a code generator to do -pron- for -pron-
--------------------------------------------------------------------------------------------------
[2016-01-15T13:01:52.289Z]	<jsobell>	protobuf  <user> need the definition at each end to match
--------------------------------------------------------------------------------------------------
[2016-01-15T13:02:50.215Z]	<jsobell>	think of the object -pron- create to transfer datum as be dtos
[2016-01-15T13:03:11.190Z]	<jsobell>	-pron- actually append dto to the end of our
[2016-01-15T13:03:43.223Z]	<jsobell>	-pron- contain no logic and be simply a set of key value pair or property value in javascript term
--------------------------------------------------------------------------------------------------
[2016-01-15T13:04:42.709Z]	<jsobell>	be there a generic way of reading attribute and inject -pron- into a new class instance while  <user> check that the data type match i do know
[2016-01-15T13:05:57.261Z]	<jsobell>	i suspect -pron- have to write -pron- own or use decorator on all -pron- property
[2016-01-15T13:06:19.637Z]	<ochrons>	there be this
[2016-01-15T13:06:21.280Z]	<jsobell>	decorator be the close thing -pron- find to metadata
--------------------------------------------------------------------------------------------------
[2016-01-15T13:06:44.812Z]	<chilversc>	i want something that could easily read those decorator at compile time and spit out new de serializer class
[2016-01-15T13:07:05.931Z]	<ochrons>	pretty bleeding edge though
[2016-01-15T13:07:46.706Z]	<chilversc>	use decorator at compile time would need bleed edge on the javascript side which be -pron- advantage
[2016-01-15T13:08:23.368Z]	<chilversc>	probably do even need the decorator just something that can consume the typescript ast for field property
[2016-01-15T13:08:37.164Z]	<jsobell>	once -pron- be transpile down to
[2016-01-15T13:09:03.384Z]	<ochrons>	that cerialize be use annotation decoration
[2016-01-15T13:09:35.245Z]	<jsobell>	yes hence why -pron- need to transpile -pron-
[2016-01-15T13:10:27.564Z]	<jsobell>	again the annotation do get serialise so -pron- be use to create additional feature at compile time only
[2016-01-15T13:10:57.733Z]	<jsobell>	that cerialize look nice though
[2016-01-15T13:11:37.386Z]	<jsobell>	great for stuff where -pron- have no control over the incoming data or need to alter -pron- own to conform
[2016-01-15T13:12:03.427Z]	<jsobell>	not a lot of point for -pron- own app where -pron- control both end though
[2016-01-15T13:14:31.570Z]	<ochrons>	well -pron- avoid do those pesky dto
[2016-01-15T13:27:03.361Z]	<chilversc>	until -pron- have date which do need to be translate from be a string
--------------------------------------------------------------------------------------------------
[2016-01-15T13:28:27.011Z]	<ochrons>
--------------------------------------------------------------------------------------------------
[2016-01-15T13:39:50.317Z]	<ochrons>	another common issue with json serialization be cyclic and duplicate reference
[2016-01-15T13:40:53.515Z]	<ochrons>	which be why system like falcor encode the reference information separately
--------------------------------------------------------------------------------------------------
[2016-01-15T16:03:59.831Z]	<eilgin>	do anyone use webstorm to code in ts
[2016-01-15T16:05:56.631Z]	<eilgin>	i can have code completion with -pron- since -pron- not use and do want to put this silly pseudo comment but -pron- only use import from which be standard
[2016-01-15T16:08:44.054Z]	<eilgin>	-pron- talk about import module which be come from the typing folder
[2016-01-15T16:30:36.686Z]	<masaeedu>	the type checker consider as well as ref so if the editor be use the language service correctly -pron- should get completion and type checking
[2016-01-15T18:06:52.148Z]	<LPGhatguy>	be -pron- use a
[2016-01-15T20:22:49.866Z]	<ianks>	do anyone have minute -pron- could spare to hop on a video chat i have a question about the type system
[2016-01-15T20:23:04.307Z]	<ianks>	-pron- buy -pron- a virtual beer
[2016-01-15T20:25:26.105Z]	<tejacques>	-pron- may be hard for most people here to set that up and go through -pron- if -pron- only a minute question -pron- could try ask -pron- question here with an example and -pron- more likely to get a text response
[2016-01-15T20:28:00.453Z]	<ianks>	try to write -pron- out -pron- would be hard to convey -pron- question i think and i learn much well from human interaction if anyone want to help -pron- be here
[2016-01-15T23:43:11.751Z]	<schalk-b>	sorry wrong chatroom
--------------------------------------------------------------------------------------------------
[2016-01-15T22:36:01.446Z]	<seanzer>	do anyone have an explanation for the pattern that typescript transpile class into
[2016-01-15T22:36:37.516Z]	<DanielRosenwasser>	which part do -pron- understand
[2016-01-15T22:37:53.029Z]	<DanielRosenwasser>
[2016-01-15T22:38:03.576Z]	<seanzer>	well what the advantage of have var myobject function function myobject return myobject
[2016-01-15T22:38:15.688Z]	<seanzer>	vs just write the prototype and not declare the var
[2016-01-15T22:39:23.570Z]	<seanzer>	there an additional closure
[2016-01-15T22:40:11.057Z]	<DanielRosenwasser>	-pron- need to have the constructor function run as well
[2016-01-15T22:41:30.151Z]	<DanielRosenwasser>	wait sorry i misspoke
[2016-01-15T22:42:36.134Z]	<seanzer>	var foo function function foo function return foo var instance new foo to -pron- seem the same as function foo function var instance new foo just wonder what the extra closure solve
[2016-01-15T22:43:05.629Z]	<seanzer>	or maybe there some advantage to use var to hoist
[2016-01-15T22:45:51.566Z]	<DanielRosenwasser>
[2016-01-15T22:46:06.021Z]	<DanielRosenwasser>	so unrelated to -pron- initial answer
[2016-01-15T22:49:09.128Z]	<seanzer>	perfect thank
[2016-01-15T22:49:17.059Z]	<seanzer>	that what i be think but just want some confirmation
[2016-01-15T23:37:24.054Z]	<schalk-b>	be -pron- ok for service to have state
[2016-01-15T23:37:57.010Z]	<schalk-b>	i know come from a  <user> c background service typically only contain function
--------------------------------------------------------------------------------------------------
[2016-01-16T00:05:47.088Z]	<markdrake>	hello everybody i have a noob question everytime i try to use a generic in -pron- typescript ide and compiler i receive the error that -pron- can not find -pron- example error can not find name t
[2016-01-16T00:06:49.146Z]	<markdrake>	the code -pron- use be in angular and here one place i use -pron- observer t
[2016-01-16T00:07:41.031Z]	<markdrake>	-pron- ide be webstorm and -pron- complain the same -pron- typescript compiler be tsc message version
[2016-01-16T00:08:16.443Z]	<masaeedu>	can -pron- paste the exact code
[2016-01-16T00:09:22.012Z]	<masaeedu>	actually in the context -pron- use -pron- -pron- need t to be specify
[2016-01-16T00:09:37.357Z]	<masaeedu>	in the line
[2016-01-16T00:09:46.553Z]	<masaeedu>	observer t
[2016-01-16T00:09:52.315Z]	<masaeedu>	t be a type argument
[2016-01-16T00:09:57.711Z]	<masaeedu>	not a parameter
[2016-01-16T00:10:22.179Z]	<markdrake>	yes exactly
[2016-01-16T00:10:28.921Z]	<markdrake>	-pron- observer resolve to t right
[2016-01-16T00:10:46.620Z]	<seanzer>	-pron- need to put in a type
[2016-01-16T00:10:54.604Z]	<markdrake>	if i use any -pron- work but -pron- read -pron-  <user> strip the type of the var be resolve
[2016-01-16T00:10:57.708Z]	<masaeedu>	can -pron- paste the rest of that line
[2016-01-16T00:11:00.794Z]	<markdrake>	yeah sure
[2016-01-16T00:11:02.162Z]	<markdrake>	one sec
[2016-01-16T00:11:39.421Z]	<markdrake>	observer t let expectedjson displayname test uuid let responseoption new let response new
[2016-01-16T00:11:56.726Z]	<markdrake>	-pron- use -pron- to spy on angular http service
[2016-01-16T00:11:59.597Z]	<masaeedu>	ok so what should t be here
[2016-01-16T00:12:06.757Z]	<markdrake>	t response
[2016-01-16T00:12:17.092Z]	<masaeedu>	so do observable response
[2016-01-16T00:12:34.271Z]	<masaeedu>	sorry observer response
[2016-01-16T00:12:50.596Z]	<markdrake>	ok but would a generic enable -pron- to say i have a type here and i do know what -pron- be now but when -pron- receive -pron- -pron- know -pron-
[2016-01-16T00:12:56.775Z]	<markdrake>	or i completely misunderstand the concept
[2016-01-16T00:13:35.029Z]	<seanzer>	sorry that be not what a generic be
[2016-01-16T00:14:14.271Z]	<markdrake>	i read the documentation here
[2016-01-16T00:14:22.144Z]	<masaeedu>	well -pron- pass the argument now
[2016-01-16T00:14:29.015Z]	<markdrake>	and i see all kind of t argument there
[2016-01-16T00:14:30.560Z]	<masaeedu>	ah
[2016-01-16T00:14:34.303Z]	<masaeedu>	i see
[2016-01-16T00:14:34.516Z]	<markdrake>	be that only for demonstration purpose only
[2016-01-16T00:14:42.524Z]	<masaeedu>	-pron- want this
[2016-01-16T00:15:25.153Z]	<masaeedu>	observer t
[2016-01-16T00:15:34.853Z]	<markdrake>	ohhh get -pron-
[2016-01-16T00:15:47.731Z]	<markdrake>	be the first t some kind of cast
[2016-01-16T00:15:50.910Z]	<masaeedu>	no
[2016-01-16T00:16:00.517Z]	<markdrake>	damn -pron- be a while since i use a strongly type language
[2016-01-16T00:16:09.927Z]	<markdrake>	what be the purpose of the first t
[2016-01-16T00:16:11.450Z]	<markdrake>
[2016-01-16T00:16:17.224Z]	<masaeedu>	-pron- basically a shorthand for this function thisfunctionhasnoname t
[2016-01-16T00:16:18.495Z]	<seanzer>	wow be that an arrow function with a type parameter
[2016-01-16T00:16:23.928Z]	<masaeedu>	yeah
[2016-01-16T00:16:28.908Z]	<seanzer>	mind blown
[2016-01-16T00:16:37.029Z]	<markdrake>	be that a bad thing
[2016-01-16T00:16:49.436Z]	<markdrake>	-pron- read that -pron- can use -pron- for so -pron- do have scope issue
[2016-01-16T00:16:55.100Z]	<masaeedu>	-pron- not exactly shorthand because arrow function be the same as function function but whatever
[2016-01-16T00:17:01.103Z]	<masaeedu>	no -pron- not a bad thing
[2016-01-16T00:17:06.848Z]	<masaeedu>	or at least not that i can tell
[2016-01-16T00:17:44.085Z]	<masaeedu>	may be a bad thing in -pron- use case
[2016-01-16T00:18:06.154Z]	<masaeedu>	the thing be right now there nothing -pron- can infer about the type argument of the observable -pron- receive in that function
[2016-01-16T00:18:30.870Z]	<masaeedu>	sorry observer -pron- receive
[2016-01-16T00:19:16.939Z]	<markdrake>	yeah i see but that do fix the complain on the ide and compiler
[2016-01-16T00:19:22.494Z]	<markdrake>	now -pron- complain that -pron- should be a response
--------------------------------------------------------------------------------------------------
[2016-01-16T00:19:23.876Z]	<masaeedu>	if for example -pron- know that -pron- get an observer that accept object with a string base foo property -pron- can do this
--------------------------------------------------------------------------------------------------
[2016-01-16T00:19:25.941Z]	<markdrake>	but that a good thing for -pron-
[2016-01-16T00:20:04.141Z]	<masaeedu>	string
[2016-01-16T00:20:29.791Z]	<masaeedu>	but -pron- do know anything about -pron- so -pron- should just use observer any
[2016-01-16T00:20:39.174Z]	<markdrake>	right
[2016-01-16T00:20:49.326Z]	<markdrake>	or just import the right class when -pron- make sense
[2016-01-16T00:20:54.718Z]	<markdrake>	thank  <user>
[2016-01-16T00:20:56.417Z]	<markdrake>	y
[2016-01-16T00:41:23.126Z]	<markdrake>	i decide to understand this more i read how generic work on java and c and now -pron- make sense
[2016-01-16T00:41:28.343Z]	<markdrake>	thank for -pron- support
--------------------------------------------------------------------------------------------------
[2016-01-16T00:19:31.344Z]	<markdrake>	so i do use a generic there
--------------------------------------------------------------------------------------------------
[2016-01-16T00:59:12.066Z]	<LPGhatguy>	one thing to watch out for be that typescript generic type exist only at design time
[2016-01-16T01:00:01.757Z]	<LPGhatguy>	-pron- can reference -pron- or manipulate -pron- at runtime like java or c like ts function something t return new t nope
--------------------------------------------------------------------------------------------------
[2016-01-16T06:11:39.316Z]	<vicky002>	hi meet milotic the good colorful theme for all text editor code and installation milotic website
--------------------------------------------------------------------------------------------------
[2016-01-16T10:29:58.679Z]	<tomenden>	i be have trouble use typescript with react stateless functional component react i be to do break -pron- head around why and can seem to find a way to solve -pron- see issue here and here  <user> really appreciate help on this
--------------------------------------------------------------------------------------------------
[2016-01-16T18:11:19.565Z]	<dbartholomae>	hi there -pron- a huge fan of significant whitespace instead of write a lot of brace but i  <user> like type anyone know about a coffeescript typescript hybrid or something like that
[2016-01-16T20:58:20.320Z]	<ochrons>	in java the generic be erase at compile time so -pron- do exist at runtime
[2016-01-17T01:08:43.515Z]	<masaeedu>	there a bunch of statically type functional language out there now elm be a good one and be fairly braceless
[2016-01-17T01:17:25.667Z]	<dbartholomae>	elm look nice one thing -pron- not sure elm do the language need to compile to js
[2016-01-17T01:23:06.617Z]	<masaeedu>	there  <user> -pron- may want to go through the list jashkenas coffeescript wiki list of language that compile to js
[2016-01-17T01:58:22.150Z]	<dbartholomae>	thank
[2016-01-17T10:07:33.916Z]	<ochrons>	one of the alternative that have syntax quite similar to js be
[2016-01-17T18:55:17.873Z]	<dc0d>	thank i already have that i be wonder if there be something build into typescript
[2016-01-18T00:05:09.776Z]	<LPGhatguy>	what module type be -pron- target generally -pron- use a bundler like jspm systemjs builder or browserify to bundle dependency with -pron- app afaik
[2016-01-18T00:06:14.695Z]	<LPGhatguy>	if chartist create a global then -pron- be want to use that instead of try to import -pron-
[2016-01-18T02:05:25.800Z]	<jsobell>	how would i do that talk to -pron- as though i know nothing
[2016-01-18T02:05:49.956Z]	<jsobell>	-pron- use aurelia which be typescript with amd
[2016-01-19T06:27:05.905Z]	<kneuse>	can i get help write a decorator in typescript
[2016-01-19T06:28:29.865Z]	<DanielRosenwasser>	pastebin
[2016-01-19T06:28:39.282Z]	<kneuse>	-pron- one for angularjs site
[2016-01-19T06:30:49.283Z]	<DanielRosenwasser>
[2016-01-19T06:30:52.597Z]	<DanielRosenwasser>	that one
[2016-01-19T06:31:33.910Z]	<kneuse>
[2016-01-19T06:31:35.580Z]	<kneuse>	yep
[2016-01-19T06:35:35.791Z]	<kneuse>
[2016-01-19T06:35:58.162Z]	<kneuse>	if someone would mind help -pron- with a decorator as -pron- not very straight forward on how to create one
[2016-01-19T06:36:42.162Z]	<DanielRosenwasser>	while -pron- a bit technical -pron- get
[2016-01-19T06:41:08.968Z]	<kneuse>	that somewhat help but not completely
[2016-01-19T06:59:41.887Z]	<DanielRosenwasser>	-pron- decorator should be return a constructor function
[2016-01-19T06:59:49.237Z]	<DanielRosenwasser>	or return nothing at all
--------------------------------------------------------------------------------------------------
[2016-01-17T07:02:40.406Z]	<metaweta>	be there information beyond the architectural overview and compiler internal page on the wiki describe the structure of the typescript codebase
--------------------------------------------------------------------------------------------------
[2016-01-17T12:46:56.411Z]	<dc0d>	hi everybody be there a way to implement the defer pattern of go golang or idisposable of c in typescript like do something on enter a scope and thing when exit the scope
[2016-01-17T12:48:54.355Z]	<ochrons>	try and finally
[2016-01-17T12:51:30.640Z]	<dc0d>	try and finally be part of the current execute scope imho -pron- not possible to use -pron- for abstract some functionality into a third class unless -pron- re write the code to pass the current scope a function to that class to get execute there
[2016-01-17T14:05:13.415Z]	<jsobell>	-pron- try to import chartist for use in an app but i can find a way of reference the object in the file -pron- import i have try use import chartist which compile fine but then i can seem to refer to any object or methid inside the include file
[2016-01-17T14:06:04.282Z]	<jsobell>	so i try add an export to the file and use import as chart from chartist but -pron- complain at runtime that none of the class i try to create exist
[2016-01-17T14:06:32.174Z]	<jsobell>	have anyone get chartist work in a ts environment
[2016-01-17T15:06:50.651Z]	<david-driscoll>	disposable be fairly simple just have an object class that implement the dispose method if -pron- talk something like use var a xyz that a little different in that case -pron- probably just want to make a utility method that take a factory something like use t extend factory t callback instance t void const instance factory
[2016-01-19T06:31:43.208Z]	<DanielRosenwasser>	that may be a spec bug could -pron- file an issue on -pron-
--------------------------------------------------------------------------------------------------
[2016-01-18T14:08:38.554Z]	<caperaven>	hey guy do anyone know if -pron- be possible to suppress certain typescript error
[2016-01-18T14:09:25.692Z]	<caperaven>	i get error when include javascript call in a typescrpt file where there be not file
[2016-01-18T14:09:55.648Z]	<caperaven>	i just want to ignore those error so that -pron- do show in vscode or gulp build script during compilation
[2016-01-18T19:21:56.852Z]	<felixfbecker>	i would always recommend to write -pron- own
[2016-01-19T06:28:21.774Z]	<kneuse>	i can not recall but what be the site where i can upload -pron- code to
[2016-01-19T06:28:31.104Z]	<DanielRosenwasser>	gist
[2016-01-19T06:28:32.167Z]	<DanielRosenwasser>	github
[2016-01-19T07:01:38.012Z]	<DanielRosenwasser>	so if mydecorator be a decorator factory then -pron- inner function should take a parameter and return that parameter
[2016-01-19T07:02:04.870Z]	<DanielRosenwasser>	basically -pron- depend what be -pron- try to accomplish
--------------------------------------------------------------------------------------------------
[2016-01-18T15:30:23.130Z]	<david-driscoll>	cast the object value to any value as any or any value
--------------------------------------------------------------------------------------------------
[2016-01-18T21:49:26.625Z]	<lucaswerkmeister>	hi everyone i have a question about the typescript spec specifically these two rule from the grammar modify modify these append to the ecmascript grammar summary rule for unaryexpression and declaration but those be both parameterize with yield unless i have the wrong spec what do that mean for the grammar be the parameter remove pass through
--------------------------------------------------------------------------------------------------
[2016-01-19T07:04:26.719Z]	<a8775>	hello where can i find the recommend list of jsdoc tags name and -pron- usage with typescript
--------------------------------------------------------------------------------------------------
[2016-01-19T07:24:02.698Z]	<kneuse>	i be try to learn how to use decorator for one and two i want to create a re usable angular js component that can be change through decorator
[2016-01-19T08:08:51.726Z]	<kneuse>	export var nameconfig name string classdecorator
[2016-01-19T08:09:08.779Z]	<kneuse>	i be struggle to understand makedecorator
[2016-01-19T08:27:24.735Z]	<kneuse>	what do -pron- mean to have t function
--------------------------------------------------------------------------------------------------
[2016-01-19T08:05:42.251Z]	<kneuse>	in a nutshell i would love to replicate routeconfig
--------------------------------------------------------------------------------------------------
[2016-01-19T08:58:55.394Z]	<kneuse>	after read -pron- finally click that i need to return a method to overload the constructor with -pron- own decorator
--------------------------------------------------------------------------------------------------
[2016-01-19T13:11:36.856Z]	<webstp>	hey folk -pron- have an issue use angular material with typescript i keep see can not find module angular material install via npm and typing be instal from what i can see
[2016-01-19T15:18:02.017Z]	<eilgin>	do anyone know where in the code be the part relate to the import handling
[2016-01-19T20:16:43.994Z]	<webstp>	bug at compile time
[2016-01-19T20:17:29.144Z]	<webstp>	-pron- actually look at use typescript with not
[2016-01-19T20:19:24.555Z]	<webstp>	i believe i have -pron- work now -pron- seem i can do import angular material but not import ngmaterial from angular material
[2016-01-19T20:19:33.464Z]	<webstp>	which seem odd
--------------------------------------------------------------------------------------------------
[2016-01-19T15:35:15.113Z]	<JKillian>	be the bug from the ts compiler at compile time or a runtime bug
[2016-01-19T17:37:24.798Z]	<LPGhatguy>	with amd -pron- not really sure browserify be a solution but -pron- commonjs not amd
--------------------------------------------------------------------------------------------------
[2016-01-19T18:47:52.285Z]	<masaeedu>	angular material be yet port completely to angular from what i recall
[2016-01-19T20:28:23.384Z]	<masaeedu>	have really use that try do import as ngmaterial from angular material and look at what the module contain
--------------------------------------------------------------------------------------------------
[2016-01-19T21:42:19.786Z]	<MarkPerryBV>	hi could someone tell -pron- what this typescript function definition do please onlyself boolean void
[2016-01-19T21:42:34.082Z]	<MarkPerryBV>	i be try to understand the function parameter signature
[2016-01-19T21:42:54.618Z]	<DanielRosenwasser>	-pron- take an object that may have a property name onlyself
[2016-01-19T21:43:12.286Z]	<MarkPerryBV>	do i use -pron- like this or true
[2016-01-19T21:43:20.356Z]	<DanielRosenwasser>	where if onlyself exist -pron- need to be a boolean
[2016-01-19T21:43:32.007Z]	<DanielRosenwasser>	the latter if -pron- correct the casing
[2016-01-19T21:43:50.830Z]	<DanielRosenwasser>	markasdirty onlyself true
[2016-01-19T21:44:35.801Z]	<MarkPerryBV>	the next line of the function be onlyself
[2016-01-19T21:45:07.967Z]	<MarkPerryBV>	which seem to turn -pron- into a bool instead of and object with a bool property
[2016-01-19T21:45:14.312Z]	<MarkPerryBV>	an
[2016-01-19T21:45:39.946Z]	<DanielRosenwasser>	no onlyself be the value of the property not the object -pron- pass in
[2016-01-19T21:46:20.467Z]	<DanielRosenwasser>	normalizebool probably just ensure that if the value be undefined or null -pron- end up as false
[2016-01-19T21:46:24.779Z]	<DanielRosenwasser>	though i may be wrong
[2016-01-19T21:46:31.379Z]	<MarkPerryBV>	yes that what -pron- do
[2016-01-19T21:47:04.637Z]	<DanielRosenwasser>
[2016-01-19T21:47:21.959Z]	<DanielRosenwasser>	i think this link  <user> help -pron- get a well intuition on destructure
[2016-01-19T21:47:58.066Z]	<MarkPerryBV>	ahh something i do not know about
[2016-01-19T21:48:02.181Z]	<MarkPerryBV>	thank -pron- v much
[2016-01-19T21:49:00.351Z]	<DanielRosenwasser>	no problem
[2016-01-19T21:49:01.021Z]	<DanielRosenwasser>
[2016-01-19T21:49:05.356Z]	<DanielRosenwasser>	that another really good one
[2016-01-19T22:16:21.740Z]	<wilgert>	so this be a way of avoid vague boolean argument as discuss here
[2016-01-19T22:55:55.026Z]	<lucaswerkmeister>	thank -pron- do
--------------------------------------------------------------------------------------------------
[2016-01-19T22:57:40.623Z]	<artaommahe>	hi can anybody help with this question
[2016-01-19T23:18:12.554Z]	<berwyn>	-pron- question seem related to
[2016-01-19T23:28:52.148Z]	<artaommahe>	yep -pron- seem same but i do not see solution for -pron- case there moduleresolution classic give same ts compiler error
[2016-01-19T23:30:03.374Z]	<berwyn>	yeah -pron- look like the angular team resort to do some crazy mapping stuff to get -pron- to work and -pron- probably have to do the inverse if -pron- do moduleresolution node
[2016-01-19T23:31:58.885Z]	<artaommahe>	this one look same i do not look at typescript issue -pron- bad
[2016-01-19T23:32:39.637Z]	<masaeedu>	could -pron- just do relative path there
[2016-01-19T23:32:56.561Z]	<masaeedu>	for the first error just prefix what -pron- already have with
[2016-01-19T23:34:21.044Z]	<artaommahe>	nope this break modularity i want to import any module class from anywhere jsut by import smth from smth moule or smth like this without depend on the relative position
[2016-01-19T23:34:54.113Z]	<berwyn>	relative path  <user> have the drawback of get really really verbose in any sort of compartmentalise folder structure
[2016-01-19T23:39:40.859Z]	<masaeedu>	well one thing -pron- could do be link -pron- own package as a node module and install -pron- as a dependency
[2016-01-19T23:39:54.787Z]	<masaeedu>	and then node resolution would work
[2016-01-19T23:40:03.550Z]	<artaommahe>	too expensive
[2016-01-19T23:40:06.442Z]	<masaeedu>	mypackage something something
[2016-01-19T23:40:26.925Z]	<masaeedu>	-pron- not sure what -pron- mean by too expensive
[2016-01-19T23:41:02.148Z]	<masaeedu>	at runtime -pron- stuff be resolve via systemjs none of this node stuff matter no
[2016-01-19T23:41:35.578Z]	<artaommahe>	all -pron- app consist of many module and -pron- not usefull create package from all of -pron-
[2016-01-19T23:41:49.900Z]	<masaeedu>	well -pron- would install each of -pron- as a module
[2016-01-19T23:41:57.279Z]	<masaeedu>	-pron- talk about -pron- entire app
[2016-01-19T23:42:00.318Z]	<masaeedu>	at the root level
[2016-01-19T23:42:25.815Z]	<artaommahe>	look like uglyhack
[2016-01-19T23:42:32.325Z]	<masaeedu>	so the folder that contain
[2016-01-19T23:42:34.726Z]	<masaeedu>	for sure -pron- be
[2016-01-19T23:42:43.773Z]	<artaommahe>	find big discussion about this case here
[2016-01-19T23:43:03.563Z]	<masaeedu>	yes there a number of people wait on that
[2016-01-19T23:44:16.149Z]	<artaommahe>	thx for chat
[2016-01-20T04:45:46.731Z]	<webstp>	try as -pron- suggest but still see compile error say module angular material can not be find
--------------------------------------------------------------------------------------------------
[2016-01-20T05:12:52.308Z]	<masaeedu>	do -pron- have -pron- instal via npm if so be there a tsconfig file adjacent to the folder in which the moduleresolution option be set to node
--------------------------------------------------------------------------------------------------
[2016-01-20T07:19:21.583Z]	<tuanquanghpvn>	hello everyone
[2016-01-20T07:20:07.193Z]	<tuanquanghpvn>	today i learn typescript and please help
[2016-01-20T07:20:57.154Z]	<tuanquanghpvn>	i do know the ide support for typescript
[2016-01-20T08:01:39.936Z]	<martindavid>	try visual studio code
[2016-01-20T08:02:04.331Z]	<martindavid>	-pron- just like sublime atom with a way well experience imho
[2016-01-20T08:02:13.622Z]	<tuanquanghpvn>	i use ubuntu linux smile
[2016-01-20T08:02:50.818Z]	<tuanquanghpvn>	thank -pron- so much
[2016-01-20T08:13:04.603Z]	<martindavid>	-pron- can use -pron- too in linux
--------------------------------------------------------------------------------------------------
[2016-01-20T09:21:20.496Z]	<squarepants>	hi everyone -pron- a typescript fan i want to ask if anyone get some article or keynote describe why typescript can help -pron- in large scale app
[2016-01-20T11:52:15.806Z]	<webstp>	yes instal via npm yes there be a tsconfig attempt that solution without success
[2016-01-20T13:22:47.714Z]	<Cu3PO42>	and i need to reexport -pron- from another file in a scope currently i use import as foo from export var foo foo i be wonder if there be a more elegant solution to this problem
[2016-01-20T13:23:46.497Z]	<Cu3PO42>	something along the line of export as foo from which do appear to work with ts
--------------------------------------------------------------------------------------------------
[2016-01-20T13:21:36.414Z]	<Cu3PO42>	hello there i have a file export a bunch of function export function foo export function bar
--------------------------------------------------------------------------------------------------
[2016-01-20T14:53:13.819Z]	<z-vr>	hello
[2016-01-20T14:53:24.492Z]	<z-vr>	how do i make js file compile with single quote
[2016-01-20T14:54:13.998Z]	<JKillian>	unfortunately there be no export as export -pron- unsure if -pron- in the es spec or not if -pron- be -pron- expect ts to add -pron- sometime if -pron- be then -pron- guess -pron- probably will
[2016-01-20T14:54:58.097Z]	<JKillian>	vr in typescript as in js -pron- can use single or double quote for string so -pron- should matter which one -pron- use
[2016-01-20T14:55:15.999Z]	<z-vr>	but i want -pron- to compile with single quote
[2016-01-20T14:55:28.993Z]	<4tron>	tsconfig
[2016-01-20T14:56:04.564Z]	<4tron>	compileroption not sure though never tweeke that
[2016-01-20T14:56:25.324Z]	<z-vr>	cool -pron- just have a look
[2016-01-20T14:56:39.261Z]	<z-vr>	do have anything with quote
[2016-01-20T14:56:39.371Z]	<JKillian>	ah sorry vr i read -pron- as -pron- code would compile if -pron- have single quote in -pron- -pron- bad
[2016-01-20T14:56:51.669Z]	<z-vr>	 <user>
[2016-01-20T14:58:53.025Z]	<JKillian>	-pron- never come across an option for emit single quote but -pron- an interesting question
[2016-01-20T14:59:21.596Z]	<z-vr>	i guess -pron- do really matter since the compile code be not suppose to be edit
[2016-01-20T15:00:31.480Z]	<4tron>	if -pron- exist -pron-  <user> be here
--------------------------------------------------------------------------------------------------
[2016-01-20T16:28:44.344Z]	<llacom>	hey guy any exemple of a project use node with typescript besides
[2016-01-20T16:29:01.619Z]	<llacom>	of big project
[2016-01-20T16:42:42.572Z]	<malekpour>	any idea when pathmappe  <user> be merge into build
[2016-01-20T22:13:44.056Z]	<lorthirk>	quick question in what exactly be the system value for the module key
[2016-01-20T22:14:03.517Z]	<masaeedu>	-pron- the module format -pron- use
[2016-01-20T22:14:27.295Z]	<lorthirk>	yes i get -pron- but what module format be system
[2016-01-20T22:14:37.490Z]	<lorthirk>	do -pron- refer to module
[2016-01-20T22:16:19.281Z]	<masaeedu>	over time there be a number of module format for js for example node module typically use the commonjs format where -pron- use a require function to get -pron- dependency and an export variable to set -pron- export
[2016-01-20T22:16:25.202Z]	<masaeedu>	another format be amd
[2016-01-20T22:18:02.893Z]	<lorthirk>	yes this confirm what i research today on this very topic
[2016-01-20T22:18:03.127Z]	<masaeedu>	similarly system be simply one more alternative in which the module interact with a system global to register and import dependency
[2016-01-20T22:18:57.099Z]	<masaeedu>	which one -pron- pick depend on the environment -pron- want the generate js code to run in and whether there any further preprocessor that  <user> run on the code
[2016-01-20T22:19:53.221Z]	<lorthirk>	ok so let say -pron- use typescript with angular whose starter kit use systemjs should i use in tsconfig
[2016-01-20T22:21:27.294Z]	<masaeedu>	yes
[2016-01-20T22:22:36.942Z]	<lorthirk>	ok thank
[2016-01-21T07:55:37.165Z]	<tomenden>	hi i be use tslint and get the following issue import as content from constant import as router from constant export content router for some reason with no unused variable rule this return an error why be that be i miss something i want to use this module as a place to gather and export all of the constant
--------------------------------------------------------------------------------------------------
[2016-01-21T04:31:47.301Z]	<bigbassroller>	do anybody know why move typescript file out of the src folder in an project break import component from core by get a red squiggly under -pron-
[2016-01-21T04:33:43.842Z]	<bigbassroller>	example i be try to move the typing folder along with etc into a folder call typescript so that i can have -pron- code separate and clean
[2016-01-21T04:53:05.539Z]	<bigbassroller>	which be strange because -pron- compile fine so maybe -pron- an issue with -pron- sublime text editor
--------------------------------------------------------------------------------------------------
[2016-01-21T06:44:31.994Z]	<bigbassroller>	ok solve the problem by keep inside the app component folder
--------------------------------------------------------------------------------------------------
[2016-01-21T07:15:06.560Z]	<tuanquanghpvn>	anyone use typescript in nodejs expressjs
[2016-01-21T07:54:44.845Z]	<4tron>	yes
--------------------------------------------------------------------------------------------------
[2016-01-21T09:08:42.327Z]	<MarkPerryBV>	fetch datum for a component for use in the view template should be -pron- trigger from the constructor or from ngoninit
[2016-01-21T09:22:53.588Z]	<Chris2011>	i have this little code snippet class list t private static emptyarray t this work in maybe ts without any problem now i get this message error static member can not reference class type parameter what have change and how can i fix this
[2016-01-21T09:24:34.304Z]	<DanielRosenwasser>	do -pron- ever intend to mutate the array
[2016-01-21T09:28:05.991Z]	<DanielRosenwasser>	that sound like a bug maybe file -pron- on tslint
[2016-01-21T09:28:44.975Z]	<Chris2011>	what i want be to build the c collection in typescript and i think that this be a valid thing i have to reevalute -pron-
[2016-01-21T09:28:50.911Z]	<Chris2011>
[2016-01-21T09:43:19.553Z]	<Chris2011>	this be what i get when i inspect the mscorlib list t with ilspy t private static readonly t emptyarray new
[2016-01-21T09:45:54.036Z]	<DanielRosenwasser>	right -pron- just write ts private static emptyarray any
[2016-01-21T09:47:07.147Z]	<Chris2011>	ok and what have change i think t be valid maybe -pron- wrong or -pron- do work anymore
[2016-01-21T10:01:08.952Z]	<Chris2011>	or be be since the beginning the same
[2016-01-21T10:51:04.621Z]	<felixfbecker>	try array t
[2016-01-21T10:58:03.905Z]	<pellekrogholt>	hi i have jasmine test write in typescript along -pron- application and use the browserify tsify to handle ts compilation have browserify debug true plugin tsify noimplicitany true target module commonjs bundledelay transform transform ok i like to be able to do the same for protractor and have a simple test that use a user factory import user from use strict beforeeach let user new password login var submitelem in dashboard run protractor raise
[2016-01-21T10:58:07.188Z]	<pellekrogholt>	protractor use the selenium server at wd hub launcher run instance of webdriver launcher error syntaxerror unexpected reserved word at at at js at at at at require at web protractor jasmine lib at native at web protractor jasmine lib launcher process exit with error code
[2016-01-21T10:58:21.017Z]	<pellekrogholt>	any hint suggestion
[2016-01-21T11:05:03.465Z]	<Chris2011>	get the same error for private static emptyarray array t
--------------------------------------------------------------------------------------------------
[2016-01-21T11:10:47.410Z]	<impworks>	hey everyone i have a little question about typescript type inference consider the follow code class provider static geta ipromise a static getb ipromise b var promise the type for promise be deduce as ipromise b however no type can be infer for the x argument in then callback
[2016-01-21T11:12:13.940Z]	<impworks>	i think -pron- would be well if the type for promise be infer as promise
[2016-01-21T11:17:31.328Z]	<jsobell>	noob question re promise in ts i can code a promise string this way static string promise string return new promise resolve settimeout be there a way to specify the inner resolve as a lambda instead of a function i can seem to find a work syntax
[2016-01-21T11:19:14.204Z]	<jsobell>	oh that embarrase static string promise string return new promise settimeout
[2016-01-21T11:19:48.509Z]	<jsobell>	i wonder why i could get -pron- to work earlier be this the recommend way of define and return a promise
[2016-01-21T11:38:17.618Z]	<impworks>	i would usually go with just new promise reject since argument type can usually be infer from constructor signature
[2016-01-21T11:39:00.634Z]	<impworks>	then explicit type to the rescue
--------------------------------------------------------------------------------------------------
[2016-01-21T11:22:20.022Z]	<impworks>	-pron- could omit some curly brace and parenthesis to clean up -pron- syntax other than that everything look good to -pron-
[2016-01-21T11:23:38.555Z]	<jsobell>	ok thank for the feedback just try to get -pron- head around promise in ts so do want to start with bad practice
[2016-01-21T11:33:50.284Z]	<jsobell>	one last thing would -pron- typically specify the return in the promise like this static string promise string return new promise settimeout if value else param or be there a clean less verbose way of approach this
[2016-01-21T11:34:05.707Z]	<jsobell>	or do -pron- typically just not care
[2016-01-21T11:38:50.200Z]	<jsobell>	ok make sense thank
[2016-01-21T11:38:51.628Z]	<impworks>	unless -pron- cause some sort of ambiguity
[2016-01-21T11:39:29.336Z]	<jsobell>	do -pron- every return an error object in -pron- reject
--------------------------------------------------------------------------------------------------
[2016-01-21T11:36:11.219Z]	<jsobell>	mind -pron- -pron- appear -pron- editor detect anything not of type t and show a designer error perhaps -pron- be indeed overkill
--------------------------------------------------------------------------------------------------
[2016-01-21T11:43:45.937Z]	<z-vr>	hi how do i tell compiler to copy static file as well i have an image in the test folder which i want to be copy to be use in result js file as well
[2016-01-21T11:44:18.542Z]	<impworks>	i guess -pron- mostly depend on the library -pron- be use for promise but i be not a promise expert
[2016-01-21T11:45:06.285Z]	<impworks>	i use promise mostly with angular and the respective state just error arg any any so not really
[2016-01-21T11:46:02.812Z]	<impworks>	vr this be unrelated to typescript -pron- should instead look into gulp or grunt task runner
[2016-01-21T11:46:06.231Z]	<jsobell>	fair enough just a little bit of untypedness in a typy world
[2016-01-21T11:46:13.271Z]	<jsobell>	thank buddy
[2016-01-21T11:46:20.505Z]	<impworks>	-pron- welcome
[2016-01-21T11:47:14.779Z]	<z-vr>	how be -pron- unrelated if i compile stuff from src folder into build folder i want to preserve static file
[2016-01-21T11:47:29.425Z]	<z-vr>	nvm thank
[2016-01-21T11:49:21.036Z]	<impworks>	vr -pron- be only compile file all other file image html page css style etc must be process by another tool such as gulp build script
[2016-01-21T11:49:31.124Z]	<z-vr>	why must -pron-
[2016-01-21T11:49:55.776Z]	<jsobell>	vr because -pron- can compile an image with typescript
[2016-01-21T11:50:50.481Z]	<z-vr>	ok that make sense sorry -pron- just be stubborn because i do want to get start with gulp
[2016-01-21T11:50:53.606Z]	<jsobell>	vr the compiler have the option to specify the output folder but -pron- do do any copying or anything -pron- a compiler not a copy tool
[2016-01-21T11:51:04.755Z]	<4tron>	vr gulp be fun
[2016-01-21T11:51:15.941Z]	<z-vr>	php be fun too
[2016-01-21T11:51:20.172Z]	<jsobell>	gulp be gulp
[2016-01-21T11:51:49.752Z]	<4tron>	i normally use gulp for typescript compile that way -pron- be all in one place
[2016-01-21T11:52:24.559Z]	<4tron>	php fun really
[2016-01-21T11:52:24.869Z]	<z-vr>	so do -pron- guy recon typescript  <user> be support in ie natively in a couple of year time
[2016-01-21T11:52:28.025Z]	<jsobell>	-pron- too aurelia skeleton have a nice gulp build structure
[2016-01-21T11:53:02.375Z]	<jsobell>	vr ie no microsoft  <user> make -pron- incompatible but  <user> make -pron- work with that nobody else use
[2016-01-21T11:53:15.107Z]	<jsobell>	in theory yes
[2016-01-21T11:53:29.807Z]	<4tron>	what do -pron- mean nobody else use -pron-
[2016-01-21T11:53:43.167Z]	<impworks>	there a way to run file natively use a runtime compiler
[2016-01-21T11:53:56.191Z]	<impworks>	i see no reason why the same can not be do with typescript
[2016-01-21T11:54:02.706Z]	<jsobell>	joke microsoft always break everything that be a different standard or -pron- customise -pron-
[2016-01-21T11:54:39.928Z]	<impworks>	well -pron- use to do so some year ago but do a lot of open source and standard compliant stuff now
[2016-01-21T11:54:53.810Z]	<4tron>	microsoft be on the change well -pron- seem anyways big time there be no proper support for tfs in visual studio code that s microsoft crazy
[2016-01-21T11:54:55.041Z]	<jsobell>	yes well -pron- write typescript too
[2016-01-21T11:55:19.414Z]	<jsobell>	that because be platform independent
[2016-01-21T11:55:34.985Z]	<z-vr>	and -pron- write chakra which be pretty good
[2016-01-21T11:55:41.741Z]	<jsobell>	tfs be heavily tie to window tool such as
[2016-01-21T11:55:45.275Z]	<z-vr>	what be
[2016-01-21T11:55:52.074Z]	<4tron>	and there be the change -pron- pretty rad
[2016-01-21T11:55:59.768Z]	<jsobell>	vr i make -pron- up perhaps -pron-  <user> be ts
--------------------------------------------------------------------------------------------------
[2016-01-21T11:56:43.910Z]	<4tron>	vr -pron-  <user> write ajax
[2016-01-21T11:57:56.472Z]	<jsobell>	onve vnext be out -pron- can change yet again
[2016-01-21T11:58:11.609Z]	<jsobell>	servicestack
--------------------------------------------------------------------------------------------------
[2016-01-21T11:56:47.048Z]	<impworks>	on the contrary when i use mvc everything work out of the box and mvc require a lot of head bang before -pron- work that mostly because -pron- decide to support exist open web standard which be crazy
[2016-01-21T11:57:19.947Z]	<jsobell>	yes which be why -pron- use servicestack instead of
[2016-01-21T11:57:58.488Z]	<impworks>	look nice but a bit costy
[2016-01-21T11:58:32.703Z]	<impworks>	yep
--------------------------------------------------------------------------------------------------
[2016-01-21T11:57:41.156Z]	<jsobell>	-pron- do radically change with each minor version update
--------------------------------------------------------------------------------------------------
[2016-01-21T11:58:35.963Z]	<4tron>	asp mvc with kestrel run everywhere i think -pron- pretty forward think
[2016-01-21T11:59:17.684Z]	<jsobell>	not exactly expensive give that -pron- get about technology in the distro
[2016-01-21T11:59:24.334Z]	<jsobell>	not free though
[2016-01-21T11:59:40.463Z]	<Nefarion>	be as far as dnx init dnx console now
[2016-01-21T11:59:54.236Z]	<jsobell>	mind -pron- i only have to struggle with one minor upgrade of an app and -pron- blow many time the code of servicestack
[2016-01-21T12:00:11.834Z]	<4tron>	dnvm
[2016-01-21T12:00:55.056Z]	<jsobell>	yes which be great but have -pron- try load an spa with npm jspm as an project into
[2016-01-21T12:01:04.476Z]	<jsobell>	-pron- die very quickly
[2016-01-21T12:01:22.230Z]	<jsobell>	i struggle to try and get -pron- work for week
[2016-01-21T12:01:29.182Z]	<4tron>	really
[2016-01-21T12:01:42.418Z]	<jsobell>	the dev environment can cope with the file in the project tree
[2016-01-21T12:01:57.465Z]	<4tron>	ah the file
[2016-01-21T12:02:01.756Z]	<Nefarion>	yeah lag just hide the folder
[2016-01-21T12:02:02.044Z]	<jsobell>	-pron- have to use or create an project
[2016-01-21T12:02:21.613Z]	<jsobell>	i find that do fix -pron- -pron- simply visually hide -pron-
[2016-01-21T12:02:23.248Z]	<4tron>	yo generator aspnet
[2016-01-21T12:02:37.896Z]	<impworks>	-pron- try use with
[2016-01-21T12:02:49.074Z]	<jsobell>	nope not yet
[2016-01-21T12:03:00.497Z]	<impworks>	-pron- introduce two new package manager npm for build tool and bower for client libs
[2016-01-21T12:03:10.781Z]	<impworks>	oop be in npm
[2016-01-21T12:03:12.445Z]	<jsobell>	wow
[2016-01-21T12:03:14.585Z]	<Nefarion>	tbh i always have a server and a ui project and i only work on the server in
[2016-01-21T12:03:36.594Z]	<jsobell>	-pron- use webstorm for -pron- client stuff now
[2016-01-21T12:03:54.011Z]	<jsobell>	-pron- not wild on -pron- not impressed that -pron- adopt configuration over convention so completely
[2016-01-21T12:04:09.988Z]	<impworks>	-pron-  <user> need to install the third package manager tsd from npm to reference typescript definition
[2016-01-21T12:04:21.637Z]	<impworks>	oop the file for be empty
[2016-01-21T12:04:42.256Z]	<4tron>	-pron- move to react
[2016-01-21T12:04:43.697Z]	<impworks>	-pron- should rather look for proper definition deep inside the folder
[2016-01-21T12:04:44.922Z]	<jsobell>	unless -pron- add lot of nuget package for all -pron- dependency
[2016-01-21T12:05:33.458Z]	<jsobell>	-pron- still scan -pron- all the time
--------------------------------------------------------------------------------------------------
[2016-01-21T12:05:11.447Z]	<jsobell>	the file be one reason -pron- can hide the npm and jspm folder
[2016-01-21T12:05:33.730Z]	<ochrons>
[2016-01-21T12:05:46.914Z]	<ochrons>	maybe for d
[2016-01-21T12:06:07.962Z]	<4tron>	-pron- hard to keep up worried
[2016-01-21T12:06:12.475Z]	<jsobell>	maybe but -pron- not sure
[2016-01-21T12:06:17.963Z]	<jsobell>	perhaps aurelia
[2016-01-21T12:07:04.962Z]	<jsobell>	i believe rob eisenberg leave the team because of -pron- frustration with -pron- reluctance to make -pron- easy by use convention
[2016-01-21T12:07:24.223Z]	<jsobell>	even ms tool like mvc be heavily convention base
[2016-01-21T12:07:41.273Z]	<jsobell>	yet be completely configuration weird
--------------------------------------------------------------------------------------------------
[2016-01-21T12:05:21.287Z]	<jsobell>	the designer need -pron- for intellisense
--------------------------------------------------------------------------------------------------
[2016-01-21T12:08:24.947Z]	<chilversc>	rob have a good podcast that discuss that the stuff be heavily aim at tool apparently though as -pron- point out this be hypothetical tooling ide that do not exist
[2016-01-21T12:08:39.078Z]	<jsobell>	ok
[2016-01-21T12:08:51.884Z]	<4tron>	do -pron- have a link
[2016-01-21T12:09:30.243Z]	<chilversc>	hearde code ep rob eisenberg on aurelia
[2016-01-21T12:09:33.035Z]	<jsobell>	i think aurelia be a huge step in the right direction i just hope -pron- have the support and momentum to create a huge support set of component and champion to keep -pron- go
[2016-01-21T12:09:39.172Z]	<4tron>	thank
[2016-01-21T12:11:11.017Z]	<jsobell>	i wonder if someone  <user> write a transcoder for angular to make -pron- easy to use convention base dev
[2016-01-21T12:14:57.304Z]	<impworks>	oh btw maybe anyone know
[2016-01-21T12:15:28.691Z]	<impworks>	if i use the typescript compiler that be build into visual studio -pron- show error in the error tab and stop the build
[2016-01-21T12:15:59.757Z]	<impworks>	but if i use a gulp task press when -pron- have error start the app with unbuilt file
[2016-01-21T12:16:21.632Z]	<impworks>	any way to work this around
[2016-01-21T12:16:23.907Z]	<jsobell>	i think that a tsconfig option
[2016-01-21T12:16:49.932Z]	<jsobell>	noemitonerror
[2016-01-21T12:17:38.910Z]	<impworks>	-pron-  <user> not stop visual studio from start a debug session though  <user> -pron-
[2016-01-21T12:17:59.026Z]	<chilversc>	what i want be well clean of old artefact when use vs eg if i delete  <user> remove and
[2016-01-21T12:18:33.527Z]	<jsobell>	-pron- not sure
[2016-01-21T12:18:39.582Z]	<impworks>	-pron- afraid there no way of know that if -pron- use a task runner
[2016-01-21T12:19:09.399Z]	<impworks>	-pron- can define a special cleanup task and manually run -pron- though
[2016-01-21T12:19:26.054Z]	<felixfbecker>	if -pron- want that change -pron- build task to first delete build file
[2016-01-21T12:19:38.484Z]	<Nefarion>	name be the glob
[2016-01-21T12:19:45.348Z]	<Nefarion>	i think
[2016-01-21T12:20:19.101Z]	<chilversc>	i hack something together in msbuild that look at generatedjavascript and compare that with the javascript output folder this assume -pron- do not have any js file that do not come from typescript
[2016-01-21T12:20:36.411Z]	<chilversc>	so that i could keep the incremental building of only thing that have change
[2016-01-21T12:25:59.018Z]	<chilversc>	-pron- not yet move over to build typescript use a task runner or as i can work out how to make -pron- play nice with and intellisense
[2016-01-21T12:26:40.223Z]	<impworks>	this give -pron- a headache too especially since resharper do not yet support a lot of ts feature
[2016-01-21T12:27:06.302Z]	<impworks>	navigation do not work with import x from lib
[2016-01-21T12:27:51.359Z]	<impworks>	the lib path must  <user> be different for intellisense to work and the app -pron- to work
[2016-01-21T12:28:36.620Z]	<chilversc>	though this be -pron- clean up task though careful -pron-  <user> delete any javascript file in the typescript output directory that be generate by typescript
--------------------------------------------------------------------------------------------------
[2016-01-21T12:29:30.535Z]	<Souldrinker>	i think the late resharper support pretty much everything and on the x in -pron- example work fine have find anything that do work with resharper in and ts as long as -pron- set typescript version to rather than auto in r setting
[2016-01-21T12:30:19.933Z]	<Souldrinker>	on import and everything else work just fine or do -pron- mean with tsconfig and stuff because -pron- still use a  <user> project
[2016-01-21T12:30:55.457Z]	<Souldrinker>	regard the cleaning of old js map file i have set up a gulp task that clean all of those which i use to run before deploy
[2016-01-21T12:34:07.105Z]	<impworks>	i have the follow code import component from core export class myclass when i click on the part above the class -pron- navigate -pron- to the import line and that about -pron- do show the actual definition of the attribute
[2016-01-21T12:34:09.039Z]	<chilversc>	for deployment i have a full cleanse anything that be in source control go and no unmodified file
[2016-01-21T12:37:10.988Z]	<Souldrinker>	ok -pron- be om and sure when i on something like in -pron- example i get to the import line but if i then on the component within the bracket i get to the implementation of that
[2016-01-21T12:40:00.446Z]	<impworks>	well maybe -pron- fix -pron- good to know
[2016-01-21T12:40:15.530Z]	<impworks>	i would rather -pron- skip te intermediate navigation step though
--------------------------------------------------------------------------------------------------
[2016-01-21T12:34:52.178Z]	<robinchesterman>	kind of a broad question but what happen when -pron- extend a typescript class and both the base class and the new one have a decorator  <user> the first one be overridden
[2016-01-21T12:35:09.513Z]	<impworks>	use r though
[2016-01-21T12:37:58.224Z]	<Souldrinker>	-pron- use aurelia and not angular so i have try on that specific library but -pron- seem to work here both for aurelia stuff in the jspm folder and local code within -pron- project well actually i only get to the part for the aurelia libs not the implementation -pron-
[2016-01-21T12:41:02.243Z]	<Souldrinker>	yes i agree with that of the time -pron- want to get to the implementation or at least the definition file and not to the import line
[2016-01-21T13:14:10.523Z]	<felixfbecker>	that  <user> do not work when -pron- do import as
[2016-01-21T13:22:47.036Z]	<Chris2011>	yeah i no but as i know -pron- work long time ago
[2016-01-21T13:25:49.512Z]	<Chris2011>	and yeah maybe i have to refactor -pron- whole code but for -pron- -pron- be a bug as -pron- can see -pron- there be a real world case in the c code
--------------------------------------------------------------------------------------------------
[2016-01-21T13:21:00.480Z]	<Chris2011>	do anyone know why this have change private static emptyarray t now i have to use private static emptyarray any i have to change -pron- code for this be there any reason or a break change where i can find information about -pron-
[2016-01-21T13:21:29.694Z]	<impworks>	be -pron- locate inside a class someclass t
[2016-01-21T13:22:00.575Z]	<Chris2011>	yes -pron- be locate here class list t private static emptyarray t
[2016-01-21T13:22:29.884Z]	<Chris2011>
[2016-01-21T13:22:33.327Z]	<impworks>	static member can not reference type parameter
[2016-01-21T13:23:03.788Z]	<impworks>	look like -pron- be a bug which be fix
[2016-01-21T13:23:55.071Z]	<Chris2011>	as i say i want to bring the c collection to ts and this be a part of the code from the list t t private static readonly t emptyarray new
[2016-01-21T13:23:59.176Z]	<Chris2011>	this be c code
[2016-01-21T13:24:14.660Z]	<impworks>	if -pron- be public -pron- can not reference -pron- with list
[2016-01-21T13:24:34.350Z]	<impworks>	-pron- can use only which lack the generic argument
[2016-01-21T13:25:02.697Z]	<Chris2011>	no -pron- be not public -pron- be the same code without readonly and new as in c
[2016-01-21T13:25:52.422Z]	<chilversc>	why do -pron- even need emptyarray i can see any real use for -pron- and -pron- dangerous if one be careful
[2016-01-21T13:26:57.108Z]	<Chris2011>	-pron- can reverse engineer the mscorlib code with ilspy and -pron- can see the same code there
[2016-01-21T13:27:21.639Z]	<Chris2011>	all what i want be to rebuild the c collection to ts only for learn ts
[2016-01-21T13:27:36.771Z]	<impworks>	there be a difference between c and ts in this
[2016-01-21T13:27:43.732Z]	<chilversc>	but array in be a fix size so an array of be effectivly immutable
[2016-01-21T13:27:45.851Z]	<impworks>	c call static ctor for each set of type argument
[2016-01-21T13:27:58.177Z]	<chilversc>	but in js -pron- can do and -pron- all go wrong
[2016-01-21T13:28:17.051Z]	<impworks>	void main new mylist int new mylist bool class mylist t static mylist
[2016-01-21T13:28:32.460Z]	<impworks>	here -pron-  <user> have two output
[2016-01-21T13:28:49.106Z]	<impworks>	but in ts static ctor and initialization run only once per class
[2016-01-21T13:29:08.162Z]	<impworks>	because there be no clr to manage type load
[2016-01-21T13:29:48.447Z]	<Chris2011>	but the list class do have a static ctor
[2016-01-21T13:30:07.812Z]	<impworks>	-pron- have a static initialization which be basically a syntax sugar for static ctor
[2016-01-21T13:30:12.238Z]	<Chris2011>	but ok now i understand the point what -pron- mean
[2016-01-21T13:30:57.685Z]	<Chris2011>	thx for the help and the understanding behind the concept
[2016-01-21T13:33:28.974Z]	<Chris2011>	so if i understand -pron- right the compiler  <user> do this class list t private static t emptyarray static list emptyarray
[2016-01-21T13:34:09.346Z]	<Chris2011>	yeah of course like i can use t instance of too
[2016-01-21T13:34:52.381Z]	<Chris2011>	the problem with the version or so be that the ts code still compile if -pron- have a new list string and -pron- try to do an
[2016-01-21T13:35:04.616Z]	<Chris2011>	but now -pron- have such flag that the code  <user> not compile right
[2016-01-21T13:35:22.116Z]	<Chris2011>	that be a problem that i have to give the type to the ctor to check the type
[2016-01-21T13:36:26.847Z]	<Chris2011>	so the first code be c and not ts right
--------------------------------------------------------------------------------------------------
[2016-01-21T13:23:04.685Z]	<felixfbecker>	why would -pron- list have static array
--------------------------------------------------------------------------------------------------
[2016-01-21T13:25:22.166Z]	<Chris2011>	that work long time ago -pron- last version be i know that -pron- be now at or so
--------------------------------------------------------------------------------------------------
[2016-01-21T13:29:19.034Z]	<chilversc>	-pron- guess list t be use empty array as an optimisation if -pron- ever ask for a list of size but in js that could be outright dangerous due to array have mutable length
[2016-01-21T13:30:26.987Z]	<impworks>	true dat
--------------------------------------------------------------------------------------------------
[2016-01-21T13:32:23.403Z]	<chilversc>	when translate the code -pron- have to change some concept to make -pron- more javascripty such as array be mutable which mean -pron- will need any array resize copy code
[2016-01-21T13:39:49.548Z]	<chilversc>	any type definition for api check
--------------------------------------------------------------------------------------------------
[2016-01-21T13:33:08.553Z]	<chilversc>	-pron-  <user> would need any code to shuffle thing around since slice etc already do that so list t in typescript be really just a wrapper that rename some of the array method
--------------------------------------------------------------------------------------------------
[2016-01-21T13:35:46.033Z]	<chilversc>	more like class list t private static t emptyarray static list emptyarray which in js may be function list
--------------------------------------------------------------------------------------------------
[2016-01-21T13:37:10.788Z]	<chilversc>	-pron-  <user> worth note that in js create an array contain the a single element with the value not an empty array so -pron- the c equivalent to int x
--------------------------------------------------------------------------------------------------
[2016-01-21T13:40:35.516Z]	<Chris2011>	thx for the explanation
--------------------------------------------------------------------------------------------------
[2016-01-21T13:48:00.692Z]	<impworks>	be -pron- safe to suppose that t b be equivalent to t
[2016-01-21T14:54:33.825Z]	<chilversc>	bah i can combine global and declare module in the same file when use module
[2016-01-21T14:56:32.898Z]	<chilversc>	oh -pron- the import statement in the -pron- do like
[2016-01-21T14:58:29.572Z]	<chilversc>	so if -pron- declare an module use declare module api check can i then refer to the interface in that file without use an import statement
[2016-01-21T15:01:51.823Z]	<impworks>	i just have to set proto on a typescript object d
[2016-01-21T15:02:48.043Z]	<chilversc>	why and do that have a performance hit
[2016-01-21T15:03:03.602Z]	<impworks>	i receive dto from the network and neet to turn -pron- back into proper model class
[2016-01-21T15:04:05.289Z]	<impworks>	there a proper way with dto be interface and model class contain a constructor
[2016-01-21T15:04:25.343Z]	<impworks>	but -pron- be hell to maintain when there be over model class
[2016-01-21T15:05:07.876Z]	<impworks>	maybe anyone have a well solution
--------------------------------------------------------------------------------------------------
[2016-01-21T15:12:33.921Z]	<chilversc>	yeah i be think of something like auto mapper for javascript something similar to
[2016-01-21T15:13:01.880Z]	<chilversc>	so -pron- can specify -pron- object shape and transform -pron- need for thing like date etc
[2016-01-21T15:14:36.653Z]	<impworks>	-pron- get a bit ugly if the dto have an array of nested dtos
[2016-01-21T15:15:31.328Z]	<impworks>	there no way to infer expect type for the array element so -pron- need to grease -pron- with configuration
[2016-01-21T15:15:47.968Z]	<chilversc>	that why i be think shape so -pron- may have name string target
--------------------------------------------------------------------------------------------------
[2016-01-21T15:16:10.920Z]	<bartzy>	hi
[2016-01-21T15:16:13.051Z]	<chilversc>	ideally one would be able to generate that straight from the typescript interface
[2016-01-21T15:16:21.671Z]	<bartzy>	how should i use interface if i want to put -pron- in -pron- own file
[2016-01-21T15:16:35.182Z]	<bartzy>	can i just import -pron- like i do regular external module
[2016-01-21T15:17:04.955Z]	<impworks>	use reference
[2016-01-21T15:17:19.831Z]	<bartzy>	i should import or export -pron-
[2016-01-21T15:17:44.655Z]	<impworks>	interface do not emit any code afaik -pron- be only for compiler
[2016-01-21T15:18:18.468Z]	<bartzy>	so what be the code here
[2016-01-21T15:18:25.875Z]	<bartzy>	export interface stream
[2016-01-21T15:18:40.143Z]	<chilversc>	right -pron- would be part of the build process -pron- would rely upon have compiler as a service so the build can pull out all the interface and spit out the map before the typescript build
[2016-01-21T15:21:18.897Z]	<bartzy>
[2016-01-21T15:22:25.689Z]	<chilversc>	i can seem to extend an exist interface in a different module import apicheck from api check declare module angularformly interface itypeoption apicheck check apicheck any -pron- guess be because of the import statement typescript decide that be an module
[2016-01-21T15:23:23.225Z]	<chilversc>	be there any way to do this short of just edit the angular formly definition file directly
[2016-01-21T15:23:44.689Z]	<impworks>	i may be wrong here i prefer to not use module and import syntax -pron-
[2016-01-21T15:24:18.544Z]	<impworks>	not possible
[2016-01-21T15:25:13.121Z]	<impworks>	-pron- be happy if anyone prove -pron- wrong though
[2016-01-21T15:25:24.818Z]	<chilversc>	the other definition be an interface not a class so -pron- should be extendable
[2016-01-21T15:26:09.247Z]	<impworks>	i come across this link look for typescript partial interface on google and find nothing relevant
[2016-01-21T15:27:39.711Z]	<impworks>	maybe this
[2016-01-21T15:33:29.955Z]	<chilversc>	i think -pron- run in to problem here the first be the interface already have member with the name i want to change so -pron- end up in a duplicate identifier
[2016-01-21T15:33:51.163Z]	<chilversc>	the second problem be the type i want to use be define in an module but the moment i add an import statement the whole file become an module
[2016-01-21T15:36:11.766Z]	<chilversc>	so -pron- not sure how -pron- reference an module in a definition file when the file use the standard pattern of declare module foo export interface bar name stre declare module foo export foo
[2016-01-21T15:37:20.713Z]	<chilversc>	the moment i add an import apicheck from api check to the definition file the ambient foo module become unavailable so there seem to be no way to reference type interface in an definition file
[2016-01-21T15:38:30.176Z]	<impworks>	no idea sorry
[2016-01-21T15:39:46.989Z]	<chilversc>	-pron- think in definition file -pron- have to always declare both a ghost module use the old declare module foo syntax -pron- can make only definition file yet
[2016-01-21T15:48:10.829Z]	<bartzy>	can anyone help -pron- perhaps with -pron- interface issue
[2016-01-21T17:19:20.652Z]	<chilversc>	one annoyance with module be -pron- as compact i do like the compactness of
[2016-01-21T17:23:37.021Z]	<chilversc>	-pron- depend on which module format -pron- use and how -pron- declare the interface
[2016-01-21T17:24:35.657Z]	<chilversc>	if -pron- use export interface foo then -pron- can just import the file as normal eg import as helper from var x foo
[2016-01-21T17:25:09.855Z]	<chilversc>	if -pron- use declare module ng interface foo then -pron- can just reference -pron- as var x
--------------------------------------------------------------------------------------------------
[2016-01-21T18:16:13.767Z]	<creat-or>	hey guy can anyone explain what happen in this line url string private websocketctor string websocket websocket
[2016-01-21T18:17:03.115Z]	<creat-or>	i mean the parameter have see this before
[2016-01-21T18:47:25.869Z]	<bartzy>	thank
[2016-01-21T18:47:42.634Z]	<bartzy>	i put each interface in -pron- own file i hope that a common practice
[2016-01-21T18:47:53.268Z]	<bartzy>	i have another question can i import a directory when that directory have a file
[2016-01-21T18:48:05.469Z]	<bartzy>	for example i have a geometry directory with and more i want to import -pron- all with something like import from
[2016-01-21T19:48:20.613Z]	<bartzy>
[2016-01-21T20:01:14.064Z]	<SetTrend>	i have this question which bother -pron-
[2016-01-21T20:03:28.479Z]	<SetTrend>	when -pron- reference a module file i can import -pron- export separately use import from file but after have do a transpilation into a and a file i can only perform a and perform a full identifier import
[2016-01-21T20:03:50.216Z]	<SetTrend>	be i wrong with -pron- assumption
[2016-01-21T20:08:16.112Z]	<SetTrend>	background -pron- ask because i do want to share -pron- source but only the transpiled and uglify result should -pron- behave the same
[2016-01-21T20:47:28.308Z]	<masaeedu>	-pron- should still be able to do import blah blah from blah if there be a file
[2016-01-21T20:48:08.487Z]	<masaeedu>	-pron- probably transpile to a different folder structure which mean -pron- import have stop work
[2016-01-21T20:48:43.110Z]	<SetTrend>	thank what be the use for then or be -pron- redundant
[2016-01-21T20:49:27.166Z]	<masaeedu>	the be use to refer to module that do correspond to any runtime artifact
[2016-01-21T20:49:54.018Z]	<masaeedu>	if -pron- make a that just declare some interface for stuff that -pron- do need to import
[2016-01-21T20:50:03.059Z]	<masaeedu>	like browser polyfill
[2016-01-21T20:52:17.507Z]	<masaeedu>	then -pron- do because the stuff -pron- import be compile time declaration only there no underlie js implementation that need to be import otherwise if -pron- use import -pron- end up with a require call for a non existent module in -pron- js code or whatever the amd systemjs equivalent be depend on -pron- module type
[2016-01-21T20:53:09.554Z]	<masaeedu>	hopefully that clear -pron- kind of do a bad job explain -pron- smile
[2016-01-21T20:53:37.065Z]	<SetTrend>	no no -pron- be perfectly explain i see er so -pron- either one or the other but not both of -pron- would -pron- be an error try to import a
[2016-01-21T20:53:49.519Z]	<masaeedu>	let say i make the follow file
[2016-01-21T20:54:03.716Z]	<masaeedu>
[2016-01-21T20:55:12.504Z]	<masaeedu>	interface array t map arg t r r
[2016-01-21T20:55:41.706Z]	<masaeedu>	now this be already in but let say this be a few year ago where this be a standard feature in all browser
[2016-01-21T20:55:59.453Z]	<masaeedu>	-pron- specify that -pron- monkey patch array to have this map function
[2016-01-21T20:56:39.810Z]	<masaeedu>	so now if -pron- try do import polyfill that would be fine but the problem be that there no actual file
[2016-01-21T20:56:47.353Z]	<masaeedu>	there no js -pron- need import
[2016-01-21T20:57:08.449Z]	<SetTrend>	right
[2016-01-21T20:57:13.394Z]	<masaeedu>	-pron- just need the compiler to be aware of the content of the file
[2016-01-21T20:57:18.508Z]	<masaeedu>	so -pron- use
[2016-01-21T20:58:27.270Z]	<SetTrend>	ok i see so if i get -pron- right i must know the content of to be able to decide whether to use import or
[2016-01-21T20:58:53.178Z]	<masaeedu>	if -pron- have a and a -pron- use import so that the generate javascript  <user> pull in
[2016-01-21T20:59:08.415Z]	<SetTrend>
[2016-01-21T20:59:17.599Z]	<SetTrend>	aha
[2016-01-21T20:59:21.110Z]	<masaeedu>
[2016-01-21T21:00:16.140Z]	<SetTrend>	so the key to decide whether to use import or be the existence of a file so to speak
[2016-01-21T21:01:26.507Z]	<masaeedu>	yes kind of
[2016-01-21T21:01:40.061Z]	<masaeedu>	the key be to know whether there any actual implemnetation code -pron- load
[2016-01-21T21:02:00.528Z]	<masaeedu>	or if -pron- just declaration and interface that disappear when -pron- get to js
[2016-01-21T21:02:21.817Z]	<SetTrend>	so i need to know the content of the file right if the generate code change i may be require to update -pron- reference
[2016-01-21T21:02:45.184Z]	<masaeedu>	could -pron- elaborate on that
[2016-01-21T21:03:57.371Z]	<SetTrend>	-pron- wonder what if -pron- file contain load of interface but i do want to import all the identifier to -pron- client code if i get -pron- right -pron- need a here but that would import all the identifier to -pron- code would -pron-
[2016-01-21T21:04:17.371Z]	<masaeedu>	yeah
[2016-01-21T21:04:23.929Z]	<masaeedu>	but if -pron- generate a js file as well
[2016-01-21T21:04:33.762Z]	<masaeedu>	then -pron- can do the individual import
[2016-01-21T21:04:49.354Z]	<SetTrend>	an empty file right
[2016-01-21T21:04:54.585Z]	<masaeedu>	yeah exactly
--------------------------------------------------------------------------------------------------
[2016-01-21T21:05:28.584Z]	<SetTrend>	thank a bunch -pron- have be clarify this greatly
[2016-01-21T21:06:46.653Z]	<SetTrend>	now i understand how -pron- work yet -pron- kind of well baffle about the fact that i still need the -pron-  <user> use an import statement -pron- seem do twice to -pron-
[2016-01-21T21:07:10.991Z]	<masaeedu>	well -pron- do need both
[2016-01-21T21:07:20.290Z]	<masaeedu>	if -pron- do an import -pron- should need the
[2016-01-21T21:08:52.245Z]	<SetTrend>	ah i see that clarify a lot
[2016-01-21T21:09:03.903Z]	<SetTrend>	-pron- know -pron- still work on this issue
[2016-01-21T21:10:01.573Z]	<masaeedu>	export interface foo import foo from function thisisatest
[2016-01-21T21:10:26.026Z]	<masaeedu>	compileroption module commonjs target noimplicitany false sourcemap false outdir dist exclude
[2016-01-21T21:10:33.605Z]	<masaeedu>	put in those three file in a folder
[2016-01-21T21:11:58.344Z]	<masaeedu>	-pron- try clone that
[2016-01-21T21:12:13.199Z]	<SetTrend>	-pron- look like this be reference the i wonder what be the case when this be use ts import foo from dist interface
--------------------------------------------------------------------------------------------------
[2016-01-21T21:09:55.024Z]	<masaeedu>	a demo worth a thousand word so maybe this  <user> help solidify the idea
[2016-01-21T21:10:44.477Z]	<masaeedu>	in the dist folder
--------------------------------------------------------------------------------------------------
[2016-01-21T21:10:39.299Z]	<masaeedu>	then run tsc and look at what come out
--------------------------------------------------------------------------------------------------
[2016-01-21T21:12:41.683Z]	<masaeedu>	well -pron- can change into a
[2016-01-21T21:12:46.488Z]	<masaeedu>	then see what happen
[2016-01-21T21:13:33.631Z]	<SetTrend>	thanks -pron- do that -pron- be a great help  <user> clap
--------------------------------------------------------------------------------------------------
[2016-01-21T21:13:54.369Z]	<dc0d>	hi everybody be there a well maintain up to date typescript definition file for pouchdb
[2016-01-21T21:14:01.073Z]	<SetTrend>	if -pron- get more question -pron- return cheer
[2016-01-21T21:20:27.153Z]	<masaeedu>	regard -pron- repo the issue seem to be that -pron- reference path be incorrect
[2016-01-21T21:20:42.437Z]	<masaeedu>
[2016-01-21T21:21:11.279Z]	<masaeedu>	-pron- should be reference header instead of reference header all
[2016-01-21T21:21:43.586Z]	<masaeedu>	once i do that -pron- import of -pron- internal module start work
--------------------------------------------------------------------------------------------------
[2016-01-22T12:44:14.142Z]	<team-BRS>	hello
[2016-01-22T12:45:20.918Z]	<team-BRS>	can i change -pron- nick here like i do in irc
[2016-01-22T12:54:34.783Z]	<team-BRS>	what the hell be the point of typescrpt if all -pron- do be compile down into javascript why not just code use js
[2016-01-22T13:19:25.921Z]	<wholroyd>	everything compile to something else whether -pron- machine code assembly byte code etc so why not just code use one of those
[2016-01-22T13:52:40.769Z]	<wholroyd>	every language aim to solve a problem typescript provide structure that people be familiar with in other language and attempt to remove some of the issue that be inherent with js
[2016-01-22T15:47:56.318Z]	<arnodenuijl>
[2016-01-22T16:15:58.715Z]	<tejacques>	what do -pron- mean re evaluate on every module load
[2016-01-22T16:19:19.457Z]	<tejacques>	so import -pron- in two different place give the same instance
[2016-01-22T16:19:31.466Z]	<tejacques>	and change -pron- in one place  <user> change -pron- globally
[2016-01-22T16:24:39.073Z]	<dc0d>	thank
[2016-01-22T16:26:25.689Z]	<tejacques>	be this run on node or in browser or both
[2016-01-22T16:27:53.795Z]	<tejacques>	-pron- guess -pron- output commonjs from typescript compiler be that the case
--------------------------------------------------------------------------------------------------
[2016-01-22T14:44:43.705Z]	<dc0d>	ho can i define global variable in typescript
[2016-01-22T14:46:06.495Z]	<dc0d>	i want -pron- to just sit there as long as the page app spa be run not get re evaluate on every module load
--------------------------------------------------------------------------------------------------
[2016-01-22T14:47:12.714Z]	<jcimoch>	brs let assume that typescript will compile to js then -pron- would have own interpreter all browser would have to implement -pron- and support -pron- and -pron- would have to force all the people around the world to update to those web browser not say about how much compatibility with all exist library -pron- would loose so not compile to js -pron- a waste of time not the other way round maybe someday there  <user> be new language thank to web assembly or similar project but for now if anybody want to somehow enhance js -pron- have to compile down to js and what be great about typescript in -pron- opinion be that -pron- do try to change js to something else because js be a good language that a lot of people misunderstand what typescript do be enhance -pron- with type and do force -pron- to use -pron- everywhere
[2016-01-22T16:17:31.428Z]	<tejacques>	-pron- can just have a module like this export var globalvariable foo bar import globalvariable from use globalvariable as -pron- would any var object
[2016-01-22T16:19:04.312Z]	<tejacques>	any time -pron- import that module -pron- be re evaluate -pron- -pron- use the same single initial valuation
--------------------------------------------------------------------------------------------------
[2016-01-22T16:24:36.435Z]	<dc0d>	i do not learnt typescript in depth yet despite -pron- love for typescript vs javascript and -pron- use angular to make thing more scrumble up i need a global var to keep an instance of a pouchdb object but the generate code be use this system thing which -pron- unfamiliar with -pron- do exactly what -pron- say but sometimes -pron- do not behave as i want accord to what -pron- say i assume something be wrong with -pron- code somewhere -pron- around loc now
[2016-01-22T16:42:32.420Z]	<dc0d>	in browser but in a way that i hope could be use in a phonegap or electron base app later but currently just browser
--------------------------------------------------------------------------------------------------
[2016-01-22T16:51:05.661Z]	<tejacques>	by system thing do -pron- mean -pron- get like stuff show up instead of require
[2016-01-22T16:54:48.697Z]	<tejacques>	-pron- not too sure what -pron- build process be
[2016-01-22T16:55:37.087Z]	<tejacques>	but typically what i do be use webpack and use a typescript loader to produce a single output bundle
[2016-01-22T17:03:00.171Z]	<tejacques>	-pron- can do the same with pretty easily
--------------------------------------------------------------------------------------------------
[2016-01-22T17:27:24.104Z]	<dc0d>	yes -pron- and the like but -pron- work now -pron- be -pron- fault so far some meddling with that var before after login logout
--------------------------------------------------------------------------------------------------
[2016-01-22T20:37:35.849Z]	<joelday>	hooray
--------------------------------------------------------------------------------------------------
[2016-01-22T22:37:23.176Z]	<dbartholomae>	hi there just get start with typescript angular und browserify
[2016-01-22T22:37:59.775Z]	<dbartholomae>	be there a way to define declare function string any once and use -pron- in all file without additional importing
[2016-01-22T22:50:29.494Z]	<seanzer>	if -pron- referenced in -pron- -pron- should be recognize by tsc
[2016-01-22T22:59:43.134Z]	<dbartholomae>	currently i have exclude -pron- tsconfig file should that work
[2016-01-22T23:12:53.071Z]	<Nefarion>	if i have a bunch of internal module and i want to expose -pron- so i can use -pron- like import blub from mylib how would i have to do that
[2016-01-23T02:49:17.820Z]	<xstof>	so have the typing be embed in the npm package
[2016-01-23T02:50:16.037Z]	<xstof>	-pron- aware of the typing field but i do succeed in light up -pron- module so those get pick up
[2016-01-23T02:50:42.446Z]	<xstof>	-pron- like to distribute compatible js typing info for module
[2016-01-23T02:51:14.940Z]	<xstof>	vs code
[2016-01-23T02:54:16.266Z]	<xstof>	i read up on the evil of ambient declaration etc so i think i have some of the basic piece just can stitch the puzzle quite yet a work example would be great to look at file structure
[2016-01-23T10:16:05.483Z]	<geyang>	hey guy -pron- get this compile type error when use a scroll event
[2016-01-23T10:16:12.069Z]	<geyang>	error property scrolltop do not exist on type eventtarget
[2016-01-23T10:16:24.239Z]	<geyang>	right now i just have
[2016-01-23T10:16:42.081Z]	<geyang>	typescript event code
[2016-01-23T10:16:50.816Z]	<geyang>	shall i use a different event type
--------------------------------------------------------------------------------------------------
[2016-01-23T02:47:59.337Z]	<xstof>	anyone have a good sample of how to use typescript to compile to a node module and package so that -pron- can be publish to npm and
[2016-01-23T02:48:49.814Z]	<xstof>	people can just require -pron- in -pron- node project from js code or use -pron- in -pron- ts project and get full intellisense light up
[2016-01-23T02:50:30.700Z]	<Nefarion>	may be -pron- ide
--------------------------------------------------------------------------------------------------
[2016-01-23T10:18:02.316Z]	<4tron>	maybe try e any just to narrow down  <user>
[2016-01-23T10:18:21.418Z]	<geyang>	let -pron- try that
[2016-01-23T10:18:44.520Z]	<geyang>	yeah -pron- remove the error
[2016-01-23T10:18:51.956Z]	<geyang>	i would like to use a more correct type though
[2016-01-23T10:19:04.987Z]	<geyang>	where do -pron- usually look this kind of thing up
[2016-01-23T10:19:14.184Z]	<geyang>	-pron- ide be not give helpful hint at this point
[2016-01-23T10:19:41.839Z]	<4tron>	not too sure -pron- would normally be the typing be -pron- use jquery
[2016-01-23T10:20:34.676Z]	<4tron>	e string
[2016-01-23T10:21:42.419Z]	<geyang>	-pron- use native
[2016-01-23T10:21:48.408Z]	<geyang>	okay just get to do this
[2016-01-23T10:21:57.734Z]	<geyang>	typescript onscroll e let target htmlelement if true else if true else false
[2016-01-23T10:22:01.664Z]	<jsobell>	well if -pron- look for scrolltop then e must be an htmlelement or something similar
[2016-01-23T10:22:36.625Z]	<geyang>	i think the event type eventtarget child should have that scrolltop property already
[2016-01-23T10:23:00.733Z]	<geyang>	or maybe the eventtarget be a parent class of htmlelement
[2016-01-23T10:23:35.285Z]	<geyang>	but this be weird in some sense because -pron- be cast eventtarget to htmlelement and magically the object be allow to have new property
[2016-01-23T10:23:56.029Z]	<geyang>	i guess this be not wierd because typescript rely on the programmer to tell the compiler what type the object be
[2016-01-23T10:24:39.086Z]	<jsobell>	why not do e or just set breakpoint
[2016-01-23T10:24:51.403Z]	<jsobell>	check the object type be pass in
[2016-01-23T10:25:07.415Z]	<4tron>	just curious can -pron- not be write like so e event
--------------------------------------------------------------------------------------------------
[2016-01-23T10:25:18.659Z]	<softwarejc>	hello all i be start a new asp  <user> core project should i put -pron- typescript file in wwwroot -pron- first idea be to put -pron- outside and set outdir but then i can not debug in chrome because -pron- ts file be not available
[2016-01-23T10:25:29.743Z]	<jsobell>	yes -pron- just specify the result be void
[2016-01-23T10:25:47.043Z]	<Nefarion>	put -pron- outside then mklink the directory inside that s what i do
[2016-01-23T10:26:09.295Z]	<jsobell>	i have -pron- in and i transpile -pron- to
[2016-01-23T10:26:14.617Z]	<4tron>	be -pron- well practice to specify i guess so so that the code be self document
[2016-01-23T10:27:01.570Z]	<softwarejc>	and both src and dist be in wwwroot right
[2016-01-23T10:27:09.093Z]	<jsobell>	-pron- infer the return type anyway but -pron- certainly do no harm  <user> if -pron- know the return type and specify -pron- -pron- give a compile time error if -pron- return something else
[2016-01-23T10:27:24.269Z]	<jsobell>	at dev time yes
[2016-01-23T10:27:48.514Z]	<jsobell>	at distribution time -pron- bundle the dist stuff up
[2016-01-23T10:28:08.235Z]	<softwarejc>	thank -pron-
[2016-01-23T10:28:19.540Z]	<jsobell>	no probs
[2016-01-23T12:06:12.176Z]	<geyang>	in case -pron- guy be curious here be the finished directive
[2016-01-23T12:06:15.242Z]	<geyang>	typescript create by ge on import directive input elementref hostbinde inject from core import document from platform browser attach scrollfixe to selector scrollfix export class scrollfix target scrolltarget string scrollthreshold number scrollbelow boolean true fix scrollfixe boolean el elementref private document htmldocument onscroll e let target if target be document target if true else if true else false getscrollelement selector if i return window else if return element else return element unbindscrollelement void bindscrollelement void let target target element target if target return void scroll listener void ngonchange void ngoninit ngondestroy
--------------------------------------------------------------------------------------------------
[2016-01-23T15:22:26.126Z]	<hpinsley>	do anyone know if -pron- can move the little toolbar that be display when -pron- be debug the little float toolbar which contain the pause start restart button annoy -pron- when i be edit text and -pron- like to move -pron- over to the right i can seem to coax -pron- to move
[2016-01-23T20:01:38.505Z]	<bartzy>	how can i handle a situtation where a class member can be either one type or another
[2016-01-23T20:02:03.786Z]	<bartzy>	i do -pron- with something like content backingstore htmlimageelement
[2016-01-23T20:02:52.665Z]	<bartzy>	and -pron- work but then if i try something like let temp instanceof backingstore -pron- do work
[2016-01-23T20:03:14.298Z]	<bartzy>	-pron- say the type backingstore htmlimageelement do have the property canvas cause an htmlimageelement do have -pron-
[2016-01-23T20:03:20.613Z]	<bartzy>	how can i cast
[2016-01-23T20:14:58.263Z]	<wilgert>
[2016-01-23T20:15:19.352Z]	<wilgert>	use typeof in stead of instanceof
[2016-01-23T23:27:56.098Z]	<felixfbecker>	i would say learn the basic of js first typescript be nothing but js type
[2016-01-23T23:34:34.369Z]	<felixfbecker>	that do not mean -pron- simple -pron- be more concept that may be confuse at first -pron- be easy to upgrade later ts show real benefit as -pron- application be grow so big -pron- can not oversee anymore if all -pron- function be colle with the correct type but for a beginner js be enough and may even be more flexible
[2016-01-24T00:40:44.725Z]	<z-vr>	hi be cast document anywhere i have typescript htmlanchorelement and -pron- be underline whereas if i do typescript htmlanchorelement as htmlanchorelement -pron- work perfectly fine and as be suggest as a keyword in vsc i try google typescript casting but do not find anything
[2016-01-24T09:28:47.927Z]	<falsandtru>	now faq link be break in
[2016-01-24T09:33:52.287Z]	<afirdousi>	i want to import lodash within a typescript file but lodash library do not have no type definition anyone know how to work around this -pron- typescript say something like this src services error can not find name be -pron- typescript service everything work great without lodash
[2016-01-24T10:21:11.924Z]	<bernex>
[2016-01-24T17:00:02.127Z]	<seanzer>	i think function have to have a capital f
[2016-01-24T17:15:07.358Z]	<felixfbecker>	typeof function function
[2016-01-24T17:15:39.929Z]	<felixfbecker>	but ideally -pron- would type the parameter and return valuesanyway
[2016-01-24T17:16:43.411Z]	<seanzer>	in typescript if i declare a class with a property that be a function i have to use class foo onfoo function
[2016-01-24T17:19:46.382Z]	<felixfbecker>	interesting
--------------------------------------------------------------------------------------------------
[2016-01-23T21:00:14.430Z]	<xstof>	anyone know under what condition intellisense light up for file be -pron- only when there ambient type declaration download from definitelytype through tsd query install or be there a way to have intellisense light up by package typing into a npm package for package -pron- write -pron- i mean can find much good practice i know the typing field of a be intend to hint to the environment where typing can be find but this do seem to work for file
--------------------------------------------------------------------------------------------------
[2016-01-23T22:01:47.884Z]	<darkrubyist>	hello i have a question
[2016-01-23T22:02:01.838Z]	<darkrubyist>	-pron- a junior programmer
[2016-01-23T22:02:07.950Z]	<darkrubyist>	and -pron- new to javascript
[2016-01-23T22:02:20.592Z]	<darkrubyist>	shoud i learn typescript
[2016-01-23T22:02:30.982Z]	<darkrubyist>	or javascript first
[2016-01-24T22:05:06.772Z]	<rezonant>	hi all so -pron- find that -pron- possible to get can not compile module unless the flag be provide even when i have the module and target setting set in -pron- and the fall in a directory below where the source file be
[2016-01-24T22:05:18.206Z]	<rezonant>	target with module type commonjs
[2016-01-24T22:06:11.186Z]	<DanielRosenwasser>	be -pron- specify source file on the command line
[2016-01-24T22:06:44.103Z]	<rezonant>	well -pron- hit these error in vs but not -pron- gulp webpack build and if i do tsc on the file -pron- do indicate the same error as vs code
[2016-01-24T22:07:34.674Z]	<DanielRosenwasser>	so -pron- get that error even when -pron- type tsc from the directory of -pron- source file
[2016-01-24T22:08:13.958Z]	<rezonant>	well i be do -pron- from the root of the project but try -pron- right from the nested folder contain the ts file have the same effect
[2016-01-24T22:08:55.909Z]	<DanielRosenwasser>	thank for the head up feel free to send a pr or file an issue at next time
[2016-01-24T22:09:33.428Z]	<DanielRosenwasser>	can -pron- share -pron- project
[2016-01-24T22:09:45.183Z]	<rezonant>	i can not share the whole project
[2016-01-24T22:09:52.169Z]	<rezonant>	for reference -pron- tsconfig
[2016-01-24T22:10:14.590Z]	<rezonant>	i mean the only problem -pron- seem be that -pron- do not detect -pron- setting
[2016-01-24T22:10:29.786Z]	<rezonant>	can anyone clarify the rule do tsc actually  <user> parent directory to find tsconfig
[2016-01-24T22:11:40.503Z]	<rezonant>	run typescript as well
[2016-01-24T22:12:09.150Z]	<rezonant>	note that the file i be compile be not in the file array
[2016-01-24T22:12:35.366Z]	<rezonant>	not sure if that would stop -pron- from work correctly either
[2016-01-24T22:14:31.957Z]	<DanielRosenwasser>	note that the file i be compile be not in the file array that the problem
[2016-01-24T22:15:18.476Z]	<rezonant>	so how be -pron- expect to keep track of such a mess and what if -pron- multiple entry point because vs code do handle tsconfig file outside of the root of the project unless that change in a recent version
[2016-01-24T22:15:41.399Z]	<rezonant>	or do tsconfig support glob for file last i check -pron- appear not
[2016-01-24T22:16:22.109Z]	<rezonant>	and if that the then why could i just have multiple root
[2016-01-24T22:16:33.440Z]	<rezonant>	since the ts compiler and vs code could very easily figure out which tsconfig -pron- go with
[2016-01-24T22:16:57.835Z]	<DanielRosenwasser>	i do see how multiple would fix -pron- problem
[2016-01-24T22:17:07.006Z]	<DanielRosenwasser>	globs certainly would have make -pron- easy
[2016-01-24T22:17:48.299Z]	<DanielRosenwasser>	-pron-  <user> support multiple though
[2016-01-24T22:17:59.067Z]	<DanielRosenwasser>	and track glob support
[2016-01-24T22:18:05.831Z]	<rezonant>	do -pron- know if vs code support multiple tsconfig though yet
[2016-01-24T22:18:09.390Z]	<rezonant>	that be the real blocker for -pron-
[2016-01-24T22:18:17.435Z]	<rezonant>	ie in subdir or something
[2016-01-24T22:18:38.544Z]	<DanielRosenwasser>	sorry -pron-  <user> support -pron- over the command line
[2016-01-24T22:19:02.417Z]	<DanielRosenwasser>	vs code  <user> stop at the first -pron- find just like the command line compiler  <user> unless -pron- use the flag
[2016-01-24T22:26:20.686Z]	<rezonant>	i be pleasantly surprised that vs code be properly read heirarchical tsconfig -pron- appear
[2016-01-24T22:26:45.557Z]	<rezonant>	however -pron- seem the only reasonable way to handle tsconfig be to use exclude aggressively which could cause problem later
[2016-01-24T22:26:57.939Z]	<rezonant>	thank for link the glob ticket definitely  <user> watch that
--------------------------------------------------------------------------------------------------
[2016-01-24T09:32:52.649Z]	<afirdousi>	hi all
--------------------------------------------------------------------------------------------------
[2016-01-24T10:22:33.911Z]	<bernex>	hi how i can defile property class class name variable variable function variable accept int and function be -pron- possible or any
[2016-01-24T10:35:00.927Z]	<felixfbecker>	ts variable
--------------------------------------------------------------------------------------------------
[2016-01-25T01:40:16.971Z]	<KhoaSydney>	hi guy -pron- be just wonder if -pron- have extension method in typescript
--------------------------------------------------------------------------------------------------
[2016-01-25T04:28:14.436Z]	<ianks>	when compile typescript i notice that each file that be build when compile to commonjs include a be there a way to create a build which require the instead
--------------------------------------------------------------------------------------------------
[2016-01-25T09:53:04.829Z]	<grofit>	hello
[2016-01-25T09:53:12.620Z]	<grofit>	so some query around output
[2016-01-25T09:53:26.688Z]	<grofit>	i be currently have some issue where -pron- seem ts be output incompatible
[2016-01-25T09:53:49.168Z]	<d3lm>	have the spread operator land for object yet
[2016-01-25T09:53:52.470Z]	<grofit>	well not entirely but in apparently -pron- can not do
[2016-01-25T09:54:19.258Z]	<grofit>	-pron- have to do
[2016-01-25T09:55:08.230Z]	<grofit>	however when targette ts do not seem to notice this and let -pron- through again i be not entirely sure if this be legit etc but i have spend age track down an issue and -pron- seem that do not support chain like show
[2016-01-25T09:55:45.022Z]	<grofit>	should this be add as an issue or be this not really ts responsibility
[2016-01-25T10:11:16.392Z]	<grofit>	 <user> raise an issue on github
[2016-01-25T10:11:37.402Z]	<grofit>	see if -pron- worth investigate further or not i doubt -pron- as everyone be move away from but unfortunately some of -pron- be leave support the dreg of the internet
[2016-01-25T10:19:32.057Z]	<grofit>	if anyone be interested
[2016-01-25T13:51:16.592Z]	<ivogabe>	-pron- be blacklist
[2016-01-25T13:51:44.160Z]	<ivogabe>	see
--------------------------------------------------------------------------------------------------
[2016-01-25T11:24:19.787Z]	<impworks>	hey guy have anyone here compile and debug the tsc compiler -pron-
[2016-01-25T11:55:04.455Z]	<impworks>	i get the node be unresponsive each time i want to step or continue after a breakpoint hit
[2016-01-25T14:27:09.998Z]	<impworks>
[2016-01-25T14:28:13.733Z]	<impworks>	how do i get or create -pron-
[2016-01-25T14:29:20.690Z]	<ivogabe>	-pron- be create when -pron- run jake local
[2016-01-25T14:39:14.565Z]	<impworks>	thank manage to build -pron-
[2016-01-25T14:39:42.974Z]	<impworks>	still can not debug the compiler though vs code hang after a few step
--------------------------------------------------------------------------------------------------
[2016-01-25T12:48:42.363Z]	<rlegrand>	hi to all i have little difficulty to understand some detail concern compilation with typescript would try to clarify -pron- so i try here with the typescript plugin for -pron- editor sublime text definition file which be in the root folder of -pron- sublime project seem to be use as dependency even if i do reference -pron- in -pron- source file so in -pron- root folder i have add an wich reference typing and in -pron- editor any definition come from be recognize whereas i never reference but i do know how to achieve the same behavior when i compile -pron- project i use the gulp tsc plugin be there a way to tell the compiler to take into account -pron- definition even if -pron- be reference in -pron- source
[2016-01-25T13:20:49.533Z]	<4tron>	why would -pron- want the typing ref in a compilation
[2016-01-25T13:36:04.025Z]	<rlegrand>	i probably do understand -pron- question because the compiler need to know where be some symbol in order to make the compilation no -pron- use system for example whose definition be provide by typing systemjs systemjs if the compiler do know where to find -pron- i have error can not find name system
[2016-01-25T13:36:53.593Z]	<rlegrand>	should i do something differently
[2016-01-25T13:40:03.901Z]	<4tron>	i may not fully understand what -pron- be ask gulp tsc handle all the compilation to javascript though so i do not see why -pron- need to take into account the typing the typing be just for intellisence and reference unless i be wrong about that
[2016-01-25T13:45:07.372Z]	<ivogabe>	-pron- should add the definition file in the call
[2016-01-25T13:46:34.605Z]	<ivogabe>	besides that why be -pron- use gulp tsc instead of gulp typescript
[2016-01-25T13:46:55.267Z]	<rlegrand>	ah ok i be afraid the compiler try to compile the definition but -pron- be just stupid yep thank
[2016-01-25T13:47:30.692Z]	<rlegrand>	be gulp tsc deprecate
[2016-01-25T13:48:05.281Z]	<rlegrand>	i do know -pron- probably the first one i find when i start -pron- project
[2016-01-25T13:50:11.512Z]	<rlegrand>	be there good reason to switch
[2016-01-25T13:55:30.710Z]	<rlegrand>	ah ok thank for answer
[2016-01-25T14:27:55.686Z]	<impworks>	i can see in this folder which be reference in the config
--------------------------------------------------------------------------------------------------
[2016-01-25T15:15:26.457Z]	<krasevych>	hi all if i have interface like that interface imysvc index string any i should write like this const mysvc imysvc
[2016-01-25T15:15:52.114Z]	<krasevych>
--------------------------------------------------------------------------------------------------
[2016-01-25T16:29:22.009Z]	<chilversc>	can i define a type that act like any but enforce the field must derive from object currently the interface define formstate object but that too restrictive so i be go to change -pron- to any
[2016-01-25T16:30:05.185Z]	<chilversc>	but any be technically correct since assign a function or a primitive value to the field  <user> error
--------------------------------------------------------------------------------------------------
[2016-01-25T18:10:06.507Z]	<masaeedu>	what be the possible value for the field
[2016-01-25T18:13:31.318Z]	<masaeedu>	in that second line be -pron- try to retrieve a property or set -pron- to something right now the code access the someprop index but neither store the return value nor set -pron-
[2016-01-25T18:22:58.212Z]	<seanzer>	interesting -pron- expect something like this to produce an error interface mysvc index string index string any const mysvc mysvc const key foo ok but maybe should be an error
[2016-01-25T18:31:04.606Z]	<masaeedu>	well that do obey the interface a number be still a bag of property of some kind
[2016-01-25T18:31:26.031Z]	<masaeedu>	if -pron- do
[2016-01-25T18:31:49.633Z]	<masaeedu>	interface mysvc index string index string string
[2016-01-25T18:31:53.121Z]	<masaeedu>	that would be a problem
[2016-01-25T18:32:03.975Z]	<masaeedu>	because all of the number property be string
--------------------------------------------------------------------------------------------------
[2016-01-25T18:35:45.918Z]	<seanzer>	good explanation thank
--------------------------------------------------------------------------------------------------
[2016-01-25T19:39:06.585Z]	<SetTrend>	hi guy be there a way to retrieve an enum numerical value from a string dynamically the generate javascript would allow for that but typescript do seem to allow this kind of reverse microsoft typescript doc or do i miss something
[2016-01-25T20:02:31.647Z]	<isao>	just refer to the enum
[2016-01-25T20:02:42.217Z]	<isao>	enum foo a b c true a true
[2016-01-25T20:04:35.360Z]	<SetTrend>	i be rather look for a dynamic lookup like ts enum e a b c const chk string b const val number
[2016-01-25T20:06:46.460Z]	<isao>	that should work fine
[2016-01-25T20:08:24.357Z]	<SetTrend>	error element implicitly have an any type because index expression be not of type number
[2016-01-25T20:09:33.715Z]	<isao>	declare i as a number and arg as an array
[2016-01-25T20:10:20.126Z]	<SetTrend>	return value be a string see comment
[2016-01-25T20:10:32.922Z]	<SetTrend>	and type annotation
[2016-01-25T20:10:49.248Z]	<SetTrend>	yes but i want to put a variable in there not a constant value
[2016-01-25T20:11:15.279Z]	<SetTrend>	this only seem to work for number but not string
[2016-01-25T20:18:41.438Z]	<SetTrend>	hmm strange compile the above line with typescript locally result in a compilation error would -pron- mind check locally error element implicitly have an any type because index expression be not of type number error element implicitly have an any type because index expression be not of type number
[2016-01-25T20:20:19.058Z]	<SetTrend>	if the above solution work that be great i just want to make sure before i post an issue on this
[2016-01-25T20:20:43.062Z]	<isao>	but i use that pattern fairly often for little dispatch table so -pron- be bum if -pron- break
--------------------------------------------------------------------------------------------------
[2016-01-25T20:07:14.534Z]	<SetTrend>	yepp but not -pron- above sample code
[2016-01-25T20:10:06.877Z]	<SetTrend>	yepp
[2016-01-25T20:10:32.391Z]	<isao>	because if -pron- plug in a valid number or string in the e part -pron- should get what -pron- look for
[2016-01-25T20:15:56.217Z]	<isao>	enum e a b c const arg stre zz b ccc const i number const chk string b const val number alert
[2016-01-25T20:33:29.575Z]	<masaeedu>	if -pron- do want to keep do any everywhere -pron- can disable that
--------------------------------------------------------------------------------------------------
[2016-01-25T20:11:09.175Z]	<seanzer>	should val be of type e
[2016-01-25T20:12:00.091Z]	<SetTrend>	i believe both may true but even when declare -pron- as any the error remain the same
[2016-01-25T20:14:53.598Z]	<isao>
[2016-01-25T20:19:33.628Z]	<isao>	oh weird i be use the playground link -pron- prob
[2016-01-25T20:19:41.070Z]	<isao>	-pron- stick on
[2016-01-25T20:23:23.486Z]	<SetTrend>	then -pron- a issue perhaps yet the spec do say anything about this in the spec the reverse mapping provide a convenient way to obtain the string representation of an enum value microsoft typescript doc -pron- do say anything about a convenient way to obtain the number representation of an enum string value
[2016-01-25T20:33:07.393Z]	<masaeedu>	-pron- have noimplicitany enable
[2016-01-25T20:33:09.831Z]	<masaeedu>	enable
[2016-01-25T20:33:29.025Z]	<SetTrend>	yes
[2016-01-25T20:33:50.407Z]	<SetTrend>	yes i see but i actually want this check to occur
--------------------------------------------------------------------------------------------------
[2016-01-25T20:32:13.857Z]	<SetTrend>	just check similar error with ts error index signature of object type implicitly have an any type
--------------------------------------------------------------------------------------------------
[2016-01-25T20:34:40.369Z]	<masaeedu>	oh sorry could -pron- show -pron- a snippet of code that demonstrate the problem then
[2016-01-25T20:38:02.821Z]	<masaeedu>	-pron- go through chat history but i could see where -pron- post an yet
[2016-01-25T20:39:00.707Z]	<SetTrend>	one other question be i require to add dummy parameter name to call signature or may i omit -pron- ts const x string number
[2016-01-25T20:39:09.806Z]	<masaeedu>
[2016-01-25T20:39:18.417Z]	<SetTrend>	here -pron- example again ts enum e a b c const chk string b const val number
[2016-01-25T20:39:28.009Z]	<masaeedu>	what type be arg and i
[2016-01-25T20:39:53.065Z]	<SetTrend>	just anything return a string see comment and chk declaration
[2016-01-25T20:40:34.575Z]	<masaeedu>	-pron- not sure what that mean could -pron- please include a declaration of arg and i in -pron- snippet or tell -pron- what type -pron- be
[2016-01-25T20:40:51.313Z]	<SetTrend>	ts enum e a b c const chk string b const val number
[2016-01-25T20:41:30.409Z]	<seanzer>	i do think e be indexable by stre
[2016-01-25T20:41:51.732Z]	<SetTrend>	that -pron- question
[2016-01-25T20:42:03.720Z]	<isao>
[2016-01-25T20:42:03.982Z]	<felixfbecker>	yiz give to add argument name
[2016-01-25T20:42:04.119Z]	<masaeedu>	yeah that be a issue
[2016-01-25T20:42:15.785Z]	<masaeedu>	-pron- a noimplicitany vs implicitany issue
[2016-01-25T20:43:08.937Z]	<SetTrend>	i could find implicitany in the english dictionary what do -pron- mean
[2016-01-25T20:43:14.384Z]	<masaeedu>	if -pron- treat the object as a bag of untyped property -pron- can do
[2016-01-25T20:43:18.255Z]	<masaeedu>	enum e a b c const chk string b const val number any
[2016-01-25T20:43:42.878Z]	<masaeedu>	that -pron- implictly treat e as any
[2016-01-25T20:43:48.755Z]	<masaeedu>	this be as oppose to explicit
[2016-01-25T20:44:01.659Z]	<masaeedu>	where -pron- explicitly cast to any
[2016-01-25T20:45:31.299Z]	<isao>	enum e a b c const chk string b const val e declare type as e should work
[2016-01-25T20:46:02.276Z]	<SetTrend>	aahh excellent
[2016-01-25T20:46:49.288Z]	<SetTrend>	should this become an implicit enum operation i do see why -pron- should
[2016-01-25T20:47:25.688Z]	<david-driscoll>	enum be technically index able by -pron- string value and number value interestingly -pron- would appear that typescript only understand that can be index by number not string
[2016-01-25T20:47:32.204Z]	<SetTrend>	what a yiz
[2016-01-25T20:48:12.560Z]	<SetTrend>	driscoll yeah be -pron-
[2016-01-25T20:49:52.439Z]	<felixfbecker>	-pron- when instead of type ou -pron- type the key exactly one to the left
[2016-01-25T20:50:01.715Z]	<felixfbecker>	i mean to type -pron-
[2016-01-25T20:50:14.198Z]	<felixfbecker>	on a qwertz keyboard
[2016-01-25T20:50:37.943Z]	<david-driscoll>	give enum test a b c then the interface should look something like
[2016-01-25T20:51:00.919Z]	<david-driscoll>	interface test index number string index string test
[2016-01-25T20:51:15.024Z]	<david-driscoll>	but that just be allow today by the type system i do think
[2016-01-25T20:52:13.232Z]	<david-driscoll>	so currently -pron- only declare index number string so -pron- can get the name of the enum value then assume that -pron- be access the enum generally by dot notation etc
[2016-01-25T20:52:16.562Z]	<masaeedu>	well indexing by number or string return different thing
[2016-01-25T20:52:53.581Z]	<SetTrend>	ahhh that the reason for the give then too smile
[2016-01-25T20:55:21.947Z]	<SetTrend>	-pron- expect take from -pron- example enum e a b c const n number s string b to return b
[2016-01-25T20:55:57.540Z]	<masaeedu>	i see without treat e as any
[2016-01-25T20:56:23.277Z]	<SetTrend>	exactly and ts enum e a b c const n number s string d to return undefined undefined
[2016-01-25T20:56:27.802Z]	<masaeedu>
[2016-01-25T20:57:35.276Z]	<masaeedu>	or more specifically
[2016-01-25T20:58:36.943Z]	<masaeedu>	number and string be implicitly convertible when index in js
[2016-01-25T20:59:20.227Z]	<masaeedu>	so -pron- have no idea what -pron- get when index with a string because the string could actually be
[2016-01-25T20:59:20.576Z]	<SetTrend>	i see so the reason behind this be that the compiler can not distinquish between a number and a string argument and thus always interpret the return value of the enum as string
[2016-01-25T20:59:50.726Z]	<SetTrend>	hmm but should this be a snap to decide by the compiler if the type be know
[2016-01-25T21:00:19.643Z]	<masaeedu>	yeah so in -pron- example if -pron- have let s let result what be the runtime type what be the compiler assume type
[2016-01-25T21:02:38.908Z]	<SetTrend>	-pron- assume -pron- to be a number
[2016-01-25T21:03:32.397Z]	<masaeedu>	but -pron- a string at runtime
[2016-01-25T21:03:45.625Z]	<masaeedu>	the string b specifically
[2016-01-25T21:03:46.529Z]	<SetTrend>	i would assume the enum definition to be something like just use pseudo code here number just like the current string
[2016-01-25T21:05:50.973Z]	<SetTrend>	i know i be just give a legible example of -pron- thought
[2016-01-25T21:05:58.006Z]	<masaeedu>	right
[2016-01-25T21:06:12.735Z]	<masaeedu>	logically
[2016-01-25T21:06:19.150Z]	<SetTrend>	why not
[2016-01-25T21:06:31.048Z]	<masaeedu>	because could be a string
[2016-01-25T21:06:44.055Z]	<masaeedu>	if the string -pron- index by be implicitly convertible to a number
[2016-01-25T21:06:48.210Z]	<SetTrend>	because -pron- may be a stringified number
[2016-01-25T21:06:52.979Z]	<masaeedu>	yeah exactly
--------------------------------------------------------------------------------------------------
[2016-01-25T21:05:17.590Z]	<SetTrend>	default to string
--------------------------------------------------------------------------------------------------
[2016-01-25T21:05:31.019Z]	<masaeedu>	the definition number be wrong
--------------------------------------------------------------------------------------------------
[2016-01-25T21:06:09.375Z]	<masaeedu>	but i mean -pron- can make that assumption
--------------------------------------------------------------------------------------------------
[2016-01-25T21:08:02.487Z]	<SetTrend>	ok but i feel that a matter of definition if the type check be do in advance then stringifie number would in turn be acceptable
[2016-01-25T21:08:19.107Z]	<SetTrend>	i would rather expect the suggest behaviour than to expect stringified number to act like number
[2016-01-25T21:10:42.206Z]	<masaeedu>	sorry if -pron- just not get -pron- do get much sleep last weekend
--------------------------------------------------------------------------------------------------
[2016-01-25T21:08:29.243Z]	<masaeedu>	what do -pron- mean by in advance as in at runtime
--------------------------------------------------------------------------------------------------
[2016-01-25T21:12:43.899Z]	<SetTrend>	i believe -pron- think quite sharp maybe -pron- just take gibberish here
[2016-01-25T21:12:46.015Z]	<masaeedu>	-pron- understanding be that the typescript folk do the right thing here because there no tell what return by enum e a let index a let result be this e or string
[2016-01-25T21:13:31.603Z]	<SetTrend>	from type inference -pron- call -pron- a string
[2016-01-25T21:14:26.954Z]	<SetTrend>	i  <user> believe that type only apply to typescript not the result javascript so the typescript compiler be the only one to regard here
[2016-01-25T21:14:44.877Z]	<SetTrend>	see when use any for the enum everything work as expect anyway
[2016-01-25T21:14:55.958Z]	<SetTrend>	-pron- only the compiler who need to be convice
[2016-01-25T21:15:40.125Z]	<masaeedu>	-pron- assume result to be a string
[2016-01-25T21:15:54.458Z]	<SetTrend>	sorry i get -pron- question wrong here -pron- typed answer ts enum e a let index string a let result number
[2016-01-25T21:16:43.107Z]	<masaeedu>	in regard to the type for number
--------------------------------------------------------------------------------------------------
[2016-01-25T21:16:24.626Z]	<masaeedu>	right but that give user false certainty
[2016-01-25T21:16:33.779Z]	<SetTrend>	in which regard
[2016-01-25T21:16:52.310Z]	<SetTrend>
[2016-01-25T21:17:15.083Z]	<masaeedu>	so be assignable to number right
[2016-01-25T21:17:29.130Z]	<masaeedu>	that what -pron- typescript user happily assume and chug along
[2016-01-25T21:17:45.432Z]	<SetTrend>	hmm yepp
[2016-01-25T21:17:49.786Z]	<masaeedu>	but in reality the device driver that produce randomness be conspire against -pron- -pron-
--------------------------------------------------------------------------------------------------
[2016-01-25T21:17:52.462Z]	<seanzer>	var a var a undefined foo foo foo foo
[2016-01-25T21:18:27.112Z]	<SetTrend>	at compile time
[2016-01-25T21:18:32.233Z]	<masaeedu>	-pron- sneakily produce a number great than result in index result in the string a be assign to result
[2016-01-25T21:18:45.849Z]	<masaeedu>	at runtime
[2016-01-25T21:19:22.756Z]	<masaeedu>	so now -pron- happy typescript user be try to multiply the string a with and not understand why -pron- get nan
[2016-01-25T21:19:52.348Z]	<masaeedu>	-pron- talk about this code snippet just for clarity enum e a let index string a let result number
[2016-01-25T21:21:25.391Z]	<SetTrend>	do just give a live example
[2016-01-25T21:21:46.023Z]	<masaeedu>	yeah that a good demonstration
[2016-01-25T21:23:13.050Z]	<SetTrend>	-pron- assume these to be the result const result number to be either undefined or in fact
[2016-01-25T21:23:30.263Z]	<masaeedu>	but that just not what js do
[2016-01-25T21:23:52.721Z]	<masaeedu>	js produce result b
[2016-01-25T21:24:07.779Z]	<masaeedu>	and of course b be not a number
[2016-01-25T21:25:54.261Z]	<masaeedu>	hey if -pron- fix -pron- -pron- all be well off for -pron-
[2016-01-25T21:32:53.557Z]	<SetTrend>	well ok at compile time the compiler may emit in this special case something like ts var a var b a before after
[2016-01-25T21:36:13.916Z]	<SetTrend>	ts typescript enum e a b c const chkn chkc b special treatment because argument ist of type string js javascript var e function e a b c e e var chkn chkc b chkc
[2016-01-25T21:37:39.030Z]	<SetTrend>	yes here the typescript source ts typescript enum e a b c const chkn chkc b special treatment because argument ist of type string and here the suggest javascript output js javascript var e function e a b c e e var chkn chkc b chkc
[2016-01-25T21:38:28.053Z]	<masaeedu>	this be more of a philosophical thing but typescript have adopt a policy of not do type drive emit
[2016-01-25T21:39:34.955Z]	<masaeedu>	that is -pron- try not to change the behavior of actual js base on -pron- type system but instead change -pron- type system to suit js behavior
--------------------------------------------------------------------------------------------------
[2016-01-25T21:22:10.698Z]	<masaeedu>	see how and produce different type of output
[2016-01-25T21:24:50.201Z]	<SetTrend>	i see give -pron- a second -pron- still not convice this can be cope with at compile time perhaps by re define the generate enum i need a minute to play around with this in -pron- head
--------------------------------------------------------------------------------------------------
[2016-01-25T21:33:48.526Z]	<masaeedu>	hmm could -pron- convert this example to use actual enum both with typescript and the emit result
[2016-01-25T21:37:15.024Z]	<SetTrend>	i do seem to be able to edit -pron- post
[2016-01-25T21:38:08.317Z]	<masaeedu>	ah
[2016-01-25T21:39:38.115Z]	<SetTrend>	i see and i comprehend yet perhaps this be worth a discussion if people other than -pron- alone would expect the above result to happen
[2016-01-25T21:39:46.131Z]	<masaeedu>	this give -pron- an idea though
--------------------------------------------------------------------------------------------------
[2016-01-25T21:39:55.805Z]	<metaweta>	-pron- like to work on support natural transformation issue be there any doc other than the architectural overview and the mostly empty compiler internal page on the wiki
[2016-01-25T21:40:00.837Z]	<SetTrend>	great
[2016-01-25T21:40:41.081Z]	<masaeedu>	actually nvm -pron- idea be stupid
[2016-01-25T21:40:43.102Z]	<masaeedu>	smile
[2016-01-25T21:41:19.085Z]	<SetTrend>	d
[2016-01-25T21:41:40.647Z]	<masaeedu>	from discussion with ryan -pron- find there an issue that would make this much well
[2016-01-25T21:41:41.064Z]	<masaeedu>
[2016-01-25T21:46:47.791Z]	<SetTrend>	intriguing i believe this be already possible but perhaps that something i just assume leap over in -pron- mind from javascript
[2016-01-25T21:48:00.946Z]	<SetTrend>	well however i feel the suggest functionality would add much comfort to non const enum without give up type safety
[2016-01-25T21:49:45.429Z]	<SetTrend>	this be a very interesting and exciting discussion thank a lot for today -pron- be a great help and chat partner have a nice evening or shall i write night
--------------------------------------------------------------------------------------------------
[2016-01-25T21:51:54.070Z]	<metaweta>	if there be no well doc be there a mailing list where one can ask the team question about the internal
[2016-01-25T21:53:10.115Z]	<metaweta>	hmm say no
[2016-01-25T21:53:22.017Z]	<metaweta>	in fact -pron- say to come here
[2016-01-25T21:53:41.549Z]	<masaeedu>	well -pron- still  <user> here but back at -pron-
[2016-01-25T21:54:08.621Z]	<metaweta>	be there a time during the week when typescript team member be likely to be here
[2016-01-25T21:55:22.611Z]	<masaeedu>	just ask the question and pe duck out of sight
[2016-01-25T22:06:59.130Z]	<DanielRosenwasser>	hi
[2016-01-25T22:09:37.270Z]	<DanielRosenwasser>	what be -pron- wonder about
[2016-01-25T22:28:27.958Z]	<LPGhatguy>	be there any exist project that try to take typescript interface declaration and generate runtime type guard
[2016-01-25T22:33:59.544Z]	<metaweta>	-pron- like to add a feature to the compiler but -pron- a rather large codebase i be hope that there be some documentation about the internal of the compiler -pron- for instance if someone new join -pron- team how would -pron- get -pron- up to speed
[2016-01-25T22:34:40.725Z]	<JKillian>	how would -pron- do that check for the existence of all non optional field and check that -pron- be the right type -pron- an interesting idea
[2016-01-25T22:34:52.625Z]	<LPGhatguy>	yep
[2016-01-25T22:35:18.704Z]	<LPGhatguy>	-pron- not sure whether the system would try to cast or throw by default
[2016-01-25T22:37:10.003Z]	<JKillian>	do sound overly hard to do as far as just generate the code and stick -pron- somewhere i be think how -pron- would do -pron- without that step though obviously not possible in typescript but with some sort of macro system perhaps possible
[2016-01-25T22:39:18.894Z]	<JKillian>	-pron- never personally play around with a powerful macro system like clojure for example but i bet -pron- a bunch of fun
[2016-01-25T22:39:43.550Z]	<LPGhatguy>	-pron- do -pron- in the past with vanilla js but -pron- love to be able to pull in compile time only information like typescript interface
[2016-01-26T03:33:44.570Z]	<masaeedu>	in one case -pron- assign a value in the other -pron- define a new property
[2016-01-26T03:33:49.331Z]	<masaeedu>	those be different case
--------------------------------------------------------------------------------------------------
[2016-01-25T22:55:53.826Z]	<jcimoch>	actually i have plan to do such library as part of master thesis initialy -pron- be all about ast and generate json from with friendly datum to easily extract type infromation and check on demand however at this moment -pron-  <user> plane to do much more but unfortunatelly typescript internal api be elastic enougth
[2016-01-26T03:29:50.472Z]	<mohsen1>	hello why typescript be not guard against property assignment via or if i have the follow code i get an error ts class foo constructor but same action with go through with no issue ts bar value
[2016-01-26T03:34:59.263Z]	<masaeedu>	 <user> -pron- be possible to statically type check everything
--------------------------------------------------------------------------------------------------
[2016-01-26T09:02:25.805Z]	<datoml>	hello everyone
[2016-01-26T09:03:18.895Z]	<datoml>	when i import the class there be no prop provide and no type check
--------------------------------------------------------------------------------------------------
[2016-01-26T09:02:48.437Z]	<datoml>	how can i provide type safe when i export -pron- class this way export default
--------------------------------------------------------------------------------------------------
[2016-01-26T09:32:08.174Z]	<d3lm>	be the spread operator now available for object or be -pron- still in the list
[2016-01-26T09:45:21.413Z]	<datoml>	only list i think
[2016-01-26T09:46:13.885Z]	<d3lm>	mh ok what a shame
[2016-01-26T09:46:21.480Z]	<d3lm>	look for this
[2016-01-26T09:46:29.796Z]	<d3lm>	to replace the
--------------------------------------------------------------------------------------------------
[2016-01-26T09:52:02.930Z]	<DominikDitoIvosevic>	hi guy be there some post article on speed tsc a bit would change es target version help -pron- currently at with ts file can this go any faster
[2016-01-26T10:00:14.875Z]	<Think7>	if -pron- be use an ide like webstorm or vs code the compilation should happen continuously and in the background by the time -pron- finish write -pron- code and go to run test -pron- should be finish and ready to go webstorm  <user> afaik track just the thing that have change and recompile -pron- only
[2016-01-26T10:01:30.475Z]	<DominikDitoIvosevic>	yeah -pron- be use sublime text with grunt watch d
[2016-01-26T10:02:07.549Z]	<DominikDitoIvosevic>	do tsc recompile by default i know there be some cache file that create delete on every compilation
[2016-01-26T10:02:36.864Z]	<DominikDitoIvosevic>	i mean do -pron- recompile only the changed file
[2016-01-26T10:03:45.276Z]	<Think7>
[2016-01-26T10:03:51.117Z]	<Think7>	look like -pron- have to set a compiler flag
[2016-01-26T10:04:41.305Z]	<Think7>	wait nope i be all sort of wrong wrong project entirely
[2016-01-26T10:07:17.787Z]	<DominikDitoIvosevic>	d i must admit i be a bit confused where do meteor fit into this story
[2016-01-26T10:10:27.952Z]	<Think7>	yah i read too quickly link to the wrong thing -pron- look like the ide or whatever be manage the compiler should work out what have change and then recompile that only i do think tsc support this natively
[2016-01-26T10:12:24.145Z]	<DominikDitoIvosevic>	i have google meteor but -pron- seem like some platform and have which i like but i do get -pron- how much effort would i need to make to port -pron- app to meteor angular would -pron- suggest use ide like webstorm to speed up workflow i do not like -pron- because -pron- so cumbersome
[2016-01-26T10:15:03.971Z]	<Think7>	i really like webstorm -pron- use -pron- for age while do plain js before discover ts what i like most about -pron- be that for node i do not do any front end stuff -pron- feel like -pron- be wokre in an ide for for obj c write code command b to test simple -pron- get grate support for unit testing and a bunch of other goody
[2016-01-26T10:18:23.776Z]	<Think7>	i try vs code but be never able to make the build and run process work right i  <user> personally hate how the console output either open ina sperate terminal window or would switch the vs code app current view to some other screen be  <user> a few other thing like press tab for autocomplete do actually complete anyhting but rater move the cursor to where the auto complete text -pron- just show -pron- should go -pron- just do not get along but these thing could probably be fix i just do not have the time to fight with -pron-
--------------------------------------------------------------------------------------------------
[2016-01-26T10:43:54.706Z]	<DominikDitoIvosevic>	yeah -pron- give webstorm a try i even have -pron- instal but do find the willpower to get to know -pron-
[2016-01-26T10:48:48.363Z]	<Think7>	here a screenshot just to show what i mean
[2016-01-26T10:50:00.294Z]	<Think7>	 <user> do not use the build in ts compiler that come with -pron- use npm install tsc as a global mod then in ws setting point -pron- to the npm version here
[2016-01-26T11:21:22.904Z]	<MaherJendoubi>	be -pron- possible to debug on the browser an application write in typescript
[2016-01-26T11:21:40.795Z]	<jsobell>	yes as long as -pron- generate the map file
[2016-01-26T11:22:34.387Z]	<MaherJendoubi>	thank
[2016-01-26T11:26:50.831Z]	<SetTrend>	hi guy can i retrieve the string representation of a const enum the follow do work ts const enum e a b c as string how can i get an enum number value from the corresponding string value the follow do work ts const enum e a b c as e
[2016-01-26T11:27:34.588Z]	<jsobell>	i think -pron-
[2016-01-26T11:28:49.105Z]	<SetTrend>
[2016-01-26T11:30:34.691Z]	<SetTrend>	excellent thank
[2016-01-26T11:31:16.648Z]	<SetTrend>	and how can i output the enum as -pron- string value i need this to persist the value into a configuration file
[2016-01-26T12:08:32.353Z]	<jsobell>	with a const enum -pron- can
[2016-01-26T12:09:03.926Z]	<jsobell>	remove the const and -pron- can use to get a for b etc
[2016-01-26T12:09:15.887Z]	<jsobell>	as a const therre be no enum in the generate javascript
[2016-01-26T12:09:38.167Z]	<jsobell>	tsc replace -pron- enum with constant of etc
[2016-01-26T12:36:32.817Z]	<SetTrend>	i would have expect a typescript source like this ts const enum e a b c let e e let savevalue string e to result in the follow javascript use type inference ts var e var savevalue b
[2016-01-26T12:57:31.464Z]	<MaherJendoubi>	be -pron- possible to generate file use visual studio code
--------------------------------------------------------------------------------------------------
[2016-01-26T12:31:44.322Z]	<SetTrend>	i see be this regard a flaw of the concept then
[2016-01-26T12:32:44.946Z]	<SetTrend>	give that the tsc source use const enum value throughout the project these be all useless when try to persist -pron- in human readable format
--------------------------------------------------------------------------------------------------
[2016-01-26T13:19:30.679Z]	<spaced>	give use case abstract class abstractaction string export function typeof abstractaction string abstractaction return new complain with can not create an instance of the abstract class abstractaction how can i fix -pron-
[2016-01-26T13:29:48.126Z]	<Think7>	either do use the abstract class to create the instance or create a subclass of the abstract class and then cast the new call to the subclass
[2016-01-26T13:30:14.454Z]	<Think7>	class
[2016-01-26T13:34:46.449Z]	<spaced>	i have ton of sub class extend abstractaction example
[2016-01-26T13:37:08.118Z]	<Think7>	oh right so -pron- need to pass in one of the subclass that inherit from the abstract class and create a new instance
--------------------------------------------------------------------------------------------------
[2016-01-26T13:48:13.048Z]	<spaced>	yes one factory function for all -pron- concrete subclass
[2016-01-26T14:21:11.270Z]	<Think7>	this  <user> work
[2016-01-26T14:21:34.358Z]	<Think7>	abstract class abstractaction string public static class any return this class illegalaction extend abstractaction function actionfactory t extend typeof t astring string abstractaction let realclass return new let aninstance astre
[2016-01-26T14:24:10.776Z]	<Think7>	should be return t as well instead of the abstractaction sorry for spam
[2016-01-26T14:38:57.207Z]	<spaced>	wow tnx the static class function be awesome but i think  <user> a bit dangerous
--------------------------------------------------------------------------------------------------
[2016-01-26T14:03:56.788Z]	<Think7>	abstract class abstractaction string export function typeof abstractaction string abstractaction return new ite an example
[2016-01-26T14:04:11.349Z]	<Think7>	sec write an example
[2016-01-26T14:16:11.983Z]	<Think7>	abstract class abstractaction string class illegalaction extend abstractaction function actionfactory t extend typeof t astring string abstractaction let actualclass return new objectconstructor let aninstance astre there may be a well solution but this be what -pron- come up with
--------------------------------------------------------------------------------------------------
[2016-01-26T14:51:43.275Z]	<Think7>	agree but i can think of any othr way to do -pron- all -pron- do though be return the constructor for whatever class that inherit from the abstract class so -pron- get the right thing back every time i can think of a case where -pron- owuld cause an issue but -pron- do feel right
--------------------------------------------------------------------------------------------------
[2016-01-26T17:44:42.187Z]	<JKillian>	-pron- -pron- easy to work with the typescript ast beyond read -pron- -pron- try to write a program that combine multiple file from external module into a single one for consumption in a namespace scenario -pron- kind of doable with regex logic but that not really a road i want to go down too far
--------------------------------------------------------------------------------------------------
[2016-01-26T18:29:19.587Z]	<metaweta>	-pron- like to add a feature to the compiler but -pron- a rather large codebase be there documentation about the internal of the compiler -pron- there a wiki page but that mostly empty if someone new join -pron- team how would -pron- get -pron- up to speed
[2016-01-26T18:42:55.151Z]	<RX14>	-pron- seem that add an enum into a declare module cause declaration merge to fail
[2016-01-26T18:45:44.914Z]	<RX14>	for example here
[2016-01-26T18:45:58.963Z]	<RX14>	when -pron- comment out the enum -pron- start work
[2016-01-26T18:48:12.045Z]	<JKillian>	 <user> book have some information on the compiler
[2016-01-26T19:18:40.416Z]	<metaweta>	thank -pron- have a look
--------------------------------------------------------------------------------------------------
[2016-01-26T19:43:59.407Z]	<aggenebbisj>	i have a question about
[2016-01-26T19:44:08.937Z]	<aggenebbisj>	i know -pron- closed but be a bit confused
[2016-01-26T19:45:38.022Z]	<aggenebbisj>	if for an array type i can only choose between number and string for the index type but i can use number for string and vice versa what be the type of error -pron- be suppose to catch
[2016-01-26T19:46:18.376Z]	<aggenebbisj>	not sure if -pron- suppose to ask the question here kind of new to this whole gitter stuff
[2016-01-26T19:48:50.400Z]	<aggenebbisj>	indeed that i know
[2016-01-26T19:49:30.298Z]	<david-driscoll>	typescript be just say if -pron- want to behave like an array i  <user> let -pron- have an indexer for number but that be just from a compiler perspective
[2016-01-26T20:05:59.186Z]	<aggenebbisj>	-pron- confuse -pron- at least but -pron- just a simple programmer
[2016-01-26T20:06:14.565Z]	<aggenebbisj>	thank for the quick answer btw
[2016-01-26T20:14:25.655Z]	<LPGhatguy>	do -pron- have any work on that project do
[2016-01-26T20:15:06.835Z]	<LPGhatguy>	-pron- sure there an open issue on implement typescript plugin that may be worth wait for
--------------------------------------------------------------------------------------------------
[2016-01-26T19:48:20.853Z]	<david-driscoll>	basically -pron- go back to javascript object marshal all key to string
[2016-01-26T19:48:48.700Z]	<david-driscoll>
[2016-01-26T19:50:42.133Z]	<david-driscoll>	now there be a change recently that disallow array access with that flag on to make -pron- allow array access the default behavior if the object have no string indexer be -pron- return any
[2016-01-26T20:05:02.884Z]	<aggenebbisj>	so give this definition interface stringarray index number string i would use this construct as a type for a variable a only to enforce that -pron- look somewhat like an array but not like something completely different such as a function or a number however the type of index in the declaration seem a bit superfluous since -pron- can only be number or string and both work interchangeably
[2016-01-26T20:11:47.482Z]	<david-driscoll>	yeah i think from the outside look at -pron- the fact that -pron- do error on a string be probably confusing unless -pron- use i think -pron- just one of those quirk that every programming language have this be just inheirte from javascript
[2016-01-26T20:16:46.297Z]	<LPGhatguy>	yup be the umbrella issue
--------------------------------------------------------------------------------------------------
[2016-01-26T20:19:42.538Z]	<aggenebbisj>	driscoll thank for the explanation final question though at -pron- machine pass a string  <user> compile when use noimplicitany if i understand -pron- correctly this should compile
--------------------------------------------------------------------------------------------------
[2016-01-26T20:22:58.756Z]	<rbaz>	hi all
[2016-01-26T20:23:08.697Z]	<rbaz>	import dom from src core dom module not find
[2016-01-26T20:23:15.294Z]	<rbaz>	someone can help
[2016-01-26T20:24:02.493Z]	<david-driscoll>	hmm not sure now -pron- could be inherit from object now -pron- not super sure now on that issue -pron- say noimplictany should catch -pron- but i have test -pron- lately -pron-
[2016-01-26T20:33:33.885Z]	<LPGhatguy>	when i submit a pr with fix should i submit the jake lkg result that modify in the same commit
[2016-01-26T20:34:00.153Z]	<rbaz>	ok -pron- just dom be move to platform folder thank gay hhh
[2016-01-26T20:34:00.838Z]	<aggenebbisj>	in -pron- version this work import dom from src platform dom
[2016-01-26T20:34:23.447Z]	<rbaz>	hhhh i find -pron- thank
[2016-01-26T20:59:30.274Z]	<JKillian>	there  <user> which -pron- not sure be fully applicable but seem as if -pron- could be useful down the road
[2016-01-26T21:00:37.501Z]	<LPGhatguy>	that look like a plan full rebuild of most of the compiler
[2016-01-26T21:06:06.404Z]	<JKillian>	right -pron- make -pron- wonder if -pron-  <user> actually ever happen but -pron- on the roadmap for
[2016-01-26T21:06:31.740Z]	<JKillian>	however be on the roadmap but that what the nightlie be on now so -pron- see what come between and d
[2016-01-26T21:06:59.715Z]	<LPGhatguy>	-pron- excite mostly for the this type specification on function
[2016-01-26T21:08:18.762Z]	<LPGhatguy>	be -pron- around in here to discuss that pr
[2016-01-26T21:10:15.564Z]	<LPGhatguy>	-pron- look to try to fix a bunch of fix this week so make sure -pron- do all that correctly be important
[2016-01-26T21:10:35.502Z]	<DanielRosenwasser>	-pron- here
[2016-01-26T21:11:47.253Z]	<LPGhatguy>	i see that comment about remove the generic variant of concat but i be sure if that change would break stuff
[2016-01-26T21:20:33.620Z]	<DanielRosenwasser>	i leave a comment on -pron-
[2016-01-26T21:26:13.727Z]	<LPGhatguy>	i update the diff to remove the generic since -pron- seem to fix that test case
[2016-01-26T22:36:30.592Z]	<jsobell>	sorry -pron- be bedtime here -pron- normally only want the name of an enum be for serialization but if -pron- do then -pron- have to create a mapping in the other direction this be obviously less efficient than substitute absolute value at transpile time so the const keyword be use to say this  <user> never change most language allow the reverse lookup use some for of reflection as the name of the enum value have to be in some sort of support metadata give that javascript by have no metadata -pron- follow that -pron- can find the name in reverse by remove the cost keyword the code internally contain a b c which be identical to a b c tsc source never need the name back so -pron- use const for efficiency simple as that
[2016-01-26T23:43:58.782Z]	<duncanmak>	cool pr on fix
--------------------------------------------------------------------------------------------------
[2016-01-26T23:45:51.893Z]	<LPGhatguy>	any other core typing that have problem that -pron- run into
[2016-01-26T23:46:18.425Z]	<LPGhatguy>	-pron- hope to clean up some of the currently file issue a couple of which be -pron- and then dive into third party library problem
--------------------------------------------------------------------------------------------------
[2016-01-27T10:20:51.589Z]	<SetTrend>	i understand yet the main reason for use enum be to have a textual representation of fast number value i feel const should provide for this too in fact use the textual representation when cast a const enum to string would add any runtime cost at all because the compiler just use the string representation instead of the numerical value i give an example of this above the main issue i see here be that const enum be not a bijective in regard to number string representation
[2016-01-27T10:23:31.429Z]	<SetTrend>	this  <user> apply to enum value as well please refer to -pron- discussion about not be able to retrieve the numerical value of enum value with yes here the typescript source ts typescript enum e a b c const chkn chkc b special treatment because argument ist of type string and here the suggest javascript output js javascript var e function e a b c e e var chkn chkc b chkc
[2016-01-27T10:25:08.315Z]	<SetTrend>	and here -pron- visualization of the correspond expect complementary const enum behaviour i would have expect a typescript source like this ts const enum e a b c let e e let savevalue string e to result in the follow javascript use type inference ts var e var savevalue b
[2016-01-27T10:27:14.113Z]	<SetTrend>	-pron- see there be no runtime cost in use string value when cast a const enum to stre to retrieve the string representation of the const enum value tsc would just use the string value instead of the number value
[2016-01-27T11:16:10.915Z]	<jsobell>	yes but the const keyword be simply use to say this be a fast implementation that be unidirectional if -pron- want bidirectional omit the const
[2016-01-27T11:18:59.554Z]	<jsobell>	enum key to code be a compile time lookup and assignment value to definition name be a runtime one after all if -pron- want the name for -pron- would say c because -pron- need to know the enum key to get the name of
[2016-01-27T11:19:49.272Z]	<jsobell>	-pron- want to serialize a value and should be display as c that a runtime operation
[2016-01-27T11:20:23.741Z]	<jsobell>	-pron- want to pass in to a function that can be map to at compile time because -pron-  <user> never change
[2016-01-27T11:28:33.309Z]	<jsobell>	-pron- simply a tradeoff of speed vs provide feature
--------------------------------------------------------------------------------------------------
[2016-01-27T11:26:17.331Z]	<jsobell>	in -pron- code sample above -pron- look more like obfuscation the value -pron- assign to savevalue be always b so why would -pron- want a lookup if -pron- do choose to make -pron- code less efficient this way just omit const from the enum
--------------------------------------------------------------------------------------------------
[2016-01-27T12:41:55.987Z]	<pratikthecook>	can anybody suggest -pron- a good typescript ide base with suggestion
[2016-01-27T12:42:39.054Z]	<pratikthecook>	other than webstorm and eclipse ide typescript plugin both be not so good
[2016-01-27T12:49:25.127Z]	<ayuudee>	that could be difficult to answer as the choice of ide often depend upon a variety of factor the ts compiler helpfully provide service that can be consume by ide and so there be a variety of high quality ts base development environment out there personally i use sublime which do everything i need but can be overly simplistic if -pron- like more in -pron- tooling i believe atom  <user> have good support most other people i know use one of the intellij derivative  <user> obviously ts humble benefactor produce visual studio which -pron- notice the majority of the official ts example be in so if -pron- in a windows environment then that could be a great option
[2016-01-27T13:33:25.250Z]	<pratikthecook>	thnx u try sublime
[2016-01-27T14:43:22.542Z]	<cferrell>	atom have very good typescript support
[2016-01-27T19:17:41.701Z]	<LPGhatguy>	be there any way to use another function parameter as a rest parameter to another function
[2016-01-27T19:18:08.837Z]	<LPGhatguy>	-pron- love to make a factory method that pass parameter to the constructor without overload the factory function for every constructor change
[2016-01-27T19:19:05.529Z]	<LPGhatguy>	like string -pron- would number args i have no idea what sort of syntax -pron- would entail
[2016-01-27T20:57:30.489Z]	<ayuudee>	i do believe there be no there be a lot of tool for thing like this however default parameter union type etc -pron- could  <user> potentially do something gnarly use constructor literal as a sort of curry return type from -pron- factory method but -pron- hard to say either way without understand more of what -pron- try to do sorry
[2016-01-27T20:58:58.058Z]	<ayuudee>	and btw -pron- hard to imagine a practical case where -pron- latter suggestion could be useful but -pron- would be something like this interface make r new a string r class foo a string function number make foo return foo new there may be an easy way to represent that without the gymnastic but i can think of a way to get the argument of the constructor without a constructor literal someone may have another way though again the utility of the whole endeavour be curious
[2016-01-27T21:53:59.262Z]	<mattmazzola>	quick question about specify type for list i see most documentation say to specify -pron- like this interface ifoo bar string class a x ifoo but in some other code i see people do class b x ifoo be these equivalent or be the latter case specify the type as an array with a single element
[2016-01-27T22:04:02.816Z]	<Think7>	as far as i know -pron- just a different way to define the type
[2016-01-27T22:04:20.325Z]	<Think7>	i prefer number because -pron- ocd d
[2016-01-27T22:04:42.607Z]	<mattmazzola>	oh ok good to know
[2016-01-27T22:04:57.726Z]	<mattmazzola>	i think -pron- depend on what language people have background in
[2016-01-27T22:09:35.741Z]	<mattmazzola>	i can see that although i  <user> think option be mislead to some if -pron- come from strongly typed language array do have the same operation available as list and -pron- make -pron- appear different and  <user> not applicable to javascript option and imply that there be not different type