prefix,dialog,title
Summarization," <SEP> 1.32.3 (my version) has the old icons still <SEP> ``` const enum  <SEP> under 3.6+ <SEP> The icons just changed in the July update <SEP> @fatcerberus You mentioned that this change where `number & string` will be simplified to `never` a while back? Do you know if there was an issue tracking that? <SEP> So I'm interviewing junior devs today.  Earlier I was trying to see if a guy understood that promises collapse.  I asked him what this evaluates to: ```js await Promise.resolve(Promise.resolve(42)) ``` Anybody got a clearer way to ask that question? <SEP> Introducing a variable makes it clearer you're not looking for side effects: ``` var x = await Promise.resolve(Promise.resolve(42)); // what is x? ``` <SEP> I couldn't think of a simpler way to get a promise-in-promise - is that part clear to you? <SEP> The guy I interviewed this morning said his #1 takeaway was ""learn typescript"".  So maybe I'm doing something right. <SEP> @fatcerberus https://en.m.wikipedia.org/wiki/Primitive_recursive_function <SEP> The constant function and successor function are trivial to implement <SEP> The n-ary projection is also trivial, given we have ways to pop elements from a tuple <SEP> ``` var x = await (async () = <SEP> You might want to provide a definition of `Promise.resolve` as its little used and might not be in an interviewee's working memory <SEP> Now, we just have to show that implementable on your machine functions are close under composition and primitive recursion. Finally, show that your functions are closed under minimization.",what is the difference between number & string and never
Summarization, <SEP> How can I achieve that a UnionType is typed depending if an Array contains a specific value?  See here:  <SEP> Ok using Permutations Type from here <SEP> https://gist.github.com/dfoverdx/8a044df48f6fa71a75caa2e6c56bd5b0 <SEP> I'm not sure your whimsy can be fully appreciated amidst an attack of type-angst.,how to change the type of a union based on an Array value?
Summarization," <SEP> I'm adding a new item inside an array <SEP> it is an object array <SEP> the line after that is the problem though, the  `todo: ''` <SEP> has nothing to do with your array <SEP> u r right <SEP> i just changed this and worked <SEP> thanks <SEP> you're welcome",problem with adding a new item inside an array
Summarization, <SEP> There was another one where it literally emitted invalid code that was a syntax error. They quickly fixed it I believe <SEP> I can't remember what the term for it it. Function properties? <SEP> export function foo () {} <SEP> foo.x = value <SEP> The above could cause tsc to emit invalid code <SEP> https://github.com/microsoft/TypeScript/issues/31918 <SEP> bot fight <SEP> Lol <SEP> Final Candidate? Was his name Cloud? <SEP> Did he perform a Limit Break on your expectations? <SEP> Ah <SEP> ... <SEP> I guess there were no Limit Breaks <SEP> What a Phoenix Letdown <SEP> Could have been using ts 2.7 or sth <SEP> Or 2.0,emitted invalid code that was a syntax error
Summarization," <SEP> same reason `let callback: TCallback <SEP> ~~they must do a bit b/c otherwise `mode = a` would fail~~ <SEP> ~~since `mode` is type `number`~~ <SEP> I forgot how unions work - ignore those last two lines :joy: <SEP> but based on the constraints of the overload signatures, you should be able to do `b!` safely in the `else`. <SEP> `!` & ""safely"" are muturally exclusive ;) <SEP> but yeah - I can work around it, just means more checks <SEP> No, its for times when you know for sure its appropriate but the type checker cant prove it. <SEP> It certainly can be abused but its not necessarily unsafe. <SEP> In theory sure, but if you change the code around it, TS won't tell you if things change. It's safer than `@ts-ignore` for sure <SEP> You could throw in the else if b is undefined - but I wouldnt probably. <SEP> exactly. just need to add a check or two <SEP> but the throw isn't bad here, b/c it's Node - so it should throw anyway <SEP> `memfs` is `fs` in-memory, so it matches the node api, which throws if `callback` isn't defined/passed - so it needs to be checked at runtime anyway <SEP> meanwhile: I finally found a use for `else` <SEP> only took me about 5 years :joy:",allow mode to be type number
Summarization," <SEP> - - - Hello folks <SEP> I just wasted a weekend trying to undertsand why my TypeScript project doesn't build, while `yarn tsc --project src --showConfig` shows that my setup is well done, just as well as `yarn tsc --project spec --showConfig`... Well, after much frustration and sleeping, I came to the observation that TS buildinfo file and changes to **tsconfig.js** file DOESN'T WORK QUITE WELL TOGETHER.  So I am sharing this here to get some input before opening an issue. (NOTE - my project built successfully after deleting my TS buildonfo file)  tx   <SEP> - - - @Vannevelj - Given how you implemented your constructor, you'd better use `this` over `Partial <SEP> @SalathielGenese  that works perfectly!  I ended up using a `DeepPartial` type I found online based on your suggestion. <SEP> Not entirely sure if I understand your second suggestion though. If I use `with(obj: this)` then it still requires me to provide a full object <SEP> Yes, your constructor expects to find every field <SEP> Ah, I see what you mean. Sorry, that's a simplification in the example above: in my actual code the constructor does things like `if ('id' in obj) { this.id = obj.id }` <SEP> Now, imagine that you send some object without `field2`... It will initialized with `udefined` which is really not a boolean <SEP>  Ah, I see what you mean.  You seen right <SEP> @retorquere Is there not some `@types/bluebird` library that documents that type from bluebird ?",TypeScript project doesn't build while yarn tsc --project spec --showConfig
Summarization, <SEP> @ShadowManu the problem is I can't get UglifyJS working with Webpack when using tree-shaking (I think it runs before Webpack has transformed ES6 imports to commonjs) <SEP> Is there a way to achieve ` <SEP> The current decorator type is described here https://raw.githubusercontent.com/CarsonF/redux-form/0bea952d16e62ae382af9cac7afccdb0d11afdd2/index.d.ts,how to use  tree-shaking with webpack?
Summarization," <SEP> Hi guys; regarding #3510 -- still are there any plans to release TS 1.5 for VS 2013 as an installer/extension before VS 2015 release in 2 weeks? If not, will 1.5.2 roll out on July 20th with VS 2015? <SEP> @LordJZ it will be going out at the same time as VS 2015 <SEP> Really though, we're mainly hoping to reduce the latency between releases for users; we will be learning what works best as we go along.",Palns to realese TS 1.5 for VS 2013 as an installer/extension before VS 2015 release?
Summarization," <SEP> Hi, got a typings question. How do I return the correct type for a construct like this: ``` const settings = {     mySql: {...    },     hapi: {         default: {             port: 3305,             address: ""0.0.0.0"",             ...         },         development: {...},         production: {...}     } };  /**  * the following function reads out the current enviroment settings from the above settings object.  * be aware, missing settings will use default and if that's not there return an empty object!  *  When needed additional enviroments those can be added  */ export const config = Object.keys(settings).reduce((res, cur) = <SEP> Inference should pick that up right? how do I help it, so it actually works? <SEP> TS 2.0.6",how do i return the correct type for a hapi construct?
Summarization," <SEP> ``` receiveJsonBatch <SEP> I'm obviously confused lol <SEP> oh wait! `receiveJsonBatch <SEP> ```ts type JsonBatchTuple <SEP> That seems more in line with what you want <SEP> This way `T` is the raw input tuple so you can map it in other ways if you need to <SEP> ohhhh.... <SEP> :D :D that seems to be working! :D <SEP> It's just like regular programming, except you're programming the type system <SEP> right so you took the tuple type away from T so you could separate T from the tuple, but still enforce the tuple in the actual param type <SEP> I don't think I would have thought to do that lol <SEP> but it all seems to be making sense now I'm reading it :D <SEP> you really do have to think ""now, what exactly do I want"" before starting... <SEP> @fatcerberus thank you very much for your help, you saved me a big headache :D <SEP> n/p",confused about receiveJsonBatch the tuple type
Summarization," <SEP> Could someone help me with this error please?  <SEP>  Type '{ alias: string; value: number; } <SEP> Yeah, map returns an array <SEP> add `as Breakpoints` <SEP> okcool thanks <SEP> as written it says `320 * (index + 1)`, so its a lie <SEP> how do you mean sorry? <SEP> hey dont mind me, I cant read", erro type  alias: string; value: number
Summarization," <SEP> So I caught that bizarre problem I'd been facing. The traps worked.   My errorHandler function for the API client sends the config params to the logger, which adds log entries to the DB. I'm using the DB lib `slonik`, which has a serializer method `sql.json()`. I recently added a reference to promiseToken to the config args for API requests.  Turns out `sql.json()` rather than just serialize like JSON.stringify, it calls an internal function `deepFreeze`, which recursively calls `freeze` on whatever is passed to it.  What's a little odd, that @ShanonJackson pointed out is, freeze doesn't normally throw when attempting to re-assign a property. When I try it in node, I don't get an error, however, when I try it on the playground  <SEP> have you done any of the boxed ones? <SEP> Side opinion question - recursively mutating the object with `Object.freeze` for a serializer seems like a pretty nasty side-effect. I'll work around it, but do you think it's worth opening a ticket? <SEP> Thanks. Yeah, it wasn't fun! Glad it's finally tracked down.",how to re-assign a property in node.js?
Summarization," <SEP> i would like to create a base enum in a library, and statically extend it within another module (mutating the value at runtime and the type at compile time) <SEP> i have done some searching and this isn't directly supported, so i've tried a dozen other approaches involving things like classes and declaration merging, and nothing seems to work quite right <SEP> so i'm open to suggestions if other people are doing something like this <SEP> essentially i'd like to define a base enum but allow other modules to extend it",is it possible to create a base enum and extend it statically?
Summarization," <SEP> I've got kind of a silly question, how should I go about declaring a global variable in Typescript ? I'm trying to wrap Pixi.js with an engine of my own (a scenegraph, scene manager, etc) but I'm unsure how I can make my own stuff available everywhere in the code, so I can for example type `engine.scene.add(sprite)` where engine is a class I have created which possesses the scene manager, etc. See what I mean ? <SEP> (I imagine I should rather go with a separate module that I compile into a library I then import in my game ?) <SEP> In Node you assign stuff to `global`, in the browser `window` etc.  Theres a stage 3 proposal to add this to the language - `globalThis` <SEP> @LaP0573 Check out `declare global {` <SEP> sounds like you want to use mapped types <SEP> `type Wrapped <SEP> the trick will be implementing the `WrapMethod <SEP> @cspotcode, exactly.  i'm not sure how to get the compiler to get each method's type from `K in keyof T`.  there should be a mechanism--T is fully defined/well-known <SEP> T <SEP> It looks like the type of client and wrappedClient are identical <SEP> in what usage do you mean? <SEP> It seems like, as far as the type system is concerned, client and wrappedClient are the same type of value. Same properties, and each property's value has the same type: a function that accepts the same args and returns the same return type <SEP> Ah nevermind I see the difference now. <SEP> A random string file?",how to declare a global variable in Typescript?
Summarization," <SEP> I'm not sure if I understand your question, or maybe there's some flaw I've overlooked. But I'd be using `new Function` to build up expressions from strings. <SEP> stay functiony <SEP> I havent benchmarked this yet, so I dont know if its slower or faster <SEP> Would you use a regex to get the function body of `notNull`? <SEP> Or would `notNull` be specified with strings in the first place, to avoid regex-y solutions <SEP> currently, notNull has dual specification, both string and function form. <SEP> ``` const notNullStr = ""x != null"" const notUndefinedStr = ""x != undefined"" const notMaybeStr = `(${notNullStr}) && (${notUndefinedStr})`  const notNull = new Function(""x"", `return (${notNullStr})`) const notUndefined = new Function(""x"", `return (${notUndefinedStr})`) const notMaybe = new Function(""x"", `return (${notMaybeStr})`) ``` <SEP> I don't know of any cross-browser supported way to get the source code of compiled functions, though <SEP> Yeah, I'd feel uncomfortable with regex + f.toString(), too <SEP> Hmm...  What's a good name for this library, since runtype is taken. <SEP> flytype walk before you run, run before you fly <SEP> You don't want your fly to be open, in some cases <SEP> It should be easy. I don't like type-registries, it seems to duplicate the work of a proper module system",why is new Function faster than notNull?
Summarization," <SEP> so why doesn't tsc compiling to js correctly <SEP> ``` ""compilerOptions"": {         ""target"": ""es2015"",         ""module"": ""commonjs"", ``` <SEP> I still get ""let"" in the js file <SEP> @foxjazz  ""let"" is javascript <SEP> at least in es2015 <SEP> maybe you should be targetting ""es5"" instead? <SEP> But you can try in the chrome console or any browser that supports ""es2015"", you will realize that most things people consider to be ""typescript"" are actually plain JS",why doesn't tsc compile to js correctly?
Summarization," <SEP> Hi, are there any docs about how the typescript test harness work? <SEP> And where does the name `fourslash` come from? <SEP> I believe fourslash is the DJ name of Anders Hejlsberg :-) <SEP> How do I create a Map? `selectedItems: Map <SEP> key/value <SEP> Oh so a key can be another type other than string? <SEP> number <SEP> or symbol probably <SEP> https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map even more are possible <SEP> Oh okay I see, I was having the premonition that maps can only have a key of string. Thanks! I get it now! <SEP> map keys and values can be almost anything <SEP> if you are using the es6 Map class <SEP> string and number if it's just a plain old javascript array <SEP> Oh facepalm, yeah well it really is a javascript array if it's just a string key, with just the additions of the other methods. Haha well I was just after the given methods of map :smile: <SEP> I try to build my typescript2 app to --outFile, I use systemjs but when I import my app with System.import it gives me errors about different modules missing, eg angular, angular-aria ... The odd thing is, that it's not the same module on every page reload so it seems to load them in any random order. What could I be doing wrong? <SEP> am i too stupid at the moment? why do the first 2 lines work, but the third doesn't (in a class definition)? ```     getCurrentRequest: (Request)= <SEP> ""A parameter initializer is only allowed in a function or constructor implementation."" <SEP> why a colon?  those are two types that are passed into a function",how to create a map using typescript test harness?
Summarization," <SEP> you need a column database :smirk: <SEP> I've actually never used one before <SEP> I've only a little <SEP> But probably not?  I have a lot of tables to enforce a lot of different constraints.  Dumping them all into the same table means I can't enforce those constraints anymore <SEP> One job I had these heavy queries that I worked real hard to optimize, they'd take up to hours to run on an underpowered machine running the db. <SEP> we plugged the data into the AWS column db that's compatible with postgres, and the queries were super fast.",do you need a column db?
Summarization," <SEP> Hi, Is there any ready made collection library is available in typescript ? <SEP> like List <SEP> `Array <SEP> @simplysh beat me to it <SEP> List = Array, Dictionary = Object <SEP> Thank you.. That is what I am using right now. Just I want to know any latest library is available or not? <SEP> not sure what you're trying to do... <SEP> array and objects are built-ins <SEP> I expect some 'Linq' kind of stuff. <SEP> linked lists? <SEP> https://www.npmjs.com/package/linq-ts <SEP> I mean, yeah I suppose you can use that if you want <SEP> this is one of the Linq library which provides some basic operations like aggregate, count, etc <SEP> arrays in JavaScript are more alike Java List than Java arrays from my point of view <SEP> count is easy to do with functional programming <SEP> if anybody know any standard library for collecton, please update. <SEP> also maybe have a look at underscore http://underscorejs.org/ <SEP> it's a JavaScript library but has a alot of useful functions without the performance overhead of wrapping/reimplementing arrays <SEP> it's always best to use intrinsic types in Javascript in my opinion <SEP> ``` let foo: Array <SEP> Ok. Thank you. :) <SEP> not trying to deter you from using a high level library, just offering some alternate ways of doing it <SEP> ya . its really good. <SEP> @natarajanmca11 here's a bigger list of what you can do with arrays <SEP> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods_2 <SEP> note that some newer features are not supported in older browsers <SEP> (looking at you IE8) <SEP> and underscore extends that with even more :) <SEP> @wanderer06 Thank you <SEP> @ngydat does JS support YAML? <SEP> TS is a typed JS <SEP> @ngydat only thing I could find <SEP> https://github.com/nodeca/js-yaml <SEP> thanks",is there any ready made collection library in typescript?
Summarization," <SEP> Nope, I got it! <SEP> The method isnt using full on Generics! <SEP> ``` class GPU <SEP> That works! <SEP> Oh, I didn't notice that `createKernel` was missing a type param <SEP> It will be overly permissive, but will prevent spurious errors for valid code",createKernel is missing a type param
Summarization, <SEP> Iv'e tried to think of many different ways to do it none of them have ever worked every few months ago i try to make it typesafe again when i get a new idea <SEP> i thought i'd cracked it when i realised i could just modify the type of Array.prototype.map by augmenting global <SEP> You would need a whole new concept of  <SEP> Maybe could use the contextual typing machinery for this <SEP> Right now variables have fixed type <SEP> i wouldnt say it doesnt make sense - you could do e.g. selective narrowing and widening based on context <SEP> Of course proxies benefit most <SEP> Disclaimer: dont actually write getters that do this :stuck_out_tongue:,can i modify the type of Array.prototype.map?
Summarization," <SEP> can typescript output a single .d.ts file now? <SEP> like if i target declartion: true, emitDeclarationOnly: true   a whole directory can i get just a single .d.ts file back? <SEP> yep got it don't worry <SEP> Early january finally going to open source like 3.5 years of my life",can typescript output a single.d.ts file now?
Summarization," <SEP> @maxetime very similar stack to a project I just rolled off <SEP> best thing to do is to comment out most of the functionality of your app <SEP> then begin un-commenting it and compiling <SEP> checking to see what types inference cannot determine/doesn't agree w/ <SEP> start w/ the compiler in a VERY liberal mode <SEP> basically the default I think is reasonable <SEP> expect to do 1-3 passes over your code during the transition <SEP> and prioritize the type-correctness of your components much lower than your domain model initially <SEP> just make them all React.Component <SEP> ymmv <SEP> @stevekane  thanks, yep that's similar to what I've started doing <SEP> ya all I can say is don't freak out mid-way <SEP> and don't try to do it all at once <SEP> the commenting solution we found was a decent way to preserve sanity <SEP> haha ya sanity is important for a big move like this :) <SEP> I more or less cannot recommend it enough tho <SEP> we had a medium-sized editor/run-time we built in react/js <SEP> and the best move we made was switching to typescript <SEP> after 9 months of dev",best practice for un-commenting and compiling 
Summarization," <SEP> You want to import `""mocha""`, not `""mocha-node""` <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/0144ad5a74053f2292424847259c4c8e1d0fecaa/mocha/mocha.d.ts#L234 <SEP> Unfortunately with ambient module declarations, there isn't a strict correspondence between the file name and the module name <SEP> Also, you should just consider adding `typings/main.d.ts` to your `tsconfig.json` file <SEP> Let me clarify- you want  ```ts import * as mocha from ""mocha""; ``` <SEP> Dependencies need to be managed manually <SEP> the old `tsd` tool properly installed dependencies, perhaps `typings` isnt?",how to import mocha from mocha
Summarization," <SEP> `Resynth (@resynth1943:privacytools.io)`  <SEP> `Resynth (@resynth1943:privacytools.io)` posted an image: ! <SEP> vscode's terminal does better <SEP> vscode's terminal if I paste that line: `console.log(' <SEP> but when I run the node repl in that terminal and paste it there, it shows the emoji <SEP> `Resynth (@resynth1943:privacytools.io)`  <SEP> yeah, I just expect better form iterm than whatever vscode is using. <SEP> `Resynth (@resynth1943:privacytools.io)` Fair <SEP> hmmm.  Lazy optional regex groups just became my new favorite thing. <SEP> oh, lazy optional <SEP> Like, it doesn't work properly with composite projects <SEP> Otherwise, TS server will not detect the new file properly and won't give me intellisense",vscode's terminal does better node repl
Summarization," <SEP> ok <SEP> but  file array or includes works just as well <SEP> i am a noob in ts, just want to understand namenclature <SEP> yeah sure <SEP> just one more thing",jacobus-brogly> file array or includes works as well
Summarization," <SEP> Good morning everyone, struggling with extending a generic type <SEP> I have this generic class <SEP> ``` export abstract class AbstractModelFactory <SEP> and when I try to extend it, with a Generic type, like this <SEP> ``` export class DiagramEngine <SEP> i get the following error `Type 'T' is not generic.` <SEP> anyone can guid me in the right direction perhaps? <SEP> going to be extremely difficult to replicate it as the Generics in the library i'm trying to extend are endless <SEP> but it's something like that <SEP> ``` export class DiagramEngine <SEP> in the protected members <SEP> ``` protected nodeFactories: FactoryBank <SEP> at the T on each of the Factories <SEP> I would have expect him to force the use that implements the DiagramEngine to provide a type that is at least extend `AbstractModelFactory`",extending a generic type with a protected nodeFactories: FactoryBank
Summarization," <SEP> like jQuery to make an example <SEP> then it's just a psychological thing :p <SEP> I heard that it's super slow, but maybe I'm taking it out of context <SEP> Thanks again  @NaridaL",how can i use jQuery to make an example
Summarization," <SEP> just found this gem: ```ruby       time = Time.now       time -= time.sec # round to minute ``` ...doesn't truncate fractional seconds :( <SEP> Nice <SEP> but...seems like it's doing the rounding for no reason, so I'll leave it alone. <SEP> Unless its one of those Schrodinger bugs where once you see it and realize it cant possibly work... it stops working <SEP> http://www.catb.org/~esr/jargon/html/S/schroedinbug.html <SEP> I think it's probably best to ask about this here since I think this is TypeScript related, but I'm attempting to build an Angular app on Ubuntu. It contains a number of imports that are relative paths such as `'./etc'` and `'../etc'`, as well as tsconfig.app.json paths such as `""@app/*"":  <SEP> I have this vague memory that those paths you configure in tsconfig are only used by tsc to transpile or something. They're not actually used by node or webpack to resolve modules <SEP> So, it's possible for tsc to know that `@app` means `./app` but webpack or node will just see `@app` and get confused <SEP> But I'm probably wrong or only half correct <SEP> It has been a long time <SEP> Someone else will probably give a proper answer <SEP> I assumed from the error code that this was related to the TypeScript transpile. <SEP> I guess there are two module resolution modes, which is node and classic... <SEP> But that's already set to `node` in my tsconfig.json which seems appropriate. <SEP> Hmmm, looks like this is a Windows case insensitivity forgiveness thing. <SEP> Why it works there and not here. <SEP> I'm gonna hunt this down. Don't mind me. ;)",ruby time doesn't truncate fractional seconds for no reason
Summarization," <SEP> If you need to narrow a `string` to a specific string literal, you're going to need to check it against runtime values, pretty much. This is how I do stuff like that: <SEP> ```ts const things =  <SEP> :thumbsup: so something like  ``` type keys = ""test""|""other"" const a:string = ""test"" // string from external source let obj: { <SEP> yeah, that's actually better in some ways, but it is kinda redundant, and can get unwieldy when there are more than two keys. <SEP> It's better because you don't use a type predicate, which have similar risks to type assertions. <SEP> But in this case I think it's generally worth it. You can even make a generic type predicate factory if you use this pattern often.",how do you narrow a string to a specific literal?
Summarization," <SEP> I'm having problems with parameter hints with tsc 2.3.4 and code 1.13.0. For some parameters, the description I write doesn't show. Sometimes, if I try to use the `@param foo {number=123} A foo.` syntax it fails to parse once it gets to `123`, seemingly etc. etc. <SEP> Not sure whether this is a TypeScript or a VS Code issue but <SEP> I couldn't find a place to chat about VS Code <SEP> @sustained what are you trying to do with {number=123}? <SEP> I am struggling to find examples of things written in TS that have these comments that give you extra info. in VS code but I saw someone do that somewhere. <SEP> was trying to say that it defaults to 123 <SEP> @aretecode can you be more specific? <SEP> @sustained Is that in a declaration file? otherwise you can just do `function f(foo: number = 123)` <SEP> no this is in a JS-doc comment in TS code, I am trying to get VS code to show me those nice parameter hints that I saw screenshots of <SEP> but nothing I try seems to work <SEP> did you see those in numbers in paricular? <SEP> I am struggling to even get `@param {boolean} allowPunctuation Allow punctuation?` to work <SEP> ``` /**  * @param {(string|string <SEP> not sure what is going on with it <SEP> that would be the correct jsdoc syntax for a default value <SEP> but Im not even sure vs code parses that... <SEP> oh, things started working now, maybe the ""language server"" was lagging behind <SEP> well I'll give that a try <SEP> the language server uses the type info, not the js doc comments ^^ <SEP> Nah, it doesn't parse that, that's a shame. <SEP> do you have an example of the autocomplete you're trying to achieve? <SEP> why, should it be working without the JS-doc stuff? <SEP> E.g. this.  ```js  /**   * Get the hash of the last git commit from the log.   *    * @param {number} ",parameter hints problems with tsc 2.3.4 and code 1.13.0
Summarization," <SEP> Is there a way to dereference `typeof`? ``` class A {     static b(){}     c(){} }  type D = typeof A; // D now refers to the static instance of A type E = instanceof D; // something like this, to get the type of an instance of A from D ``` <SEP> `type E = D <SEP> ``` class A {     static b(){}     c(){} }  type D = typeof A; type E = D <SEP> Cool, thanks. <SEP> ```ts   async getCards(parent: HTMLElement, cards: Promise",is there a way to dereference typeof?
Summarization," <SEP> O.o that's really weird... if you can make a simple repro and post an issue that would be great. <SEP> I am super busy but I can give you a private gist for the file in question <SEP> :+1: <SEP> @Gerrit0 https://gist.github.com/collincusce/d83dda75cd4c673953811c2b66540720 <SEP> I'll run TypeDoc on that sooner or later and try to reproduce. <SEP> updated the secret gist to include the html produced @Gerrit0 <SEP> also has an example of a known bug for typeparam <SEP> It almost looks like it's just getting double rendered... which is weird, I don't recall it doing that. <SEP> no way to handle `export class KeyChain <SEP> saw the issue for that, so let it be <SEP> Yep, just requires more time... <SEP> There are quite a few issues in line before that one on my priority list <SEP> I do a lot of stuff with generics, like this: ```typescript     addEndpoint =  <SEP> so that feature would make things nicely documented, but not essential <SEP> I think more important is library mode, neither the file nor the modules mode is very good IMO. <SEP> fyi, I might be a shitty programmer, I only learned typescript this month and wrote a large amount of code and so the stuff I'm doing could be a bit hokey or non-standard <SEP> but from what you said, typedoc shouldn't care I guess <SEP> Yea, TypeDoc's philosophy has always been take whatever you throw at it and make a best effort <SEP> ohhh right ummmm category stufffff... how to use it <SEP> In a doc comment `@category  <SEP> because I have this pluggable interface, and I'd love to group the docs of those APIs plugins by that category <SEP> yeah I do that, just not sure how I can use that in display <SEP> It should display automatically, replacing the grouping by types <SEP> I think it's just for the module view <SEP> hmmm maybe it's the template then, or the fact I use custom outlines <SEP> Ah, you said you were using a custom theme right? <SEP> Categories require theme support, and it might not be supported.",no way to handle export class KeyChain
Summarization, <SEP> :((( <SEP> interesting <SEP> @superamadeus <SEP> Okay... Hmmnmn <SEP> I think there is some way to trick this whole situation <SEP> You know how? maybe make without dist. post install script will compile and place them in root folder,make without dist and post install script will compile and place them in root folder
Summarization," <SEP> How do I convert my script with  my iife in it? http://gregfranko.com/jquery-best-practices/#/8 <SEP>  <SEP> Oh God, I just realised that I was posting in a TypeScript channel asking about Aurelia! Apologies for the spam. Gitter didn't seem to switch channels when I clicked on the names in the right sidebar.",how do you convert a script with iife in it?
Summarization," <SEP> Howdy!!! I usually find a way to hack things in typescript and this is the first one I've really gotten stuck on. I'm assuming it's going to be a ""doh"" moment and I just don't know wha to search for.  Let's say you have a merchant who sells items. All possible items are known, so we represent those as an enum:  ``` enum Items {   Necklace = ""Necklace"",   GolfBall = ""GolfBall"",   Yarn = ""Yarn"", } ```  Each merchant has a subset of items, and for each of those they have a price and a variant. But let's say you're adding types to an existing project, and need to define the types for something that looks like this:  ``` const merchant = {   prices: {      <SEP> Actually, this worked:  ``` type Merchant <SEP> could have sworn I tried that first but there you have it <SEP> Is it possible to enforce TS to pick a certain overload depending on whether you're providing an anonymous function with no type information (= I want TS to do type inference), vs providing a function that already has type information (= I want to check some constraints on the function parameters).  Basically I only want to do type-inference if type information is missing, otherwise not. <SEP> To provide a bit of contest, I have something like this: ``` interface ValidateFn <SEP> Or can I somehow access the actual inferred type? I.e. Whatever ValidatorFn <SEP> I tried to move the whole `ValidatorFn` as a generic type for the `ValidateFn` with a `Validator extends ValidatorFn <SEP> also tried reverting the logic, i.e. instead of using unboxed `ExtractDependencies` for `ValidatorFn`, I make sure that `Dependencies` extends a boxed type of the args: ```   ",hack things in typescript
Summarization," <SEP> yeah I mis-spoke <SEP> I meant enums <SEP> Ok! <SEP> I'll correct the record <SEP> hehe <SEP> ```ts enum Size {    Small,    Medium,    Large,    ExtraLarge, } // vs const Size = {   Small: 0,   Medium: 1,   Large: 2,   ExtraLarge: 3 } ``` <SEP> I understand now np <SEP> What in `let inventory:  <SEP>  surrounding array seem wrong <SEP> What a dumb mistake, pardon me <SEP> Of course you loose the type checking. But I wonder what will happen if the enum is expand in newer version and consumer code is using the old definition (just thinking) <SEP> That's always a fun question <SEP> @unional Shouldn't be a problem, just add the new members at the end... if you foresee it happening a lot, set the members explicitly to avoid confusion.",what will happen if enum expands in newer version and consumer code is using
Summarization," <SEP> @SimonMeskens show me your VSCode theme? <SEP> I am in love with my one <SEP> @rhys-vdw https://cdn.discordapp.com/attachments/431937287912423447/442799600949002248/2018-05-06_23-26-01.png <SEP> Not my cup of tea, but still cool. <SEP> I'm not sure yet if it's my cup of tea, but it's cool enough that I have to try it <SEP> Guessing that's from TypeProps? I'm looking through that now, way more complicated than anything I've attempted. <SEP> yeah, TypeProps is a bit... special <SEP> but I always end up writing similar libraries <SEP> Check out this sweet theme: <SEP> ! <SEP> I'm into high contrast. Even though my vision is fine. <SEP> I need low contrast for my eyes, oddly enough <SEP> I keep my monitor on low brightness <SEP> Probably related <SEP> ah yes",what is your favorite VSCode theme?
Summarization," <SEP> anyone know much about Flow? someone submitted some types for GraphQL.JS and I'm not sure if it's correct or not <SEP> flow has: `astNode: ?ScalarTypeDefinitionNode;` <SEP> TS has `astNode?: ScalarTypeDefinitionNode;` <SEP> flow types got submitted? <SEP> according to https://flow.org/en/docs/types/objects/#toc-optional-object-type-properties <SEP> it has the same syntax <SEP> flow's ?X is probably more like X | undefined in TS <SEP> yeah that's what I was thinking it looked like <SEP> he's submitting the TS definitions for the latest updates: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19547/files <SEP> and they're based on flow types: https://github.com/graphql/graphql-js/pull/746/files <SEP> isn't that the same thing though? `astNode?: xyz` being that it can be `xyz` or `undefined` <SEP> or is it that it's not actually defined compared to actually being defined as undefined? :D <SEP> ``` declare const x: { foo?: number } declare const y: { foo: number | undefined } x.foo = undefined y.foo = undefined  ``` <SEP> seems to behave identically yeah <SEP> cool, so I guess it's good to go :D",flow type definitions for GraphQL.JS
Summarization," <SEP> How do I get @typescript-eslint to raise errors for type issues? <SEP> that's not what it's for? <SEP> When you say ""type issues"", you mean like errors that tsc would normally flag? <SEP> Out of the box, typescript-eslint doesn't actually use type info, but you can configure it to do so.  I think in that case, when it generates type info, it should surface any errors that come out of the typechecker <SEP> docs on type-aware parsing <SEP>  The code includes `INT_MIN` which is defined in the old C ` <SEP> I mean, IMO, that's one of its better parts. If C++ only had access to `INT_MIN`, then templates couldn't get the minimum bound for an arbitrary template type <SEP> yeah. C++ has the same issue that JS had before modules: Once you've jammed everything together into one namespace, referencing any one thing becomes  verbose. <SEP> you _could_ do `using namespace std` or `using std::numeric_limits` <SEP> and then it's just `numeric_limits <SEP> I don't think so? I think it still needs `""module"": true`? <SEP> I knew that, I meant, without a CLI flag <SEP> I wouldnt expect it to though since thats resolved statically <SEP> with the `.mjs` extension, it loads modules without any flags necessary. <SEP> ESM can use `import` on commonjs modules - cant use `require()` because afaik the engine has no way to know which module called it (commonjs uses a clever hack to make this work whereby the module is secretly wrapped in an iife and passed a unique `require` at load time)",how do you get @typescript-eslint to raise errors for type issues
Summarization," <SEP> https://www.youtube.com/watch?v=US8QG9I1XW0 <SEP> embedded, basically <SEP> not that niche <SEP> not really <SEP> not everyone writes web stuff? we write data processing in spark in scala, a jvm language <SEP> we write android in kotlin, a jvm language <SEP> it's not just web <SEP> 20% diff in CPU usage matters almost nowhere anymore <SEP> Even if it does matter the solution is never we need to mutate <SEP> data pipelining? flink, in java or scala <SEP> That might change with IoT really taking off nowadays <SEP> jvm again <SEP> @Derya Until you have heavy loads. We have customers with hundreds of thousands of users. 20% is a lot especialy as those users are often doing heavy loads. <SEP> oh and let's not forget JS <SEP> now JS is used for everything too <SEP> @ShanonJackson but you said memoization, which uses mutation <SEP> Not all memoization has to use mutation <SEP> BUT! <SEP> 20% of something that is not 20% from being your bottleneck is not a lot <SEP> Memoization is one of the 'let's' in our codebase <SEP> but adding mutation behind an immutable facade looks just like immutable <SEP> suppose you have a services architecture <SEP> which is good, and fine and appropriate <SEP> most of your cpu cycles might even be spent on things other than your own code <SEP> ...hence adding mutation for performance reasons is good and useful <SEP> like ok <SEP> in C++ you can have a const function thats not really const, but appears that way from the outside, for similar reasons, pretty much always an optimization. <SEP> what's your company anyway? do you guys do like, image processing or something? <SEP> video editing? protein folding?",why do we need to mutate data pipelining?
Summarization," <SEP> guys whats the difference between typescript 1.8 vs 2.x ?? <SEP> @AyzPat lots of stuff... <SEP> @NaridaL is it possible to highlight the major ones?? <SEP> @AyzPat https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript <SEP> Ctrl+F and 1.8 <SEP> then scroll up :D <SEP> @notsonotso thanks buddy.. <SEP> In typescript is there some kind of way to refer to a classes type (like Class <SEP> Best I can think of is via composition like this... but it does introduce an extra component, it would be nice to be able to simply cast the type definition itself like you would do in a nominal language..  ``` export const ConnectedSomeComponent: React.SFC",whats the difference between typescript 1.8 and typescript 2.x?
Summarization," <SEP> Looks like if you say ` <SEP> yes <SEP> @lloydevans  but TS will also allow you to set `{ x: undefined  }` for `{ x?: number }` types, which is suboptimal <SEP> how so? <SEP> kk yes I see what you mean <SEP> yea.. :) <SEP> the difference between a property being undefined and it not existing at all <SEP> yes <SEP> first of, I can't type signatures that take partial objects and merge them to the non-partial ones.. as such I need to check for non-undefined values or do something like `_.omitBy(partialObject, _.isUndefined)` <SEP> but even if I do that, I can't merge the return value from that lodash helper into the non-partial object because I can't type that return value to begin with (to tell TS that the result is partial, but with non-undefined values) <SEP>  @dwelle Just playing around here, but I take it this is not cutting the mustard for you: ```ts interface Type {   a: string;   b: string; } let t: Type = { a: """", b: """" }; let p: Partial",how to set  x: undefined  for  x?
Summarization," <SEP> .then().then().then() :) <SEP> can you remove the `Promise <SEP> just to see <SEP> on your activate function <SEP> it works <SEP> @jnystrom no no, i maid mistake there, wrong interface <SEP> and tsc or tslint didn't warn me <SEP> @con-ssc exclude them in tsconfig.json <SEP> @con-ssc for example ``` {   ""compileOnSave"": false,   ""compilerOptions"": {     ""target"": ""ES6"",     ""module"": ""commonjs"",     ""sourceMap"": true,     ""declaration"": true,     ""noImplicitAny"": true,     ""removeComments"": true,     ""emitDecoratorMetadata"": true,     ""experimentalDecorators"": true   },   ""exclude"":  <SEP> I used ""files"" so I cannot use exclude <SEP> also it only excludes them from being automatically imported but if I use referencepath they get imported",remove the Promise on your activate function
Summarization," <SEP> https://discord.gg/typescript <SEP> you actually used crystal at work?  That's brave of somebody. <SEP> see `tsc --watch` <SEP> @keithlayne we're a small company lol - https://ulayer.net if you're interested - we built our customer panel in Crystal with AmberFramework it's working out well for us <SEP> Yeah so the big caveat about experience with other statically typed languages is that TS's type system is probably different in ways that you might not expect. <SEP> how so? <SEP> Like the foundation is structural typing.  Also, TS and any type info only exist at compile time, then they are completely erased. <SEP> But generally, TS is just JS.  So the answer to many ""how do I do this in TS?"" questions is ""the same as you would in JS"". <SEP> well yeah but the compiler makes it almost certain the data type will be as expected, no? <SEP> even if the types only exist for purposes of knowing the code will work, even if not enforced at runtime <SEP> of course if the code can only flow in an expected way then typescript still does its job right <SEP> Types in most languages aren't enforced at runtime either. <SEP> not sure how LLVM handles it <SEP> Crystal compiler just turns everything into LLVM IR or something then it gets turned into native machine code <SEP> right.   All the type checking is in the compiler there too. <SEP> But importantly you can't do any reflection on the types really, and you can't generate any runtime code (with stock tsc anyway) based off your types. <SEP> What I was gonna say is that a lot of people are surprised by structural typing.  There are no exact types in TS (for now anyway). <SEP> It makes javascript a bit more readable now that I've been so used to seeing data types because of Crystal <SEP> What's important is TS is usually ""can a value of type T be assigned to this thing of type U?"".  Sometimes people are surprised by the answer. <SEP> it's weird not seeing data types in a language now <SEP> When contributing to open source Rails apps its kinda weird not knowing the data type due to a lack of annotations <SEP> Just remember inference is your friend too, I'm sure you're aware.",what is the type system of statically typed languages like TS?
Summarization," <SEP> Kind of just skimmed over the conversation but, if you have a function that is declared to return `A | B` and now you decide ""in this case I want to return `C` instead without having to declare it"", how can the compiler know that *at the call site*?  Types only exist at compile time.  So at the call site TS sees `x = foo()`, sees that `foo()` is declared to return `A | B` and typechecks accordingly.  Now at runtime it actually returns `C` and everything breaks because the typecheck did the wrong thing <SEP> BTW are you using quicktype for the JSON schema - <SEP> @fatcerberus I guess it's really easy to do by just casting, but aliases of the same object with all different types are kinda troubling to me. <SEP> btw regarding the phantom type: be careful with those.  TS doesn't *always* retain the type parameter: https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-type-inference-work-on-this-interface-interface-foot--- <SEP> @keithlayne no, i forgot about it and rediscovered it a few days ago. no time to test it atm, so for now using https://github.com/horiuchi/dtsgenerator <SEP> If you ask it to infer `T`, it tries to fish it out of the structure <SEP> I remember Shanon saying that changed with a recent version and breaking his stuff.  I think the workaround is to add a dummy member of that type or something. <SEP> As they rely on phantom types retaining their type variables",how can you tell if a function is declared to return A | B
Summarization, <SEP> ? <SEP> svc ? <SEP> im not using ts though <SEP> microservices <SEP> faas <SEP> I am currently writing a micro service to convert videos <SEP> what backend/host? <SEP> my favourite cloud service is coconut at the moment <SEP> ok <SEP> works quite good so far and the support is great,microservices using coconut as backend/host
Summarization," <SEP> Let's say I want to extend a namespaced type from a third party library in my codebase like so:  ``` declare module ""native-base"" {   namespace NativeBase {     export interface Card {       whiteBackground?: boolean;       noPadding?: boolean;       noBorder?: boolean;     }   } } ```  This creates a merged interface with my three new attributes above, and the original NativeBase Card type.  Is there any way for me to alias this new, merged type and use it in my codebase? I can't quite figure out how to get the merged output of that declared type <SEP> ``` import React, { Component } from ""react""; import { Card as NBCard, NativeBase } from ""native-base"";   declare module ""native-base"" {   namespace NativeBase {     export interface Card {       whiteBackground?: boolean;       noPadding?: boolean;       noBorder?: boolean;     }   } }  import IProps = NativeBase.Card;  export default class Card extends Component <SEP> ^ Doing this causes a brand new, extensive TS error in NBCard <SEP> The goal is to make a wrapper of all my third party components, but type the wrappers with the same interface <SEP> Hey guys, I'm trying to understand typescript's conditional types from  <SEP> And a followup, why would NBCard still give me a TypeScript error if I am typing the wrapper component props with the exact same type as the wrapped component? <SEP> ``` import React, { Component } from ""react""; // declare module ""native-base"" { //   namespace NativeBase { //     interface Card { //       whiteBackground?: boolean; //       noPadding?: boolean; //       noBorder?: boolean; //     } //   } // }  import { Card as NBCard, NativeBase } from ""native-base"";   export default class CustCard extends Component",how to extend a third party namespaced type in my codebase?
Summarization, <SEP> is there a typespec or something to detail keywords and terminology in certain scopes? <SEP> Im looking for everything that is valid in a namespace scope <SEP> figure there is a spec somewhere ,is there a typespec to detail keywords and terminology in namespace scopes?
Summarization," <SEP> Yeah I feel like there have been a lot of proposals for HKT syntax but it's tough to make any of them really jive with existing syntax. <SEP> @fatcerberus I expect `UnionToIntersection <SEP> It's actually kinda weird to me - the LHS of the `extends` is parenthesized, so I assume that it's treated as not a bare type param and therefore `never` isn't short-circuited as usual, but inside the parens it *is* treated as a bare param and triggers distribution.  Hard to describe what I mean, hope that makes sense. <SEP> But re U2I I assume people are passing arbitrary unions to it and you'd think it would be quite common for some wrapped type alias to end up as `never`. <SEP> @keithlayne Yeah but like I said - if you consider `never` to be the intersection of everything (which it really is - the bottom type satisfies all other types, *ex falso quodlibet*), then the dual of that would be the union of everything - `unknown`.  What makes it weird is that it's going in the opposite direction from normal, but I've said this in the past: `UnionToIntersection` would be self-dual <SEP> It just happens that `never` is distributive <SEP> That's super interesting <SEP> * <SEP> but I think that output is basically a leaked implementation detail.  Result intuitively should be `never`.  I can't tell if you agree or not. <SEP> I think I do agree, actually.   :point_up:  <SEP> The self-duality is interesting from a theoretical POV though <SEP>  The duality of man.  You know, the Jungian thing. <SEP> You've quoted that before.  What is that from? <SEP> Okay, you just use so many fancy words sometimes I have trouble following :trolleybus: <SEP> It's from Full Metal Jacket.  Sorry, it pops into my head whenever you start talking about duality. <SEP> Mathematical duality is like the most interesting thing to me, I don't know why <SEP> What would co-fatcerberus be like? <SEP> Maybe he'd be like, an idiot savant or something.  Totally stupid but really good at programming somehow <SEP> Maybe we should ping jcalz and get his thoughts on the U2I thing.  His SO answer is probably (?) the most-used reference for that. <SEP> and then you get Ryan telling people not to use it because it's not conceptually sound... while ignoring the fact that *distribution exists at all* <SEP> :point_up:  <SEP> haha I've been searching for that tweet this whole time <SEP> In particular this reply:  <SEP> I sorta agree with him.  It only makes sense for object types really.  But I think people reach  for it way too fast. <SEP> Ah, I never saw that one. <SEP> But you can pretty much guarantee when Shanon says '1 sec' he's about to post some wall of stuff with UnionToIntersection at the top.  Just don't think it should be a go-to tool. <SEP> And then the inevitable question from the other end ""What does that do?"" <SEP> yeah we can do tons of things with unions, I don't really agree with that comment. <SEP> Although it would suck to have to create an explicit HKT per type if that makes sense",proposals fro HKT syntax for example the self-dual UnionToIntersection
Summarization," <SEP> @AnyhowStep good Q - IMO, thats a good idea. Made an issue https://github.com/microsoft/TypeScript-Website/issues/59 <SEP> ! <SEP> 3 <SEP> Ive also updated my design spec <SEP> not sure if that already lives in the tsserver, so might be a bit more involved than some of the other features <SEP> is it normal that, when i extend an abstract class with abstract methods, i need to re-declare types of the arguments in the method implementations? <SEP> shouldn't it be possible to infer automatically, but allow me to scope it down manually if i need to? <SEP> Theres no `overrides` keyword and TS supports overloads so how would it know whether you wanted to override the base class vs. just adding a new overload where all the parameters are `any` <SEP> Granted the latter doesnt make much sense but thats probably why <SEP> hmm <SEP> but it's abstract <SEP> if i have to define it anyway, and if cannot give it a random type (if it's a mismatch) <SEP> note that it's _abstract_ methods <SEP> I guess PostgreSQL does have a `CBRT(x)` function and `||/` operator, which MySQL doesn't have.",re-declare types of methods when extending an abstract class
Summarization," <SEP> guys, can any one explain why TS genearate `var _this;` instead of `var _this = this;` ? <SEP> more context @am0nshi <SEP> @con-ssc  thanx for reply :) got this script: http://pastebin.com/Jz5JZgpD <SEP> which generates http://pastebin.com/yD0EXsvn JS code. why do i have `var _this;`, instead of `var _this = this;` after compile? <SEP> And then you'll get the correct _this <SEP> @con-ssc great thanks, that's it! `var _this = _super.call(this) || this;` :) <SEP>  <SEP> @con-ssc can i check from base class exists method in child or not? something like `static` call? ~late static binding <SEP> if method realisation exists in current class to use it, if not - automatically use realisation from base method",why var _this; instead of var _this = this in TS
Summarization," <SEP> hi guys, I encountered a problem with TypeScript + SystemJS. Can you answer my question? https://stackoverflow.com/questions/51247558/how-to-get-systemjs-for-vue-2-working <SEP> Hey folks, if I have something like `interface MyInteface <SEP> @NaridaL I don't think it depends on function parameters (or at least not in my case): `let a: MyClass",typescript + systemjs for vue 2
Summarization," <SEP> Hey folks, another question building on the FunctionKeys thing I asked about yesterday.  Parameters <SEP> Overloads and generics  are  not really friends. <SEP> huh. Is there any way to correctly and strictly type that sort of wrapper for apply? (target, method, ...args)",is there any way to type  apply parameters correctly and strictly
Summarization," <SEP> `@import url('/styles.css')` <SEP> done <SEP> Does it output all styles to a single file? So basically in my web component base class, just default that into all shadow roots. <SEP> you can output single or multiple files <SEP> I wonder how it'll behave; if it'll have a flash of unstyled content or not. <SEP> css is blocking so should be no flash <SEP> This would all be easier with no shadow roots! But it is what it is.   There's the `adoptedStyleSheets` API coming out (already in Chrome). I think that'll make things cleaner: the ` <SEP> I normally write my styles in parent to child order, but because we have to save class names to variables, it means a nested child class has to be defined first:  ```js     // child     const scrubberTooltip = css`       position: absolute;       bottom: calc(100% + 6px);     `      // parent     const scrubber = css`       width: 14px;       height: 20px;        &:hover .${scrubberTooltip} {         visibility: visible;       }     ` ``` <SEP> And then at the end of my function that makes all the styles, I need to repeat the names:  ```js     return {scrubber, scrubberTooltip} ```  Is there a better way? <SEP> Dang, polluting the TypeScript channel now! Sorry everyone! :P",does @import url('/styles.css') output all styles to a single file? 
Summarization," <SEP> @CarlCui Why feed the troll? <SEP> @eenblam my bad :smile: <SEP> @eenblam feed the troll? Okie... <SEP> @CarlCui :smile: :+1: <SEP> Anways i forgot who i was talking to at the beggining <SEP> Oh yea, daniel",i forgot who i was talking to at the beggining
Summarization," <SEP> If anyone wants to answer I created a stackoverflow question with the same question: https://stackoverflow.com/questions/61368542/typescript-type-inference-of-complicated-type <SEP> Ah, sorry @AnyhowStep  - I don't get pings on Gitter (if I ever take too long, ping on on discord which I have notifications on for every computer and I'll pop in here) <SEP> he says, a month late <SEP> but I should make an example of using the sandbox in gh-pages with a custom runtime and types, I agree <SEP> :point_up: ",'typescript-type-inference-of-complicated-type' in stackoverflow question
Summarization," <SEP> It would make sense if it considered `A` atomically - but since it's a union, it doesn't (or isn't supposed to anyway), it applies the conditional to each member of the union individually <SEP> Yeah, but the same thing happened even with my number case <SEP> Oh I see - the distributive mapping only applies when the thing being checked is a type parameter <SEP> Not for concrete types <SEP> @qm3ster  ```ts type a <SEP> It only applies for generic type parameters which I didn't know <SEP> Well in that case, just this works :v ```ts type a = ""str"" | 1 | 2 type b = a & number ``` <SEP> Unfortunately, this doesn't collapse: ```ts type A = {} | { readonly v: 1 } | { readonly v: 2 } type B = A & { v:number } ``` <SEP> Right I was just pointing out how it worked since you said you didn't know what distribution was",distributive mapping doesn't apply to all members of a union
Summarization," <SEP> That's what I meant though - if you declared the array as say `""a"" | ""b""` how would typescript know it could widen that to `string` (or even `any`) for `includes` but not any for other method?  It couldn't really do that kind of thing selectively.  I know it seems intuitive for you that this should work but from the compiler's point of view you're basically asking to disable all type checking just because it's in a typeguard <SEP> Which I mean yeah could be done but it might be dangerous in practice since it would have to be an all-or-nothing thing <SEP> Unless the compiler had some kind of crazy AI smarts in it or something :smile:",how would typescript know it could widen an array to any for includes
Summarization, <SEP> Consider an easier life - `console.log( ...args )` | Does this error too ? <SEP> @SalathielGenese Ya that compiled just fine and works the same way as the other one thanks(output wise). <SEP> yw Senor Luis <SEP> Notably IE doesnt <SEP> Otherwise if you dont care about IE or browsers older than ~2 years then use es2015 module format and `type=module` for your script tags,console.log(...args ) does not work
Summarization," <SEP> Well I am using this package in my Angular/Ionic project, and I want to import it a view. <SEP> i'd say go with @tonisostrat's suggestion if you're not experienced writing type-defs yourself. <SEP> Alright, thanks for the help! Gonna try to make it work",how to import a view using type-defs in angular/ionic
Summarization," <SEP> yes, although, after that is done, I'm thinking about maybe make some npm packages like in lodash <SEP> you've already got the files broken up right? <SEP> I mean dude, you got work ahead of you :| <SEP> @electricessence it is already by default <SEP> ok <SEP> well I'd pull down the ```*.d.ts``` file for reference. <SEP> I know, I go folder by folder and my master is already behind 195 commits I think <SEP> Then start tackling the core modules first... <SEP> yeah <SEP> well gotta start somewhere ! :P",is there a way to make some npm packages like in lodash?
Summarization," <SEP> Hi, I have a nested object structure which represents a tree. I call this structure T. I want to ""unfold"" this stucture to a list of lists, where each sublist contains all ""keys"" as a sort of path. How do i make that? <SEP> You can flatten it with a recursive Object.entries <SEP> And I assume stuff like lodash/etc have a function for that already <SEP> @rraziel i see. can you point me to a function that does that? <SEP> Dunno I don't use lodash <SEP> It's just 5-6 lines if you write it yourself, I guess <SEP> i see <SEP> @rraziel can you maybe show me how? I have tried here: https://www.typescriptlang.org/play?#code/MYewdgzgLgBAVhcMC8MDkBvARAeQE4DmAjFgFwzYBSATEdWRVgGLUCcRAtLQ9gLYCuAGygBLAA6CAphzz8wPLL0lQAhguB5JKqCDwB9fhEl4GWAiEEATLABoYWYIJGSwUPWBVLT+YrftwQACMwfl5A41MaOj8sAHdJQUE9S0kIDXFRcFMWdi4SOywAwMttSVMABgB2InLqcqIADhjNAhEs8iwAVQBlGMCRSAZWagAWcoLQOSgI8lZKhvLx+xSxKAALPWgVPCgh6moAOlYAVmPKtlZyhpHh6gKV9c3psQZyg4A2BffK47YAZmGfzo1D+BQgngkkj0eFKDCIByWWFESie212HTqdQ4tQ4RCIABUiCNSCM-qQiMcDj9WCNKqwANSLUiLLAAX3Z7IKPno5Gw+IAot18QpptAFAJhOIpDI5OLlGpeQ5NNpdAYjCYOuYrDFHM5XO5PGUOtyYkUQmEZvYBUKYvFEslUulVm15B1RbsCkUStMKjVhvUmgUWi7TNbhQV+oNZqNEZNXJa5gtEQ8NlsdntDiczhcrjd9vdJKtU89Xh8vj9-oDgaD7ODeJDobDyPDEcioWn0fZMeVsdRcQSiSSyRSqccaXTGeVmeU2Rz2WgALAAKGXAHoAFTL0CQWBibRrCAoGAACksNj361I0DwAwIAG0ALrIR8ASmQAD4MMuYD+YAAzXQT23aAYAAa0kABPGABhgSwX2-X8cECOBJGAKADnAiCIGXVll3XVcgA <SEP> eh sure <SEP> You want something like 'a.b.c': 'x' for { a: { b: { c: 'x' } } }? <SEP> something like  <SEP> @rraziel ^ <SEP> Eh what? <SEP> https://www.typescriptlang.org/play?#code/MYewdgzgLgBAVhcMC8MDkBvARAeQE4DmAjFgFwzYBSATEdWRVgGLUCcRAtLQ9gLYCuAGygBLAA6CAphzz8wPLL0lQAhguB5JKqCDwB9fhEl4GWAiEEATLABoYWYIJGSwUPWBVLT+YrftwQACMwfl5A41MaOj8sAHdJQUE9S0kIDXFRcFMWdi4SOywAwMttSVMABgB2InLqcqIADhjNAhEs8iwAVQBlGMCRSAZWagAWcoLQOSgI8lZKhvLx+xSxKAALPWgVPCgh6moAOlYAVmPKtlZyhpHh6gKV9c3psQZyg4A2BffK47YAZmGfzo1D+BQgngkkj0eFKDCIByWWFESie212HTqdQ4tQ4RCIABUiCNSCM-qQiMcDj9WCNKqwANSLUiLLAAX3Z7IKPno5Gw+IAot18QpptAFAJhOIpDI5OLlGpeQ5NNpdAYjCYOuYrDFHM5XO5PGUOtyYkUQmEZvYBUKYvFEslUulVm15B1RbsCkUStMKjVhvUmgUWi7TNbhQV+oNZqNEZNXJa5gtEQ8NlsdntDiczhcrjd9vdJKtU89Xh8vj9-oDgaD7ODeJDobDyPDEcioWn0fZMeVsdRcQSiSSyRSqccaXTGeVmeU2Rz2WgALAAKFAkFgCHAOECcBQMEo3RwADkDmJtkYABQbsAASgA3MvV9AYAAzQTaXcYVn3pfL59yYCZGAL5vlA0xgOer7aFucDkAASpIoB4JYAA80B4AMBB2CoYAAJ4AHx2EEMEwERCFQHYYiaM+IgAB4APzkGhGHXuQABuIAiJYFDLjAL66DA56PrAADaADWkg4XYrEqII-CSAAuiRz4wNBZEHC4UDoak55Ede17cUuvG8SIynnlAOFiJIIDKdJsmSCgyCoGgpEAWgMAAGTuTAtlyTAACEjkwCEiT6RgPFGbxkGgS4EEgdBUkyXJdgAAYACQYOJOGsgcyV3uFvGsjACRGAZEWRXF27CeelGSNRNEwAAPg16BoPp9IwJlimoD5kjfhFrLhQNS5Db+IFgbF2h2Fe0F5T+K7gIgUgHIIIAEBNUCzUAA <SEP> Did this one for the example I was giving <SEP> But I guess you could change it to create an array instead of a key + value <SEP> mmm ok. It seems like it only prints the content of meta? <SEP> Ah yeah it's not using the prefix <SEP> i was hoping to get output like this for the given data example: ` <SEP> https://www.typescriptlang.org/play?#code/MYewdgzgLgBAVhcMC8MAGBYAUAb2zGAIgHkAnAcwEZCAuGPLAgwgKQCZK3b78nmAxNgE5KAWg7cGfPoQC2AVwA2UAJYAHRQFNRpeWEm9pTOZqgBDA4yPTCwUprNQQpAPryIm0t0LkQigCaEADSG1szAiiqaYFAuYGaymt5kVMGhYYRwIABGYPKy2Z7e7JxpVmHMAO6aioou-poQduqq4N6CIuLUIeUVmTn+jkl0hAAMAOyUo2yjlAAcZRXG9uQqbSMAqgDKi0tE2SqQ3EJsACyjPXtEoHpQRXRC43OjF+nWhA1qUAAWLtBmpCgxzYbAAdEIAKwQ8bCISjOanE5sS57D6aL6-aDo7ijUEANmeePGEOEAGYTqTOGxSSiloQIAkNJoXKQhtxKKDXr0MqpEn9zIDvDMZqJpqJKJQACqUU40U6kmiUCGg4lCU7jIQAaheNBehDeRgAvgamMbuaa3ma+IbaUQUlw6DhCJKAKJbSWSQh3aCehTKdRaHR6X2mCyO2z2RzONweLwjXwBYLXSLRWLxRLJChcIJELK5fKFONEV3upOEaq1eqNZpfNb6EbeoE5-rZQZ3byzUYnWYLZsrOveEse5sHI4PM4Xa4gW73GCPZ6TtEY-kAoHjsGQ6Gw+GIkHNz4-fnYui4gmjIkkoTk6lUmlEBmyJkstl0DmL3nM-6CkbC0aitjilKMpygqSoqhCaoatqoy6qMhCGghiHYGgADc2CgJAsAIOAxDZHAKAwCwWzEAAcqCagAh4AAU2FgAAlGhWAYdAMAAGaKI4BE4IajHYKxejAK0YBsRxUB3GAVHsY4uFwHQABKmigKQ-gADzQKQhzkDmZhgAAngAfDmOSyTAxmKVAOZqPYrEqAAHnQ6maXRdAAG4gCo-g8FYrHODAVHMbAADaADWmi6TmLlmIo8iaAAuqZrEwDJ5mgqmGmNFRxl0XRXl8CoiVUVAulqJoICJZF0WaCgyCoAA5GZgm1TAABkzUwBVMUwAAhDVMB5LUOVSNIUlidEkmiTJEVRTFOZoAAJDgVmaDZtmGgtoW6YaoJoAxoSGjANQeLlw0TXhgVUUtK0wAAPtdMC1bVOWajAG3xagHWaIx1q8GaZp8aJ4njY4Oa0ZN92PbxTHgIgWigooIDkEDUC7VgQA <SEP> This one has the whole prefix <SEP> Well worse case you can just split by . from that example lol <SEP> @bsdis That's because you're `return`ing in the middle of your loop",unfold a nested object structure into a list of sublists not using lodash
Summarization," <SEP> Bootstrapping something is not the same as ""boostrap"" which is a JS framework <SEP> bootstrap - startup generated code <SEP> eample result of work react-cli or angular-cli its bootstrap <SEP> Yes a compiler written in the same language as the language he compiles <SEP> Yeah not sure I follow how bootstrapping means the compiler arguments are case insensitive <SEP> And I can't find the JS framework called ""boostrap"", everything thinks I mean ""bootstrap"" :) <SEP> TypeScript transpile to JS and is JS case-sensitive?  All this while... A quick test in terminal would have gave you a defititive answer (I'm not used to TS Command Line Argument or I would have tested) <SEP> Yes JS is case sensitive <SEP> Then, 99% sure TS compiler is... Except they use `string.localeCompare` with special arguments (01%) <SEP> I'm not using CLI either :) <SEP> I'm using tsconfig <SEP> #metoo <SEP> And since VSCode do auto-completion when I write... I use to care less of case-sensitivity.  You can still check by changing case in your tsconfig file <SEP> Yes it is case insensitive <SEP> But, documentation is not consistent <SEP> `    ""target"": ""es5"",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */` <SEP> Using `target: ""foo""` emits `tsconfig.json(4,15): error TS6046: Argument for '--target' option must be: 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'esnext'.` <SEP> Open up an issue to let them fix it into`documentation` <SEP> Whatev :P <SEP> Typescript new issue link <SEP> Please @aaronbeall , help others not go through the same confusing process as you did",difference between bootstraping and boostrap
Summarization," <SEP> they had to sacrifice homoiconicity to get there though <SEP> Yeah, thats the part I like <SEP> always loved that word though",sacrifice homoiconicity get there though 
Summarization," <SEP> @webstrand Does `import type` actually mean something different than a regular import in a declaration? <SEP> I don't really see how it could <SEP> and I'm pretty sure the way to deal with different TS versions is `typesVersions` <SEP> Well, it doesn't matter anymore. <SEP> (I'm confused, is that comment to show the version of that feature, or thought to be somehow magical in a declaration?) <SEP> and you're right, I don't think there's a difference between `import type` and `import` <SEP> I think it's used by the type exporter? <SEP> I don't see how there could be - there's no runtime stuff to not actually import <SEP> no, I mean, it's used by the utility that extracts types into individual packages in the `@types/whatever` namespace <SEP> nevermind, misunderstood <SEP> you mean the thing that makes the specific npms from the repo, right? <SEP> yeah <SEP> okay, gotcha <SEP> I don't see how it could hurt, other than compatibility. <SEP> Seems like you could auto-downlevel that <SEP> but - I have no idea if they do anything automated around that kind of thing. <SEP> BTW I was looking up `typesVersions` and I was surprised it goes all the way back to 3.1 <SEP> I know they fixed some big issues with it not too long ago, but I thought it was newer. <SEP> I remember there's some service where you give it a type and it will build you a type guard whats it called? <SEP> um...I know of one, gotta remember the name <SEP> https://quicktype.io/ - don't know if that's what you mean <SEP> Nope <SEP> i mean i have interfaces like... <SEP> ``` interface IPerson {     name: string;     age: number; } // and i want it to generate. const isPerson = (obj: unknown): obj is IPerson {       return typeof obj === ""object"" && ""name"" in obj && ""age"" in obj && typeof obj.name === ""string"" && typeof obj.age === ""number"" } ``` <SEP> `Resynth (@synth:tedomum.net)`  <SEP> `Resynth (@synth:tedomum.net)` There are shitloads of crackers",difference between import type  and a regular import in a declaration
Summarization," <SEP> https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html <SEP> ""needless namespacing"" <SEP> and dont put file extensions in your module names <SEP> I don't put extensions, I'm just tired  :) <SEP> in the above case it would be `import {A} from 'A'; ... abc: A.A1` <SEP> but thats unnecessarily verbose, which is why you shouldnt mix them^^ <SEP> and thats a symbol clash, so <SEP> import {A as AA} from 'A' <SEP> This verbousness is internal for easy tracking for me. The actual parts that will be exported to be used by the user will not have such <SEP> But for me I find it easy to segregate things, so I can reuse class names, get easy code completion in the IDE, etc.. <SEP> It's much easier to remember the names of 3-5 namespaces, than it is to remember names of dozens of classes  :)",put file extensions in module name - needless namespacing
Summarization," <SEP> Seems like enabling it and then looking at `.pnp.js` would answer that question pretty quickly: https://yarnpkg.com/en/docs/pnp/troubleshooting#toc-cannot-find-module <SEP> I did look at `.pnp.js`, but my `package.json` still says the entrypoint is `dist/main.js` so... how would it even run the `.pnp.js` <SEP> There's some serious black magic going on here <SEP> Oh I see the trick - you actually have to tell Node to run that file.  I'm surprised the automated enabling process didn't change `""main""` in the package.json file <SEP> It expects your app to be started with `--require .pnp.js` so its loaded before your entry point... yea <SEP> If you start with `yarn node` or have a `yarn serve` script or something you never notice it so... <SEP> Also for libraries it shouldn't change `""main""` or consumers would have a problem <SEP> Hmm... presumably you couldn't use this with libraries at all <SEP> Because the `.pnp.js` has to be loaded first before anything else <SEP> It's a really great idea but I'd want it to be first-class, otherwise I don't see this getting much wide adoption. It vendor-locks me to yarn as my package manager, for one thing <SEP> While developing the library, it seems like it should be fine, but consumers have to enable it themselves to see any benefit",how to run .pnp.js 
Summarization," <SEP> having such function ``` export const increment =  <SEP> I can call it like this `increment <SEP> Well first off turn on `noImplicitAny` <SEP> @Gerrit0 this make things even more complicated <SEP> https://i.imgur.com/9TtPnVj.png <SEP> Then something like this should do it: ```ts type NumberKeys <SEP> Yea, and it protects you from doing bad things because you forgot a type annotation <SEP> Without casting to tell TS you know what you are doing <SEP> amazing, it work <SEP> I thought this is impossible <SEP> thanx ) <SEP> but I can't understand how first line type definition work... <SEP> also what is the meaning of ` as unknown as number`? why simple `as number` does not work? <SEP> Because TS can't confirm the types overlap enough to go directly to number <SEP> For the first line see https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types <SEP> In laymans terms though: construct a type consisting of only those props of T where T <SEP> Is that actually going to infer `T` through `NumberKeys`? <SEP> Actually it just gets the keys.  You can sometimes avoid that cast too. <SEP> There are actually two concepts in there: mapped types and index access types <SEP> Type level magic can get complicated quick :) <SEP> Yeah I think that one is easier to understand when you look at the intermediate products. <SEP> while this `{  <SEP> ah.. to take keys from that type",call the funtion increment without casting
Summarization," <SEP> Though, TypeScript has been moving forward at breakneck speed so I'm not entirely surprised that the docs can't keep up. <SEP> Heh. <SEP> I wrote a template for TypeScript in the browser with JSPM/SystemJS. <SEP> Though, it doesn't solve the unit test problem.",the docs can't keep up with the speed of change
Summarization," <SEP> @JomoPipi Interesting app! I see you're doing  ```js const MY_JS_DIALS =  <SEP> but its nice to brwoser stack an iframe that comes from localhost <SEP>  Still don't get why people bother with jQuery  @rraziel jQuery is still more convenient for certain things than builtin APIs. I can give examples. On thing is event delegation: `$('.root-element').on('click', 'button', () = <SEP>  solid looks really nice. What I'm trying to figure out at this point is, is it worth the effort to switch from s-js/surplus to solid?  @webstrand I think so. I was on S.js first, but Solid is the next level. Solid started out on S.js, but then Ryan was developing too fast and PRs weren't getting merged, so Ryan ended up forking and making his own things. So Solid originated from S.js. <SEP>  As you mentioned, my least favorite thing about solid is the State API.  <SEP> @JomoPipi Feature request! It would be sweeeeet if you could lay out the keybaord as a piano. For example, `1` would be nothing, `q` would be a C, `2` would be a C#/Db, `W` would be a D, `3` would be a D#/Eb, `4` would be nothing (or something special), etc, and it would wrap to the next two rows so `Z` would be a white key and `S` would be a black key. <SEP> @webstrand Yep, custom elements are everywhere now. <SEP> Edge too! <SEP> There's practically no good reason for anyone not to upgrade to Edge from IE11 now. <SEP> Then he can fine tune it by hand after playing <SEP> @petersalomonsen Are you on Gitter? ^ :) <SEP> By the way,  <SEP> The generics version",is it worth the effort to switch from s-js/surplus to solid?
Summarization, <SEP> ``` ts function numberOrString(item: number): number function numberOrString(item: string): string function numberOrString(item: number | string): number | string {   // .. ``` is not good enough? <SEP> types are static.  You can't have them based on dynamic runtime values. <SEP> I think it should be possible,is it possible to have types based on dynamic runtime values?
Summarization," <SEP> I just noticed neither are capturing the types.d.ts in the npm package, but that affects both. <SEP> You definitely do need to package that if youre providing types <SEP> Every one of the packages that pretends it doesn't have types all don't have source maps haha. <SEP> The source map might be giving it a hint at how to find the types.  Is the .d.ts named the same as the associated .js?","neither capturing the types.d.ts in the npm package, but that affects both."
Summarization," <SEP> Hi all... <SEP> I get this error: `Property 'ChildProcess' does not exist on type 'typeof ""child_process""'.` <SEP> when I check instance like that: `if(module.fast instanceof ChildProcess.ChildProcess)` <SEP> :worried: <SEP> maybe a problem is with `module` is just interface with: ` interface Module { fast: ChildProcess.ChildProcess } `?",error about Property ChildProcess does not exist on type typeof child_process
Summarization," <SEP> Is there a convenient way to declare a function that has the same signature as another function? For example when creating a mock function, I end up copy-pasting a lot <SEP> `typeof`? <SEP> kind of depends on if youre using `function` or an arrow function <SEP> ```ts function f(x: number, str: string) { return `${x}: ${str}`; } const g: typeof f = (x, str) = <SEP> TS always amazes me with how few type annotations I need in actual code: https://github.com/fatcerberus/from.js/blob/master/src/from.ts#L517-L578 <SEP> Now if only it could infer parameters based on what you do with them...",a way to declare a function that has the same signature as another function
Summarization," <SEP> I'm still here repping CHJstack IDK about you <SEP> haha you guys are too smart for me.. also too nice! i was happy with the first solution but you sent me like 8 more :P well it's good to learn i suppose. reading now! <SEP> jam also makes me thing of spaceballs, of course <SEP> You don't want to be part of a mob of 4,000 nerds yelling at passerby to change their stack? <SEP> @webstrand what ""technology""? <SEP> gotta be reall, I'm not sure what it actually is still",repping CHJstack IDK 
Summarization," <SEP> I like this tool for releasing from a git repo to npm: https://github.com/webpro/release-it <SEP> npm also has a ""prepublish"" script that gets run before publishing <SEP> just add the directory for generated files to .gitignore and the sources to .npmignore <SEP> not sure if it's the best approach, but I run .ts tests with ts-node instead of building to .js first",tool for releasing from git repo to npm
Summarization," <SEP> Hey guys, I'm still working on that stuff I asked few days before, now it got a bit more complicated :smile: <SEP> Here is snipped explaining the problem <SEP> https://www.typescriptlang.org/play/#code/C4TwDgpgBAkg8gIwFYQMbACrmgXigcgwEZ8oAfAjAJnwG4Aoe0SWYmYCAWyxb0KJLlKRGg3oBLAHYcATgDMAhqmgxiAEQXAFAIRA9oAb3pQTwkgC4oAZ2AypAcwanhNS5ICunBBBkMAvoxSsorKrESIKOgaWjDSPpIKADYAPBjE+lAQAB4ckgAmVmHsXPoAfFBGzswQlmlE+k6mwETRCpaqLZo6etgA2nX6ALr+jNVhEWjAranp2Jk5EPmFHcXcc3grHGuQ5TjGpgNz2bkFRVsZAPzjyJOtsbIJKYc7UG4QAG4+YmOqVKsZfGoggohCookCcXkShU1FaugylVMoIs1lsDkaJlBrigHi8X3oAQkkJCMKoEyiXXu8SSMyoGWOi1Ov3+2HKiJM1Vq1H0+w5VFa7VhXXhfTSdOwwwJozmv3JUy6tPpCyWrD+53WqpZLz2zjFSpOy2oWugV1lNwpMUhj0VrNeOI++KJwWhsDlcJ6kFScuN8wNZxKcwozPVL3ZwnwtW9IegDJVmwDLFNxDdCowUYTEHKb0+vl5lGxafNwB9saZRujUCTZKL00LkWL0az9pzIydPhJrqLVJk1rzdcm+sZyzl+gANH309sY8qy0QfUHyxn6Gy85yoP30A083kuu0U1oRZ6Nw2M6V+iOJa2fnLkhOi4O4xfeJ362O7-WSzPDXOKwu1RmoA2Nhf01aNl0A98ByOL8XygxNYPQbtrWPMd10nMo7UkB1c0YVAAHtJBsKA2gQ4BAIqVdsEsfh8HHZwdy0SwwyqKizFovMqk6RiCBIOjTD8cdCXwwiyPsCBgAAQXIgAKEj4CLZIaNHNjSgASksd48PEPJAJXZwFAAOgYwzmlaKV6GEoixOAbQZIQPcFNBWj8xoNSNK0nScD00wECMroDOAfkun8IA <SEP> When I start working with sub-types (second generic parameter), it doesn't filter out appropriate ones by first parameter, but instead gives me whole union of all sub-types <SEP> In given case `'T11' |  'T12' | 'T21' | 'T22'` <SEP> It is not big problem, since it will still filter out parts which are inappropriate by setting their types to `never` at other points, but it'd still be better to have that filtered right away, if that is possible in any way <SEP> I've updated it a bit, so now it works better, but still has strange message in some cases <SEP> https://www.typescriptlang.org/play/#code/C4TwDgpgBAkg8gIwFYQMbACrmgXigcgwEZ8oAfAjAJnwG4Aoe0SWYmYCAWyxb0KJLlKRGg3oBLAHYcATgDMAhqmgxiAEQXAFAIRA9oAb3pQTwkgC4oAZ2AypAcwanhNS5ICunBBBkMAvoxSsorKrESIKOgaWjDSPpIKADYAPBjE+lAQAB4ckgAmVmHsXPoAfFBGzswQlmlE+k6mwETRCpaqLZo6etgA2nX6ALr+jNVhEWjAranp2Jk5EPmFHcXcc3grHGuQ5TjGpgNz2bkFRVsZAPzjyJOtsbIJKYc7UG4QAG4+YmOqVKsZfGoggohCookCcXkShU1FaugylVMoIs1lsDkaJlBrigHi8X3oAQkkJCMKoEyiXXu8SSMyoGWOi1Ov3+2HKiJM1Vq1H0+w5VFa7VhXXhfTSdOwwwJozmv3JUy6tPpCyWrD+53WqpZLz2zjFSpOy2oWugV1lNwpMUhj0VrNeOI++KJwWhsDlcJ6kFScuN8wNZxKcwozPVL3ZwnwtW9IegDJVmwDLFNxDdCowUYTEHKb0+vl5lGxafNwB9saZRujUCTZKL00LkWL0az9pzIydPhJrqLxt0coRef4Ef92wgGPzg+DGdbQXbLvgXatNLzdcm+sZy172AANEv08PfWvO-XuyAN5B+qeIIN6Gy85yoMv0A083kuu0U1oRZ6Hw2M6Vz0WhlbH45WSHcAKOZUmQvKANgvbddV3Vc40Q7Ae3As9vyGGDD0mY8L3-eshmvbDMIgv050IuZTW9Bcnjg+8UJebNHXoVAAHtJBsKA2hw9BsLDO8B3g0wXy0SwwyqbBLGRfBhOcPkBQIEg5KgPxt0JdjOOAKB7AgYAAEFsIACh4ijJmSISXHwUoAEpLHeNjxDyGCb2cBQADpRI85pWilViOK43TgG0YyEDfIsLOoWT8xIWz7Mc5ycFc0wEE8rp3OAfkuhGIA <SEP> Try adding ` <SEP> It'll show appropriate error, but without it, it doesn't recognize that type <SEP> Nevermind guys, I'll manage with what I have",can't figure out propriate ones by first parameter when working with sub-types
Summarization," <SEP> Hello,  I am new to TypeScript and I am building an Angular2 application in TypeScript. I want to use the deepAssign function from https://github.com/sindresorhus/deep-assign.  I'm able to import it, however, when I try to compile it, I get the error:   <SEP> guys how is the proper way to emmit events? I mean, there is the `EventEmitter` but that is a node thing... is there anything like that usable on web apps? <SEP> There is no standard for handling events that you just pick up and use for your code.  You can emulate the dom `addEventListener`/`removeEventListener` and handle the internals yourself or look at some sort of `EventEmitter` library. <SEP> yeah... thought so... thanks @david-driscoll <SEP> I'm partial to RxJS but that goes above and beyond just emitting events. :) <SEP> yeah I had a look at it but too much to what we need here",how to proper emmit events in Angular2?
Summarization," <SEP> I'm having trouble deciding how I want the `IN` operator to be exposed by my library. ```ts myLib.inList(x, y0, y1, y2, ...); myLib.inQuery(x, myQuery); ``` vs ```ts myLib.in(x).list(y0, y1, y2, ...); myLib.in(x).query(myQuery); ``` vs ```ts myLib.foo(x).inList(y0, y1, y2, ...); myLib.foo(x).inQuery(myQuery); ```  I'm using the first example now but it can get very confusing, `inList(3,6,5,4,3,2)` becomes the sql `3 IN (6,5,4,3,2)` <SEP> The last example seems like the best but the problem is what to name the `foo` wrapper <SEP> If you didn't know what `inList()` was, you'd think the first argument has the same meaning as the rest of the arguments <SEP> And even after knowing, it just looks too similar <SEP> Maybe `inList(3,  <SEP> `myLib.is(x).inList(a, b, c)` ?",how do i expose the IN operator in a library?
Summarization," <SEP> @con-ssc I'm using phpunit on my php projects. Is there something similar in JS? <SEP>  At this point, youre probably ready to start using TypeScript files. The first step is to rename one of your .js files to .ts. If your file uses JSX, youll need to rename it to .tsx.  Do I really need to rename files? Is it recommended to not run TS compilation of ES2015 .js files? If so, why not? <SEP> @con-ssc going with node-ts as a preprocessor just as a 1:1 transition machanism. We can iterate on it later :-) <SEP> i have abstract class. and static method in this abstract class. and this method will create instance from current class <SEP> is it possible ? `new this();` not working <SEP>  ERROR in ./server/main.js Module build failed: Error: Could not find file: '/home/marcus/code/omnivy-reactive/server/main.js'.  does that have something to do with files not being .ts? <SEP> i have static method in my abstract class. in this method i want to create class instance. next i create class ABC extends my abstract class. and i can't understant how to tell typescript create instance on my current class without define class name",is there a way to rename a.js file to.
Summarization," <SEP> what are the benefits of using property accessors over getter/setter methods?  property accessors example ``` export class Thing {   private _name: string;    set name(name: string) {     this._name = name;   }    get name(): string {     return this._name;   } } ```  getter/setter example ``` export class Thing {   private name: string;    setName(name: string): Thing {     this.name = name;     return this;   }    getName(): string {     return this.name;   } } ``` <SEP> @NaridaL good to know, thanks for explaining <SEP> Appreciate you. Didn't know what to Google so I came here. That is exactly the answer I needed.",what are the benefits of using property accessors over getter/setter methods?
Summarization," <SEP> I'm in the industry of lazishna. It's an industry where you don't do anything and you don't get paid and you spend all day long taking naps and just generally being useless.  Perfect job for cats and people who think they are cats <SEP> :cat2: <SEP> I'd call that education <SEP> There are some that I don't want to work in <SEP> which ones are you wanting to avoid? <SEP> Like I saw a job explicitly mentioning TS in the title, but it was for a recruiting company. That's a vaguely evil industry. <SEP> Finance is not something I wanna do. <SEP> Most healthcare-related stuff I'm not too keen on either. <SEP> is it that you don't want to maintain existing applications in these industries, or would you avoid new development, too? <SEP> recruiting is a scam that makes a lot of people a lot of money, and that bugs me <SEP> all the financial stuff is generally about making rich people richer <SEP> healthcare is heavily regulated, which just seems un-fun <SEP> Like I worked at this one place where we did stuff around fair lending laws for banks <SEP> basically take the data and try to prove they're not discriminatory in their lending for housing <SEP> I didn't have a super great feeling about it, I'm pretty sure there was plenty of massaging the data to basically cover up discrimination.",is there a reason you don't want to work in lazishna?
Summarization, <SEP> If tooling didnt change every few months we wouldn't be as far as we are today. It sucks that we always have to keep adapting but at least we're moving forward :D <SEP> the video sucks <SEP> why he install @types as dependency and why not as devDependency <SEP> and why he need the ref ? <SEP> then is more important tomove it into devdependency <SEP> so who cares on a web project? <SEP> in my devdependy <SEP> because i need it only for compiling <SEP> you are not actually building a package out of your package.json,"why install @types as dependency, why not as devDependency, and why needed?"
Summarization," <SEP> typescript seems like the only realy option if you watn the power / reach of js <SEP> Is there a dart community somewhere out there? I've looked for one, but irc/gitter was dead <SEP> or maybe Im just too lazy to port all of my code lol <SEP> there is a gitter",is there a dart community out there?
Summarization," <SEP> @beardo01 If you want to use the same code between different projects, I'd recommend using a local package. With npm, you can just do `npm install -D My/File/Location` <SEP> I'd just use Nx <SEP> (although the way it gets shared is not the same)",npm install -D My/File/Location is the best when  using same code between different projects
Summarization," <SEP> Not as far as I know? `class Bar extends Foo { constructor() { super() /* have to call super */ } }` <SEP> or do you mean, you can still use that syntax? <SEP> You _can_, but you lose things like `super` and `#private` variables. <SEP> basically manually constructing",to call constructor() manually
Summarization," <SEP> Has anyone ever gotten the `tsc` command to recognize path mappings at compile time? There are several issues opened about this and I realize that the module ID won't be _rewritten_ in the compiled file but I can't get the compiler to even try to find the target module.  For example, a `tsconfig.json` like:  ```javascript {   ""compilerOptions"": {     ""rootDir"": ""."",     ""baseUrl"": ""."",     // ...   },   ""paths"": {     ""~/*"":  <SEP> When I use `yarn run tsc --traceResolution` it doesn't look it even tries to remap the path. <SEP> I found the type inference can not tell me the child method params type: ```ts interface ITest {  a: number; } abstract class Base {  protected abstract handle(foo: ITest): void; } class Child extends Base {  handle(bar) {} } ``` tsc show me: (noImplicitAny=true) `error TS7006: Parameter 'bar' implicitly has an 'any' type. ` I think this is a very common use, It that a bug? <SEP> @philidem Add this in your tsconfig.json : <SEP> ```json ""compilerOptions"": {  ""paths"": {   ""~/*"":  <SEP> It map ""~/*"" to `baseUrl(see doc)`/./* <SEP> Wow... that's embarrassing. Did not realize that I had `paths` nested improperly. Moved it under `compilerOptions` and it works. Thank you @GongT ! <SEP> :smirk:",issues about tsc to recognize path mappings at compile time?
Summarization, <SEP> @nohira  I compiled your example and I don't get any errors either in es5 or 6 <SEP> when running it in chrome <SEP> are you sure you aren't doing something like `throw FlexAuthError()`,how to handle throw FlexAuthError() when runing in chrome
Summarization," <SEP> Okay so this is weird but if it werent for the lack of activity I think Id still prefer gitter to discord... <SEP> it's just different <SEP> the one lexer/parser that I've written had something like `let-statement ( identifier | global-keyword | default-keyword | ... )` <SEP> because the lexer didn't understand that the token following a let-statement is _always_ an identifier <SEP> never something else <SEP> I waste so much time on discord, especially the mobile version, just pulling in and out the channel drawer to see if theres new messages <SEP> oh, yeah. the mobile version is unfun <SEP> Pro TipTM: Don't chat on your phone <SEP> not enough space. I use these chats exclusively on desktop, discord is better <SEP> I mean I have slack on my phone, but that's just for work <SEP> Yeah keith is probably right despite the implied :trolleybus: <SEP> teams on phone is, unsurprisingly, the worst <SEP> How does that work (levenshtein distance)?",why prefer gitter to discord?
Summarization," <SEP> Hi all. any insight related to this post about importing local package in a typescript monorepo? https://stackoverflow.com/questions/53399474/how-to-import-local-package-in-typescript-monorepo <SEP> Can anyone help me figure out how I can declare a `Map` with it's contents being a templated `BaseClass <SEP> myMap: Map <SEP> or <SEP> myMap: Map <SEP> but notice that `BaseClass <SEP> @jaimesangcap_gitlab not a typescript question but a general module resolution question in the JS gitter will probably get you futher <SEP> if you look up how node resolves paths like that it should give you some insight on how to manipulate it but i believe its anything without any file prefix is node modules <SEP> anything with absolute path is absolute path <SEP> anything with relative path is relative to that current file <SEP> Using `Object` is no different than using `any`.  I'd still have to do type detection and casting every time I do something. And doing concatenations is not really practical, as I said, there are a lot more than 3 classes that extend `BaseClass`. Is there no way for TypeScript to actually bind different templates to different instances of a base class in a `Map`? <SEP> dynamic imports are inferrred as their correct types <SEP> Question: Are `object` and `{}` the same type? <SEP> I sometimes get confused which one to use or if it even matters",how to import local package in typescript monorepo?
Summarization," <SEP> How would I make a type that makes only one field from an existing type optional without redeclarting the type in my .ts file?   Specifically  ButtonProps in react-native, i want the onPress made optional.  But keep everything else that's required.  But I don't want to do  { onPress?: (ev: Native...} } <SEP> I got as far as this <SEP> export type ButtonProps = Omit <SEP>  how can I write a function which accepts a `{ foo: FooType, bar: BarType}` and returns an `{ foo: Either <SEP> and this works for all kinds of records?",how to make a type that makes only one field optional without redeclarting the type
Summarization," <SEP> Hello, I know there is a way to do what I want to do, I just don't know it... I'm trying to declare a return type of a function based on whether or not a key of an object is sent as a parameter.  ``` type TypeA = string; type TypeB = boolean;  type Args = {     foo: string;     withTypeB?: boolean; }  function myFunction(args: Args): TypeA {...} ```  What I'm trying to achieve is basically, conditional return values based on whether or not `withTypeB` is passed as true. Is there some kind of keyword I can use, or typescript function that allows me to basically set these kinds of conditional types to a function based on the data being sent to the function? <SEP> @webstrand  too bad the playground doesn't have a knob for that yet. <SEP> @demitchell14 You can do overloads, or you can use generics.  Be warned though, in the case  of a boolean, it's actually represented as `true | false`, which causes some issues. <SEP> the only way it can possibly work is if that boolean is statically `true`, i.e. passed as a literal.  If TS can only narrow it to `boolean` at compile time, there's no way you can have an effect on the return type. <SEP> To get what you want, you'll probably have to use overloads. <SEP> playground <SEP> ah, figured it out <SEP> alright, thank you. I was just using string and boolean as examples of different response types. In reality, the difference is going to be more like.. ``` type TypeA = {     foo: string;     another: string; }  type TypeB = TypeA & {     bar: string;     somethingElse: boolean; } ``` <SEP> ```ts function myFunction <SEP> sure, just swap out TypeB and TypeA, it affects nothing. <SEP> I knew about overloads, I was just hoping there was a more.. convenient approach if you will. sadly I guess not, haha <SEP> overloads suck. <SEP> Avoid them at all costs, 99% of the time. <SEP> they do. You never want your program to depend on the return type of an overload <SEP> Discriminated unions are far superior if you can change your API. <SEP> They're sort of another form of hidden casts too.",is there a way to set a conditional type for a function?
Summarization," <SEP> ooo i see. <SEP> Is sucking at math an indication that someone is a bad web developer? <SEP> define ""sucking at math"" <SEP> Can't deal with concepts beyond basic mathematics. <SEP> if someone is bad at understanding and applying abstractions, I would suggest that makes them a bad web developer",who can't deal with concepts beyond basic mathematics is a bad web developer?
Summarization," <SEP> when do one add .d. in a file name? <SEP> you want to reuse across your project <SEP> ok, thanks <SEP> yeah that was it @keithlayne","when resusing across project, one add .d. in a file name"
Summarization," <SEP> Not right now eyelidlessness: https://github.com/Microsoft/TypeScript/issues/4183 <SEP> ooops, forgot the Node:  ``` abstract class Node {   constructor(public readonly group: Group) {} } ``` <SEP> Guess I could define an empty ctor in the nodes and delegate to the super ctor:  ``` class Admin extends Node {    private nominal    constructor() { super(Group.ADMIN) } } ``` Loads of boilerplate, but I guess that's life in TS/JS land :smile:",define an empty ctor in the nodes and delegate to the super ctor
Summarization," <SEP> If you want that, you're going to have to abandon the idea of conforming to anything but what you decide to do, because the standards, people's expectations, and the default behavior for at least one database will almost always be in conflict <SEP> If X is part of the standard, I'll try harder to emulate it before dropping it entirely <SEP> The `LIKE` operator is actually a really good example here. <SEP> I'm thinking of dropping `LIKE` entirely, but keeping `LIKE ... ESCAPE`. <SEP> that's something that will prevent people from using your library <SEP> principle of least surprise <SEP> Because SQLite's `LIKE` **does not** use an escape character. Whereas MySQL and SQLite's `LIKE` operator uses backslashes by default. <SEP> **That** is surprising. <SEP> it's least surprising for a DB library to support LIKE without ESCAPE and for it to have a sensible default escape policy (probably backslashes, because mysql rules the world for better or for worse) <SEP> You'd surprise SQLite users, who expect no escaping <SEP> you always surprise someone, that's why it's *least* surprise, not *no* surprise <SEP> if your decision is to enforce ESCAPE, that surprises many more people than having different default escaping than sqlite will","why drop LIKE... ESCAPE operator, but keeping LIKE operator"
Summarization," <SEP> Hi, anyone help why Object.assign() returns typeError here?   ``` self.$translate( <SEP> @jairadichoso you can use 3x ``` backticks to wrap your code at the beginning and end, for it to look like the above <SEP> Thanks @intellix finally got code markdown working right <SEP> Also, beware that typescript is structurally typed. ``` interface Foo { name: string } ``` is exactly the same, and indistinguishable from, this ``` interface Bar { name: string } ``` <SEP> which is why I added `attr` to `OriginModel`, otherwise,  `OriginModel <SEP> thanks so much :) will see how far I get now. I did kind of hack it away but I didn't run very far as it's in other places too and guessing yours should fix it throughout <SEP> @webstrand `TypeError: Cannot read property 'approveAndSchedule' of undefined` <SEP> @webstrand sorry, not really sure but this is how the whole method looks like ```  homeTooltip(){         let self = this;         let errMsg = '';         let successMsg = '';          self.$translate(",why object.assign() returns typeError?
Summarization," <SEP> Rust is pretty great, in my limited experience, just don't expect to be able to do the pointer jockeying that to can do in C++ <SEP> but I guess they're not radically different in that regard <SEP> you *can* do it AFAIK <SEP> @webstrand Isn't it possible with unsafe? (I haven't read much into it yet) <SEP> i.e. you'll go mad trying to do some of the common exercises: linked lists, trees, etc <SEP> The thing I wanted last time I played with it was better HOF support <SEP> anything is possible with unsafe, you can do it that way. I wouldn't recommend starting by learning unsafe, it teaches bad patterns that have safer alternatives <SEP> Not that it doesn't have any, it just felt clunky. <SEP> Yeah  <SEP> I haven't gotten that far into the language, yet, to really notice HOFs <SEP> I guess it's how I'd *like* to write in many languages, so I feel it when it seems not great. <SEP> pretty sure you can return a closure but it was a little unergonomic to call it. <SEP> I'm still uncomfortable  with rust's preference for indexed access. In C/C++ I almost never use indicies, I use pointers & pointer arithmetic. <SEP> I'm not convinced that the compiler isn't doing woefully unnecessary things, converting from an index to pointer, internally. <SEP> Like in C++ I think you can return a lambda and treat it just like a function. <SEP> the hidden memcpy everywhere is also worrying <SEP> The ideal is Scheme-like HOFs for me. <SEP> In C++ I would use iterators and trust the STL writers and compiler authors  :) <SEP> but then I think rust has like 3 function types with different guarantees or something. <SEP> True, pointer and arithmetic is more the domain of C. My experience is colored, because I learned C++ by writing STL-like containers. I've only use C in a non-learning context. <SEP> I guess the more rust-like way to do a lot of things would be with macros. <SEP> I really like the STL concept. Generic algrorithms that can be used on lots of containers, but specialized if needed. <SEP> rust is also the first compiler that I've used that I feared inlined too _much_. <SEP> hmmm <SEP> do they not have flags to control optimization tradeoffs? <SEP> like the println macro inlines a bunch of code that would be normally contained inside of printf, for example <SEP> I was thinking about I guess ""traditional"" inlining, where the compiler has a choice. <SEP> that's really the problem, there's no way for the compiler to look at 20 different println! call sites and say: Hey' that's some duplicated code, let's extract that into a function/subroutine <SEP> Yeah, function-writing macros seem more compiler-friendly, vs. code-injecting ones. <SEP> rust's macros _are_ better than preprocessor macros, in that regard <SEP> ! <SEP> Plugging my macro system that injects random bits of code lol",is it possible to do pointer joking?
Summarization," <SEP> Also, if you have a class: ``` class Foo <SEP> @MicahZoltu I'd agree, but for the narrow case of needing to assign such a thing to a global variable <SEP> @keithlayne I'm not  sure what you mean. In my example, the issue is: ``` declare let x: Foo <SEP> I dunno, unless you'd agree that a ""code smell"" isn't always bad. ```ts let pending: Queue <SEP> Yep, but I need some type for `foo.value` so that I can pass it into `foo.fn(value)`. I just don't care what type that is.",is there a way to pass foo.value to a global variable
Summarization," <SEP> ppl use IO in typescript? <SEP> Someone's working on a library to enable such use. I, personally, don't and wouldn't for performance reasons. <SEP> ah neat",use IO in typescript?
Summarization," <SEP> fairly minor, i just like to avoid doing `!bool` negations, but i don't need to do this very often so i can deal with it <SEP> especially since type guards always return bool, checking against bool literal is redundant, so the extra complexity is really not warranted <SEP> if the expression were constant, it's less of an issue, but im not sure if the AST can tell if it is const <SEP> only _interesting_ application would be injecting compile time consts to adjust type guards, but even that scenario is a bit obscure <SEP> yea essentially that would be the work around. pretty obscure haha",how to avoid !bool negations expression
Summarization," <SEP> right yeah - I've seen them kicking around. I thought one of them was getting a bit of traction - i think the one about storing typeguard results <SEP> but yeah totally understand performance reasons aside why it's a massive risk to start narrowing types of `b` based off narrowing of `a` - makes it super easy to introduce bugs <SEP> At that point you basically have dependent types, even if just internally.  Which adds lots of complexity <SEP> Its a big can of worms <SEP> exactly <SEP> it would be super useful, but yeah exactly a *huge* can of worms <SEP> random shoutout: I'm glad this is a thing:  ```ts const fnR = (p: undefined) = <SEP> which is what I love",narrowing types makes it super easy to introduce bugs
Summarization," <SEP> https://github.com/microsoft/TypeScript/issues/13298#issuecomment-515600805 <SEP> https://github.com/microsoft/TypeScript/issues/13298 <SEP> Long test file is long, https://github.com/AnyhowStep/tsql/pull/3/files#diff-685a95d488de4dc2af42c203b0d11765 <SEP> Just tried TS 3.7 Literally, `Extract <SEP> TS is drunk <SEP> But, of course, `X extends infer Wtf ? Extract <SEP> ! <SEP> TS 3.7 thinks this is too complex  <SEP> ! <SEP> !",Extract doesn't work with TS 3.7
Summarization," <SEP> @varunjayaraman, yeah, no compile needed outside of the modules you create.  CommonJS or UMD work great with Node. <SEP> does anyone also know how to get webpack to ignore ts-loader's errors <SEP> i have a separate operation linting my typescript for the time being, i just dont want those errors showing up because they also clutter the browser console with webpack dev server",how to get webpack to ignore ts-loader errors?
Summarization, <SEP> @KwintenP  ``` Observable.prototype.debug = window.rxDevTool(Observable); ``` <SEP> stright from rx-devtools github <SEP> @MRokas Where did you find this exactly? And what does this mean? <SEP> Thats from a different library. I'm creating something from start.,Observable.prototype.debug = window.rx from rx-devtools github
Summarization," <SEP> Query regarding using async await in typescript class   Hi, <SEP> ""I am trying to use async await in class in typescript in Netbeans IDE but getting error:  error TS2705: An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option."".    Please help me resolve the issue. I am not aware how to create Promise constructor if that is the only solution.  My class method is: public async login() {         await driver.get(""https://fuscdrmsmc293-fa-ext.us.oracle.com/fscmUI/faces/FuseWelcome"");         await this.username.sendKeys(""cvrqst01"");         await this.password.sendKeys(""Welcome1"");         await console.log(""Password entered"");         await console.log(""username entered"");         await console.log(""Report"");         await searchBox.sendKeys('webdriver');     }   Below is my tscconfig.json file: {     ""version"":""1.5"",     ""compilerOptions"": {         ""target"": ""ES5"",         ""module"": ""commonjs"",         ""lib"":  <SEP> @thasmo what OS, what package manager? <SEP> Did you try other package managers? <SEP> Most importantly, what package is that?",error when usubg async await in typescript class
Summarization," <SEP> I'm referring to the tiny DI framework I use in basically all of my projects <SEP> https://forge.tedomum.net/resynth1943/inject <SEP> Comes in at about 3kb <SEP> I'm trying to fix releases so they go into Git tags, instead of just dumping compiled code into master <SEP> In the meantime though, I should probably stop git-ignoring lib so my projects don't break <SEP> @resynth1943 Do you mind if the interfaces for `Audience` and `Spectator` still sit in the `index.ts`? <SEP> I haven't figured out how to do declatation merging `const Audience` and `interface Audience` when they're both imports <SEP> It is too bad there's no way to  ``` export type { Audience } from ""./interface""; export { Audience } from ""./constructor""; ``` One is exclusively a type, and the other is exclusively a variable <SEP> You can do that <SEP> I used to do that all the time with run types <SEP> npmjs.com/runtypes <SEP> hmm. let me try again <SEP> You can export both a type and variable <SEP> Then, depending on the usage, one of them is used <SEP> Really really handy for type validation <SEP> Typescript is definitely complaining about this: ``` export { Audience } from ""./constructor""; // error: export { Audience } from ""./constructor""; export { Audience, Spectator } from ""./audience""; // error: export { Audience } from ""./constructor""; ``` <SEP> I know I can declare ``` export const Audience = ...; interface Audience { ... } ``` in the same file. But `export ... from` doesn't seem to work that way. <SEP> What you *could* do *is...* <SEP> `import { Audience as AudienceType }`; `import { Audience as AudienceValue }` then `export const Audience = AudienceValue; export type Audience = AudienceType;` <SEP> :-) hacks be like <SEP> That'd be `export type Audience <SEP> Yeah :D <SEP> I _wish_ type aliases could transparently pass through generic parameters <SEP> TBH this is the first use-case I've seen for this outside of runtime type validation, this is cool <SEP> I'm not convinced that's any better, though. <SEP>  I _wish_ type aliases could transparently pass through generic parameters  Same :/ <SEP> @resynth1943 is a very sad man... https://mastodon.tedomum.net/@resynth1943/105323436655652586 <SEP> This is the food version of the walk of shame <SEP> I eat what I cook for 3-4 days. Too lazy to cook every day. <SEP> Heh <SEP> Was like three fuckin' boxes of chicken, and 2 little boxes of chips <SEP> They look hella cool",don't break when fix release referring the tiny DI framework 
Summarization," <SEP> I want to extend the string prototype  ```ts // string.extensions.ts interface String {     capitalize(): string }  String.prototype.capitalize = function() {   return this.charAt(0).toUpperCase() + this.slice(1); };  // typings.d.ts interface String {     capitalize(): string } ``` I imported the file in the app.module.ts  How can I remove the interface in the typescript file? Webstorm is not recognizing the method on the string object. How can that be fixed? <SEP> Im using this inside a shared library and webstorm is not detecting the method <SEP> ! <SEP> Im declaring the interface in the typings file and in the typescript file <SEP> Its redundant <SEP> you could use ```ts declare global {     interface String {         capitalize(): string     } } ``` in `string.extensions.ts` <SEP> it must be a module, though. <SEP> so you'll need to add an `export` somewhere",not detecting the method extend the string prototype inside a shared library
Summarization," <SEP> @keithlayne good work <SEP> ! <SEP> almost wrapped it up now <SEP> Yeah, that's what it's supposed to look like :) <SEP> OK, @keithlayne wanna audit my changes and if thats good well ship <SEP> yeah looking <SEP> @keithlayne you on twitter? Would like to attribute <SEP> not cool enough for that <SEP> :+1: <SEP> jeepers I'm so dumb, I can't figure out how to merge your changes locally, even though they're fetched :(  Not doing enough open source. <SEP> but LGTM anyway <SEP> you don't need approval from someone not even cool enough for twitter <SEP> Thanks for fixing it up! <SEP> okay, just checked out directly from your remote, looks awesome. <SEP> I pushed directly to your branch :) <SEP> ok, delpoying <SEP> yeah I know, but I've apparently got a case of the Tuesdays <SEP> oh doggone it, I started the branch before I forked and the upstream wasn't set.  I'm so dumb. <SEP> Now if 3.7 lands today my life will be complete",audit changes and merge changes locally
Summarization," <SEP> A tech demo for name mangling? <SEP> They wrote their own name mangler <SEP> A prototype <SEP> I think my CTO loves ActiveRecord or some Ruby ORM because it has name mangling, too. I believe mongoose or something also has name mangling. Converting collection names to plural automatically. <SEP> But not, like, a classic mangler to resolve shadowing issues. <SEP> Not that kind <SEP> Literally one that starts randomly respelling stuff. <SEP> Yeah <SEP> Yikes. <SEP> Oh, Djangos ORM does that pluralization thing too, but offers a trapdoor: https://docs.djangoproject.com/en/2.2/ref/models/options/#verbose-name-plural <SEP> Normalization isnt name mangling though.  Theres some aliasing in unicode, but if both sides agree on a canonical form you can avoid it <SEP> Yep, most ORMs allow you to override. So I've just gone and overridden the name of every table and relationship in my database <SEP> Unless youre talking about something different in which case Ill shut up <SEP> Nope, that's what _I_ was talking about. <SEP> I dont mind the  <SEP> Normalization is a different thing, yeah. <SEP> I've had my editor auto-normalize a binary file (because I'm stupid, editing binary in utf8 encoding) <SEP> Ouch <SEP> It doesn't seem like VS code is doing that, at least <SEP> Always use a hex editor for binary <SEP> I'm compiling a list of operations/functions that can have consistent behaviour across MySQL, PostgreSQL, SQLite at the moment.  Most of the stuff for SQLite just ends up being, ""Emulate this by adding a user-defined function""  But it seems like I'll have to add `LENGTH(x)` and `CHAR_LENGTH(x)` to the list of things that cannot be offered by the ""base"" library because behaviour simply doesn't seem to be consistent.  I really need to add more databases to my list. <SEP> SQLite doesnt even have a boolean type. <SEP> All the fatabases.  All of them. <SEP> Ummmmm.... databases <SEP> Neither does MySQL <SEP> The boolean type is enforced through TS compile-time only. <SEP> Yeah, but I dont expect better from mySQL. <SEP> MySQL has the `BIT(1)` type , though",name mangler like ActiveRecord or mongoose?
Summarization," <SEP> `s in o` does narrow `o`, why not `s`? <SEP> It doesn't narrow either afaik <SEP> The type of `o` is already `{ a: number, b: number }`, it doesn't need to narrow it further",why s in o does narrow o?
Summarization, <SEP> before I open an issue for this (I think I'm just missing some type reference) - `sql.js` references `@types/emscripten` which uses a couple types in its definition including `WebGLRenderingContext` that TS can't find in my environment <SEP> do I need to add some lib/reference or is that a definition issue? <SEP> Looks like adding `webworker` to your `lib` array should do it.,sql.js reference @types/emscripten that TS can't find in my environment
Summarization," <SEP> https://imgur.com/15C2xVi <SEP> yeah  typedoc-neo-theme <SEP> because the default sidebar stuff wasn't doing it for me aesthetically <SEP> I actually forked it to create my own version so I could play with it at a later date... so typedoc-ava-theme <SEP> which is on npm: https://www.npmjs.com/package/typedoc-ava-theme <SEP> Ah, I thought your name seemed familiar. I was looking through themes to see how much stuff the next release was going to break and looked at yours <SEP> dont worry about me, i can switch themes <SEP> or fix this one <SEP> Neo's pretty good, can you make it the default LMAO <SEP> It would be nice to rebuild the default theme <SEP> the ""outline"" options in the tsconfig are dope <SEP> src/default/partials/index.hbs  <SEP> The default - https://github.com/TypeStrong/typedoc-default-themes/blob/master/src/default/partials/index.hbs <SEP> honestly, though, that shouldn't be in a config at all... that kinda stuff could be file-level, namespace, module, class-level, and interface-level tags <SEP> Fair point <SEP> like @tag APIs/AVA/UTXO  and @tag APIs/Assets/UTXO <SEP> creates an automatic heirarchy <SEP> multiple @tag definitions put it in multiple hierarchies",typedoc-neo-theme for sidebar stuff on npm
Summarization," <SEP> Hi, I have two files `a.ts` and `b.ts` at one project, then add a Triple-Slash Directives like `///  <SEP> I generally avoid `///  <SEP> Is there a way to get the names and return types of a class' properties without using property decorator? I would like to access the schema of a class as data",how to get the names and return types of a class without using property decorator?
Summarization, <SEP> did they do that before though?  I feel like before it was 3.5.1 <SEP> Yeah I don't recall them ever skipping to .2 for the final before <SEP> Also it seems the release process isn't automated: https://github.com/microsoft/TypeScript/issues/33122#issuecomment-525908821,before 3.5.1 did they skip .2 for the final release?
Summarization," <SEP> Hello, I would like to use react-css-modules but got `Uncaught TypeError: Class constructor TopBar cannot be invoked without 'new'` <SEP> There is an open issue here : https://github.com/gajus/react-css-modules/issues/196 <SEP> AFAIK issue is the way `class extends` is compiled <SEP> do I need to add something in tsconfig ? <SEP> which isnt ssignable <SEP> the angle brackets are like a cast in java <SEP> if there is no #background, it will still compile but there will be a runtim error",how to use react-css-modules with tsconfig?
Summarization," <SEP> I'd expect that to be `any`, since you aren't extending `CoolMixin()` <SEP> If you fix that with `class MyClass extends CoolMixin()`, then hover works as expected <SEP> Yeah <SEP> But I want that, for example, to be a type error, like in TypeScript <SEP> I always kind of assumed that jsdoc-annotated JS could be imported by TS.  I guess it makes sense that you can't, but is slightly annoying. <SEP> I've enabled all strict options <SEP> @keithlayne You can <SEP> with `allowJs` <SEP> right? <SEP> no clue <SEP> Yeah. I believe so <SEP> I think the playground is just bugged. Pasting that into a local file with `//@ts-check` shows an error <SEP> and additionally `checkJs` tells TS to also type check the imported JS <SEP> Yeah. seems like it is bugged. I think the `checkJs` option should basically behave like `// @ts-check`. <SEP> never write JS, but I have a new project that needs to use webpack as a lib for dev, but I didn't want to jump through hoops to run webpack normally for prod. <SEP> so I annotated all the things in the webpack config, but still needed a d.ts for it.  Which was like one line, but I couldn't inline it in a ts file. <SEP> @Gerrit0 Even if I add `// @ts-check` it  <SEP> @keithlayne I don't quite understand the issue you had with Webpack. <SEP> I use Webpack currently for all TypeScript projects at work. <SEP> Not because I want to, but that's what was put in place before me, so its still there. <SEP> Yea, playground bug. If you open an issue at https://github.com/microsoft/TypeScript-Website/issues Orta will probably fix it <SEP> no issue really.  I just wanted keep a simple webpack.config.js so I didn't need to configure tooling really, and also load it from TS in dev. <SEP> and ensure that types were reasonable in the actual config. <SEP> I filed the new issue: https://github.com/microsoft/TypeScript-Website/issues/389 <SEP> Is Orta here on Gitter? <SEP> Occasionally, he's more often in the TS Discord though",extends CoolMixin() of the the playground bug
Summarization," <SEP> `unclechu` Gerrit Birkeland (Gitter): when i use just `tsc` to compile the code into `*.js` files like this: `tsc --target es2015 -p .` i get this error:    <SEP> `unclechu` Gerrit Birkeland (Gitter): thanks, that's work <SEP> `unclechu`  * Gerrit Birkeland (Gitter): thanks, that's working",error when compiling tsc into *.js
Summarization, <SEP> then i don't understand why you're suggesting a handcrafted declaration file <SEP> Never suggested it.  Just said it was easier to deal with in that situation. <SEP> how is it easier to deal with? <SEP> Everything is in one place. <SEP> it's not? i have type annotations throughout the project <SEP> there are far too many ways that can go wrong <SEP> I wouldnt consider that either. <SEP> the only way that would work is if i stopped using type annotations inline <SEP> Not at all. <SEP> WHAT ARE YOU SUGGESTING I DO?,a handcrafted declaration file is easier to deal with?
Summarization," <SEP> @amatiasq In strict mode, function assignability is contravariant w.r.t. parameters.  Consider: * `string` is assignable to `string | number` * This makes sense since your variable can take either a string or a number.  You have a string, so everything is good * However, `(x: string) = <SEP> The relationship is the same for subtype vs. supertype <SEP> newbie question why i am getting Property 'toString' does not exist on type 'T'.(2339) <SEP> ```  function getData <SEP> https://www.typescriptlang.org/play/?ssl=7&ssc=50&pln=1&pc=1#code/LAKAZgrgdgxgLgSwPZQAQHMCmcAiBDOPAHgBUA+ACgDc8AbCTALlRIEpmTUBvUVVG+plQBeVHACeAB0xIw-Og1QBCUQHIAznABOCKOlWoA-PMEA6OEgDK23egqtUzAQwDcvVFuwQtaZ5lO6MPQAJpjqFKp0mAAeeKoOxqriSBAeSDAA1uqqzEkpqMEQALYARqpuIAC+oKAwKOpItP60SHZYuATEmjp6lABEUbGoMAAWmJmYwai6faysFaBAA <SEP> Because TS can't represent `T & not string` in its type system, so your typeof check doesn't narrow it <SEP> @fatcerberus wise answer... I see why this was decided in your example, thanks <SEP> even without that typeof check <SEP> Type '""you rocks"" | ""you dumb""' is not assignable to type 'T'. i get this <SEP> ```  function getData <SEP> Your typeof version was the correct implementation, but you're running up against a design limitation in the type system <SEP> Actually wait no, I take that back, this function is wrong <SEP> You say you return `T`, yet you've hardcoded it to return a string <SEP> can you see in console.log there i am passing generic type <SEP> and i expect T type return that actually getting return <SEP> so it is okay i dont see anything wrong in it <SEP> You're always returning a string <SEP> `T` might be `number` <SEP> no how can you say that ? i am already typed with generic that it will always be  <SEP> This function is not generic.  This is what you actually want ```ts function getData(value: unknown): string {   const str = String(value);   return str.includes('alexa') ? 'you rocks': 'you dumb'; }  console.log(getData(""alexa checked in"")); ``` <SEP> I don't know how I can be any clearer <SEP> would't a union of the two strings be more correct? <SEP> That works too but my point was the function is not generic if he expects the return type to always be string <SEP> ```  function getData <SEP> I don't understand what you're trying to accomplish <SEP> Nothing is stopping someone from going `getData <SEP> how does that make any sense <SEP> I don't think you understand how generics work <SEP> `T` is a *type **variable*** <SEP> a generic is supposed to be generic, can be anything <SEP> like Array <SEP> You can't assume *inside the function* that `T` will always be `string` <SEP> i am really confused with generic type in typescript which doesnt work for simple example <SEP> you're confused about generic types in any language <SEP> not just typescript <SEP> It doesn't work because you're not using it correctly <SEP> Generic means *the caller of the function* gets to choose the type and you can't make any assumptions about what it is <SEP> first of all as your example shows you aren't expecting a generic type but two specific types <SEP> either a string or something with a toString method <SEP> so when we should use it ? when you cant know what you will get <SEP> that's what unknown is for <SEP> this is a simple usage of a generic <SEP> head: (a: Array <SEP> given an array of A's whatever A is <SEP> (assuming the array is not empty) <SEP> If you don't know what type the caller will give you use `unknown`, like Enrico says <SEP> generic means ""put inside anything and it's okay"" <SEP> but your use case expects either a string or something with a `toString` <SEP> Specifically, ""substitute anything *for T* and it's okay"" <SEP> also, <SEP> just to say <SEP> `return value.toString().includes('alexa') ? 'you rocks': 'you dumb'` is equivalent <SEP> right <SEP> `const foo = (u: unknown): string =",property toString does not exist on type T
Summarization," <SEP> Hi everyone, I have something that is hopefully a quick question. Ive tried googling, but cannot formulate the right query. Id like to get the TypeScript compiler, instead of generating `require` statements, to bake the `import ... from ...;` imports directly into the resulting binary. Specifically, I have some `node_modules` that Id like to just wind up in the single JS file, but currently the generated `require`s are being a pain in my ass. Can anybody help? <SEP> Specifically, Im trying to import `gl-matrix`. <SEP> @blindmonkey  You probably want to look into using a module bundler like webpack, rollback, etc... <SEP> is this a web project ? <SEP> @dtabuenc Thanks for responding! Yes, this is a web project. Im just trying to do something simple and play around with WebGL, so its a bit frustrating that Im stuck on something so basic. <SEP> using a module bundler is pretty basic <SEP> you point it at your entry file and it generates  a bundle of all the dependencies <SEP> So.. Im already using `browserify` I think? <SEP> so then browserify should take care of all the requires <SEP> So this is my command for `npm run build`: `cross-conf-env browserify -s npm_package_name npm_package_config_app -o npm_package_config_bundle -p  <SEP> Im hoping that you can just give me some pointers, rather than me having to investigate what each of these options means. <SEP> But my guess would be that `no-bundle-external` looks suspicious? <SEP> I don't know much about browserify configuration, but in general, a  module bundler like browserify will take the files generated by typescript and ""bake in"" as you said, all the requires <SEP> @blindmonkey  yeah, that looks suspicious <SEP> but I don't know much about browserify like I said <SEP> Well what do you know... That did exactly what I hoped! <SEP> I feel a bit dumb now :sweat_smile: <SEP> Thank you for your help!",TypeScript compiler import directly into the resulting binary for example gl-matrix
Summarization," <SEP> @fatcerberus thanks.. but why doesn't typescript output mjs then? <SEP> It does - if you set `module` in tsconfig to `es2015`.  If you mean the `.mjs` file name extension, probably because its not standard and browsers dont care about the extension anyway <SEP> Just watch out for #16577 if you do decide to output ESM",why does typescript not output mjs?
Summarization," <SEP> https://github.com/microsoft/TypeScript/issues/34999 <SEP> I feel so happy <SEP> I'm not alone in my weird tsserver problems anymore <SEP> Finally, one other human being on the planet has my problems <SEP> I'm not crazy! <SEP> (said the crazy man) <SEP> RE: `Record <SEP> well, I don't bother with Map for string keys, nor do I use something like `Object.create(null)`.  I'm a :cow::boy: <SEP> @AnyhowStep i want the compiler to only allow string values, but recognize that not every key has a value (basically i want it to match the runtime behavior of a record you only assign strings to) <SEP> I know, it's on my wishlist, too. <SEP> Someone opened an issue about it yesterday, I think. <SEP> Similar issue about arrays gets brought up from time to time.  But I think I agree that it would suck in practice to check every array access, and that sane usage patterns make it not as big a deal. <SEP> i think there are safe accesses (anything iterating over/using known keys) and all unsafe accesses should require a null/undefined check <SEP> at least i would want to have that option <SEP> I remember there being a type checker for JS that introduced little no to extra syntax <SEP> And it would know that your array access is safe <SEP> By seeing the usual pattern of `for (let i=0; i <SEP> But can't remember what the checker was anymore <SEP> that, or `arr.map` and such <SEP> `Object.keys` should be known safe too <SEP> but `foo <SEP> The problem is that they would have to either, a) Introduce dependent types b) Hard code CFA to check those cases <SEP> Yeah I think for arrays (not tuples) in particular you should not (in general) be doing indexed access outside of library code. <SEP> The easiest fix would be CFA hack-ery. But I feel like they don't like that. <SEP> i think it would be fine to bless known key access, validate types of indexed writes, and treat indexed reads as nullable <SEP> I think that would be better than fine :) <SEP> i don't know enough about the compiler to know how that would be implemented, but the current implementation of index signatures doesn't match reality <SEP> but since you can't do that right now AFAIK, my personal rule is to avoid it unless writing a generic array algorithm, and there's nearly zero chance I'll need to do that at this point (and I don't even wanna think about stuff like sparse arrays).  But there's probably some common case I'm forgetting. <SEP> @keithlayne I think there might have been a PR to make conditional return types work? <SEP> that's interesting, haven't seen it <SEP> but part of me feels like they suck and maybe _shouldn't_ work :)",tsserver problems about a type checker for JS
Summarization," <SEP> okay thank you very much <SEP> ich am currently tying to implement this tutorial in ts: https://facebook.github.io/react/tutorial/tutorial.html#showing-the-moves <SEP> some parts of it are quite stange :) <SEP> here is the current state :  https://github.com/daslicht/facebook-react-tic-tac-toe-tutorial-ts <SEP> @dtabuenc Yeah that Array structure is confusing indeed, i would have written it different either, I just tried to solve it like this to learn how things work <SEP> But do they actually try doing something like :  ``` history.squares = ...... ``` in that code ? <SEP> I believe that's called laziness, haha. <SEP> @daslicht  I think that was your error, trying to do an operation on the array itself that was intended to be performed on an element of the array. <SEP> they do :  ```  this.setState({     history: history.concat( <SEP> Yeah so that's basically the stateless equivalient of: ```    history.push({       squares: squares     }); ``` <SEP> yeah but without creating a copy <SEP> they claim to use copies since they want handle things immutable <SEP> I just tried to deploy my txt to gh-pages: https://daslicht.github.io/facebook-react-tic-tac-toe-tutorial-ts/ <SEP> but there is just an error shown :  Invariant Violation: _registerComponent(...): Target container is not a DOM element. <SEP> huh? <SEP> interesting, it is working locally neither wen i not use the webpack-dev-server",stange things when implementing tutorial in ts 
Summarization," <SEP>  labeled JavaScript for marketing reasons <SEP> what. <SEP> You cant run TS code in a JS engine <SEP> Unless you run tsc first <SEP> It would be nice to get types into JS officially, though Im not convinced Id want TS used as a base",run TS code in a js engine unless you run tsc first
Summarization," <SEP> hi, for some reason when i click submit button the sites is getting refreshed and the handleSubmit function is never called. Why is handleSubmit not being called? https://gist.github.com/bsdis/cdf772bda24a5b2b05817a8c0a2abb48 <SEP> because onSubmit goes on the form element <SEP> not the button <SEP> ```  <SEP> oh right <SEP> thanx <SEP> @ShanonJackson ever worked with jwt auth before?",why is handleSubmit not being called when i click submit button?
Summarization," <SEP> Hey, why are  <SEP> is travis cloning from scratch ? <SEP> or could there be left-over npm modules <SEP> @mightyiam  the error would be fixed if you `npm install @types/node` <SEP> my guess is somehow that's installed on the server <SEP> but not as part of the local install <SEP> What do you mean by server, please? <SEP> And, I don't know whether Travis is cloning from scratch. I didn't instruct it otherwise.",why is dtabuenc> cloning from scratch?
Summarization," <SEP> problem is we have that legacy Http class that wraps XHR, Im trying not to touch it too much but porting it to TS shows a lot of weakness in there <SEP> Yeah, sometimes  <SEP> unconvertable <SEP> hard questions for being just past midnight  <SEP> Id also say dont use a class if you dont have to, but that may not be relevant to your situation <SEP> Im actually not totally sure how youd use this code even if the annotations were trying worked.",porting legacy Http class to TS is unconvertable 
Summarization," <SEP>  any ideas on how to make it more DRY? ```     if (this.servReqType === 'ADCOIN') {       this.configuration.push(         {           type: 'doc',           elementClass: 'documents enable-when-hide',           name: 'doc'         }       );     } else {       this.configuration.push(         {           type: 'doc',           elementClass: 'documents enable-when-show',           name: 'doc'         }       );     } ``` same here : ``` createItemToSend(id, givenName, famName) {     if (this.servReqType === 'SERVREQ') {       this.itemToSend = {         resourceType: 'QuestionnaireResponse',         questionnaire: {           reference: `Questionnaire/${this.formId}`         },         status: 'in-progress',         authored: new Date,         author: {           reference: `Practitioner/${this.userFHIRId}`         },         identifier: {           value: 'SERVREQ'         },         subject: {           reference: `Patient/${id}`,           display: `${givenName} ${famName}`         },         item:  <SEP> just isolate the part that doesn't change <SEP> @keithlayne how? <SEP> @keithlayne could you show an example please <SEP> ```ts const elementClass = this.servReqType === 'ADCOIN' ? 'documents enable-when-hide' : 'documents enable-when-show' this.configuration.push({ type: 'doc', name: 'doc', elementClass }) ``` <SEP> @keithlayne what if i have 15 and more params? like in createItemToSend(id, givenName, famName) <SEP> looks like the only difference is `subject` <SEP> yeah what they said extract the dynamic parts reuse the static parts across both branches <SEP> ```ts createItemToSend(id, givenName, famName) {    const thing = {         resourceType: 'QuestionnaireResponse',         questionnaire: {           reference: `Questionnaire/${this.formId}`         },         status: 'in-progress',         authored: new Date,         author: {           reference: `Practitioner/${this.userFHIRId}`         },         identifier: {           value: 'SERVREQ'         },         item:  <SEP> That just makes use of a the fact that spreading `null` doesn't add anything to the object. <SEP> @keithlayne well `subject` must be before `items <SEP> objects aren't ""ordered"" and give no gaurentee of order <SEP> on keys <SEP> exactly <SEP> so it wont matter where subject is positioned <SEP> @ShanonJackson it is sent to DB in this order <SEP> it's JSON <SEP> wont matter <SEP> ok <SEP> should be sent in any order and still work <SEP> thanks guys <SEP> no problem <SEP> you're welcome",how to make isolate the part that doesn't change
Summarization," <SEP> I haven't found a definitive source, but it looks like subpath imports is new circa v14 <SEP> some people structure their modules such that ""../../../../../../foo/util"" is really common <SEP> I don't blame them for thinking that ugly and unintuitive <SEP> There are other approaches usually. <SEP> Like break stuff into  subprojects and use project references. <SEP> it's really just a problem with ESM imports. Previously you could override `requires` resolution at will, and most people didn't expect static analysis to be able to follow requires anyway <SEP> I too think it's ugly, but like I said, I avoid manually touching imports, or even looking at them too closely. <SEP> and subprojects only really work so long as you're just using typescript <SEP> as soon as you begin to layer other compilers and more complex toolchains, they don't work so well <SEP> at least in my experience? <SEP> I have a subproject with a bunch of shared code that splits into kinda sublibs, and no `main`. Would have loved `exports` for that. <SEP> I don't dispute that - see our conversations about make and tup etc. <SEP> I think in the future I'll probably try to split subproject boundaries more based on build tooling. <SEP> The subpath imports could help get away from composite projects and the ""workspace"" concept. <SEP> yeah, that's how I see it being used. <SEP> But I think it's gonna be at least a few months from now before the tooling really starts to catch up. <SEP> Oh yeah ""Added in: v14.6.0"" it's a pretty new feature <SEP> a couple months seems optimistic. I'd expect 6-8 months before we see it supported in typescript <SEP> And I'm generally a fan of composite projects. <SEP> unless someone decides to implement it and contributes code <SEP> I'm not a fan of composite projects <SEP> Yeah that was my super-happy path for starting to see support. <SEP> I usually end up needing to do some more tweaking that what tsc permits <SEP> It didn't make 4.1 at all, and I don't expect it in 4.2. <SEP> Is there a tracking issue for it? <SEP> Ah, I missed that... let me find it",without subpath imports in v14 is ugly and unintuitive
Summarization," <SEP> How come the latest release is listed as 2.2 here: https://github.com/Microsoft/TypeScript/releases But the version in npm is 2.1.5? https://www.npmjs.com/package/typescript <SEP> @aaronbeall It's 2.2.1 for me, check again? <SEP> yeah it's 2.2.1 not sure why you are seeing 2.1.5 <SEP> woah, it literally just changed before my eyes... <SEP> and yep, *now* `npm install typescript` picks up 2.2 <SEP> did it just change? or some kind of cache issue on my local? <SEP> no it's been 2.2.1 since a couple days I think <SEP> must be a cache issue <SEP> yeah I thought so... weird <SEP> @dany-on-demand Thanks but I would like to make it dynamic (at compile time) so that if the IPerson changes my  Friend would automatically get the extra properties <SEP> @dany-on-demand The use case is: I have an api libary which defines its responses using interfaces and returns plain objects. I would like to easily extend some responses with custom functionality without having to manually track and apply changes from the source interface <SEP> @fernandoTorresan  Vscode typically will ask to use the version of typescript installed on the project.",the latest release listed as 2.2 but the version in npm is 2.1.5
Summarization," <SEP> ? <SEP> that is supposed to get the later version <SEP> ! <SEP> it will not install any node module <SEP> it is just typings <SEP> you will see that on the typings directory as you can see on the picture <SEP> I probably got that file by going to https://github.com/DefinitelyTyped/DefinitelyTyped/  <SEP> you shouldnt need that <SEP> I didnt <SEP> Where is your directory `PI_SERVICES`, please? <SEP> where u saw that? <SEP> In your picture, that looks to be the directory you have open in VS Code. On the left maybe 25% from the top. <SEP> oh yeah <SEP> that is the project root folder",not install any node module should check PI_SERVICES directory in VS Code?
Summarization," <SEP> ```tsx class Figure {     public describe()     {         console.log( `I'm basically a figure.` );     } }  class RoundShapedFigure extends Figure {     public describe()     {         super.describe();         console.log( `I am a round shaped figure.` );     } }  let millionFigureFromMillionPlaces!: Figure <SEP> @keithlayne Yeah, but it's in early stages because the original version was impossible to type and I had to rewrite from the ground up.. should come together pretty quickly though.  I'm basically an expert at writing transducers now <SEP> @keithlayne - The point is precisely NOT at the call site <SEP> The problem is not lying at the call site",impossible to type tsx class Figure
Summarization," <SEP> @SalathielGenese Thanks. Ive just started blogging again after an almost 10 year gap and am slowly importing old content as well. Ive updated that post with some commentary. You will need to force a refresh to see it. <SEP> OK, I'll be watching from time to time <SEP> Are there real company/people using online IDE (editors) with browser-based interface or it is just for fun? <SEP> Generally just for learning etc.... <SEP> ok, thank you <SEP> The browser is so limited that as you advance you'll need power not available in a browser. <SEP> Many users use VS Code for example, but there are other IDEs as well. <SEP> browser IDEs in productino use typically are only for pages, not real apps. ie WordPress editing, page builders, etc... <SEP>  Many users use VS Code for example, but there are other IDEs as well.  Yes, I'm mostly JS/TS since 2017... But need a lightweight solution for JAVA, PHP, etc. Netbeans was just shaped for me but since it *was left*, IntelliJ isn't that lightweight and VSCode don't know about PHP_autoload (critical for symfony) nor about dependency classes and JavaFx modules (critical of JavaFx and Spring Framework). <SEP> I'm still watch to see how will I go about for Java development : I currently force myself with IntelliJ <SEP> I havent done much Java since almost 15 years ago, but Ecclipse was popular wtih Java users.. not sure how much its used anymore <SEP> And it seems the best IDE as of **Gradle Composite Build** support (i.e with cross-project references...) <SEP> I like VS Code a lot and use it for TS even over VS Ent which I have a license for. I use VS Ent for C#, C++ etc <SEP> As far as TS is concerned, VSCode have best implemented it <SEP> Yes.",online IDEs (editors) with browser-based interfaces for learning
Summarization," <SEP> So I'm trying to get a feel for TS patterns. Developing a simple process automation script that's composed of several ""adapter"" modules to communicate with different services I use at work (github, pivotal tracker, etc.) <SEP> I started by making interfaces for these services and dummy implementations, but now I want to fill out the actual implementation of each service while keeping mocks for testing. And it's starting to feel weird, like I'm doubling up on stuff. <SEP> Looks like typemoq can't just generate a mock based on an interface, right? So what would you guys do in this situation? Feels weird to implement each interface twice, once for tests and once for real",automation script to communicate with different services
Summarization," <SEP> First step is working ,going from  `utility-types` ```typescript type MyAssign <SEP> You'll need the kind of recursive types that TS complains about to properly type that I think. <SEP> Playground",how to properly type myassign in utility-type
Summarization, <SEP> I love these litte html bugs <SEP> I use to bee a noob <SEP> I don't think they explain it all that well in the tour... I have seen a lot of docs that were dissapointing,i love these litte html bugs and a lot of docs that were dissapointing
Summarization," <SEP> Hi Is it possible to create a discriminated union type where discriminator is a nullable value? This doesn't seem to work sadly ```typescript export type Result <SEP> As of some recent TypeScript version (2.8.1 here) I am getting  ""Cannot assign 'null' to  <SEP> I guess it is related to strict/strictNullChecks, but is there no way of combining these 2 worlds? <SEP> `foo: IFoo | null = null`?",is it possible to create a discriminated union type if discriminator is nullable
Summarization," <SEP> :P <SEP> @robertleeplummerjr You'll need something like @keithlayne 's answer <SEP> Playground <SEP> But that code is very suspicious <SEP> There's no real way to know what a function accepts at run-time <SEP> I just said that <SEP> :trolleybus: <SEP> So, you can easily write your shader or whatever that uses the wrong kind of value <SEP> There's no real way to know what a function accepts at run-time  I disagree.  Because... GPU.js. <SEP> :P <SEP> jk, I know what you mean, I just am being overly technical. <SEP> Well I mean if the user provides a function that only works with `number` and you pass it a `number <SEP> Are you asking about the internals of GPU.js, or just putting a general concept out there? <SEP> In GPU.js, we detect the type being using with the argument, and compose the function in real-time. <SEP> Right, but you can't detect function types <SEP> Yes you can, if you read it to an ast. <SEP> Which we do as well. <SEP> So there's a preprocessing step <SEP> You mean in typescript? <SEP> Yes, there is pre-processing. <SEP> Except, you can have an AST for `number <SEP> It compiles <SEP> But will probably result in an error or funky behaviour during run-time <SEP> It isnt, it is detected and a new internal kernel is recompiled, and cached. <SEP> So you can switch between kernel types, depending on the arguments coming in. <SEP> Im looking at it, and I thank you for making it.",no way to know what a function accepts at run-time
Summarization," <SEP> ...yo dawg <SEP> Types on types?  You mean higher kinded types? <SEP> type families basically <SEP> but I want HKTs too :) <SEP> you know what I'm talking about?  I can make a quick example. <SEP> @fatcerberus thx for the heads-up. ""As they rely on phantom types retaining their type variables"", what do you mean by this ? <SEP>  <SEP> GADTs use phantom types to basically store extra info for type matching. <SEP> How can you create an interface from a class? ``` class A {   pub: string   private priv: string } const fake: AsInterface <SEP> If that disappears, no worky. <SEP> If you just use `fake: A`, it asks for the private properties, then complains that they arent private <SEP> reminds me of the error I got earlier: `Expected at least 2 arguments, but got 2 or more.` <SEP> @keithlayne ok, so what i was asking is basically a way to have GADTs in typescript right ? asking because it gets a lot easier communicating when each party knows the correct terms :) <SEP> No, I don't think so.  It was just an incidental note that TS' behavior for phantom types makes them harder to implement <SEP> Maybe?  I'm not super good with that whole concept. <SEP> It's something *I* want <SEP> :smiley: <SEP> I read this: https://mads-hartmann.com/ocaml/2015/01/05/gadt-ocaml.html  - I need to go back to it but that kind of thing helps my intuition. <SEP> boiled down:  <SEP> the first doesn't really apply to TS, but the second one seems to fit what we're talking about <SEP> @keithlayne The core idea behind GADTs is that you have a sum type with a number of cases, but only one overall generic type - but some of the cases have more constraints on what the type parameter can be <SEP> So this gives you a way to selectively constrain it <SEP> I at at the 'I mostly understand the concept but have never used it and am not sure exactly when to do so' stage of understanding :) <SEP> @fatcerberus thx for the FAQ link, now i understand why this is for: https://github.com/gcanti/hyper-ts/blob/6d20dc4667ceb7aa66a3f7604100729a9ee68203/src/express.ts#L44",higher kinded types or type families
Summarization," <SEP> I've been pondering the very same thing and in result I keep going back and forth :O <SEP> Personally I always use interfaces <SEP> you can always bring in a class that implements the interface as necessary <SEP> the problem with classes is you need to consume and map the json data manually <SEP> whereas an interface you can just cast it <SEP> so like a class you need a constructor or a factory that takes the api data and sets the fields, or uses Object.assign ,etc... <SEP> I could swear classes auto-map too when bringing down JSON data... but I could be wrong and just not remember correclty. Like I said - I've been going back and forth a lot :O <SEP> @PhilWolf91 i think it would only look like it works. you'd assign a plain object to something you told JS was a class with certain properties <SEP> for doing most stuff it won't hurt, but methods will definitely break run-time <SEP> @PhilWolf91 http://www.typescriptlang.org/play/#src=class%20Foo%20%7B%0A%20%20%20%20a%3A%20string%3B%0A%20%20%20%20b%3A%20string%3B%0A%20%20%20%20fun()%20%7B%0A%20%20%20%20%20%20%20%20return%2042%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aconst%20foo%3A%20Foo%20%3D%20%3Cany%3E%7B%20a%3A%20'a'%2C%20b%3A%20'b'%20%7D%3B%0A%2F%2F%20pretend%20%20%20%20%20%20%20%20%20%20%20%20%5E%20this%20is%20json%2C%20that's%20why%20i%20cast%20to%20any%0A%0Aconsole.log(foo.a%2C%20foo.b)%3B%20%2F%2F%20works%20with%20ts%20and%20runtime%0Aconsole.log(foo.fun())%3B%20%2F%2F%20ts%20lets%20you%20do%20it%20but%20it%20fails%0A <SEP> Ah Yeah I was referring to method-less classes used for models ( I didn't express that point ) I could see how the methods would break.",'interfaces'need a 'constructor or factory '
Summarization," <SEP>  <SEP> So if `pickCard(x)` is not a valid function signature, then why do we have to write it?  ```typescript function pickCard(x: {suit: string; card: number; } <SEP> I can't call `pickCard(""test"");`. It throws an error",pickCard(x) throws error and why do we have to write
Summarization," <SEP> ? <SEP> stripInternal `do not emit declarations for code that has an '@internal' annotation.     should be this.. thank  @jy95 jy95 <SEP> ah, great :) <SEP> thanks, Frank https://cdn01.gitter.im/_s/708c5ff/images/emoji/grinning.png <SEP> I don't know to paste emotion..... <SEP> just a `:)` <SEP> :) <SEP> :shipit:",do not emit declarations for code that has an internal annotation
Summarization," <SEP> how do I cast in the middle of a chain ``` arr   .filter() as Value <SEP> ``` (arr   .filter() as Value <SEP> but filter has an overload with a type guar <SEP> it's not working <SEP> let me try something on the playground <SEP> yes... what is the actual code you have <SEP> but yeah basically my filter should convert from a Partial <SEP> it's working on playground :/ <SEP> hum with guard as  ```ts guard(v: Partial <SEP> I'm doing the same on playground with just one prop per interface and it works with the guard <SEP> it looks like the wrong type is coming out of map? <SEP> well out of map it has like `a: number | undefined` <SEP> instead of an optional <SEP> but should be the same <SEP> the type from the map is a plain object <SEP> can I somehow see what `Partial <SEP> with just primitives <SEP> try type X = <SEP> I did it by hand and the diff is optional vs `| undefined` <SEP> well I'll do a clone and add prop one by one <SEP> that's the first thing I did, create a function for the guard <SEP> hmm k <SEP> let me take a break and I'll find out why <SEP> I must ! <SEP> :) <SEP> got it <SEP> it's indeed because of optional field <SEP> playground <SEP> @NaridaL does this looks like a bug ?",how do i cast a filter in the middle of a chain?
Summarization," <SEP> `Object.freeze(Array.prototype)` <SEP> Why <SEP> Because someone pissed you off and you want to make their day miserable, probably <SEP> Anti-cheating in HTML5 browser games? I dunno. It was miserable to debug, so I posted it here. <SEP> Wait - somebody actually *did* that?  Wow <SEP> I did it to myself :( <SEP> *not on Array.prototype, but on another widely used object type. <SEP> ! <SEP> Gdi `ts-simple-type` <SEP> Sounds like a bug in their code <SEP> @webstrand Do you use a linter?  Usually there are rules for stopping you from monkey-patching builtins <SEP> Apart from that, it hasn't found any spots where I used an invariable-mutable-prop as a covariant-mutable-prop <SEP> I think it's because this particular project uses `readonly` on almost every single interface/class prop <SEP> @fatcerberus Yeah, I use tslint, though I've disabled the monkey-patching lints because I patch in polyfills.  But the offending implicit iterator was on a user-defined object: `UniqueID`. <SEP> I did have to add a few special cases like,  ``` //Allowed, because object literal const obj : { x : number|string } = { x : 1 };  //Allowed, because array literal const arr : (string|number) <SEP> ! <SEP> Here's an example of where `typescript-eslint`fails because it is trying to emulate (poorly) TS' type checking <SEP> It doesn't realize that ``` (RawExprT & false) | (RawExprT & true) ```  is assignable to ``` boolean ``` <SEP> We **really** need that public API =( <SEP> Is that the expanded form of `RawExprT & boolean`? <SEP> Yeah, looks like",why does object.freeze(Array.prototype)
Summarization," <SEP> Need some help with this syntax <SEP> ``` options: {     headers?: HttpHeaders | { <SEP> 1. What does the `|` mean?  2. In this - `{ <SEP> 1. `|` used in a type position is the ""union"" operator.  It works like a set union.  For example `string | number` - the value may be either a string or number 2. The specific name `header` is irrelevant in this context, it could be anything at all without changing the meaning.  `{ ",What does the syntax | mean?
Summarization," <SEP> User.findById(""xyz"").populate(""address"") <SEP> and you get user object with address transformed from ID into nested object address <SEP> ah.  That must be relatively (a few years maybe) new <SEP> User.findById(""xyz"") is user object with address key as string id <SEP> so that's mongo's way to address normalization?  Seems reasonable. <SEP> prefer it over SQL so much i could never look back now <SEP> mongodb means you can have a single isomorphic interface for frontend / backend / database schema for a type <SEP> no serialization / deserialization between every layer of your app <SEP> no create column scripts <SEP> im also extremely bias",nested object with 'address'transformed from 'id
Summarization, <SEP> You can use Lodash `forEach` or iterate manually over all keys. <SEP> @cdupuis i was thinking about doing smt. like  ```typescript     return Object.keys(response.data).map((key: number) = <SEP> What kind of error? <SEP> If i do like this: ```typescript     return Object.keys(response.data).map((key:string) = <SEP> ah i got it <SEP> It should be like this: ```typescript     return Object.keys(response.data).map((key: string) = <SEP> how to do that? <SEP> How do i return a Record instead of a  <SEP> How do i return a Record instead of a ,typescript return error when iterate manually over all keys
Summarization," <SEP> how bout this <SEP> lots of extra test-y stuff there <SEP> I guess you could use `Exclude <SEP> although if `K` is somehow inferred as `string` that would break it. <SEP> oops, doesn't work <SEP> maybe it's okay <SEP> better tests <SEP> `unclechu` Keith Layne (Gitter): this succeeds (which is incorrect behavior): ```typescript const test2: {   foo: number   bar: string   baz: boolean   bzz: string } | null = denull(testObj) ``` <SEP> that's weird. <SEP> ```ts const test2 = denull(testObj) const test3: {   foo: number   bar: string   baz: boolean   bzz: string } | null = denull(testObj); // fine const test4: {   foo: number   bar: string   baz: boolean   bzz: string } | null = test2; // error ```",extra test-y stuff doesn't work
Summarization," <SEP> I'm running into a strange issue with a React component.  This code: ```     const terminalContent =  <SEP> How did you defined the type of  the props `content` ? Did you define it as `{type:'code', text:string} | {type:'comment', text: string}` ? <SEP> Or something like that with string literals? <SEP> ``` export interface ITerminalContent {   /** Is the line a comment or code */   type: 'code' | 'comment';   /** The text to display */   text: string;   /** Should the line be highlighted? */   highlight?: boolean; };  export interface ITerminalPropTypes {   /** Text to display */   content?: ITerminalContent <SEP> You can solve the problem by typing the variable `terminalContent` , like `const terminalContent: Array <SEP> If you don't do that, TS infer `terminalContent` as `Array <SEP> Hmm.  I can also cast the `type` strings like `'code' as 'code'`, but I'd obviously like to avoid that. <SEP> It just seems odd that the compiler can't tell that the string literal doesn't match the union type.  Also, why it works when I inline the array. <SEP> When TS infers a type, it looks only at place of the definition, and not at the callsite. <SEP> When inlining the array, TS knows that it's needs a `ITerminalContent` , so it can infer the type properly <SEP> (and you can write `const terminalContent: ITerminalContent <SEP> Hmm, okay.  I'd be nice for my users not to have to import the type, but oh well.  Thanks @blemoine .",issue with a React component and compiler can't tell
Summarization," <SEP> Hello guys <SEP> let sendKey = (myType) = <SEP> Can you please tell me how to return nothing in this expression? <SEP> I used the empty string, however even the empty string is kind of  a value <SEP>  return this <SEP> That's where I use the returned value <SEP> `undefined`? <SEP> I guess that's it <SEP> 2.0.0 is still in RC right? <SEP> @jkells those are simply categories. see https://github.com/typings/registry",how to return nothing in the expression  sendKey = (myType) = Devia
Summarization," <SEP> Hi, Im trying to convert my webpack aliases to something usable by typescript, should I use module or namespace ? <SEP> what do you mean by webpack aliases? <SEP> like resolve aliases ? <SEP> yes <SEP> can you give an example of what you are trying to do? <SEP> are they ultimately just .js files that you are writing .d.ts for ? <SEP> I have a common packages folder, like src/packages/utils and I use import { testAsync } from prc-utils/tests; <SEP> so your questions is about writing the declartion files for them <SEP> ? <SEP> its all in js but as its my own code I was thinking of converting to ts <SEP> use modules <SEP> if you conver to .ts then you wouldn't need the declaration files <SEP> in that case you might just use path-mapping in tsconfig.json <SEP> if you are not yet converting, I woud suggest you create a .d.ts file for each .js <SEP> and put it side-by-side <SEP> but can I import without the need of writing import { testAsync } from ../../../packages/utils/tests/index; ? <SEP> and use path-mapping to map it <SEP> path mapping will let you do the ""aliasing"" in tsconfig.json <SEP> so you would do something like.... <SEP> i tried  ```     ""paths"": {        <SEP> you probably wan tsome wild-card there though <SEP> unless you are importing just `""prc-utils""` <SEP> and using import { test } from prc-utils; but I get the ts error cannot find module <SEP> well but do you have a `d.ts` file? <SEP> for the module you are importing? <SEP> no I have an index.ts <SEP> you might consider doing something like  ```   ""paths"": {        <SEP> also compile with `tsc` and use the `--traceResolution` option to see why it's not finding it <SEP> what is the second star ? <SEP> might not need it anymore... <SEP> it would be so it checks the normal way in additional to in `./src/packages/*` <SEP> this would be great, let me test <SEP> It should work.... and `--traceResolution` should help you find if it doesn't. <SEP> im trying to start with tsc, because the webpack loader is not showing the trace <SEP> yeah I awlays get everything to compile with tsc before moving to webpack <SEP> what do you have `baseUrl` set to? <SEP> baseUrl:  <SEP> hmm.. I'm not sure you want that. <SEP> ```     ""baseUrl"": ""src"",     ""paths"": {          ""*"":  <SEP> that's a quick  test I made <SEP> I have a `src/packages/foo/index.ts` <SEP> which I can import with `import {Foo} from 'foo'` <SEP> trace looks like  ``` ======== Resolving module 'foo' from 'C:/dev/src/ts/src/start.ts'. ======== Explicitly specified module resolution kind: 'NodeJs'. 'baseUrl' option is set to 'C:/dev/src/ts/src', using this value to resolve non-relative module name 'foo' 'paths' option is specified, looking for a pattern to match module name 'foo'. Module name 'foo', matched pattern '*'. Trying substitution 'packages/*', candidate module location: 'packages/foo'. Loading module as file / folder, candidate module location 'C:/dev/src/ts/src/packages/foo', target file type 'TypeScript'. File 'C:/dev/src/ts/src/packages/foo.ts' does not exist. File 'C:/dev/src/ts/src/packages/foo.tsx' does not exist. File 'C:/dev/src/ts/src/packages/foo.d.ts' does not exist. File 'C:/dev/src/ts/src/packages/foo/package.json' does not exist. File 'C:/dev/src/ts/src/packages/foo/index.ts' exist - use it as a name resolution result. ======== Module name 'foo' was successfully resolved to 'C:/dev/src/ts/src/packages/foo/index.ts'. ======== ``` <SEP> path mappings are relative to baseUrl <SEP> let me try but then I have to create an other tsconfig for my e2e <SEP> so you see in that case it found my `src/packages/foo/index.ts` correctly <SEP> or I should try baseUrl:  <SEP> you should make it relative to the root of your src files <SEP> so if your src files are in `src` just set it to `./src` <SEP> also it becomes the root of all non-relative imports <SEP> so even without a path mapping you could do `import {Foo} from 'packages/foo'`",how to convert webpack like resolve aliases
Summarization," <SEP> Potentially tricky one here: <SEP> Anyone know how to get two versions of Node type declarations installed into a single repo at the same time? <SEP> I have a system that uses a specific version of Node for local operations but also supports building an NW.js environment, which has a _different_-yet-fixed version of Node. <SEP> So the environment needs to support two separate Node versions... <SEP> i'm pretty sure there is a fix for that @ericdrobinson just to be of no help at all <SEP> you can force you're project to compile in a specific node version very easy <SEP> i know that much <SEP> (For those who don't know, NW.js is similar to Electron...) <SEP> Hmmm... it's more that some directories have scripts that need to be aware of Node@7 and others that are Node@10... <SEP> So how to get those both installed and configured properly at the same time is the trick, here... <SEP> (am happy to configure the `types` field of various tsconfig.json files, but I've no idea if you can even have npm happily install two versions of the same package at once...)",how to install multiple versions of node type declarations into a single repo?
Summarization," <SEP> https://www.typescriptlang.org/play/?ssl=12&ssc=5&pln=1&pc=1# <SEP> that looks wrong <SEP> eh, worked for me <SEP> does that link work foryou? <SEP> I figured it out. It's the colons after the names <SEP> @tieTYT For future reference: press Ctrl+S (on a mac Command+S) to get a shareable link.  As for your class, that's not how you define methods.  What you have are fields (instance properties) with function values.  This is how you define a method: ```ts class A {     foo(arg1, arg2) { ... } } ``` <SEP> when I compile that class, the JavaScript looks like this:`var __extends = (this && this.__extends) || (function () {...` <SEP> And then node and rollup dislike that <SEP> `(!) `this` has been rewritten to `undefined``",colons after the names   error
Summarization," <SEP> Hi - why can i not do like this? ``` interface LoginState {   user: User;   token: string; }  export const saveState = state: Loginstate = <SEP> I get: Variable 'Loginstate' implicitly has an 'any' type. <SEP> How can it implicitly have an `any `type when i explicitly stated its a `Loginstate ` type ? <SEP> @AnyhowStep hmm then i get error : `'LoginState' only refers to a type, but is being used as a value here.` <SEP> ah <SEP> (), not {} <SEP> gotya",why does interface loginstate have an any type?
Summarization," <SEP> Anyone know why I get this error when running npm install with Angular Material TypeScript  ```typings ERR! message Attempted to compile ""angular-animate"" as a global module, but it looks like an external module. You'll need to remove the global option to continue.``` Once you remove global it complains that jquery needs it. Of course I can install manually, but just wondering why it started happening? <SEP> @codelero try `typings install angular-animate -g` <SEP> Thanks @tusharmath, but I find I have to prefix it with dt~ <SEP> Any idea what changed? <SEP> nothing changed, you would have to do it anyways. <SEP> it basically means the typings are at definitely typed repo = https://github.com/DefinitelyTyped/DefinitelyTyped <SEP>  Sorry, I mean I use  to clone Angular Material and hit npm install and `    ""postinstall"": ""typings install dt~jquery dt~angular dt~angular-animate dt~angular-material --global --save""` use to run fine <SEP> Is there a way to define an interface for an object with exactly 1 string keyed property with value any? <SEP> like  ` {  <SEP> I can use tuple <SEP> interface cannot ever define things an object should NOT have <SEP> only things it MUST have",typings ERR! message attempted to compile angular-animate
Summarization," <SEP> Hi all - could anyone explain to me why the following doesn't work when trying to copy properties between two objects:   <SEP> @pyoor__twitter Typescript isn't able to prove that assignments are safe inside of loops, when the properties do not have consistent value types <SEP> You can do `(oldBob <SEP> telling typescript to treat the destination as a definite `string | boolean` type. This _isn't_ type-safe, you'll be responsible for ensuring that the assignment is actually valid and doesn't introduce wrongly typed property values. <SEP> yeah. Though type-guards aren't type-safe either, there's nothing stopping you from ""proving"" something false with a type-guard. <SEP> ``` function lie <SEP> I made the argument that type predicates are equally as safe as type assertions, and some people...took exception to that. <SEP> `squidlet` oh.... i mean yes, yes it is. valid <SEP> I'm beginning to wish that TS could act somewhet like a proof assistant. That would be killer <SEP> `squidlet` I assume you wouldn't want to do that <SEP> No, but let's say I define a type-guard. It's valid _at the time_. Later, I change the underlying type, and forget to update the type-guard. <SEP> If the set of built-in narrowings were sufficient to describe any type guard via composition, I think TS would be able to help more. <SEP> yeah. <SEP> I really want a type-system like Idris (I've never actually _used_ Idris, but the youtube videos are compelling). It's able to infer some things, but in other cases where the inferrence breaks down, you can use it like a proof assistant to manually prove that what you're doing is valid. <SEP> Then, when the underlying types change, your manual proofs all turn into errors, and you're forced to go back and fix them. <SEP> There are various libraries that make it far more safe to write type-guards, such as `runtypes` <SEP> but in the end, there's some type-unsafe primitives that you're just assuming are correct (not to mention the runtime overhead) <SEP> I'm writing documentation. What would you call an object that's made from an object literal? i.e. `{}`, `{ foo: 5, ... }`, `{ foo() { return 5 }, ... }` <SEP> A ""dictionary"", ""simple object"", ""primitive object"", etc?",copying properties between objects doesn't  work
Summarization," <SEP> Hello guys, Im trying to create a .d.ts file for the node-config library but I came across a problem. In node-config the prototype is extends to be able to acces config like thtat  ``` <SEP> ``` import * as config from config; config.get(key.subkey)  // or   config.key.subkey  ``` <SEP> I dont know any way to declare the module and say you can acces any property you want on that module. Anyone can help ?",any way to declare the module and access any property
Summarization, <SEP> yes thx <SEP> anyone tried to put the 2nd param in a fetch with ts? <SEP> !,2nd param in fetch with ts?
Summarization," <SEP> hi <SEP> when I do this ``` const what = foo as NotFoo ``` i get no type error <SEP> the exact code is  ```ts const AppHistory: History & {sensitive: boolean} = history as History & {sensitive: boolean}; ``` <SEP> so? <SEP> it's a type assertion.  You're telling TS to trust you, so you don't want it to? <SEP> @Uzlopak sounds like the plugin isn't finding your tsconfig. <SEP> then why do I get the error for? ``` 1 as string ``` <SEP> because `1` and `string` have no overlap. <SEP> foo and NotFoo have no overlap <SEP> I really don't appreciate how `as` works. It's generally useless. <SEP> is history an object type?  If so, they overlap with `{}`. <SEP> I want two kinds of things: a safe cast: like as in scala and an unsafe cast: like asInstanceOf in scala <SEP> unsafe case is `foo as unknown as OtherType` <SEP>  is history an object type?  If so, they overlap with `{}`.  that is a class <SEP> TS does no casts.  We use that term a lot, but it's not accurate. <SEP> i mean an instance of a class <SEP> class actually means the interface of the instance. <SEP> which is an object type by definition, so there you go. <SEP> if there is an overlap, why do I get an error for? ``` const AppHistory: History & {sensitive: boolean} = history ``` <SEP> because there's no type assertion there. <SEP> is there a safe alternative to type assertions? <SEP> I am using create-react-app with Typescript. I have `mobx-react` as a dependency and it seems to supply it's own type definitions, but the compiler says it `Cannot find module 'mobx-react' or its corresponding type declarations`. Where should I begin to troubleshoot? If I add `""types"":  <SEP> @theqp ```ts function safeCast <SEP> you can validate at runtime.  It's just JS. <SEP> @webstrand thanks <SEP> @theqp You'd use it like ```ts safeCast <SEP> what's the definition of safe here? <SEP> @keithlayne  behaves the same like this ``` const readOnly: ReadonlyArray <SEP> I think it's ""cast, but prevents casting between incompatible types"" <SEP>  The reason why it's not called ""type casting"" is that casting generally implies some sort of runtime support.  then maybe safeAs would be a better name <SEP> @keithlayne  it is actually using the tsconfig <SEP> is there an issue for adding this method to the language? <SEP> or typescript does not define functions, just type utilities? <SEP> there are no methods in the language <SEP> oh <SEP> @webstrand usually when I *need* to do a type assertion its a downcast.  When it's an upcast I usually I can pass type args. <SEP> I just really don't like that: ```ts class Foo { foo = 1 } class Bar extends Foo { bar = 1 } (new Bar) as Foo; // fine (new Foo) as Bar; // fine ``` works <SEP> If only one of those worked, I'd be happy. I don't care which one <SEP> I wonder if eslint can find those. <SEP> maybe just use your safeCast and ban `as`. <SEP> That's what I've more or less done <SEP> I do use the unsafe cast `foo as unknown as bar` <SEP> and sometimes `foo as never` <SEP> do you ever use `instanceof` to narrow? <SEP> banning is a bad idea for two reasons 1. your workmates done stupid things intentionally like classInstance.notMember = ... 2. the type definitions of libraries may be inaccurate <SEP> @keithlayne  Rarely, but in my apps, I don't have significant class heirarchies, so I rarely get to use it <SEP> banning just requires a comment to turn it off for that line, which makes suspicious uses easy to find. <SEP> @theqp The point behind banning it is, there are safe (or less confusing) alternatives, and you use those instead <SEP> what do you use for downcasting? <SEP> I guess I'm thinking about validation with `instanceof`, which is not safe by itself.  I don't really do classes, but I use some of the JS builtins. <SEP> safe casting can be useful for casting to type aliases <SEP> `instanceof` is generally safe, unless you're fiddling with the prototypes <SEP> Otherwise, I fallback on runtime validation, and manually downcast the object <SEP> is there a popular plugin for typescript which adds a new feature to the language? e.g. I wish ifs and scopes were expressions",why do i get  error for 1 as string 
Summarization," <SEP> i'm trying to make a function to generate a schema within yup (to save on typing because of a form heavy app)  i'd like to be able to pass both a ""test"" argument, and a ""when"" argument, but i'm having trouble figuring how to make it accept the same typescript things as the original method does.  `test`: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/yup/index.d.ts#L162-L167 `when`: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/yup/index.d.ts#L76  how can i make typescript copy the acceptable types from those? <SEP> At first glance it may be doable, but you have a bunch of different schema types there that have different signatures and even overloads, so it might be hard. <SEP> Or it might be pretty simple.  Really hard to tell at this point. <SEP> somehow this worked:  ```ts interface yupStringOptions {   test?: typeof Yup.mixed.prototype.test; }``` <SEP> That may not work well in the case of overloads, like the one for numbers.",how to pass 'test'and 'when'arguments to a function
Summarization," <SEP> Hi am new here and also with TypeScript all resources I have are not worth it pls if I can have some you know correct resources <SEP> TypeScript official website docs <SEP> Learn by practice <SEP> Don't suppose you understand: try it out and see for yourself <SEP> Copy/pasting don't help learning... Wrte it down yourself <SEP> Anyone know if there is a way to ban inferred `any` type either via tsconfig or eslint? e.g. `const a =  <SEP> What's the best way to tell typescript to expect properties on a object without requiring them? I have two interfaces, one with a bunch of data properties, the other with a bunch of functions.   The functions interface is never meant to be used without being spread over an object containing the data object. Ergo `this` should be the context of the two objects combined and `this.somedata` should be present, even if it's not defined in the functions object. <SEP> For context I'm trying to build an Alpine.js store by separating the data parts from the actions in two separate files. https://alpinejs.dev/essentials/state#global-state <SEP> You can specify what type `this` should be in an interface https://www.typescriptlang.org/docs/handbook/2/functions.html#declaring-this-in-a-function <SEP> I know nothing that would help you in that way Or maybe this (not a warning) but JetBrain editor type hint <SEP> The `late` keyword from **Dart** lang. ?",is there a way to ban inferred any type?
Summarization," <SEP> Intellisense FTW! <SEP> By simple doing this `{""""}` and putting your cursor in the quotes and pressing `ctrl+space` <SEP> That's one of the thinks that I love VSCode <SEP> Yes, the settings management etc. is the best.",Intellisense FTW by pressing ctrl+space
Summarization," <SEP> https://github.com/AnyhowStep/knowledge-dag/blob/master/tsconfig.json <SEP> because unfortunately our spec-folder is a subfolder of our src folder <SEP> So, building is just `tsc -b`. Which uses the `tsconfig.json` at the root <SEP> You can see that the root tsconfig.json looks... different <SEP> From non-composite projects <SEP> Then, each project referenced has its own tsconfig <SEP> https://github.com/AnyhowStep/knowledge-dag/blob/master/src/graph-computation/tsconfig.json <SEP> I even have a template lol <SEP> https://github.com/AnyhowStep/knowledge-dag/tree/master/src/_template <SEP> but is is possible, if the spec folder is part of the src folder? <SEP> I doubt my set up is ""best practice"" or widely adopted, since I just kind of hacked at it until I eventually came to this. But it works for me, and is pretty painless.  I don't know how to get it to work with stuff like yarn or lerna or anything else, though <SEP> Should be possible. Like, ``` + src   + tsconfig.json   + spec     + tsconfig.json ```",tsconfig.json looks different from spec-folder
Summarization," <SEP> @simplysh thanx!  Can we declare an Array of **one** but generic type?  ```js export function allEqual  <SEP> sorry, what are you trying to do? <SEP> everything expect one element? <SEP> Yes, it seems this is how TS inference works here. I expected it to be more strict (disallowing array of many types). <SEP> That would be intentional and explicit so perfectly fine. Now it's not safe enough. Array of mixed types is generally a bad idea. <SEP> I expected `any",can we declare an Array of one but generic type?
Summarization," <SEP> btw `export type TCallback <SEP> Again, can't always infer `TData` there <SEP> well yeah but thats ok <SEP> b/c TS requires the generic in this case <SEP> so lets see, we're wanting to return ` <SEP> woah wtf <SEP> Yep and ultimately - it's still part of the function type (unlike an interface that doesn't use its type param) <SEP> I just got around to reading this: wat is it doing?? <SEP> yeah seems it <SEP> oh no ok that makes a bit of sense I think <SEP> ```ts   symlink(target: TFilePath, path: TFilePath, callback: TCallback",export type TCallback requires the generic
Summarization," <SEP> @SalathielGenese  What error would you expect ? Since `Property ` is an empty class almost anything will be assignable to it since Ts uses structural typing. Also not sure what `Exclude` is meant to do in this case <SEP> @SalathielGenese this for example reports an error: ```ts class Property { private x!: string; }  let tel_1: Property tel_1 = new Function(); //err tel_1 = new Property(); ``` <SEP> ! <SEP> @SalathielGenese  Yes, a class constructor is a function .. `Exclude <SEP> @SalathielGenese  `typeof Person` will get you the type representing the class itself. if you use that with `Exclude` you will get `never` ```ts let tel_1: Exclude <SEP> Thank you @dragomirtitian - Static vs. Instance side <SEP> I missed it for a while <SEP> @SalathielGenese  np :)\ <SEP> @dragomirtitian   I was trying to minimize the behaviour that gives me headaches. Here is my case :  ```typescript interface ConstructorLike <SEP> The following will make my decorator work ONLY on static members  ```typescript function AwesomeDecorator(): ( target: Function, property: PropertyKey ) = <SEP> @SalathielGenese looking into it now :) <SEP> ty <SEP> @SalathielGenese sorry have to leave now work now... maybe someone else will answer, I think it can be done with a conditional; type but not `Exclude`, a custom one .. <SEP> Thanks  @dragomirtitian for have looked into it <SEP> @TestSubject06 that sounds like a bug to me - tsc sees the whole program as a unit (because this is the only way cross-file type checking can work) so tslint should be linting the whole program as a unit too and not individual files <SEP> Still related to the above issue I discussed with @dragomirtitian. There is no way in TypeScript to restrict a decorator to constructor parameter or accessor or mutator.",what is the meaning of Exclude and typeof Person
Summarization," <SEP> thanks  @jy95 ,  let me learn first.. <SEP> TypeScript interfaces have no `private/public/protected` modifier, they can only be `export`ed (public) or not `export`ed (private <SEP> You must mean classes, but I'm not sure why those are in your .d.ts files? <SEP> your understanding is right... <SEP> actually I use namespace to manage sourcecode,  and export some classes..... all public methods/properties of these classes will be exported declaration file <SEP> something like this: https://gist.github.com/frankpf/7fb87f54c24ec4e78624993c8a51fc18",typescript interfaces have no private/public/protected modifier
Summarization," <SEP> pretty sure both null and undefined are assignable to void... let me check <SEP> `null` isn't assignable, but `undefined` is. <SEP> Huh <SEP> Guess that kind of makes sense <SEP> and `void` is assignable to `undefined | null` <SEP> yeah `void` as anything but a return type I don't understand. Apparently you can use it for optional params too?  Or something like that. Feels weird.",are null and undefined are assignable to void?
Summarization," <SEP> Pretty sure promisifyAll returns a new object <SEP> So you can just define an interface for that object <SEP> interface qFS { <SEP>   readFileAsync(path:string):Promise <SEP> Then `var fs:qFS = promisifyAll(FS)` <SEP> On my phone, sorry about formatting, but that's the idea <SEP>  yeah it does return a new object <SEP> I ended up doing the following thing ``` let fs: any = Promise.promisifyAll(require(""fs"")); ```",define an interface for that object because promisifyAll returns a new object
Summarization," <SEP> anyone seen this before? ```   14:47  error  'Reflect' is not defined                                         no-undef   14:84  error  'Reflect' is not defined                                         no-undef   15:63  error  Expected a conditional expression and instead saw an assignment  no-cond-assign   18:1   error  'exports' is not defined                                         no-undef   19:15  error  'require' is not defined                                         no-undef ``` <SEP> don't have these in the source file <SEP> @QuantumInformation you need connect typings for Reflect and others <SEP> for export and require needed browserify or webpack typings, by you build system",error reflect is not defined no-undef
Summarization," <SEP> Contrapositive: if P then Q  <SEP> yeah it's from logic. I think I was imagining something like contravariant, and munged the two together in my head <SEP> I'm not sure contravariant is correct either. I'm not sure how useful such a type would be, since `assignable(A & B) = unknown | A | B | A & B` which would reduce to just `unknown`. <SEP> Thats why I said above  <SEP> Because unknown would just subsume everything, being the top type <SEP> The trouble is, I haven't found a rationale for excluding `unknown`. I'm leery to say that it's useful, until I can exclude `unknown` for some defined reason <SEP> that's how you uncover new forms of unsoundness <SEP> Im pretty sure that if intersections were distributive, `UnionToIntersection` would be bidirectional <SEP> Because contravariance is like negation: it flips the sign <SEP> I'm a bit confused, which sign? Usually when we talk about inverting types we mean `-A` is equivalent to `  <SEP> So what does it mean to flip the co/contravariance of a type <SEP> Does it actually mean `  <SEP> Sign being metaphor for variance <SEP> e.g. function parameters are contravariant.  Parameter of higher-order function (function as parameter) is covariant because contravariant(contravariant) = covariant <SEP> Yep, I get that. But my intuition says that variance is part of an arithmetic. <SEP> (if that's even the right term, for it) <SEP> Sometimes variance is even expressed as sign.  Positive = co, negative = contra <SEP> You can only define it with respect to the containing type.  If its contravariant then the subtype relation for that type parameter varies opposite to that of the containing type <SEP> It doesnt make sense to ask what is the variance of a type <SEP> Only a type parameter <SEP> I guess I'll have to think about it, some more. My problem may be that I'm thinking about contravariance as if it were part of the type universe, when it's actually not. <SEP> Yeah, its not a property of types themselves <SEP> Its a property of a type variable <SEP> With respect to a containing type <SEP> *containing generic type <SEP> Alright, contravariance is not the term I'm looking for, at all. <SEP> btw did you know that TS distributes intersections of unions into unions of intersections <SEP> that's what I was getting at before <SEP> `(A | B) & (C | D)` becomes `(A & C) | (A & D) | ...` <SEP> Which interestingly also has the property of grouping by precedence <SEP> Just noticed that <SEP> stupid unnecessary parens <SEP> If I define `Foo","if intersections were distributive, UnionToIntersection would be bidirectional"
Summarization," <SEP> Do you have to manually set up postgresql ahead of time? Or does the test suite handle the configuration and everything? <SEP> It's all on my computer at the moment, but I would configure Travis so that Travis provides it every run <SEP> It's how I have my mysql tests <SEP> https://github.com/AnyhowStep/tsql-mysql-5.7/blob/master/.travis.yml <SEP> ```yml # .travis.yml services:   - mysql env:   - MYSQL_HOST=""localhost"" MYSQL_DATABASE=""travis_db"" MYSQL_USERNAME=""root"" MYSQL_PASSWORD="""" before_install:   - mysql -e 'CREATE DATABASE travis_db;'  # snip ``` <SEP> ah cool. I've never had to do anything like that. <SEP> I would've gone done the rabbit hole of trying to automate it myself with docker <SEP> @AnyhowStep more useful example:  <SEP> Looks like you're trying to get `typeof X` from `X` <SEP> yes <SEP> which should be on `x.prototype` <SEP> but nope.avi <SEP> er x.constructor <SEP> I think there's a good reason for that, though <SEP> yeah, because it's mutable and people do crazy things with it <SEP>  ``` class A {     static methodA() {              }      public readonly x: string;     constructor(x: string) {         this.x = x;     } }  class B {     static methodB() {              }      public readonly x: string;     constructor(x: string) {         this.x = x;     } }  const a = new A(""hi""); //Works because prototype is erased. //If prototype information was preserved, this would fail. //Because a.prototype.methodB does not exist const b: B = a; ``` <SEP> I don't like how classes are structural and would rather they be nominal, but I don't use classes all that often anyway <SEP> But since we allow it to be structural <SEP> Keeping prototype information would make assignments like the above prohibitively hard <SEP> IME that should be an error because B and A are incompatible types, despite looking structurally similar, their difference in prototypes means they aren't substitutable <SEP> I would have it that way, too, if we could redesign TS from scratch <SEP> But because it's currently allowed, they have to erase prototype info, or it'll be prohibitive <SEP> And they probably felt like accessing prototype from instance isn't a thing done often to ""worry"" over",to set up postgresql ahead of time?
Summarization, <SEP> https://github.com/cyclejs/cyclejs/blob/master/xstream-run/src/index.ts#L36 <SEP> that's the function I try to call <SEP> when I try to call it as `... const drivers = {DOM: a = <SEP> so it seems that the variable declaration somehow inferes a type that isn't compatible with `{  <SEP> but I don't understand why <SEP> hmm and changinge const to let or something? <SEP> no,how to call the function
Summarization," <SEP> Hey all, is there an ""awesome-typescript"" repo yet? Equivalent to ""awesome-react"" or ""awesome-vue"" and similar style repos where folks can contribute a community curated list of libraries, articles, books, training, posts, resources, etc. related to TS (e.g. https://github.com/enaqx/awesome-react) <SEP> Looks like there's https://github.com/dzharii/awesome-typescript <SEP> have people here contributed?",is there an awesome-typescript repo yet?
Summarization, <SEP> ```ts const impl = ({ radius: r }: SomeProperties) = <SEP> I have no idea what you're saying.  You can't narrow the type of radius without runtime checks. <SEP> :thumbsup:,can not narrow the type of radius without runtime checks?
Summarization," <SEP> hey y'all. this is a typescript question but for context, i'm trying to write a custom hook around useState, and i want the return type to be a tuple like it is for useState so that it can be dereferenced easily. i'm doing `return  <SEP> my TypeScript is at 4.2.3, and my understanding is that feature was introduced in like 3.1.x so i'm confused as to how this is a syntax error <SEP> are you using a linter? that should work just fine in ts <SEP> if not, can you reproduce it in a playground? <SEP> i think the app was created with react-create-app but it's presenting as a compile error, not a linting error <SEP> lemme try <SEP> vscode sometimes displays linter errors with read squigglies <SEP> vscode isnt' showing me any errors actually lol, it's only the build for some reason T_T <SEP> look above that line for another syntax error? <SEP> how are you building? <SEP> it's the only error, building with `react-scripts start`which i think fires off a webpack build <SEP> and idk what happens from there tbh lol <SEP> and i can't reproduce on playground because i cant even get playground to work for some reason?? it's been a while since i was a daily TS user but im not sure what i'm doing wrong here https://www.typescriptlang.org/play?target=1&jsx=4&strict=true#code/JYWwDg9gTgLgBAbzgVwM4FMCiAzb6DGMANChgMowCGM6cAvnNlBCHAORTqWFsDcAsACgh6AB6RYcfBAB2qeGnQVq6AOrAYACwAyEfJQA2FaJQDmtALxwAFAb2HjUM+gDS6AJ4AuOPKjAZpgCUcBYAfIhCcFKy8nAA2gBuhsjoJBgwAGrJ6AC6IaRKVDTWkVFwdvpGMCbmAHTmMACSNCC29lU1rh7BAD497GylgQKCcKWKOHiE1tbBYRGjZRUO1U516c3orcsda13uJEkGKcOldCSJ2TmnwoucMMhQMvFHKWnomVdwlKjRcjAjOi8IA <SEP> `Unexpected token '{'. import call expects exactly one argument.` with no line number but presumably 1 since it's about the import? <SEP> it works when i paste it in codesanbox though actually T_T <SEP> `Parsing error` is coming from eslint though apparently hm <SEP> yeah when i disable eslint the build succeeds. ugh.",want the return type to be a tuple like it is for useState using TypeScript is at 4.2.3
Summarization," <SEP> @dtabuenc https://github.com/serhiisol/node-decorators/blob/master/mongoose/src/mongoose.ts#L4 <SEP> and add `types: index.d.ts` to your package.config <SEP> @dtabuenc let me a time in order to dive a bit into what `declarations: true` and `types: index.d.ts` means <SEP> declarations true makes `tsc` output a `.d.ts` file for every `.js` file it outputs <SEP> and `types` in pacakge.json just points to it <SEP> Mmm, as far I've been able to figure out `""*.d.ts""` files stand for providing typescript code to javascript libraries, doesn't it? <SEP> By other side, `index.d.ts` is generated or is hand-made? <SEP> @jeusdi  when you compile ts it produces a `.js` but the js has no information about the types. If you have `declarations: true` it will also produce a `.d.ts` file which has the type information <SEP> the `.d.ts` file is only used if you import that module in another typescript project <SEP> Got it! <SEP> @frederikprijck  I think the fundamental issue is there is no way to tell typescript ""the implementation will be provided at runtime"" <SEP> Nope that's true. <SEP> But that's what TS is about, right ? <SEP> Knowing the implementation at compile time. <SEP>  Knowing the implementation at compile time.  exactly!",what does declarations: true and types: true mean
Summarization," <SEP> Hi all! Just a short question: Is it in any way possible to have a global variable (say `state`) defined in a library and let the user of the library initialize that variable once while retaining the proper typing for the variable defined as of the initialization? <SEP> I want to avoid falling back to `any` if possible <SEP> you can add global variables to typings, see `@types/node` <SEP> you can maybe: ```ts declare global {   let foo: Bar | undefined; // probably the hard part is enforcing that it's set } ``` <SEP> I always have to play around with it when I run into that kind of thing, I find it annoying.  Definitely not a fan of using globals for things. <SEP> Hmm that I wanted to avoid too. I don't think the user should have to deal with having to write extra types <SEP> I didn't mean the user. <SEP> Ah, I see. I don't think this would work out in my case as the type could really be `any` until first initialized <SEP> I'm not much of a fan of globals either, but in this case I want to enforce that only one instance of the state can exist <SEP> does it affect how the lib behaves? <SEP> For the lib itself, no. That brings me to the idea that the declaration should maybe better be done on user-side and passed in <SEP> yep <SEP> Alright, thanks for the chat ;) <SEP> And ofc. the insight <SEP> :thumbsup:",is it possible to have a global variable in a library and initialize it once
Summarization," <SEP> ```ts     Object.assign(         function (_arg0 : any) {},         {             0 : 1         }     ) ```  Here's a number array-like of length 1. I have no reason for posting this. I just wanted to kill people a little on the inside. <SEP> While this is not wrong in any single way, it makes me uncomfortable.  ```ts const x : ArrayLike <SEP> I'm trying to define types for a module that defines functionality like this: ``` const foo = exports.foo = {};  foo.encode = function(...) {   ... }  foo.decode = function(...) {   ... } ```  What's the correct way to express this in a definition file? <SEP> What kills me is using the function as an array-like object. The length of this array-like is the number of parameters the function has. <SEP> in the same way i can do Object.assign( <SEP> I can also do...",how do you define a number array-like like Arachnid>
Summarization," <SEP> @russell-dot-js don't listen to @webstrand, he's being modest.  I'd hire him if I could too. <SEP> @raegen I don't think you're going to be able to use that interface in an `implements` clause, but I may be wrong. <SEP> You can however likely use it in inference. <SEP> So, maybe remove the `implements`, but in a function: ```ts function foo <SEP> Gerrit only comes around fortnightly <SEP> and Bruce hasn't been around in a while <SEP> And there are plenty of other people around here that know more than me. Some of you are lurking :eyes: <SEP> oh yeah, that guy <SEP> but he's a nerd so we make fun of him. And beat him up. <SEP> Daily reminder that TS is a complete mess. <SEP> `tsc` has, itself, a  <SEP> unless you mean something different by CLI? <SEP> (that's not a simple, example, I know; hunting for another one) <SEP> https://github.com/oclif/oclif appears to be a reasonably well written, typescript native, library. <SEP> shouldn't result in an implicit any. <SEP> Can you put an example up on the playground? You should be able to import `jest` there <SEP> So 4.1 is finally released... <SEP> ! <SEP> I wonder who's really behind the dorky jokes. <SEP> this <SEP> I'm surprised at the rumblings of discontent over on  <SEP> I'm guessing the diff is rather big <SEP> which is my point <SEP> the blog doesn't load either <SEP> but, people are dumb <SEP> 45 seconds later, the blog has finally loaded <SEP> some people are dumb because they are planning to use template literals in new APIs <SEP> because it's some unholy stew of javascript <SEP> some people are dumb because they think everyone else can't handle the complexity, so you shouldn't have it <SEP> Yeah. Similar complaint's about C++'s metaprogramming <SEP> You can pick another library other than Boost <SEP> but yeah, those rubbing their hands together because they've been sitting on bad ideas this feature enables.... <SEP> should probably be slapped <SEP> I'm really honestly surprised by how consistently template strings work. I'd expect a myriad of edge cases, and places where inference just silently and unexpectedly fails. <SEP> I haven't really found that to be the case, in practice. <SEP> and it's simple to use, too. <SEP> I see you have been sampling the forbidden fruit <SEP> Without recursive aliases, the experience would be _much_ worse, though. <SEP> No more 10kB files containing just the recursive expansion of some type out to the 20th iteration <SEP> I don't see myself needing either of those day-to-day, but over the last few months I've used 4.1 almost exclusively for playgrounds since recursive types come up so much here. <SEP> I don't think I really *need* the mapped `as` types either, but they could clean some stuff up for me. <SEP> The clearest case I've needed them for is mapping `onFoo` to `Foo`. <SEP> and vice versa <SEP> In the end, I just manually wrote out translation tables <SEP> but no I don't need to do that anymore <SEP> ``` interface HKT {   param: unknown;   result: unknown; }  interface FstHKT extends HKT {   result: this",how to remove implements and use it in a function
Summarization," <SEP> Bit of an odd question here. Not sure how to search it, so asking. Does anyone know of a way to ""bind"" environment variables in typescript at compile time? I need to pass env vars at compile time and have them built into the complied code. I think you can do this in webpack but I don't want to add webpack if I don't need to. Can this be done with typescript alone? <SEP> Not with typescript alone. All `tsc` does during ""compilation"" is check that the types all match and then erase the types. <SEP> You could write a transformer for `tsc`, but you'd have to use a different compiler like `ttypescript` <SEP> Personally, I'd just use `sed` to inject the environment variables in the build script <SEP> Or, you could generate a json file and have typescript `import` the fixed variables from that file. <SEP>  Personally, I'd just use `sed` to inject the environment variables in the build script  How would this work? <SEP> Oh, just run a shell command to search and replace after build? <SEP> yeah <SEP>  Or, you could generate a json file and have typescript `import` the fixed variables from that file.  Hmmm. This maybe a good solution. <SEP> thank you all!","how to ""bind"" environment variables in typescript at compile time?"
Summarization," <SEP> are there any plans for providing a way to extend typescript as a language by adding custom keywords? <SEP> has anyone tried doing something similar? maybe transpiling the custom language back to TS or directly to JS? <SEP> for example, instead of doing `@Input() public foo: string` in angular, we could do `input foo: string`",how to extend typescript as a language by adding custom keywords?
Summarization," <SEP> hey check VSCode out :D <SEP> I tried it^^ <SEP> Yeah I'm using VSCode. It's been great. <SEP> I dropped it after it has eaten many gigabytes of ram <SEP> Since it's all electron <SEP> vs code isn't jumping into the right source files in some cases and i don't wanna debug another thing XD <SEP> @AskYous it's bundler. Bundles your files into one. Well, with plugins, extensions etc. It can compile ts, es6 via loaders. Like ts-loader, babel-loader etc <SEP> Yap, that's exactly the case. But it also can minify, uglify via loaders",vs code isn't jumping into the right source files in some cases
Summarization," <SEP> in `tsconfig.json` can anyone explain why you cannot use the files array and exclude array at the same time? <SEP> I want this to be my tsconfig.json (or at least function the same) but I dont want any typings libraries to get compiled.  They have errors and its causing me issues because gulp-tsc causes my gulp tasks to stop on errors.  ```json {   ""version"": ""0.0.1"",   ""compilerOptions"": {     ""target"": ""es5"",     ""module"": ""commonjs"",     ""removeComments"": true,     ""declaration"": true,     ""outDir"": ""../lib""   },   ""filesGlob"":  <SEP> Im referencing `typings/index.d.ts` in my files array beacuse that enables me to define the necessary types but thats about all I want from it.  I dont want to be responsible for the errors in those libraries.",how to use files array and exclude array in tsconfig.json?
Summarization," <SEP> https://www.google.com/search?q=site:www.typescriptlang.org%20Currying <SEP> gives zero results??? How is this possible <SEP> if it's a central language feature? <SEP> @fatcerberus In @AnyhowStep sorry misunderstood <SEP> Its more a consequence of having first-class functions than a feature per se <SEP> Any language where functions are values can do currying <SEP> Likewise you wont find documentation for how the mathematics of multiplication work on the TS website either :) <SEP> Anyway Ill stop being a :trolleybus: and point you here: https://en.m.wikipedia.org/wiki/Currying <SEP> It doesn't seem like typescript has a currying feature similar to scala where if you have an incomplete arity you will return a curried function I thought that's what  @AnyhowStep  was demonstrating... it appears to be something else  ```ts const add = (num1: number, num2: number): number = <SEP> No automatic currying, no <SEP> You have to do it manually <SEP> Seems like you would have to use arrow functions to achieve something similar? <SEP> ```tsx const add = (num1: number) = <SEP> Auto currying would be basically impossible to implement on top of JS because of how functions work there <SEP> At least, not without type-directed emit <SEP> Yes <SEP> Except in this case the first level doesnt take any parameters - only the type args <SEP> So something like this: ```ts const id = ",why does cphoover give zero results if it's a central?
Summarization," <SEP> the key to understanding this is `T extends KeyedAction`. That may seem like it does nothing useful, but when `T` is a union like `typeof foo | typeof bar`,  the extends allows us to apply the transformation `{  <SEP> Let `T` be `a | b | c | d`. Then `Transform <SEP> @dwelle You're wanting to get the type of a generic function after the type variable has been ""filled""?  I don't believe that's possible. <SEP> @darsain And ","how to get the type of a generic function after the type variable has been ""filled"""
Summarization," <SEP> Hi, I've asked this question on StackOverflow, but no answer yet. Can someone please take a look? https://stackoverflow.com/questions/46534025/typescript-type-definition-nested-namespace-with-interfaces <SEP> @afroozeh i answered <SEP> @aluanhaddad Does enhanced-resolve work with TypeScript?  It seems to just be for plain JS. <SEP> if I pull in a module with that, how does TypeScript get the typings?  and is it designed to pull in a .ts rather than a .js? <SEP> Hey guys, any of you had issues with Jest, where some of the `import` statements dont work / resolve ? <SEP> @NaridaL Thanks! <SEP> you cant call a normal function with new <SEP> or does `new` correspond with `constructor` in a class definition? <SEP> yes, a class <SEP> why does TypeScript refer to a constructor as `constructor` when defining the class, but `new` when defining the type? <SEP> you can define a `new` function in the class and it will not fulful the type `new() = <SEP> I'm pretty sure you can't, it's a reserved keyword",why does TypeScript refer to a constructor as 'constructor' when defining the class?
Summarization," <SEP> I mean, it's possible someone can type the `_` that comes out; not sure that proxy typing is necessary. <SEP> don't think i follow for it to be typeable `_` would have to be a generic variable <SEP> that based on its usage becomes the type of `A` in `Array <SEP> which also isn't possible in typescript, like ideally i could type `_` as something like...    `((this: Array <SEP> Yeah it would need to be generic; probably can't do it without a big union of anticipated key names (since a mapped type over `string` just yields an index signature).  If I could do `{",is it possible to type the '_ ' that comes out?
Summarization," <SEP> Hi have a module declaration that looks like  ``` ///  <SEP> but I cannot figure out how to get the same definitions to work on a browser context,  Ideally I want the this namespaces to appear as globals <SEP> I try to add  ``` export as namespace Ice; export as namespace Glacier2; ``` at the end of the declaration but that doesn't work, Ice, Glacier2 appear empty <SEP> Hi all,  I am working on a translations module where I internally use an interface:  ``` interface Translations {      ",how to get the same namespaces to work on a browser context
Summarization," <SEP> Guys, I'm at it again. I had some unexpected problem with .d.ts files in package that I am not event slightly understand. Like whitchcraft! One second it works - another - not. So I jumped to tsc just to generate .d.ts files. <SEP> So I generated them, but this did not give my package any definitions to import them by another module. Maybe I should tweak something in tsconfig.json? My package, that has .d.ts files in dist and main index.d.ts file as ""types"" in package.json: https://github.com/idchlife/preact-batteries <SEP> Naturally it does not work. Trying to import this project in another typescript project gives me ""cannot find module ""preact-batteries"""" <SEP> compiling everything with command ``` tsc ./src/index.ts --outDir ./dist -w -d ```",.d.ts files in packge does not work with tsc
Summarization," <SEP> good morning every one I have a question to ask <SEP> suppose I have two interfaces serverData and ArticleInterface. How do I make sure that articles in serverData interface is an array of type ArticleInterface ``` export interface serverData{     status: string,     source: string,     sortBy: string,     articles: ArticleInterface <SEP> The way you declared it already gives you the proper type check - what do you mean by ""make sure""? <SEP> I want articles in serverData to be of type ArticleInterface means it should be an array of type ArticleInterface <SEP> is what I wrote correct? <SEP> Yes, it is correct, mate. (Although, I'd remove the 'Interface' part of the name and make it just IArticle, for example) <SEP> Also, use semicolons instead of commas. <SEP> thanks man I am learning typescript and sorry if that question sounds stupid. <SEP> No worries, bud. There are no stupid questions. I'm learning myself. <SEP> Very stupid question, if in node_modules I have a module: ``` declare module ""parse/node"" {     export = Parse; } ``` and I want to import it, shouldn't I use ```import { Parse } from 'parse/node';```? Because I get the error TS2305 module ""parse/node"" has no exported member 'Parse'. If I don't declare the import I can still useParse, and autocomplete still works. I don't know if the code will work after compile tough (as I'm facing a wall of errors) <SEP>  the typings dont affect runtime behavior <SEP> but I'm currently extending ```Parse.Object``` <SEP> export = Parse is equivalent to module.exports = Parse <SEP> you probably want `export Parse` <SEP> which would be module.exports.Parse = Parse <SEP> ok, but if I don't want to change the file in node_modules, how else can I import it correctly? <SEP> import * as Parse from 'parse/node' <SEP> and I should import all of it? <SEP> well if you want `Parse`yes... <SEP> what if I only want Parse.Object the Object <SEP> otherwise you can do import {Object} from '..' <SEP> You mean ```import {Object} from 'parse/node'```? <SEP> yes <SEP> Yep, this is what I want, thanks!",how to type an array of type in 'serverData' and 'articleinter'
Summarization," <SEP> Hi there, I'm trying to learn how to make a typescript library and then export the types and use them in another module. I am not sure how to properly export it though. Are there any good guidelines. I have a setup of something like this https://pastebin.com/fvbyiEed <SEP> @cmdcolin - Using the `export` keyword  It will be reflected in definition files - `.d.ts`  ```ts export class FunnyDuck implements Duck {   quack() {     console.log('quaaaack')   } } ``` <SEP> @SalathielGenese Do I use export declare interface Duck? <SEP> Yes, if your manually writing the definitions <SEP> Not sure what manually writing the definitions means. I am  creating a library that is written in typescript, and then there is an interface that is in there called Duck <SEP> And if I use ""export declare definition Duck"" then the duck module no longer compiles <SEP> do I have to then manually import the Duck definition? <SEP> You add `export` to the interface. When transpiling with `tsc`, definitions will have it <SEP> I'm going away from internet - ttyl ? <SEP> sure thing, thanks for the tips! <SEP> Does anyone know what's up with TypeScript not enforcing the return type of methods defined in interfaces implemented by parents of classes?   ```typescript interface Mx {   aMethod?(): number; }  abstract class Base implements Mx {  }  class Child extends Base {   aMethod() {     return 'hello world';   } } ``` <SEP> or have I just exposed a bug...? <SEP> It's picked up if I add `implement Mx` to `Child` <SEP> implements is polymorphic iirc, but that could be very well meaningless <SEP> Could you expand on that? I studied polymorphism at uni, but it's been a while since I've actually thought about it on a theory level. <SEP> How does polymorphism result in a child being able to change the return type of a method defined in an interface? <SEP> that sounds like straight overriding to me, rather than polymorphism? <SEP> wouldn't it be polymorphism if the interface had the return as `number | string`? b/c then you're ""morphing"" the return to be just `number`? <SEP> yes you might be very well right <SEP> that's just something I read once when looking vs extends vs implements keywords <SEP> also, shouldn't you already have an error on line 6? <SEP> ""interfaces are more of a guideline than a rule"" :P <SEP> Base is not implementing aMethod <SEP> Nope - that code is errorless* (*: as according to TS, at least) <SEP> hehehe - `?`  <SEP> Thats an optional method <SEP> oh right <SEP> I'd look like for issues on gh <SEP> Which maybe could be why it's a bug? I've rarely seen optional methods like this, so it could maybe just be that no ones ever done it? <SEP> seems strange to me that in 9 years nobody noticed that before <SEP> well ya, but you know what mean <SEP> like, with everything else going on, maybe people didn't notice it - it does happen <SEP> btw, shout out to this guy: https://github.com/typescript/TypeScript <SEP> ya see <SEP> ```typescript interface Mx {   aMethod?(): number; }  abstract class Base implements Mx {   public aMethod() {     return 'hello world';   } } ``` <SEP> that errors. It seems to only be a child of a class that implements an interface with an optional method (as otherwise the parent has to implement the method anyway, at which point TS will say the child conflicts with the parent) <SEP> yes I see the problem <SEP> I don't know whether it is a bug or not tho, or a case of overloading <SEP> I'd look for issues on gh and open a new one in case <SEP> ya <SEP> haha ya exactly - heres hoping ay ",how to properly export a library in typescript?
Summarization," <SEP> I think they'd just find another way to force analytics on users <SEP> Probably, but it would be difficult. uBlock even blocks cname aliasing, so sites that wanted GA would have to proxy the requests back to google <SEP> at that point it's almost easier to just run your own analytics. Not to mention all the shared hosting sites that can't readily reverse-proxy requests <SEP> Or they might just skip the delivery problem and embed analytics into chrome <SEP> I think they already do the last one if you're using Chrome <SEP> awesome",find another way to force analytics on users
Summarization," <SEP> weird <SEP> yeah, seems not right <SEP> I suppose it might be. I really wish that destructuring used normal `{  <SEP> I know typescript seems to give up more often when using aliases <SEP> That's super weird... <SEP> FTFY :trolleybus: <SEP> adding an additional property makes that cast invalid, yet it removes the error? <SEP> :stuck_out_tongue: <SEP> @HarrisonB_gitlab  honestly, at this point, I'd just force the cast `as unknown as R` and carry on with life. <SEP> The potentially unsafe cast is inside the body of a function, safely hidden away. <SEP> Just write a unit test to make sure that invariant holds. <SEP> pretty sure the original playground didn't even need that <SEP> yeah <SEP> or use the other one <SEP> I suspect my version will be nicer to use, in the long run? But I have no proof of that, that's just my intuition, <SEP> I agree <SEP> typescript doesn't do well with subtractive types <SEP> Ah, wait. I see the issue. The issue is that `R` _could_ have an `.id` prop <SEP> and then the cast to `R` would be invalid <SEP> @HarrisonB_gitlab If you want a glimpse of the slippery slope of what you're attempting, talk to @AnyhowStep <SEP> (since `R` would no longer have an `id` prop, as required) <SEP> yeah I was trying to remember the counterexample, should have caught that <SEP> so my version is wrong, and shouldn't be used <SEP> I really didn't feel like it was a ts giving up issue, more like a ""user can give bad type args  and break it"" issue. <SEP> fixed <SEP> kinda <SEP> and now typescript is no longer complaining <SEP> In my family, two car have now died within the last 14 days... <SEP> Coming home for thanksgiving is turning into an adventure <SEP> Oh, so maybe fixable?",use 'normal' for destructuring instead of 'trolleybus'
Summarization," <SEP> If you put it in a d.ts file it won't get emitted. <SEP> Looks like it works by importing the file into my helper package's index, then I can simply import 'helper-pkg' anywhere. <SEP> @keithlayne Yes. I meant the declare part. Looks like I don't need to use the d.ts though! <SEP> I was talking about the declare part - d.ts files don't get copied into your output.  Sorry, I meant the emitted declarations. <SEP> Ah ok. That makes sense. For these projects I'm not emitting, but I imagine that means ts-node would also ignore. <SEP> yeah my understanding is that those only effect the local project's build, if that makes sense. <SEP> Absolutely does. Thanks!",it won't get emitted if you put it in a d.ts file
Summarization, <SEP> I don't get why this is valid: `type A = string & number` <SEP> or this: `type A = true & false` <SEP> nothing should be able to match those types,why is 'type A = string & number' valid?
Summarization," <SEP> what's the best way to create a def from a js library? <SEP> @foxjazz with a code editor <SEP> j/k, but your question is a bit generic. <SEP> best with regards to what? <SEP> I have a third party library certain it doesn't have a typedef. <SEP> so how can I use it?  Just call the functions? <SEP> if you don't care about the types then yeah you can just use it <SEP> if you want types or intellisense you just have to create ambient declarations which is just like declaring the functions and types with no body <SEP> ``` First, create a typings.d.ts file in your src/ folder. This file will be automatically included as global type definition.  Then, in src/typings.d.ts, add the following code:  declare module 'typeless-package'; Finally, in the component or file that uses the library, add the following code: import * as typelessPackage from 'typeless-package'; typelessPackage.method(); ``` <SEP> I am trying to follow these instructions <SEP> but I don't understand how to link the .js file with the package",how to create a typedef from a js library
Summarization," <SEP> I'm having trouble importing a js file in a folder that's shared betwen my `client` and `server` directories <SEP> ive set a base url and paths option in my `tsconfig.json` in my server directory (which lives in `lib/server`) <SEP> ``` {   ""compilerOptions"": {     ""target"": ""es6"",     ""module"": ""commonjs"",     ""noImplicitAny"": false,     ""moduleResolution"": ""node"",     ""experimentalDecorators"": true,     ""emitDecoratorMetadata"": true,     ""removeComments"": true,     ""sourceMap"": true,     ""outDir"": ""../../dist"",     ""baseUrl"": ""../../"",     ""paths"": {       ""shared/*"":  <SEP> in the server file where i'm importing it, i'm doing it as this <SEP> `const requestStateValidator = require('shared/requests/stateValidator'); ` <SEP> (it's a js file, remember) <SEP> i guess the baseUrl and paths option don't apply to `js` files? <SEP> baseUrl and paths are only for module resolution <SEP> yeah i figured <SEP> the problem is i have a js file that lives in the `shared` folder <SEP> so when i reference it without the base Url option <SEP> i have to do `const theThing = require('lib/shared/theThing')` <SEP> (i run my app with `NODE_PATH=./`) <SEP> but then i get an error when i run my app `Cannot find module 'lib/shared/theThing'` <SEP> nvm i figured it out <SEP> i'm an idiot",how do i import a js file in a folder that's shared betwen my 'client' and 'server' directories?
Summarization," <SEP> @hinell The problem I have with `and leave it with no braces` is that when I use a property of the module, there's still an error that the property does not exist on the module. So I still would have to define the property explicitely on the definition? <SEP> ```ts declare module 'pkg-dir' {} import * as dir from 'pkg-dir'; dir.sync(process.cwd()); ``` gives: ```ts Error:(30, 13) TS2339:Property 'sync' does not exist on type 'typeof 'pkg-dir''. ``` <SEP> Also the error message seems a bit weird on the end.",The problem I have with 'and leave it with no braces' is that when I use a property of the module
Summarization," <SEP> https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html <SEP> https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/ <SEP> Yeah, I'm aware of those nuances, but if I would rename it to `export function genex` I still wouldn't be able to do `const genex = require('genex'):`? <SEP> Sorry if I'm asking too many questions, it just feels like with the success of TS a lot or projects would be switching to it, while providing backwards support to old syntax - maybe it's not the case and I'm just mistaken. <SEP> Im not near a computer so I cant test how `export=` interacts with ESM output right this moment <SEP> TS does support the legacy formats - its just you want to interop seamlessly with both with the same exact code and due to the semantic differences thats not really possible <SEP> Impedance mismatch, like I said before <SEP> `require().default` is the necessary compromise for that <SEP> Sorry, I know thats not what you want to hear :frowning: <SEP> Thanks tho, at least I'm now sure TS alone won't be the solution <SEP> I'm following https://hackernoon.com/building-and-publishing-a-module-with-typescript-and-rollup-js-faa778c85396 now, seems straightforward enough",export function genex should be renamed 
Summarization," <SEP> Hi there! <SEP> Is there a way to wait a Array.map to complete in order to do anything after that? Something like Array.map(xxx).then(do_next); <SEP> Array.map is synchronous... <SEP> Even if the function passed to it has async elements? <SEP> give us a code sample <SEP> yeah but that's not map's fault <SEP> use async/await? <SEP> contacts.map(contact = <SEP> deleteContact make some async calls inside <SEP> yes so then that's what you need to track <SEP> either add a callback function to `deleteContact()`, to be called <SEP> either use promises, or async/await <SEP> Mm... I understand. <SEP> does deleteContact return a promise? <SEP> no, it doesn't <SEP> but If I made it to do it, that could be the solution <SEP> as @wanderer06 says <SEP> thanks! <SEP> I'll do that <SEP> oh... <SEP> but... <SEP> Even if I do that, it would return x number of promises, one for each contact in the array <SEP> So... how could I know all of them are finished? <SEP> you can wait for all promises to return <SEP> How? <SEP>  <SEP> one moment <SEP> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all <SEP> it's `all()` <SEP> Great! That's just what I was looking for! <SEP> Thanks! <SEP> unless deleteContact returns a promise it probably won't work <SEP> @Ravencrow no probl :) <SEP> `Promise.all` operates on a list of promises <SEP> @simplysh yeah he'll probably have to rework some of the code <SEP> depending on your target you could use the async syntax too ``` contacts.map(async function(contact) {  return await contactService.deleteContact(contact);  }); ``` <SEP> there's also a `Promise.map` in bluebird, but it's an extra library and non-standard http://bluebirdjs.com/docs/api/promise.map.html <SEP> @simplysh neat, that's doing what I was going to suggest <SEP> I worked reworking a bit the code <SEP> but promise.all did the trick <SEP> thanks! <SEP> error TS2307: Cannot find module 'country-list' <SEP> error TS2339: Property 'unsubscribe' does not exist on type 'ListComponent' <SEP> And the likes. <SEP> I have checked Definitely Typed and it doesn't have definitions files for country-list and redux-localstorage <SEP> What can I do in these cases?",is there a way to wait a Array.map to complete?
Summarization," <SEP> `import chalk from ""chalk;` also ends in an error <SEP> So I just want to you to get over the import error... <SEP> i think that comes from the transpiler in es5 maybe <SEP> console.log(chalk_1.default.white.bgGreen.bold("" works without problems "")); <SEP> the js looks like this: `var chalk_1 = require(""chalk""); console.log(chalk_1.default.white.bgGreen.bold("" works without problems ""));` <SEP> it's working... <SEP> but with require its working and white is also in the documentation <SEP> import chalk = require(""chalk"");",import chalk from 'chalk' but it also ends in an error
Summarization," <SEP> Hi, guys! Could you help me understand what the best way in TS to check that object is empty? <SEP> It's marked as experimental: https://github.com/eslint/typescript-eslint-parser <SEP> @simonknittel yeah I read the description. Even if it has some concept of times you're going to be missing out on https://palantir.github.io/tslint/rules/no-unnecessary-type-assertion/ and others <SEP> @BorodenkoAlexey_twitter `Object.getOwnPropertyNames(o).length == 0` <SEP> I looking to more elegant way like Object.isEmpty(o) <SEP> TS doesn't add any methods over JS <SEP> https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object <SEP> so what the best way to achieve such behaviour? define method in object prototype? <SEP> yes <SEP> ok...but basically using lodash, underscore in TS is a good practice? <SEP> @NaridaL thank's! <SEP> yeah if you need them... they have typings and everything",what is the best way to check that object is empty in TS?
Summarization," <SEP> hi, guys. how can i make it so i have something like this: <SEP> ``` export type TableColumn <SEP> how can I have that and not require the user to specify V, but rather have it inferred by the return type of `value` <SEP> ? <SEP> the idea is that whatever the `value` function returns is what will be given as argument to `format` <SEP> but i will have many of these objects where each's `value` will return a different type of thing <SEP> its already working my friend. <SEP> heres the type-proof <SEP> ``` export interface TableColumn <SEP> i want to be able to do something like `const column: TableColumn <SEP> sub <SEP> awesome <SEP> sure, thanks! <SEP> that's ok <SEP> thanks anyways <SEP> I know this isn't the place to ask, but I thought it might be worth it <SEP> I'm trying to merge object A with object B in a non-additive sense. So if object B has properties x, y, z and object A only has properties x, output object will only have object B's x. <SEP> I would want this to be recursive as well <SEP> ah never mind, Im using the traverse library to do it",how can I have that and not require the user to specify V?
Summarization, <SEP> so would it have given me an error if I used import before using types/node? <SEP> no it would not have <SEP> so you don't need @types/node to use the import <SEP> for everything else <SEP> ahaaa <SEP> you want intellisense and type-checking on all the node calls you do,would it have given an error if i used import before using types/node?
Summarization," <SEP> hey, i am trying to create a base class for a react component, with generic Props and State type parameters that extend a base type. it works fine for props, but for state I get an error when trying to assign to state. <SEP> a simple example is:  ``` interface BaseProps {     whatever?: boolean }  interface BaseState {     whatever?: boolean }  export class BaseForm <SEP> i would get `Type '{ whatever: boolean }' is not assignable to type 'State'` on the line `this.state = { whatever: true }` <SEP> any ideas? <SEP> `this.state.whatever = true`? just guessing <SEP> @felixfbecker Isn't it already there? <SEP> woops misread <SEP> well there is no state property defined <SEP> I don't know about React",get an error when trying trying to create a base class for a react component
Summarization," <SEP> I'm not sure there's a way around that because of structural typing <SEP> TS infers the return type and then checks whether it's compatible, so it's too late to do the excess prop check <SEP> It's certainly an argument in favor of exact types",is there a way to infer the return type and then check if it's compatible?
Summarization," <SEP> hello guys <SEP> I get a message from webstorm <SEP> Anybody know if it's possible to update an older version of DefTyped typings? In my case `react-bootstrap` has been bundled in 1.0, but 0.x has types on DT. Removing DT types seems to be the practice: https://github.com/DefinitelyTyped/DefinitelyTyped#removing-a-package -- but doesn't that mean older versions cannot be updated? <SEP> Reference to a UMD global <SEP> should I ignore it? <SEP> the code is the following <SEP> ``` public addCity(userId: string, weather: any): Promise <SEP> the warning is under the firebase word <SEP> Probably harmless if that's just a type reference. Try importing `firebase` into that file, though <SEP> I added the following import <SEP> ``` import * as firebase from 'firebase';  ``` <SEP> is it wrong? <SEP> because I've read somewhere that we should import only what we need <SEP> and not everything",is there a way to update a bundled version of DefTyped?
Summarization, <SEP> do you have source maps enabled? <SEP> click on the three dots on top right of dev tools <SEP> and go to settings,are there any source maps enabled in dtabuenc?
Summarization," <SEP> any great standalone typescript http clients out there? <SEP> @notsonotso Any JS library with suitable type definitions should do <SEP> If one doesn't have them, you can write some simple definitions, probably there's not more than a few types to deal with. <SEP> yes",any great standalone typescript http clients out there?
Summarization," <SEP> Does anyone know a good way of getting a tuple length for type declarations?  My best idea so far is, ``` type TupleLength <SEP> But I was wondering if there was a better way <SEP> what does it have to do @AnyhowStep? <SEP> I have an entire Tuple library <SEP> that I use",is there a good way to get a tuple length for type declarations？
Summarization," <SEP> Terminology cop here. All `.d.ts` are ambient declaration by definition. May be you means they are script file? <SEP> is it possible  to get a list of property keys from an interface? <SEP> @ChrisDevinePimss Not really, I always thought it'd be nice if typescript would provide some language construct that would emit an array: ``` const fooKeys: Array <SEP> that would be perfect @dtabuenc <SEP>   All .d.ts are ambient declaration by definition  All `.d.ts` files contain only ambient declaration by design. <SEP> @unional what I meant (and what others probably mean when they abuse the nomenclature too) was that the structure of the declaration is such that in the actual .ts source files do not need to import it to access the types because the libraries types are ambiently available. <SEP> like Buffer is available when writing node code with the node types <SEP> @unional is there an appropriate term to distinguish between libraries declared like that, and ones which have to be imported to access the types? <SEP> @Sammons  script vs module <SEP> @dtabuenc so node would be considered a script? <SEP> a script is  something without imports or exports <SEP> i.e not a module <SEP> you can have ambient global declarations but you can also have ambient declarations within modules <SEP> ambient just means ""no implementation"" <SEP> note, you can convert a script to a module by just including an `export {};` <SEP> it does not mean global <SEP> (if the situation necessitates as it sometimes does) <SEP> When I work on `typings`, I have a long debate of using the team `global` or `script` to describe the ",is it possible to get a list of property keys from an interface?
Summarization," <SEP> @simplysh hmmm that syntax looks a little funny to me, like the first two declarations are superfluous because the last function signature encompasses the top two, plus there is only one which has an implementation `{...}` <SEP> @tpennetta yeah @simplysh  is correct <SEP> in ts you have the implementation as the widest typed, so it has to catch all <SEP> ahhh... and there is my confusion <SEP> so in my implementation I should be type checking? <SEP> @tpennetta overloads should only be used if your return types are specifically different for different argument types <SEP> ah ok another difference than I was thinking <SEP> @tpennetta  here is more info from the handbook",why the first two declarations are superfluous because the last function signature covers the top two
Summarization," <SEP> how can I express this ? <SEP> ```ts export function isReal(o: any): o is '!string | !null | !undefined | !NaN' | any ``` <SEP> Is there a way to create a class type lookup, so that if parameter is `'abc'`, I could look up that `'abc'` is associated with a `class ABC` and so my code would make a new instance of `new ABC()`? <SEP> ``` const className = ""ABC"" const clazz = eval(className) ``` is one option... <SEP> without eval: ``` const lookup = {""ABC"": ABC, ""Foo"": Foo} const clazz = lookup <SEP> equivalent to `lookup = {ABC, Foo}` btw <SEP> OK, but the class names are not related to the lookup keys (that's why I used different case for the 'abc' and 'class ABC'. <SEP> I tried the second option, but couldn't figure out how to describe the lookup object to typescript. <SEP> If I do ``` const lookup: {  <SEP> are the keys static when you're looking them up? <SEP> yes <SEP> I basically have this: <SEP> ``` class myClass {     attributes: Array <SEP> I can do with a `switch` <SEP> But that's harder to maintain if I wanted to add/remove/change the lookup later <SEP> OK but im not seeing the conflict with the lookup type above <SEP> `BaseClass` is an abstract class. <SEP> And? <SEP> And with the definition I gave above, it complains that abstract classes cannot be instantiated. So when I try to do `const abc = new lookup <SEP> Because I lose the whole point of the lookup, since `typeof lookup <SEP> Lead with the error next time lol <SEP> Sorry <SEP> Instead of basclass do <SEP> I thought trying to explain use case was important <SEP> {new ():BaseClass} <SEP> It can't be abc because you don't know what class it will be <SEP> So what would my `lookup` look like? ``` const lookup: {  <SEP> Yes like that <SEP> -type of",is there a way to create a lookup for a class name?
Summarization," <SEP> Hi, I'm using generics but it looks like types are not checked by the compiler. <SEP> ``` class SomeClass {     public createCommand <SEP> Nevermind, it's because AbstractContent has no properties so it looks like it accepts anything",types are not checked by the compiler when using generics
Summarization," <SEP> One more question if anyone has time: I have a utility to convert an object type that has functions to an object with same keys but `ReturnType` of that functions, now I want to use that type recursively inside that object as second parameter, is there any way to do that?  Example: ```ts type ObjectReturn <SEP> @fatcerberus  since 3.3 https://github.com/Microsoft/TypeScript/pull/29011 <SEP> Ah, good to know <SEP> over here `fn2` and `getters` have: `'fn2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.` <SEP> if that's impossible I will just use `{fn1: ReturnType <SEP> Yeah, the type inference tends to get tripped up if there's a circular dependency <SEP> don't think that is posible since for `getter` to be resolved `f2` is required.. <SEP> Recursion is fine - infinite recursion is not :wink: <SEP> :( but it's not really infinite, `fn2`'s return type doesn't depend on `fn2`, and even if I add return type to `fn2` it won't work... meh... manually typing getters is fine <SEP> `fn2` overall signature depends on the type of `getters` which depends on the type of `fn2` which... etc. <SEP> yeah... <SEP> You can usually resolve the quoted error by strategically adding a type annotation but since this is a genuine circular dependency I don't think you can come up with a proper type <SEP> I'd be glad to be proven wrong though :smile: <SEP> I don't think it's posible either, I would stay away from recursive types (other then the simple 'sanctioned' forms) they are not great for compiler perf and carry a waning of may break in the future",is there a way to use a type recursively inside an object?
Summarization," <SEP> Hi! Is there anyone that could give me a tip on creating commonjs nodejs modules with ts? <SEP> @mbrand have a look through https://www.typescriptlang.org/docs/handbook/modules.html <SEP> Well, I actually did. But I still can't find a good way to build a typescript module that can be consumed via npm. <SEP> you will need to build ts to js before publishing for it to work best, and `export ...` ofcourse <SEP> Yea, that's what i do. But I end up with something like this  ``` import {Module} from '@dev/module-name/lib/src/module'; import {ModuleController} from '@dev/module-name/lib/src/models/module.controller'; ``` <SEP> And that somehow doesn't feel right <SEP> did you specify ""main"" in your package.json? <SEP> also you might want to specify ""typings"" prop that will point to typings generated from the previous build <SEP> Yes, but i'd need to have some kind of ""index-file"" that exports all my types, that are used in my typescript-module? <SEP> well, yes, thats how modules work <SEP> you can also import ""yourModule/whatever"" <SEP> if you dont want to have an index with everything <SEP> But then I'd need a way to stop ts generating a d.ts file for every ts file i have, when building. <SEP> you can import each file individually if you want <SEP> with ""yourmodule/file"" <SEP> so for example ""yourmodule/models/module.controller"" <SEP> I can't use the typings property in the package.json if i'd use multiple type definitions?",how to create common nodejs modules with ts?
Summarization," <SEP> Is this the best way to store this data in json <SEP> ``` <SEP> ```  <SEP> is this trolling the TS channel? <SEP> no sorry dont mean to offend <SEP> its serious <SEP> im learning <SEP> without context there I can't say much about that format. it looks like legitimate json, but whether it's the best way to store it likely depends on your use case in both generating and consuming it. <SEP> so far this is definitely not a typescript related question <SEP> well im going to be filtering over this date and returning  two new objects <SEP> dont know how I would use filter on a nested array? <SEP> look to libraries such as `lodash` or  `ramda` or similar to make that easy. <SEP> im not sure if I can use that in angular? <SEP> or for pure TS implementation you can try `sequency` or similar <SEP> if you can't use libaries like these in angular, you shouldn't be using angular.",is this the best way to store this data in json?
Summarization," <SEP> oh my, folks are active in here at the moment.  i should probably avail myself of some help getting pointers troubleshooting the typescript engine in VScode :D <SEP> I don't know much about the compiler internals or vscode, you're probably better off asking over in the discord <SEP> i'm currently trying to do some troubleshooting to figure out why this bug is occurring - https://github.com/p5-types/p5.ts/issues/17 <SEP> ah, that's a different kind of issue <SEP> Are the p5 types supposed to be global? i.e. not attached to any `import ... from ""p5""`? <SEP> yeah, it's ""global"" in the sense of include the library in a  <SEP> to be clear, my happy place is with gcc so i'm learning javascript and typescript as i go.  tragically most of the docs are either: so you're an expert and understand software toolchains comprehensively or ""so you're getting started with javascript: copy/paste these 30 steps"" and i'm smack dab in the middle <SEP> so like me, anytime I end up fiddling with the build chain of a C++ project :grinning:, no worries <SEP> the fact that within the typescript ""types"" there is a _file_ called `global.d.ts` is throwing me off.  it cognitively implies a unix `.d` type syntax... but then does it's own thing <SEP> So is p5-ts actually written in typescript? I'm not sure why you're putting the types onto definitely typed? <SEP> and i would have _assumed_ that there was a location for global type definitions <SEP> it _is_, typescript imports everything in `node_modules/@types` automatically <SEP> so within VSCode, my understanding is that there are two models for intellisense: use a language server or provide typescript definitions.  if you're writing javascript, that collapses to the option of ""provide typescript definitions"" <SEP> so the types are being found by the compiler, at compile time, correctly? it's only vscode that has an issue? <SEP> i _think_ so <SEP> i even find vscode loading the definitions in the typescript server log <SEP> but as i'm not familiar with any of it, it becomes a black box,  one moment. i'll pastebin a log file <SEP> https://pastebin.com/1B7QALmD <SEP> you can see around line 119 that the definitions are loaded <SEP> funny enough it's also ignoring all of the telemetry settings and still spawning the server with telemetry enabled <SEP> (which i think is a recent regression) <SEP> So, there should be a global function `alpha` and this code should be valid? ``` alpha(""whatever"") ``` in terms of type-checking? <SEP> @webstrand 100%.  (it took me a second, because i was thinking ""alpha"".... did i do that?... then i saw https://p5js.org/reference/#/p5/alpha). <SEP> @webstrand With the validation code, what does `P` in `Validate1` stand for?  It looks to be populated from `U extends ``${infer W}${V}`` ? W : never` <SEP> @jgeurts `P` stands for ""Previously validated string"", it contains all of the string that has passed through the validator so far <SEP> it exists _soley_ for making a nice error message when the validator fails to match <SEP> ok, thank you! <SEP> @webstrand ..... definitely seeing some goofy things here.  mining through that log more i found the error ""Cannot find module 'p5.js' or its corresponding type declarations."" (https://pastebin.com/KrM9GhZb).   Going into `node_modules/@types` and creating a symbolic link from p5 - <SEP> @brianredbeard Do you know if these types work at all? <SEP> I'm not seeing any links to `global.d.ts`, so I don't think its being loaded at all <SEP> ``` ///  <SEP> i _assume_ the types work as folks within both the issue cited above and another are stating that if they either add a bunch of `jsconfig.json` or `tsconfig.json` config changes _or_ use some magic comments then the type definitions get used <SEP> try adding `///  <SEP> as far as I know, if the `.d.ts` isn't referenced by `@types/foo/index.d.ts`, it doesn't get loaded automatically <SEP> @webstrand looks like that did the trick <SEP> I think that's what you were missing. The types _were_ being loaded, but without any `declare global`, nothing was ever put into the global namespace <SEP> wunderbar.  so that i can hit myself with the clue bat a few times, is the correct ""name"" for a statement like this ( `///  <SEP> they're generally called triple-slash directives:  <SEP> (i'm not the original developer, so i need to do more research so i can explain the problem a bit more and am in the middle of a ""dunning kruger"" trough) <SEP> perfect.  i'll go read a bunch about those and dig in a bit further. <SEP> yeah, I'm not 100% confident I've found the right fix. I do basically no work with non-modular typescript libraries. <SEP> i saw some of the work on Ciao, etc.  super fascinating (on an academic level). :) <SEP> great.  i'll check that out too. <SEP> @webstrand thanks IMMENSELY for the help.  i'd sunk a good 15 hours into this and was at the end of my rope. <SEP> What do you mean by Ciao? All I know of is the prolog implementation? <SEP> that's the one.  since everything here is linked to github, i thought ""i wonder what this other individual spends their time on"" <SEP> (whereas if you look at my repos it's a mish mash of c code, hardware, repos where i'm submitting documentation fixes, etc)",how to troubleshoot the typescript engine in vscode?
Summarization," <SEP> why tsc doen't return -1 when fail in BASH ? <SEP> Is there a way to influence the order in which Typescript consumes types defined in node_modules, I think I'm dealing with an ordering issue where `react-redux` defines a `Dispatch <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react-redux/index.d.ts#L29 for `react-redux`, https://github.com/gaearon/redux-thunk/blob/master/index.d.ts#L7 for `redux-thunk`",why does tsc doen't return '-1' when fail in BASH?
Summarization," <SEP> hi guys, I encountered a problem with TypeScript + SystemJS. Can you answer my question? https://stackoverflow.com/questions/51247558/how-to-get-systemjs-for-vue-2-working <SEP> Hey folks, if I have something like `interface MyInteface <SEP> @NaridaL I don't think it depends on function parameters (or at least not in my case): `let a: MyClass",problem about typescript + system js
Summarization," <SEP> `deathworld` I'm a novice at programming . Any suggestions or tips on what language I should start learning? <SEP> Maybe Python or Go? Javascript is a hairy language that causes madness <SEP> @gvsakhil I was talking about Fabio above me who needed help <SEP> ok @fatcerberus <SEP> `const obj = { foo: 123: bar: 'asd' }; class Foo <SEP> `const foo = new Foo <SEP> `deathworld` I know the basics of programming in general like loops, if then statements and other stuff, need some sort of project but I'm really knowledgeable in any languages. I tried learning C ++ and lost all hope. <SEP> `class Foo <SEP> @fabiospampinato This is the best solution I've found: ``` class FooImpl <SEP> @matrixbot Another choice in that vein is C#, it has a good type system too, and isn't at all like C++ <SEP> `deathworld` Ok I'll take a look at C# <SEP> I had a thought about how to do some simple subtractive types: ``` interface Tagged {     uuid: string } const enum CannotAssignToInvertedProperty { _ = """" } type Inverse <SEP> I'm not really sure why `'{ foo: string; }' has no properties in common with type 'Inverse <SEP> Ah! I fixed it! `type Inverse <SEP> ""Side effects"" is probably the wrong term, yeah--just that the *individual* computations you're chaining together work in such a way that you no longer have access to the way the world (for a certain value of ""world"") was before each is done, yet the overall composition is pure",what language should i start learning if i am a novice at programming? 
Summarization," <SEP> Hey all--I feel like I must be missing something very simple about using types from definitelyTyped. Here is my issue: I'm working on an Angular 7 app, and I'm working with a few libraries that are imported via script tags from other sources. Stripe, googletags, and the like. I've installed their types with npm (well, yarn), but the compiler doesn't find them. <SEP> if I add `declare let Stripe: any`, I can compile, but of course I then lose type safety. <SEP> and if I leave that out, VScode understands the types, but the compiler can't find them. Any way to hint to the compiler, beyond having installed from `@types/foo`? <SEP> There is no `import`, since the js is loaded separately via script tag, but I imagine if I could fool ts into thinking it was imported, this would all somehow work properly.","I've installed libraries with npm,but the compiler doesn't find them"
Summarization," <SEP> @qm3ster still up....need to hold till noon <SEP> Ah, ok <SEP> Is there any way at all to check if a type is `never`? <SEP> It seems like it just flattens any generic types its used with <SEP> I'm wanting to have a default type for when a type mapping is used - `Default <SEP> Cant say I understand it, but it turns out this works - `type Default <SEP> Can we compile just one directory using tsc? <SEP> instead of compiling the complete project?",is there any way to check if a type is 'never' ?
Summarization," <SEP> Hi guys. I'm looking for a pair to write something in TypeScipt and ElectronJS <SEP> Who's interested? <SEP> Hi. When calling a rest function, i have to specify the type that is returned which could for example be a dictionary with 3 entries (2 strings and 1 number). That works great if the endpoint always has the same return type - but what if the endpoint changes number of output parameters, names and types sometimes? What should then be specified in typescript? (There is however one entry in the dictionary which is always there, and that shows what the endpoint returns.)",is there a way to specify the type of a rest function in TypeScipt and ElectronJS?
Summarization," <SEP> How do I import types from System.Collections.Enumerator ??? <SEP> I think this room is leaking. <SEP> Can anyone tell me how to reference the built-in Typescript namespaces? <SEP> everything in the typescript std is already imported for you pretty sure that rule holds 100% true <SEP> in the same way you can just use Array <SEP> because everything in the typescript std is just types representing a counterpart in the ES spec, with a few exceptions (enums etc) <SEP> They why isn't ArrayEnumerator <SEP> They/Then <SEP> And trying to navigate like System.Collections.Enumerator.ArrayEnumerator <SEP> I'm using VSCode <SEP> never seen those types in my life you know this is the Typescript gitter and not the C# gitter right? <SEP> https://github.com/Microsoft/TypeScript/search?q=ArrayEnumerator&unscoped_q=ArrayEnumerator <SEP> zero found <SEP> That's what I get for being in a hurry.  There's a library called Typescript.NET.  Didn't notice the .NET part in the repository name.  ::facepalm:: <SEP> No problem haha <SEP> ```  type People = {id: string, name: ""ricky""} |             {id: string, name: ""bill"", parent: true} |             {id: string, name: ""dave"", parent: true}; ``` filter People by People that have ""parent""",how do i import types from System.Collections.Enumerator?
Summarization," <SEP> im having some trouble requiring in a commonjs export in a typescript file <SEP> if not, check it out some time <SEP> i might just be really tired and brainfarting over here <SEP> @varunjayaraman paste <SEP> but i exported it from a typescript file as `module.exports` <SEP> but it's a lot of fun to use <SEP> @stevekane this is the export (simplified) ``` module.exports = function(di : any) {    const api = express.Router();    return api; } ``` <SEP> are you using commonjs export for reason? <SEP> oh it's just that the entier codebase was commonjs <SEP> only recently started migrating it to ts and i want to do it piecemeal <SEP> ah <SEP> what is the issue?",trouble: requiring in a commonjs export in a typescript file
Summarization," <SEP> I think webstorm uses far more - I get the feeling it also leverages all the goodness they've built up for plain JS intellisense <SEP> I have often a problem with ts and vs 2015 (latest ts version too): looks like that sometimes even I update a few ts files, the ts compilation process is not started, and when I run the application I don't see the modifications applied. I don't know if this happens after errors: just a few minutes ago I changed a file, ran it using F5, the app started without any change, I stopped, pressed the rebuild command and this time ts compilation started, showing a ts error in the change I've done. Is there some way to solve this problem? <SEP> and without using reference path",ts compilation doesn't start when a ts file is updated
Summarization," <SEP> wondering if I can get some help debugging tsserver. I have a debug build of vscode running and another instance with a local build of typescript open and attempting to debug. I can get 'Debugger attached' but my breakpoints are still saying ""Breakpoint set but not yet bound"" <SEP> Why is this allowed:  ```ts interface Eq <SEP> It should be a type error, not a thrown <SEP> The signature of the `equals` implementation is incompatible with the interface signature <SEP> now you will get an error <SEP> for some reason in your version typescript interfers o as any, probably because your syntax is inccorect (not sure why it is permitted) <SEP> No, I want to get another `Eq",unable to get 'Debugger attached' to debug tsserver
Summarization," <SEP> Hey! I'd like to create a type which removes the parameters from a constructor, for mocking purposes. So that:  ```typescript class UserService {   constructor(private readonly userRepository: UserRepository) {}    register() {     // ...   } }  // Then, when using a function to convert to Mock <SEP> (^ example code) <SEP> Does anybody know how I could go about writing the `Mock` type?",how to write a Mock type which removes parameters from a construct
Summarization," <SEP> hello, I seem to be confused about how to export fields of child classes across files, I have something kind of like this http://paste.awesom.eu/1Azw&ln and a complaint about `a.field`, even if I force `( <SEP> @Ptival your example looks good to me <SEP> @felixfbecker there must be something more complex happening, I'll try to actually produce a reproductible <SEP> @texel What you are doing is basically dynamically adding properties to the class, and that is done best in Javascript assignment style or `Object.defineProperty()`. You should be aware that you are not creating methods there, but properties. Properties are enumerable, while methods are not. So you should really be using `Object.defineProperty()` on the prototype or in the constructor <SEP> And yes, what you are doing looks a bit insane :D",how to export fields of child classes across files?
Summarization," <SEP> In C++ you can have a template function on `T` where you use `t.foo` and it will work as long as `T` has a member `foo`. <SEP> I.E  these are some critical times you want it.... ``` type PasswordHash = string & {nominal: never}; interface IUser {      name: string;      password: PasswordHash; }  const hashPassword = (str: string): PasswordHash = <SEP> Structural typing of methods = what types are the params and return type <SEP> therefore no-one can accidentally save users with plain text passwords <SEP> oh interesting <SEP> User.password can still be used as a string, and functions that accept string will still accept user.password <SEP> however a string cannot be assigned to User.password",how to use t.foo in a template function?
Summarization," <SEP> okay, there's enough delay from element- <SEP> how bad is it? <SEP> and is it bidirectional delay? <SEP> seems like gitter- <SEP> Lemme try to test <SEP> test <SEP> that seemed like ~8s <SEP> damn <SEP> gitter might be polling? I dunno, it's not that bad, seems variable. <SEP> my connection has high latency, but I don't think it should be that noticeable.  Like I think the high latency is reflected in the gitter- <SEP> ``` PING google.com (172.217.9.206): 56 data bytes 64 bytes from 172.217.9.206: icmp_seq=0 ttl=116 time=594.273 ms 64 bytes from 172.217.9.206: icmp_seq=1 ttl=116 time=696.402 ms Request timeout for icmp_seq 2 64 bytes from 172.217.9.206: icmp_seq=2 ttl=116 time=1638.207 ms 64 bytes from 172.217.9.206: icmp_seq=3 ttl=116 time=688.427 ms 64 bytes from 172.217.9.206: icmp_seq=4 ttl=116 time=584.884 ms 64 bytes from 172.217.9.206: icmp_seq=5 ttl=116 time=677.871 ms ``` this is my life <SEP> See, this is what I miss when I come to Gitter from Slack, I can't react with  <SEP> looks like good old ADSL <SEP> that or the dude is on a boat <SEP> na he's out, deep in the woods <SEP> ! <SEP> c'mon gitter <SEP> I assume nobody else can see my gif either <SEP> nope <SEP> It's the satellites! <SEP> https://tenor.com/view/boat-im-on-aboat-the-lonely-island-lonely-island-andy-samburg-gif-5232669 <SEP> and that's me on the first of the month after my cap resets. Really doesn't affect the ping, but still. <SEP> although you can react with emoji in element, and it doesn't do anything here. Should at least do something. <SEP> :trolleybus: <SEP> so basically you get  pinged without a new message? <SEP> yep. <SEP> man, despite the best intentions, I basically never write a line of code on Mondays before noon. <SEP> the only thing I have on my phone is slack because it's what we use at work. But it's usually smart enough not to ping my phone and computer. <SEP> sounds like a job for sed <SEP> was it your idea to use the space? <SEP> that seems...not i18n friendly though <SEP> whereas aren't periods and commas reversed in a lot of non-american formats? <SEP> I thought `1.000,00` was a legit format in many places. <SEP> huh.  I should know that. <SEP> I will say that the way lots of languages are allowing separators in code is welcome, including JS",is there enough delay from element ? and is it bidirectional delay?
Summarization," <SEP> Is there a difference between:  ``` export function .. ``` and  ``` export  declare function .. ``` ? <SEP> the declare one is just synthetic. Makes typescrip think there is an exported function, but it doesn't generate code (it won't let you either). <SEP> And if in `export function` goes just declaration (signature not implementation)?","is there a difference between ""export function"" and ""export declare function"" ?"
Summarization," <SEP> Yes. Very weird <SEP> Ah fail. It's actually SystemJS that does that. <SEP> Why would one choose to have ""amd"" or ""commonjs"" modules instead of ""umd""? ""umd"" is both, so isn't it the best choice? And why ""system""? What's the advantage of ""system"", considering that ""amd"" and ""commonjs"" are more ppopular?","why would one choose to have ""amd"" or ""commonjs"" modules instead of ""umd""?"
Summarization, <SEP> Can we restrict a typescript array to have only certain allowed values ? <SEP> `let strings: string <SEP> `names: string <SEP> ```ts let strings: string <SEP> `let names: 'John' | 'James'` <SEP> but thats names as a property... names can contain multiple names its an array <SEP> `let names: ('John' | 'Tom') <SEP> oh thanks @SalathielGenese . let me try.,can a typescript array be restricted to certain values?
Summarization," <SEP> Hey guys, I have a weird behaviour.... ``` export class Settings {   interval: number;   last_update: number;   data_rule: DataRules; }``` If I try to add Settings.interval and Settings.last_update (non-static call), I get a `NaN` output... what am I doing wrong?! oO <SEP> Or what could I do probably wrong :D <SEP> code? <SEP> never mind.... I found the problem... -_- <SEP> I tried to access a property which I haven't initialized yet  ... thanks anyway :D",I get a 'NaN' output when I try to add Settings.interval and Settings.last_update (non-static call)?
Summarization," <SEP> Since core-js doesnt have support for Proxies, are they a topic I should skip if Im limited on time? <SEP> I assume that means Proxies are only compatable with modern browsers. Since it is an es6 feature <SEP> @mattyork  I don't believe 2.0.5 will be released to npm... that's a preview release and only available through Visual Studio 15 preview. I can only guess 2.0.6 should be released pretty soon? <SEP> @DanielRosenwasser is it possible to have a method decorator add stuff/change the type of the property it is decorating?  E.g. (in JS)  ```js class MyClass {   @cool myFunc() {      return 42    } }  function cool (target, name, descriptor) {     descriptor.value.isCool = true } ```  I would like typescript to know that `myFunc` on `MyClass` will have a property added `isCool`, so doing `new MyClass().myFunc.isCool` will not give me a type error. <SEP> @jeffijoe  I immagine decorators are run-time so they can't affect compile-time type checking. <SEP> @dtabuenc exactly, but I would like to be able to tell TypeScript ""this is whats gonna happen, listen up"" <SEP> @jeffijoe  the only way I can think of is to use an interface <SEP> ideally you could do declaration with a namespace <SEP> like you do with normal functions <SEP> but I don't know that there's a way to do that with class methods <SEP> If you don't mind ugly syntax you could do something like..... <SEP> The typecast shouldnt be needed right? Since it implements <SEP> But there might potentially be a lot of those, so would be nice with first class support <SEP> It seems to need it <SEP> of course if you are going to type cast then just skip straight to :  ``` ( <SEP> What is the use case you have in mind? <SEP> but I'm not sure why you'd want to <SEP> Is it possible (and a good idea) to set an interface for server responses?",is it possible to have a method decorator change the type of the property it is decorating?
Summarization," <SEP> Using 1.6.3 and trying to figure out support for iterators and new array methods. Consider the following code: ```  let foo:string <SEP> @david-driscoll Hmm, yes, double-checked that. This is in a ""NodeJS Tools for Visual Studio"" project. Will try with VS Code, too. <SEP> @joelday @weswigham is working on .d.ts bundling, but it depends what you mean by ""can be used in internal module/namespace projects"" <SEP> how do you want to use it?",support for iterators and array methods in.d.ts bundling
Summarization," <SEP> I'm new to TypeScript as of last week and have found updates to be slow as well. At least with beta moniker, people will understand issues may exist. Software is only as good as those who have written it and everyone is claimed by the human condition of imperfection. A timetable would be useful too, all we have is a roadmap today <SEP> TypeScript is also meant to be cross platform and the only issues still open are for Visual Studio, also in preview. <SEP> Using WebStorm or Code, I'm blocked by unrelated issues affecting one IDE. <SEP> Nightlies would shut me up <SEP> don't worry guys, we hear you (and agree ourselves), we'll be both getting something like nightly builds online as well as putting out official releases faster than the time between 1.4 and 1.5 <SEP> I think I saw something like 35000 unit tests for typescript, that's insane. If those pass, why block fixes? <SEP> those tests generally don't cover the actual IDE integration (VS, Sublime, etc) as well as making sure those editors do things like install the new bits correctly <SEP> that said, it's certainly true that we have enough compiler baselines and such that nightly builds are fairly stable save for features that have literally just been checked in <SEP> Where is the VS/Sublime integration code? I didn't see it in the typescript repo. I imagine those bits are all private still? <SEP> the VS code is yeah <SEP> the sublime stuff is just in its own repo",is there a timetable for releases/updates to be released?
Summarization," <SEP> is the next typescript version 1.9 or 2.0? <SEP> @ShadowManu Thanks, however, I want to export multiple types from multiple files into a single module with a given name. Without declaring it explicitely, I can't give it a name, such as ""rxjs"". <SEP> @ShadowManu So ambient is synonymous with declarative, as in a *.d.ts file ?",is there a way to define a type from multiple files into a single module?
Summarization," <SEP> )(@**@)(#*#(*%&#(*&$#$(*@#)@(# <SEP> @orta Help =( <SEP> And I figured out what triggers it. But not why <SEP> I added a new file to my compile-time tests... <SEP> But that file **does not** have anything to do with the other files. <SEP> It does not import those other files. It is not imported by those other files <SEP> It makes zero fucking sense <SEP> Like, how do I even file this bug? <SEP> If I comment out that test file, I don't run into problems <SEP> I give up, lol. I'll just rewrite the test to not trigger it <SEP> After staring at it long enough, I just realized that even though they're very different types, in general, in this specific case, they're actually the same type, because of the type param used <SEP> But it shouldn't have just randomly substituted the types like that ._. <SEP> Must be some type cache thing",why does my compile-time test trigger it?
Summarization," <SEP> same reason `MyClass` doesn't evalutate to a constructor function when it's to the right of a `:` <SEP> https://www.typescriptlang.org/docs/handbook/modules.html <SEP>  <SEP>  <SEP> ""To maintain type safety, we can use the typeof keyword. The typeof keyword, when used in a type  position, produces the type of a value, in this case the type of the module."" <SEP> yea. that makes sense.  i mean, other types in that context retain their JS meaning.  `boolean` in a non-code context still means boolean.  but in this example,  a js operator is being recycled outside of the js context with it's meaning changed.  not complaining, just reflecting.  your `MyClass` example is fair, but that's intuitive to reason about.",why does MyClass not evalutate to a constructor function when it's to the right of a ':'
Summarization," <SEP> @keithlayne Hey, just to let you know that i solved the issue, i had a browser and unpkg entry  with an UMD build in package json of the package,  the CRA was picking up that up for some reason instead of the main/module. The ts-jest wasnt.  6 hours down the drain :) <SEP> per my question above, it looks like there is an open issue for it from 2016 :( https://github.com/microsoft/TypeScript/issues/8760 <SEP> and this isn't something i can resolve with tsconfig  paths <SEP> @robchristian that was before I knew some more of your rules.  I assume you're talking about `b.c`. <SEP> That's because it's `string & number`, which is `never`. <SEP> that can be fixed <SEP> but that's probably not really correct.",can't get ts-jest to work with package json
Summarization," <SEP> hey. Problem with rc (2.02): after installing @types/react and @types/react-dom, I get a compiler error:  ``` node_modules/@types/react-dom/index.d.ts(13,43): error TS2307: Cannot find module 'react'. node_modules/@types/react-dom/react-dom.server.d.ts(2,31): error TS2307: Cannot find module 'react' ``` <SEP> I have `exclude:  <SEP> what's your tsconfig? <SEP> @marinho <SEP> ```json {   ""compilerOptions"": {     ""experimentalDecorators"": true,     ""jsx"": ""preserve"",     ""module"": ""es6"",     ""noFallthroughCasesInSwitch"": true,     ""sourceMap"": true,     ""target"": ""es6""   },   ""exclude"":  <SEP> maybe i'm missing something? <SEP> @theduke AFAIK the exclude:""node_modules"" only refers to where the compiler looks for sources that are part of your project. Dependencies are always compiled (though I think there is a compiler switch to turn off compilation specifically for declaration files) <SEP> the problem seems to be with the react-dom typings <SEP> it fails on import ... from ""react""; statements <SEP> should import statements be in typings?",can not find module'react' after installing 
Summarization," <SEP> I've decided to call my library `squill`, because xkcd. But the package name was taken.  The org name, however, was not. So, I've taken that org name <SEP> @G-Rath <SEP> https://xkcd.com/1989/",how to call my library 'squill'
Summarization," <SEP> Anyone know how long it usually takes for a PR to get reviewed? Like, do they do reviews every Monday or Friday or something like that? <SEP> Technically, TS could support a compile time only integer type but the sum of two `int` types would have to be `double` (excluding Infinity,-Infinity,NaN) <SEP> If you defined `int` as any number between -MAX_SAFE <SEP> MIN_SAFE_INTEGER and MAX_SAFE_INTEGER <SEP> And where Math.floor(x) === x <SEP> so you're saying...  ``` const f: object | string | undefined = {}  if (typeof f === 'object') {   // inside here, f is narrowed to object | undefined } ```  ???",how long does it take for a PR to get reviewed?
Summarization," <SEP> i feel like am learning a whole new language :( doesn't seem intuitive js for me <SEP> this is just ES6 <SEP> well the import /export is ES6 <SEP> i would be lost if i go participate in another vanilla js project <SEP> think of es6 modules <SEP> as the whole file being an empty object `{}` <SEP> anything you export... becomes a key in that object <SEP> but is this ES6 code? ```export function connect ``` ? <SEP> so if you do export var foo = 5; <SEP> I can't find anything like it here: https://developer.mozilla.org/en/docs/web/javascript/reference/statements/export <SEP> then the module looks like { foo: 5} <SEP> you might want to go over this: https://github.com/lukehoban/es6features ES6 has nothing to do with TypeScript, really, except TS allows you to use ES6 and compile that for older browsers <SEP> read the first line in that link <SEP> ""The export statement is used to export functions, objects or primitives from a given file (or module)."" <SEP> you are exporitng a function",does export function connect  work with es6 modules?
Summarization," <SEP> Hi, I am looking to integrate chartsjs in typescript (mithril) with polkadot api staking data I am looking for a chartsjs component for such purpose, if someone can sahre anything that can help, it'll be great! <SEP> anyone here with knowledge of vercel/next? I'm trying to figure out why `declare module ""*.svg""` doesn't work for svgs imported into files that are in `pages/`, but works for files that are anywhere else <SEP> where did you put it? <SEP> in the global.d.ts <SEP> to clarify <SEP> so I added some lines to `next-env.d.ts`: ```ts declare module '*.png' {   const content: string;   export default content; } ``` <SEP> the svg files themselves are in `public/svg/`.. What I meant by ""doesn't work for files in `pages/`"", I meant that the import itself is in `pages/index.tsx` (for example) <SEP> oh wait just realized I don't reference that in pages <SEP> but in a components dir <SEP> yea <SEP> lemme see if I can do it there <SEP> in `components` it works FSR <SEP> yeah so I just imported a png in a page and tsserver knows the type.  When do you get an error, on the build? <SEP> really not sure.  I mean the fact that it's building successfully implies that TS is not unhappy with it. <SEP> it worked for me in pages when I just tested it. <SEP> Yeah I could have sworn it used fork-ts-checker, but it seems to not care about a type error...grumble",how to integrate chartsjs with polkadot api staking data
Summarization," <SEP> hey i have a question that might sound silly. if i have an open source typescript+react project and i use a paid theme like material kit pro or something, how does that work when you check it in? do i have to not open source it at that point? i know with c# .NET with NuGet and telerik, you can open source projects contain references to paid telerik DLLs, so long as the DLLs themselves aren't checked in. how does that work in this case? <SEP> all the css/ts that i paid for would then be open source in the repo for other people to take right? <SEP> Not really on-topic for this channel, but you'd have to check your license. You're probably not allowed to redistribute/relicense the theme, but who knows what your license says. <SEP> dude we just looked at some of those type things, and decided not to use one.  Partially because the licensing seemed questionable. <SEP> In all likelyhood, you can't relicense the theme, but you may be able to license it for inclusion with your project <SEP> @webstrand we have a proud history of going off-topic in this channel :stuck_out_tongue: <SEP> that's true, but we at least start on-topic. I'm not upset or anything, they probably wont get the best response, though <SEP> programmers also have a proud history of (poor) lawyering <SEP> yeah. I was working with someone the other day, they had based their project on a MIT licensed starter-repo. But they had deleted the LICENSE file <SEP> I have no idea what would happen if someone wanted to enforce the license <SEP> We have a very small company, and the COO handles all the contracts and legal stuff, so I always kick anything remotely questionable to him. <SEP> the pragmatic view is that there's a risk-benefit analysis to breaking the license.  I don't like that, but there it is. <SEP> man, I wish. We do have a legal department, but I've never interacted with them. I see so many copyright violations, it's sad. <SEP> We do implement tons for OSS behaviours b/c a few words in License <SEP> So as to avoid even potential conflicts <SEP> @omarhimada  ```text You cant re-distribute the Item as stock, in a tool or template, or with source files. ``` You can't do that, unless you have a custom license from Creative Tim <SEP> just saying, looking at licensing for a single font got very complicated very quickly.",how does a paid theme work with an open source typescript+react project?
Summarization," <SEP> Anyone know why this is giving me a parse error:  <SEP> That's not a parse error, but rather a type error? <SEP> ya, sorry <SEP> type error <SEP> it's really interesting to me <SEP> from what I know it should be fine <SEP> obviously I do not know enough lol <SEP> You're playing with one of the trickiest parts of typescript <SEP> On the face of it, you should be able to do: ```   return constructorArgs === void 0    ? initArgs === void 0     ? (new this()).init() as InstanceType <SEP> but you'll get another error trying to call `init`. <SEP> event just ``` return new this(); ``` <SEP> doesn't work <SEP> yeah, basically, typescript is incapable of proving that `this` will return the correct type <SEP> hmm even though I specify this <SEP> There's a problem with your type logic: ```   class Foo extends BaseClass {    a!: string;     init(x: string): Promise <SEP> hmmm <SEP> I'm looking for solutions for you, not just pointing out problems :) <SEP> lol <SEP> I appreciate the dialog either way <SEP> I figured this was a fairly basic parent class implementation <SEP> certainly a pretty standard factory pattern <SEP> `init(x?: string): Promise <SEP> With typescripts classes, it assumes that the child class will be assignable to the parent, so the parameter `x` has to be optional, I guess. <SEP> updated the playground <SEP> type error goes away <SEP> what were you saying isn't working? <SEP> You've got everything working? the `.init(...initArgs)` should still be failing? <SEP> ts-ignored lol <SEP> Does `Foo.init(""test"")` work for you, then? You'll need to post a new playground, for me to see. <SEP> oops, I'm misusing `init` <SEP> Playground Link",why is this giving me a type error?
Summarization," <SEP> Hello all <SEP> I'm having some headaches with index type <SEP> Can someone explain why this definition works? <SEP> ``` interface IAction {      <SEP> by putting that ""any"", I am saying that accessing this object with a string key I get an any object, am I? <SEP> So how can the compiler, instead, understand when I'm adding a property that is not declared in the interface? <SEP> I am trying to import a regular CJS module into Typescript, just so that it gets loaded in the browser by SystemJS, I am using ``` import m = require('path/to/cjs/module.js') ``` But ts compiler keeps complaining that it cannot find the module. What is the require call actually doing and what should the parameter be exactly? <SEP> @vojtapol Where is this statement? I don't think require is something to be dealt with ts <SEP> Dose PromiseLike <SEP> @CarlCui-AI in a ts file <SEP> I am not sure I understand ambient dependencies.. Why should angular be considered ""environment"", why can't I import it just as any other dependency wherever I need it as I would do in Java or any other sane language? <SEP> . <SEP> @vojtapol The problem is you are trying to import a js module, but ts needs ts modules. <SEP> Actually you don't even need to import the module, because TS will be compiled to js anyway. So ts compiler only needs the ""shape"" of the js module, also known as typing (.d.ts) <SEP> So better way is to install a typing for cjs <SEP> wait... <SEP> cjs? <SEP> @CarlCui-AI cjs is CommonJS format <SEP> why would you want to import cjs into a ts file? Are you using angular2 or something? <SEP> @CarlCui-AI I am not importing cjs, I am importing a library in cjs format <SEP> @CarlCui-AI for example angular-ui-bootsrap is a library I have to use and it is in cjs format <SEP> so lets say I instead just import the typings for that library.. the compilation goes fine but then during runtime it expects the ACTUAL library to be loaded.. how do I do that if I dont want to have a 50  <SEP> That would be another story... :worried: <SEP> @CarlCui-AI wait so how do other people do it? I have about 30 external libraries in various formats.. most of them have typings in TSD, great, so I get autocompletion and type safety but how do I actualy LOAD the libraries on runtime? <SEP> runtime? <SEP> html script tag finds the path to the library.",how does require work when importing a cjs module into Typescript?
Summarization," <SEP> Hi everyone! I'm looking at Typescript-Node-Starter from MS ( https://github.com/Microsoft/TypeScript-Node-Starter ) and I'm wondering how to get both the auto-restart and debugger working. `npm start` launches the compilers/watches/etc, but not the debugger. <SEP> @DandyDeveloper  whats the problem? <SEP> Hitting F5 (to start the debugger) does work, apparently. Lmao <SEP> I get Error: listen EADDRINUSE :::3000 through <SEP> @thavlik Looking at it, I'm not sure it's possible... <SEP> the EADDRINUSE :::3000  is probably because the launch command also starts a process <SEP> and you already have `npm watch`running <SEP> I'm assuming you're using the default config for the launch.js <SEP> which has ""type"": ""launch"", i.e. it's launching it's own process <SEP> alternatively, you can use type: ""attach"" <SEP> See https://code.visualstudio.com/docs/editor/debugging#_launch-configurations <SEP> At this point it depends on nodemon (which is doing the auto-restart) <SEP> If it starts a new process on restart, then the debugger will lose the connection. <SEP> Otherwise, it should work. <SEP> I cannot get breakpoints working. Hovering over the grayed-out breakpoint it says ""Breakpoint ignored because generated code not found (source map problem?)"" <SEP> My attach config is {             ""type"": ""node"",             ""request"": ""attach"",             ""name"": ""Attach"",             ""port"": 5858         } <SEP> that property is not allowed <SEP> @thavlik https://github.com/bdspen/nodemon_vscode <SEP> @NaridaL I am following that already - I can get vs code to confirm the debugger has been attached, but breakpoints still do not work <SEP> ``` <SEP> You've got the localRoot attribute set? <SEP> my full launch.json: <SEP> `{     // Use IntelliSense to learn about possible Node.js debug attributes.     // Hover to view descriptions of existing attributes.     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387     ""version"": ""0.2.0"",     ""configurations"":  <SEP> hmm <SEP> how do I get that to format correctly? <SEP> triple ``` ? <SEP> ``` {     // Use IntelliSense to learn about possible Node.js debug attributes.     // Hover to view descriptions of existing attributes.     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387     ""version"": ""0.2.0"",     ""configurations"":  <SEP> sweet <SEP> that's with nodemon --debug --inspect dist/server.js <SEP> never mind :) it started working for some reason <SEP> Thank you for the help, Adrian <SEP> Oh, good, because I was trying to replicate it and I didn't even get to your error :-P <SEP> Nodemon can work with debugging <SEP> @dtweedle Made some good progress. I think this is more a react problem I'm just trying to get a value from within an element (`NavLink`) and I'm not having much luck. <SEP> To set the value? Does that work with all elements? If it does I feel dumb. <SEP> it works with both react components and html elements afaik",auto-restart and debugger not working in Typescript-Node-Starter
Summarization," <SEP> okay, so I'm getting tslint errors, for example- ```   ERROR  Failed to compile with 1 errors   error  in ./src/dispatcher.ts   <SEP> and I've got this set in my tsconfig, ```javascript {  ""compilerOptions"": {   ""module"": ""es2015"",   ""moduleResolution"": ""node"",   ""target"": ""es2015"",   ""strict"": false,   ""experimentalDecorators"": true,   ""allowSyntheticDefaultImports"": true,   ""emitDecoratorMetadata"": true,   ""rootDir"": ""."",   ""sourceMap"": true,   ""lib"":  <SEP> should it be like `es6`?",getting  ERROR Failed to compile with 1 errors error in./src/dispatcher.ts  
Summarization," <SEP> https://www.youtube.com/watch?v=kNf7g13284E <SEP> it doesn't need to be mutable under the hood <SEP> it goes back to the ""why"", of immutability <SEP> your variables dont need to change value throughout your codebase <SEP> your accessible variables <SEP> Okay, but _someones_ gotta get their hands dirty. <SEP> if X is 5 X will always be 5 this is the main advantage i see of actually going full immutable <SEP> Were talking past each other. <SEP> I understand your position, but it only applies at the high level youre working within. Something on that lower level needs to start mutating stuff and imperatively running through code so that us living higher up can have our functional utopia. <SEP> Functional assembly? ;) <SEP> Theres a joke here about how LLVM has infinite registers so that it can punt on register allocation until late in the game. <SEP> So...its quasi-immutable with respect specifically to register values. <SEP> You ruined my immutable registers joke, hope youre happy. <SEP> Sorry. <SEP> interestingly, the standard definition of a Turing machine includes an infinite tape... <SEP> But here in the real world we dont have infinite ram so... yeah... compromises must be made <SEP> So, yeah, actual TS problem, though: `tslint` needs `node` typings, but those shadow browser types, but we use `tsc` to compile some `tslint` rules that of course reference `tslint`. How do I have those typings apply not generally but _only_ situationally, without venturing in `tslint`? `tslint` defined `@types/node` as a devDependency, and Im not sure how to get npm to install `tslint` _with_ devDependencies, though now typing this out Im sure that must be possible. <SEP> anyway yes someone has to get there hands dirty <SEP> just not in our code <SEP> and when our code interacts with their dirty code its possible to do it in a pure way the same way haskell handles impure IO actions <SEP> devDependencies are by definition whats needed to actually *build* the package, not sure it ever makes sense to install them for a dependency of your own since the assumption is by then its already been built <SEP> I think thats what Karan meant though, *someone* has to get their hands dirty so why argue over exactly where that happens <SEP> Its ultimately just the  <SEP> (See I remembered that from earlier!) <SEP> Like bikeshedding but from the opposite direction :stuck_out_tongue:",immutable variables don't need to be mutable under the hood
Summarization," <SEP> Oh, I thought I heard my name <SEP> yeah you recursive-type-shamed me <SEP> I just want someone to give me an official and reasonably non-crazy way to do this stuff <SEP> but I just re-read your GH comment about it, and now I'm wondering about the ""real world"" tests against DT because I'm 99% sure at least the ramda types use that technique. <SEP> There's  <SEP> cool, thanks for the info <SEP> Just use generator trampolines to get around the max recursion depth <SEP> https://github.com/AnyhowStep/tsql/blob/0c715b3323432bda913ca395211921e5558dd360/src/tuple-util/reverse.ts <SEP> so that you can actually break the compiler for infinitely recursive types?  :trolleybus: <SEP> @m-b-davis if you need inspiration <SEP> The recursion limit is still finite <SEP> But you can extend it a lot more <SEP> Just gotta copy paste code every time you want to extend. <SEP> None of this feels like ""official and reasonably non-crazy"" <SEP> Copy paste N times and the recursion limit goes up x^N times <SEP> Where `x` is some constant (8 in my example link) <SEP> @jcalz this is just generator trampolines done at the type system level. <SEP> reminds me of the C++ template metaprogramming craze <SEP> Wes has a PR to do this at the compiler level <SEP> fails the ""reasonably non-crazy"" test <SEP> @jcalz :joy: <SEP> https://github.com/microsoft/TypeScript/pull/32611 <SEP> I suppose, if those tests get rolled in, we'll have ""official"" but it's still crazy.  My hope is that they will become officially supported in tests, and then we can use them as an argument to get some easier to use notation for it <SEP> I'm just gonna make a library in JS only. Then go make .d.ts files and put them on definitelytyped <SEP> Sneak in all the crazy type level stuff while I'm at it <SEP> I'm sick of my code breaking every few releases  <SEP> Generator trampolines is like the final form and those have never broken for me <SEP> But I don't like writing those because it's so much copy pasting <SEP> Naive recursive type using object indexing trick = reasonably easy to do, but can break next release when they fuck with the Instantiation limit/depth or constraint depth or any other limit <SEP> Type level generator trampolines = tedious, harder to read, but hasn't broken yet, for me <SEP> Once ts-toolbelt or something else like it makes it into official testing, I want to run back to #26980 and plead for sanity: ""It's too late to decide that we're not ready for recursive conditional types; they're here already.  Now let's make them safe and easy to use!  Maybe some kind of `Defer",is there a way to test infinitely recursive types with generator trampolines?
Summarization," <SEP> 42 <SEP> if I pass in the return val ... does the compiler actually parse the thingy - if I somehow managed to write something - .... and can I ultimately ensure the calculated accessed property is of return type `R` <SEP> when R was passed into the generic function as a second generic param and used as retval-type <SEP> TS has no reflection <SEP> thats a hidden cast <SEP> So, it can't tell you that a variable is of type `R` <SEP> During run-time <SEP> ahhh ... so the answer is ...: the topics name is hidden cast and that's something that doesn't work (yet) .. ?!? <SEP> in general a function isnt actually generic if the generic types are not used in the function args <SEP> huh? <SEP> Im saying ```ts function dirty <SEP> I'll google some more nevertheless, just to be able to argue with my team lead :) <SEP> If it's anything dynamic in nature, you're better off returning `unknown` and just running run-time validations <SEP> oh, so it's not as usually typechecking the `T` as in if the retval isn't `T` the linter cries out ... but it is only silencing the linter in the end as to not bother <SEP> yeah, thats the only good way to get from dynamic to static <SEP> If you already know the path during compile-time, then you don't need the dotted path and should look into workarounds for optional chaining <SEP> ok, so another last question ... run-time-validations??? can you give me a hint ... thought typescript is gone at compile time <SEP> Custom run-time validation code. Like, `if (typeof x == ""string"")` <SEP> Then you know that `x` is a `string` and not anything else <SEP> When your `x` is some complex object, you'll want to start using libraries to write this validation/mapping logic <SEP> I was thinking of how youd type the args to the optional chaining version - I think that would be nasty <SEP> mhm ... so if i use for example a `prop in obj` somehow and compare it to a ... well, don't know if that's possible ... a `keyof T` ... ?? <SEP> Although would probably be easier curried <SEP> if one could automate that optional chaining version with a dynamic `keyof keyof keyof ... T` ... <SEP> maybe if I bluntly try to access a prop's prop inside a try/catch <SEP> TS should error if something in the path is nullable <SEP> I dont like that approach, but it *should* work, at least in JS <SEP> I have something that is like, ``` objectPath <SEP> I was thinking without a class.  Big surprise. <SEP> It also lets me do ``` objectPath <SEP> And get a dotted string path <SEP> it's not a class, it just returns a plain object that conforms to a generic interface <SEP> So, not technically a class but behaves like one <SEP> I say potato, you say potato",is it possible to parse the returned val of a generic function?
Summarization," <SEP> That's what I did... Check last but 5 code excerpt above <SEP> It is now working <SEP> I'm trying to address component `B` issue <SEP> I  was talking about `IProps <SEP> Since that generic already default to something, I had better let it default, right ? <SEP> Hmmmmmm, when you craft some type and the fan of your machine turn into hurricane <SEP> well it looks like you want you want `T` inferred as whatever the react anchor type is, but its just getting that defaulted generic version <SEP> I always thought of it as the sound of a jet taking off <SEP> I then can't tell if this is valid, would you test it ?  ```typescript interface IProps <SEP> Yeah I have no react stuff whatsoever installed :( <SEP> Hehe - I have not idea how to handle this  ```typescript interface IProps <SEP> And this is invalid typescript  ```typescript let a: (1 extends number) & ('a' extends string) ? 1 : null; ``` <SEP> Yeah you would have to have nested `?` right? <SEP> like `let a: 1 extends number ? 'a' extends string ? 1 : null : null` <SEP> does that mean `a` has `1` as a type but `undefined` as its value? <SEP> Yes <SEP> Or more technically (from TypeScript perspective), **Not yet assigned**",typescript interface IProps doesn't seem to work
Summarization," <SEP> https://github.com/Microsoft/TypeScript/blob/master/src/compiler/tsconfig.json <SEP> I can't see `diagnosticInformationMap.generated.ts` in this folder which is referenced in the config <SEP> How do I get or create it? <SEP> It is created when you run `jake local` <SEP> @ivogabe thanks, managed to build it <SEP> still cannot debug the compiler though, VS Code hangs after a few steps",how to create a diagnosticInformationMap.generated.ts
Summarization," <SEP> Is there any tutorial about Mithril and TypeScript please ? <SEP> hey guys, can use typings with tsd's types? Many type files are missing within typings search... <SEP> I'm hoping someone else has stumbled on to this already :smile: <SEP> ?",Is there any tutorial about Mithril and TypeScript?
Summarization," <SEP> yup. do you find the safety of decoders overkill then? too much boilerplate? I'm curious since I've found them in other languages to be such a boon to my ability to rapidly collect/diagnose errors that it's worth the minor time to generate them <SEP> Depends on the project, for the project i'm working on right now iv'e been using io-ts <SEP> If your application is isomorphic I.E typescript frontend + backend, and you never interact with an external api there are other ways to make your api requests fully typesafe outside of io-ts <SEP> yea, i'd go for graphql and shared types or something then. in this case it's just a client that i'm writing (to an existing backend) so I figured it'd be useful both for safety and for when I make false assumptions about what the server may return <SEP> @nicolasartman fp-ts might be good to look at for research purposes if nothing else, e.g. some background on how they faked HKT in typescript: https://gist.github.com/gcanti/2b455c5008c2e1674ab3e8d5790cdad5#adding-static-land-support <SEP> yeah how they did HKT is good <SEP> in terms of usability in production for fp-ts its pretty much zero <SEP> oh? <SEP> i don't rate that library at all, and i come from a background of Scala <SEP> the typings and inference are written by someone with a Haskell or Scala background where your have algerbriac types and no unions and intersections. <SEP> examples of this are like... Option("""" as null | string).getOrElse(0)  // with Scala's typings this would be impossible because getOrElse could only return something that is the same type as what's in the box <SEP> however in Typescript this is perfectly valid and possible to acheive because you can have (string | null | number) be the return type <SEP> the error messages are also unhuman readable because of their implementation of HKTs <SEP> gotcha, I was worried about the general usability of it for the dev team <SEP> plus I don't need (or have mastery of) the more advanced stuff it's doing. I really just want a Maybe (and perhaps an Either) type to use <SEP> you need HKTs to have higher kinded polymorphism but you don't need higher kinded polymorphism to implement monads, <SEP> especially not in typescript <SEP> Maybe will be pretty useless soon <SEP> or well not as useful <SEP> Because of optional chaining? <SEP> because typescript 3.7 is bringing nullish coelessence and optional chaining <SEP> aswell as the fact undefined and null are already their own types in typescript <SEP> Yeah you can do `a?.b?.c ?? defaultValue` <SEP> correct. <SEP> If that short circuits anywhere you get the default <SEP> Just like a maybe <SEP> and if the pipe operator makes it into the langauge awell that will be the last nail in the coffin for maybe <SEP> perhaps a silly question but will that still allow the same exhaustiveness checking in switch/similar cases? I've found `case ... of` super useful <SEP> you can force exchaustiveness checking by having a function that only accepts never in a default case <SEP> that way when you add more options, that type will start to break <SEP> I.E something like this <SEP> ``` type Theme = ""Primary"" | ""Secondary"";  const isNever = (nvr: never) = <SEP> ah right, i've used that trick before <SEP> the second you add another Theme to `Theme` that default return will start to break <SEP> because theme will no longer be `never` in the default case <SEP> so instead of maybes do you just do `type A = Something | null`? <SEP> Yeah <SEP> And your `getOrElse` is just `maybeA ?? orElseValue` <SEP> rather than.... Maybe <SEP> gotcha, that's super helpful, thank you both! <SEP> and it's perfect timing since TS3.7 is out now <SEP> oh wow it just dropped today your right",how safe are decoders in io-ts?
Summarization," <SEP> @GoNode5 So for now, my uses could be called either a class or an interfacethe consumers of the objects dont care, as long as they have the right fields. I wasnt sure which made more sense to default do. For example, I have an AccessList, which is just a list of areas of the site an admin has (or does not have) access to, that currently looks like this: ``` export interface AccessList {   <SEP> I would check the ng2 source, its a goldmine and see how they do it. Or ask ng2 gitter <SEP> Heh, it was ng2 gitter that told me interfaces were fine. :smile: This seemed like a more general typescript question anywaythe use case is in no way specific to Angular. Thanks so much for the input!",is there a way to call a class or interface instead of a class?
Summarization," <SEP> Has anyone built an API based on subclassing promises? <SEP> Where methods are added onto subclassed promise objects, so that the `this` object is a promise of the class instance? <SEP> Or maybe I should try implementing a Promise, rather than extending a Promise... <SEP> Nevermind, I'm wanting monadic promises. And as far as I know, those don't work in javascript",Where methods are added onto subclassed promise objects?
Summarization," <SEP> It does but I think you still have to type the name twice in that case, otherwise it defaults to an integer enum <SEP> However - TS integer enums are bidirectional <SEP> So you can map between the numeric constant and the string identifier <SEP> I thought typescript already supported decorators... <SEP> As for plans to support it: Yes, it's on the roadmap... but it is marked as future... which basically means nobody knows when it will happen. https://github.com/Microsoft/TypeScript/wiki/Roadmap#future",is it possible to use decorators in typescript?
Summarization," <SEP> K. <SEP> Well... <SEP> I can't say I have the magic 100% for sure answer... What I would try is this: <SEP> no this was just an example. if i would write like this like var : string and so on if the d.ts file would get created for me <SEP> Just compile your code with target ES5 and don't specify a module type. <SEP> set ```""declaration"":true``` in your tsconfig.json <SEP> From there you have a choice... <SEP> why nod module type if for node? <SEP> thought commonjs <SEP> well because you're importing it statically... <SEP> You haven't defined it in module syntax... <SEP> If you want to have a 'module' (think module versus package) then you need to export your functions. <SEP> sorry, i confused you with this script <SEP> A module is typically referred to as a single ```*.js``` file. <SEP> this was just an example for the typing definition, not my target. i wanna write npm modules <SEP> A package is something that node can download for you. <SEP> Ok <SEP> so my current skeleton looks like this <SEP> https://github.com/ellerbrock/npm-typescript-skeleton <SEP> If you want to write 'modules' then something has to be exported. <SEP> {   ""compileOnSave"": true,   ""compilerOptions"": {     ""module"": ""commonjs"",     ""moduleResolution"": ""node"",     ""target"": ""es5"",     ""sourceMap"": true,     ""declaration"": true,     ""outDir"": ""./js"",     ""noLib"": false,     ""pretty"": true,     ""suppressImplicitAnyIndexErrors"": true,     ""preserveConstEnums"": true,     ""emitDecoratorMetadata"": true,     ""experimentalDecorators"": true,     ""removeComments"": false,     ""noImplicitAny"": false   },   ""exclude"":  <SEP> Ok <SEP> yes i know. i would export my api <SEP> well all I can say for sure is that if you want a module, you have to have at least 1 export... <SEP> But I think you're on the right track. <SEP> yeah i know <SEP> index.ts... <SEP> so lets put the information together <SEP> yeah <SEP> i would start like this <SEP> k <SEP> for single file 'packages' I see people simply have an ```index.js``` and a ```index.d.ts``` <SEP> that's a simple as you can get <SEP> you barely need any config <SEP> yes and i think that the way to go. keep it simple. unix style, one task per module  ... <SEP> ummm",why not specify a module type in tsconfig.json?
Summarization," <SEP> Hey guys. Is it possible to have a normal interface, like `interface Item { a: string; b: number; }` and then for an object that uses this interface, also specify that all other properties on the object must be ` <SEP> I tried ` <SEP> Just combining two interfaces should be enough? `& Record <SEP> Yeah that did it :)",is it possible to have multiple interfaces for a single object?
Summarization," <SEP> https://github.com/microsoft/TypeScript/issues/15480#issuecomment-513105767 <SEP> See my comment there, lol <SEP> You can emulate it but it's... Ugly <SEP> I don't actually use that code anywhere because it's so ugly <SEP> @yxliang01 @danlugo92 I'm sorry folks, a minute after I asked the questions I had to run unexpectedly, so I couldn't answer. What I want is the same as Java's `values()` on an enumeration or  dotty's (scala 3) `.values`or C#s `GetValues(typeof(X))` or haskells `enumFrom $ toEnum 0`.  What I need is an array which contains all values of a union, with compile-time guarantees. I want to guarantee that as soon as someone adds something to that union, they have to put the value in that array. I'm currently doing it the following way, which also helps defining an order, but it's a bit boilerplatey.  http://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBDAnmYcBiAbAhgczgXgCg44AiAFQgBMJS4AfYsgEQgDtg7GSLg2YsMAJYA3TgyakAkmwBmtCTwBy0ALZYMpANyFCAY3YBneLOw4A8gCMAVsD0wAXHADecANqy4QtujMBdJzYAV1VLYCg4AF8CFyYSFSh1DCcARgAaOLgZeScAJgySEnI+AWExJwBmAsLKGicAFmqSVg4nAFYMyJ1CAHoerLgAdyw2AHJ4GAg4HCCsKBGYYFQYAAtBOA0MTFxDDYxhxF2DfixvQ17+4DEoRDhIQ0MhSwxUMDn4CE9tnEJQSFg4MdjHstmZdkQSAAKKy2ewAOgA1sBDpDTLgYXYYABKDa7b5uPxYphwwzQGCQyFYNJwSw4-AAPjgaIsNkxbiwfjgAFomWYMfY3JZCd1dKKxeKJbogA",is there a way to get all values of a union with compile-time guarantees
Summarization," <SEP> newables have existed since before 2.3 <SEP> ``` function foo <SEP> @ktsangop  https://stackoverflow.com/questions/33224047/how-to-specify-any-newable-type-in-typescript <SEP> @czhower that seems to work, but aren't we loosing the type there? <SEP> yes <SEP> @ktsangop can you post your entire code sample again with any changes you've made <SEP> I forgot the new keyword, I just edited it to fix it. <SEP> youd have to pass the type you want in my sample, but it then forces you to do so. Can probably even shorten it possibly using T for the new call. Id have to test it but <SEP> @skeate The code i have posted above, is just a demo that reflects my project. The changes you proposed, work fine in the demo code, but not in my project. <SEP> ah <SEP> ``` function foo <SEP> @czhower Thanks <SEP> ie, in this case you use the generic as your param <SEP> you can't use types like that <SEP> BUT. If it comes from a non static/fixed source it wont be easily called. <SEP> Guys thank you for your help, i really appreciate it. I wish i could think of another way to design it without refactoring a lot of my project files. But it looks like this is not a good design decision.. :D <SEP> @skeate solution might be better though, but my sample works fine and we use it extensively. <SEP> Our project is a mix of JS, TS, C#, Delphi, and C++. Its like juggling balls in my head keeping all the nuances straight, even of the langs that I've been using for 20+ years sometimes when I chagne between them so frequently.",how to specify a newable type in typescript?
Summarization," <SEP> Did you compile it with the npm run compile command ? <SEP> oh no i was just running test --watch <SEP> it looked like it was supposed to autocompile <SEP> Not yet, I rewrite my ES6 lib to Typescript + change the unit test engine (AVA to Jest) so there is some little things to do ^^ <SEP> okay two things <SEP> 1. in /src/utils/util_functions, you want `import * as` for bluebird <SEP> more than two things <SEP> sorry <SEP> ^ that fix is necessary <SEP> 2 - i removed the spy bc it seemed like it was unnecessary... this helped <SEP> 3 - the test passes now, *only* if i skip all other tests <SEP> which since this is async would suggest to me you've got tests manipulating some shared state (don't do that!) <SEP> that's as much time as i have for this. hope that helps",how to compile it with the npm run compile command?
Summarization," <SEP> How come when i use `import * as json from ""./config.json""` typescript imports it with a ""default"" :  ``` jsonconfig: {""default"":{""host"":""IP"",""database"":""DB_NAME"",""user"":""DB_USER"",""password"":""DB_PASSWORD""}} jsonconfig.default: {""host"":""IP"",""database"":""DB_NAME"",""user"":""DB_USER"",""password"":""DB_PASSWORD""}} ``` and it works when i then use `json.default` but I always get the error ` Property 'default' does not exist on type '{ host: string; database: string; user: string; password: string; }'. ` <SEP> nvm, I'm stupid <SEP> #40002","how come when i use 'import * as json from ""./config.json""'"
Summarization," <SEP> @Naktibalda type guard function would work, but this is simpler: ```ts  const field = req.files.field if (Array.isArray(field)) {     field.forEach(console.log) } else {     field.data } ``` <SEP> type guard function doesn't work for me <SEP> function isUploadedFile(file: ExpressFileUpload.UploadedFile | ExpressFileUpload.UploadedFile <SEP> @NaridaL it might be simpler, but it is a counter-intuitive to use a condition I expect to return false every time <SEP> why do you expect it to return false everytime? <SEP> and I got the same error about property in the else block <SEP> https://www.typescriptlang.org/play/#src=declare namespace Express {%0D%0A interface Request {%0D%0A files%3F%3A ExpressFileUpload.FileArray%3B%0D%0A }%0D%0A}%0D%0A%0D%0Adeclare namespace ExpressFileUpload {%0D%0A class FileArray {%0D%0A  <SEP> oh, right, assigning to a variable helps <SEP> Thank you very much <SEP> now the last one: File "".../index.d.ts' is not a module. <SEP> yeah, youre not exporting or importing anything, so it isn't a module... <SEP> does `import 'mod'` <SEP> alternatively, just ref the file? <SEP> are there any other express plugins? see how theyve done it",guard function does not work for field.forEach(console.log)
Summarization," <SEP> In my encounters with typescript, I've often wished for a way to quickly extend a foreign object, such as the default Error object, without having to jump through hoops. `let err = new Error('oops'); err.status = 500` results in a warning about `err.status` being a non-existing property. Is there anything similar to the following, in pseudo-code: `augment Error: { status: number }`? <SEP> @Chiefo just augment the global def ``` declare global {  interface Error {   status: number  } } export {} ``` <SEP> @simplysh Thanks! :+1: <SEP> no worries",is there a way to quickly extend a foreign object?
Summarization, <SEP> Seems like Google doesn't understand DST <SEP> It's complaining that my time settings are wrong <SEP> When we just skipped an hour because of DST,Seems like Google doesn't understand DST  
Summarization," <SEP> I've found that data validation libraries tend to have shit error reporting <SEP> validation and mapping <SEP> Are there any that are decent? <SEP> Even io-ts isn't great with it <SEP> Especially when you start composing more complicated types <SEP> Basic example illustrating my point <SEP> https://runkit.com/embed/dx1uapqvnfpt <SEP> ! <SEP> The ""ideal"" library would factor out duplicate assignability errors <SEP> The problem is that a lot of it is based on composing functions <SEP> And not enough about being data-driven/declarative and how to merge these declarations in a way that removes redundancies and improves error reporting <SEP> i've written a custom io-ts reporter and it's possible to turn its errors into something friendlier, but it can be pretty messy and it's probably not fool proof <SEP> It's a gripe I have with my own data validation/mapping library, too <SEP> I was so focused on getting it to work, I left error reporting as an after thought and realized I can't just tack it on",are there any data validation libraries that are decent?
Summarization," <SEP> Hi, I'm doing a todo app in typescript/react/redux. Does anyone quickly see what is the error due to in this simple  <SEP> Looks like `connect` is expecting a function instead of a class, though I haven't used redux so might be missing something. <SEP> Connect does indeed expect a class <SEP> that looks like it should work unless you're using old versions of typings <SEP> Oh i think i see the problem @Ctaque <SEP> yes ? <SEP> you're todo function returns void, whereas the signature returns a Todo <SEP> your addTodo function** <SEP> if you just test my theory out by putting ""any"" instead of void and you see the error go away that is where your problem lies <SEP> so it would be addTodo?: (todo: TodoModel) = <SEP> in props <SEP> hmm still the same <SEP> Hmm give me a sec <SEP> ok you still around? got it <SEP> yes <SEP> got this from the documentation : connect( <SEP> yeah sorry my bad taking a look a typings now <SEP> in you're props <SEP> just change addTodo to mandatory <SEP> ``` import * as React from ""react""; import { connect, Dispatch } from ""react-redux"";  export interface IProps {  addTodo(todo: string): void; }   export class Footer extends React.Component <SEP> yeah i see the two problems. <SEP> yes! <SEP> @Ctaque sorry for fucking you around haha <SEP> cool so basically <SEP> hehe <SEP> if you want optional feilds in your props <SEP> you need to do this.... <SEP> thanks <SEP> ``` export function mapDispatchToProps(dispatch: Dispatch <SEP> note the ""Partial <SEP> Thanks for the tip <SEP> Looks like you have to use a type assertion. ```ts enum E {     a, b } function returnsEnumKey(key: E): keyof typeof E {     return E",connect is expecting a function instead of a class 
Summarization," <SEP> Hy guys, does someone knows how to type a react component that i'm sending at a function argument? ```ts function routeHandle(state: contextAPI.contextType, Page) {  return  <SEP> Does it matter what is the signature of this component? You could use `React.FunctionComponent` for stateless component `typeof React.Component` for classes. <SEP> worked <SEP> thanks <SEP> Actually, I've dug up a `React.ComponentType` which is a union of class and function component. <SEP> it also works <SEP> it is weird this page dont teachs about this: https://www.typescriptlang.org/docs/handbook/jsx.html#stateless-functional-component <SEP> Oh, I find TypeScript handbook a bit lacky. I've found the types for components  <SEP> that is ironic <SEP> lmao",how to type a react component that i'm sending at a function argument
Summarization," <SEP> Sorry to bother again, but in searching the forum, this looked relevant to my earlier question, but I don't fully understand what it's doing. ``` type DataKeys <SEP> I'm still torn on remote work.  I have flexibility to work from home when I need to (also I live an hour from work) but I've done full remote before.  The problem was specific to that job, but I've generally had a better experience by being in the office. <SEP> what's the skill level like - if it's possible to put into words at all. <SEP> @jcairney yeah that's the 'get keys with this value type' I think. <SEP> @tonisostrat Skill level of what? Lots of topics and ppl here. :) <SEP> It's got 3 main parts probably <SEP> yeah, it was a very broad question, never mind. <SEP> first you say, for each key in T, find out if it's function-valued.  If so, the output type has `never` for that key.  Otherwise you get the key name as the value. <SEP> ```ts { foo: number, bar: Function } // becomes { foo: 'foo', bar: never } ``` <SEP> @tonisostrat Ask away.. I just wasnt clear who/what your question was directed at. <SEP> Thanks @keithlayne .  Why is it necessary to append the object with  <SEP> now you apply the index `keyof T` which is `'foo' | 'bar'`, which gives you a union of all the *value types* from that object.  In this case, `'foo' | never`, which is just `'foo'`, which is a union of all the non-function valued keys. <SEP> naah, i think it's unanswerable anyway. what i was getting at is i've been a dev for close to 11 years now, i've worked on a fair number of projects, built multiple large-scale systems from scratch on my own yet i have no idea how i might stack up compared to ""talent"" from other countries. i've never thought about working for a foreign company so i've started wondering whether i'd be good enough to compete with other people there - because i know my country's talent pool is quite small and definitely not indicative of the wider world. <SEP> @tonisostrat FWIW with a few exeptions because of govt influence, I dont find that which country you are in affects avg dev quality. <SEP> In one large populous country the govt had a policy of ""go into IT, we'll pay, and you can make money"". Over more than a decade this caused a LOT of unqualified people to go into the field simply because ""it was good money"". But factors like that aside, people are people and every country has good devs. <SEP> Ive lived in (and currently do) some of the smallest countries in the world and they have fine devs. Does your country have more than 40,000 people? :)", if it's possible to put into words at all?
Summarization," <SEP> Hmmm I can't find any github issues... that or they're poorly named. Eitherway, I think I might open an issue up at somepoint <SEP> yeah, I tried looking for it as well, but it's not easily searchable <SEP> I've got an answer <SEP> the only way to fix it seems to be `extends Base implements Mx` on your subchild",can not find any github issues that or they're poorly named
Summarization," <SEP> Are you talking about a stand-alone client? Or another browser-based client, a la Riot/Element? <SEP> @AnyhowStep For example, changes to whether or not the timezone is using DST or not. Some islands near the international date line have moved from one side to the other. <SEP> Ah. That makes sense. I think I've seen news about Canadians being pissed they're not removing DST yet <SEP> I want permenant DST so that the sun doesn't set before I get off work.",how about a browser-based client like Riot/Element?
Summarization," <SEP> @PaulKujawa the compiler doesn't do control flow analysis through function calls (see #9998) so the relationship between the input and output has to be captured in the function's signature if the compiler is expected to know about it.  The function's signature for the version you wrote is something like `(stepName: ""foo"" | ""bar"") = <SEP> I love this so much: http://tinyurl.com/stack-hints <SEP> That and ",is there a way to capture the relationship between input and output in a function's signature
Summarization," <SEP>  the trouble comes when you consider that if someone forgot to make a field private  Developers forget many thing everyday <SEP> But an elegantly designed language is not responsible of that <SEP> I was talking about JS but having TS in mind <SEP> If so many of us don't like it, they ought not to adopt it. Not ? <SEP> Except it is not a language designed for us <SEP> In the end the only thing that matters is what the committee members think, all we can do is try to appeal to them.  Failing that Im not sure theres much else that can be done :frowning: <SEP> Its not a democratic process <SEP> That's exactly what I'm thinking",what is the point of adopting a language that is not designed for us?
Summarization," <SEP> https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-d-ts.html <SEP> https://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html <SEP> And if I need to patch any existing declarations, I really just need to reverse engineer it however they did it <SEP> So, if this testcafe library properly used export interface TestController {} ... my patch would do the same? <SEP> That's the part that's still a bit of voodoo magic to me, fixing others' declarations <SEP> Because of the node module resolution stuff, it is tricky to track down <SEP> afaik if it was doing that, your original patch was correct <SEP> Cool, alright, thanks for your time, forgive my pedanticness ;) <SEP> you're welcome <SEP> ah, thanks. Hey, any way to hint the return type as something that extends T, rather than T itself? Not sure if that even makes sense, to be honest. Still new to Generics. <SEP> Doesn't make sense at first glance... <SEP> anything that extends a T is also a T <SEP> heh, fair enough. Yeah, good point! <SEP> unless you know the specific type?",what if this testcafe library used export interface TestController？
Summarization," <SEP> Sometimes TS makes me suffer. I'd like to assign an empty array to a property and face with this: <SEP> ! <SEP> How is TS supposed to determine what belongs in that array if you don't tell it by typing the whole literal? <SEP> I'm sure that's simple enough but please explain how to set a value correctly <SEP> Difficult to say without seeing more code, if there is an interface that describes the object, `const someVar: InterfaceType = { ... }`, if not, you could create an inline type `const someVar: { minimapGroup: string <SEP> Resolved <SEP> ! <SEP> I just set an empty interface <SEP> to the object which the property belongs <SEP> That... isn't a good resolution. The `Builder`interface and `Builder`object are being merged, which is hiding the error without really resolving it <SEP> ```ts interface IBuilder {   body: HTMLElement,   html: HTMLElement,   dimensions: {     body: { x?: number, y?: number }     ...   }   ... } ``` <SEP> thanks for clarification! <SEP> it's a good idea to name interfaces with 'I' <SEP> I don't like the style, but since `Builder` was already capitalized, it seemed the least intrusive way to differentiate <SEP> Yea, looking at the code now, I think you can refactor it a bit to avoid needing to type everything manually... give me 5 minutes. It depends on the project. For API responses I'd probably have a separate file dedicated to interfaces just for the API, or potentially include it in whatever file talks to the API <SEP> The fact that you are using a singleton instead of a class makes using class syntax painful. I guess a namespace will work...",how is TS supposed to determine what belongs in that array if you don't tell it by typing the whole literal?
Summarization," <SEP> yep, I have a ZNC connected up to gitter, right now <SEP> If you hover over the little checkmark next to a new message, the initial set of users who have ""seen"" the message are all from IRC <SEP> so there's ~4 people who are on IRC right now <SEP> the good old days on SO were great <SEP> But then I saw that google was indexing it and I got a little scared.  Kind of the opposite problem. <SEP> I was not so well-behaved at that time. <SEP> I was, and still am sad that they started locking/deleting ""off-topic"" posts <SEP> or ""opinion"" posts <SEP> It Is What It IsTM","the initial set of users who have ""seen"" the message are all from IRC"
Summarization," <SEP> I'm using postgres.  I have a script that generates a schema from a CSV description from a data provider.  I have to go in and add the PKs and FKs manually.  I just tried that syntax and it worked, so I kept using it. <SEP> makes me wish I didn't name the schema something with 11 letters. <SEP> https://www.postgresql.org/docs/9.1/sql-createtable.html  <SEP>  where column_constraint is:  <SEP> So, I guess it's valid =x <SEP> I have the opposite problem sometimes where my table names go beyond 64 characters (MySQL limitation) and I need to abbreviate and document the abbreviations",is it possible to name a schema with 11 letters?
Summarization," <SEP> One more note: my `Float64Array`s are always instantiated with a plain array as seen in my above snippet, so a solution that wraps around the typed array construction is also good. Pivoting to just creating a function that takes a fixed-length plain array of numeric values and returns a `Float64Array` <SEP> This one didn't work out either: ``` interface transformMatrix2d extends Float64Array {BYTES_PER_ELEMENT: 8, byteLength: 72} type _literalArrayMatrix2d =  <SEP> The above snippet works fine if I shorten to `interface transformMatrix2d extends Float64Array {}` but then I suppose there's no longer a check for the length. These functions eg. `translate` will yield a `transformMatrix2d` and I'd like to get a compile time error if I attempt to call something that needs a `transformMatrix2d` with for example a `transformMatrix3d` which also happens to be an extension to `Float64Array`.",'interface transformMatrix2d' extends Float64Array
Summarization," <SEP> Hi guys; regarding #3510 -- still are there any plans to release TS 1.5 for VS 2013 as an installer/extension before VS 2015 release in 2 weeks? If not, will 1.5.2 roll out on July 20th with VS 2015? <SEP> @LordJZ it will be going out at the same time as VS 2015 <SEP> Really though, we're mainly hoping to reduce the latency between releases for users; we will be learning what works best as we go along.",TS 1.5 release for VS 2013 before VS 2015 release 
Summarization," <SEP> @CyrusNajmabadi it's not building for me: ```  matthewadams   <SEP> @CyrusNajmabadi  I copied exactly what you pasted into your message at https://gitter.im/Microsoft/TypeScript?at=5bcf558682893a2f3b2a854d <SEP> @CyrusNajmabadi please pull the `cyrus` branch of my repo <SEP> i was just givng you the types/signatures to use. <SEP> Oh. oops. <SEP> @CyrusNajmabadi which `tsc` compiler option value for `module` do I want to use to replace `import .. from ...` with `const ... = require(...)`? <SEP> you *want* to use const/require? <SEP> instead of 'import/from'? <SEP> yes, I'm running on node.js <SEP> or you want tsc to emit things as ""const/require"" <SEP> emit `const`/`require` <SEP> ok <SEP> and see which one gets you the output you want :)",what is the tsc compiler option value for module
Summarization," <SEP> ~~~typescript export const db1 = {   'todo': dbm('todo'),   'time': dbm('time'), }; db1.todo.findMany().then(console.log);  // const models: (""todo"" | ""time"") <SEP> Just T is fine but I like to be explicit <SEP> @webstrand Thanks for finding the related issues <SEP> Added those two to my issue <SEP> ~~~typescript // dbm('model').action runs db.model.action on the server const dbm =  <SEP> The problem is it's not my code, but generated, i.e., it can change.",why doesn't db.model.action work on the server?
Summarization," <SEP> I have an electron project using typescript, but I'm having a tough decision to make... The ""main"" process is node only and does not have DOM apis (like Buffer, HTMLElement, etc) but the electron.d.ts refers to those, so I can't get it to build. Is there any guidance on how to make this work? <SEP> Or, do I just need to add DOM to the main process libs? <SEP> Just add `""lib"":  <SEP> that's the tough choice, so if i declare DOM, then there's APIs that don't always exist, but i guess it still beats untyped javascript <SEP> i have a class that extends Error, but the methods defined on class don't make it onto the instances. I noticed the __extends helper has changed, did I miss a memo? <SEP> i dont think so <SEP> repro? <SEP> https://www.typescriptlang.org/play/#src=console.log(%22Test...%22)%3B%0D%0A%0D%0Aclass%20CustomError%20extends%20Error%20%7B%20%0D%0A%20%20%20%20public%20toJson()%3A%20string%20%7B%0D%0A%20%20%20%20%20%20%20%20return%20%22toJson%22%3B%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Aconst%20a%20%3D%20new%20CustomError()%3B%0D%0Aconsole.log(a.toJson())%3B <SEP> run and open F12 <SEP> it's this line: <SEP> _this = _super.call(this, message) || this; <SEP> shouldn't it be: _this = _super.call(this, message) && this; <SEP> no, if super returns a value you want to use it <SEP> oh i see <SEP> but it won't have the methods defined on this <SEP> so maybe it should return this instead of return _this <SEP> i'm about to give up on typescript 2, the migration from 1.8 has been a big pain <SEP> is there any documentation on breaking changes?",electron.d.ts does not have DOM apis
Summarization," <SEP> TypeScript newbie. I'm trying to store a subclass of an abstract class in a holding variable, then instantiate that subclass later. Problem is, I won't know which subclass is in the variable. I'm getting tripped up when I try to instantiate the held variable. Here's a minimal example:  ```typescript abstract class Foo {}  class Bar extends Foo {}  const holding: typeof Foo = Bar;  const fooDerived: Foo = new holding; // Cannot create an instance of an abstract class. ``` <SEP> What is the proper way to go about doing something of this effect? <SEP> You could let typescript infer the type: ```ts const holding = Bar; ``` Otherwise ```ts const holding: typeof Bar = Bar; ``` <SEP> unless you need `holding` to store an *arbitrary* subclass of Foo? <SEP> ^ Exactly this. <SEP> then, you may have luck with this: ```ts abstract class Foo { } type FooSubclass = typeof Foo & {     new (): Foo; }  class Bar extends Foo {}  class Baz extends Foo {     constructor(_: string) { super() } }  const holding1: FooSubclass = Bar; const holding2: FooSubclass = Baz; // produces error: this will need a different solution  const fooDerived: Foo = new holding1; ``` <SEP> Yep, that should work. All my subclasses have the same constructor sig. Thank you! <SEP> Back again with an another question. This might be a JavaScript issue, as I'm pretty unfamiliar with how classes map to constructor functions. I'm trying to access an abstract property in the constructor of the super class. ```typescript abstract class Speaker {  abstract message: string;  constructor() {   console.log(this.message); // Abstract property 'message' in class 'Speaker' cannot be accessed in the constructor.  } }  class Greeter extends Speaker {  message = ""Why, hello there.""; } ``` <SEP> I thought I could just fix this by moving the point of access into a method, but that just results in runtime issues: ```typescript abstract class Speaker {  abstract message: string;  constructor() {   this.speak();  }  speak() {    console.log(this.message);  } }  class Greeter extends Speaker {  message = ""Why, hello there.""; }  new Greeter(); // undefined ```",how to store subclasses of abstract classes in a holding variable?
Summarization," <SEP> https://paste.ee/p/oOb17 <SEP> I'm almost certainly missing some of the pieces needed for the HoC to work <SEP> but I was just trying to start with ""Okay, I have this class, let's see if I can figure out how to give it props from the wrapped class"" and came up blank. <SEP> Sorry if this crosses the line from TS to React, it's kind of one of those in-between questions heh. <SEP> well that's a decent percentage of the questions here, so no worries <SEP> but I presume both React and TS are ubiquitous enough that I could probably get an answer in either channel, and people would be understanding. <SEP> playground <SEP> @AlexMax  <SEP> also, don't need `as const` on line 60 <SEP> JSX appears to be broken in that playground now <SEP> I think I have something that at the very least compiles <SEP> I messed up some stuff, just a sec",can't figure out how to use as const on line
Summarization," <SEP> Hi: someone can help me on how 'organize' code? The question is: it's better to create a .ts file with 'export interface Ixyz' or declare a namespace and put interfaces into it? like 'declare namespace MyCompany { MyEntity : { Ixyz...'? <SEP> namespaces are a legacy feature; don't use them outside of ambient typings <SEP> ok ..it's legacy related <SEP> in what way <SEP> sorry: another question: it's better to create a lot of 'export function Xyxz' or to create a single 'const class export'? like 'export const MyLibrary = { MyFunction()...'? <SEP> `const MyLibrary = { ` is not a class <SEP> hmm yes you are right it's a simple const <SEP> and no, just export functions from a module <SEP> or possibly make them static methods <SEP> hmm static methods? how? <SEP> can you give me an example, please? <SEP> you're not going to have a good time if you have to ask things that can be looked up <SEP> `aicdev` static as keyword <SEP> I'm sorry: I read a lot but I miss something and I need to understand the differencies <SEP> `aicdev` All information about classes and access modifiers: https://www.typescriptlang.org/docs/handbook/classes.html <SEP> google ""typescript static methods"" without the quotes <SEP> got it, but why it should be better than simply export a function from a module? <SEP> who said it's better <SEP> you say 'or possibly make them static methods' <SEP> it's an option <SEP> ok",how to 'organize' code?
Summarization," <SEP> 10ms roundtrip to chicago <SEP> well.. 15ms anyway <SEP> I just said all that to arrive at the point that streaming usually only happens in the first half of the month here <SEP> And well, boxed sets seem like a great tradeoff consdering how hard it is to get dr. who here <SEP> I've been told I talk too much <SEP> eh, it's fine. <SEP> backblaze will ship a hardrive to you, if you fill it up with goodies <SEP> video conferences are fun on satellite.  I (am working on it but) tend to interrupt people.  The COO does too.  It's all wacky fun when we have meetings and I have like 1000ms latency. <SEP> 1tb/month is 395mbps... wow <SEP> i didn't know you could stream meetings over satilite, that's impressive <SEP> our cap is 100GB now.  When I was stuck with verizon it was 30GB for like $150/mo with TEN DOLLARS PER GIG OVERAGE <SEP> no, my math is wacked that's 3.3kbps <SEP> I have three kids, we had some bad months <SEP> I throttled everyone but me at the router for a while <SEP> my current cell plan has no cap, but they throttle you after 22Gb <SEP> that is pretty darn good. <SEP> unless it's super expensive <SEP> Nope, four sim cards with the same plan works out to 100 a month <SEP> I'm using cricket wireless, though I can't find my plan on their website <SEP> you mean you buy a 4-line plan and only use one or you switch sim cards? <SEP> like some kind of spy <SEP> that'd be pretty cool... I remember seeing a pci card with slots for four sim cards <SEP> that's far more boring than the spy version.  You should stick with that.",streaming only happens in the first half of the month 
Summarization," <SEP> if I'm defining a class and the constructor takes a function which should itself take an optional object as a parameter, how should I type that? <SEP> correct that, the function parameter for the constructor is optional too <SEP> (the function comes from outside the module) <SEP> as in, this is a package. <SEP> is there a way to define an interface that is a function ? <SEP> so that accepts parameters and has a return type but also has members? <SEP> you can add a call signature to an interface",is there a way to define an interface that is a function?
Summarization," <SEP>  <SEP> the  ```ts import x from ""blah"" ```  syntax is purely for if there is a `default` export - basically, when an exported value should represent the module <SEP> That works.  Any idea off-hand what that compiles to in SystemJS module?  The same as `import _ from 'underscore'`? <SEP> Is there a way to do the {} syntaxt?  `import { _ } from 'underscore';`? <SEP> (the above doesn't work, but it is what I would like). <SEP> Also, is there a way to ""unpollute"" my global namespace?  I'm guessing not without modifying the d.ts file.  :/ <SEP> At the moment, TypeScript thinks that `_` is globally available but that isn't true. <SEP> You may need to discuss that on DefinitelyTyped; I'm not certain what the semantics are of import underscore <SEP>  <SEP> More generally speaking, how does one create a d.ts file that has no global exports? <SEP> ```JavaScript System.register( <SEP> That is, I want a d.ts file (I don't mind doing it by hand) that doesn't pollute my global namespace. <SEP> Actually... I may have figured it out... <SEP> The trick appears to be this: ``` declare module ""underscore"" {  export interface ... { ... }  export interface ... { ... }  interface UnderscoreStatic { ... }  export var underscoreType: UnderscoreStatic;  export function underscoreMethod <SEP> I did have to touch the downloaded d.ts file unfortunately.  :( <SEP> I wonder if there is a way to auto-magically do this? <SEP> I can at least now do: ``` import { underscoreMethod as underscore } from 'underscore'; ``` <SEP> And I don't have any global namespace pollution. <SEP> I have yet to see if this ends up being compatible at runtime though... <SEP> The problem here is that T is undefined.  Normally, my method signature would be `methodName",is there a way to do the {} syntaxt?
Summarization," <SEP> I just don't get intersection in Typescript. `type Intersect =  { name: string } & { age: number };` results in type `Intersect` being `{ name: string, age: number }`. Shouldn't it be `undefined`? <SEP> You're thinking in terms of values, the meanings of ""intersection"" and ""union"" are reversed when speaking of types <SEP> I don't get it. <SEP> Your example is an intersection because the type matches only those values with *both* a name and age, i.e. the intersection of the set of objects with a name and the set of objects with an age <SEP> But I would expect the intersection of these two sets to be an empty set, because there is nothing common. <SEP> Why?  Any object of type `Intersect` can be assigned to either of the two types (assuming it's not a fresh object literal) <SEP> Oh. wow. Finally, I think I understand. Thanks a bunch, this has been bothering me since quite a while. <SEP> There was a discussion about this a few weeks ago but Gitter's search interface is awful and I can't find it now :frowning: <SEP> The thing is, with the specific exception of directly assigning from an object literal, TypeScript doesn't actually care about extra properties on an object <SEP> As long as the ones named in the interface are there and have the correct types, you're golden <SEP> That's really all the typechecker cares about: assignability",what is the meaning of 'intersect and 'union' in typescript
Summarization," <SEP> This is probably the better place. Is it possible to setup `tsconfig` to allow aliases for file paths? Similar to how webpack does it? <SEP> `import { DashboardView } from 'pages/dashboard/dashboard.view.ts;` <SEP> Hmm <SEP> The way Webpack deals with bundles, and updating them in development is really miles ahead of the JSPM approach <SEP> No one wants to sit through 100 XHRs to load their app in development",is it possible to set tsconfig to allow aliases for file paths?
Summarization," <SEP> ctrl+shift+p <SEP> you're on windows or ? <SEP> windows <SEP> latest vs code I guess <SEP> weird, are you using a workspace or just a regular folder opened? <SEP> Maybe it's just working for workspaces <SEP> it is a project folder <SEP> angular project <SEP> hmm that's weird <SEP> your typescript version is showing up at the bottom right though? <SEP> where in there? <SEP> do you see in the screenshot? <SEP> Yeah but both times it's either not in the screenshot or the notification is over it <SEP> ! <SEP> hmm I do not seems to have it in there <SEP> hmm does angular somehow abstract away what typescript version it is using or something? <SEP> oh it is there but they both are different <SEP> ! <SEP> it should be ideally 2.9.2 according to json file <SEP> !",typescript version is not showing up in the screenshot
Summarization," <SEP> Wait... then how do I limit argv input to a type, in any way at all? <SEP> oh okay <SEP> Ah yes I could do that. <SEP> I brought this up before. In my case, the first arg must match `type AppName = 'editor' | 'terminal'`. <SEP> I was assuming you want to narrow the individual values, not the whole `argv`.  That would I think require a type predicate. <SEP> There are actually four AppName in total so not too many, but I probably don't want to duplicate the strings agai if I don't have to. <SEP> I'm just doing `const app: AppName = args <SEP> If I have `const appNames =  <SEP> Then I could go from there.",how to limit argv input to a type?
Summarization," <SEP> the d.ts stuff? Its just a PITA when devs have other things to do. Its the right way of course, but often a pragmatic choice is made to shortcut and go to any and return to a d.ts later. <SEP> Speaking of .d.ts I have a basic question <SEP> the moment he stops, I'm fine with him <SEP> if you look at the compiler output as it tries to resolve dependencies, IIRC it prefers `.ts` files over `.d.ts` files, so why does the default configuration of TSC still output `.d.ts` files for TypeScript? <SEP> because they are ambient <SEP> I think that's the preferred default <SEP> I guess if `tsc` uses the `.ts` files why even generate the .d.ts files? <SEP> there's things an ambient context can do that a non-ambient context can't <SEP> certain types of declarations, etc",why does the default configuration of typescript still output.d.ts files
Summarization, <SEP> http://stackoverflow.com/questions/41333147/why-arr-entries-for-loop-does-not-work-in-ts <SEP> ? <SEP> ``` const list = document.querySelectorAll,why array entries for loop does not work in ts?
Summarization," <SEP> let's assume that the static method doesn't exist, what would the mixin code look like? i can't wrap my head around it <SEP> The implementation gets kind of messy... types aren't that bad though.  ```ts // https://stackoverflow.com/a/50375286/7186598 type UnionToIntersection <SEP> Full demo <SEP> I probably missed something in the implementation of `mixin`.",what would the mixin code look like if the static method doesn't exist?
Summarization," <SEP> ow. https://github.com/Microsoft/TypeScript/issues/6496 has just bitten me <SEP> is https://github.com/ReactiveX/rxjs/issues/1858#issuecomment-257008634 a good solution for now, or are there better workarounds while we wait for a fix? <SEP> anyone use ts-node successfully? I always get ""cannot find module 'fs'"" <SEP> ```         ""baseUrl"": ""."",         ""paths"": {             ""*"":  <SEP> did the trick in my `compilerOptions` <SEP> ``` removeComments: true ``` does resolve it, but doesn't seem right that it should break on false. <SEP> TS file in question ``` import { JurisdictionDropdownLoadDecorator } from 'app/JurisdictionDropdownLoadDecorator';  // comment ``` <SEP> Version 2.1.4",can not find module 'fs' when using ts-node
Summarization," <SEP> @MicahZoltu  <SEP> Definitely makes me think you're hitting some kind of weird edge case bug <SEP> Well that's fun - import maps, at least as implemented in Chrome, can cause multiple copies of a module to be loaded.  Don't know if that's a bug, or intended behavior (I certainly hope not!) ```ts // note: these resolve to the same file with the same URL import TestHarness1 from './testHarness.js'; import TestHarness2 from '$/testHarness.js';  console.log(TestHarness1 === TestHarness2);  // false! ```  This actually breaks some things in my game",import maps can cause multiple copies of a module to be loaded
Summarization," <SEP> You mean with different numbers of generic arguments? Nope <SEP> You can make some of the arguments optional, though <SEP> by doing `T extends string = ""foo""` <SEP> I want to make a type that describes a function that can overload the `this` argument type. <SEP> Can you make a playground with some code showing what you're trying to achieve? <SEP> You may be looking for this syntax? ```ts type FooFn = {     (this: string): string;     (this: number): number; }; ``` <SEP> Like this: ``` export type KernelFunction <SEP> Do you see how the `this` has to come last, because the args are more frequently defined? <SEP> But it throws off the composure because when defining a function, this _optionally_ comes first. <SEP> Ah, yeah, that problem is annoying. <SEP> This is the original: https://github.com/gpujs/gpu.js/blob/d16b5eca5bc4e784eeaabca94bfe1114e767433b/src/index.d.ts#L456 <SEP> If I could just overload the type, which seems like you'd be able to do, because it is just describing a type, and isn't actually a definition of anything, then it'd be fine. <SEP> Like this: ``` export type KernelFunction <SEP> Why not avoid the generic altogether? ```ts export type KernelFunction <SEP> Because `this` is modifyable, in that I can have constants that are accessed via `this.constants.myConstant`. <SEP> And the items that consume `KernelFunction` start to want to know what the shape of `this` is, and then code grows quickly. <SEP> I'm still not understanding something. This is just a type, if a function that implements this type wants to have a more strict `this` type than `IKernelFunctionThis`, it can do that. <SEP> The problem is that an instance of `GPU` and the function that is represented by `KernelFunction` don't currently know about each other in the context that I'm working from, which is `brain.js`. <SEP> This is because for GPU all the values that are textures share only one context. <SEP> for example: ```ts type TransformerFunction <SEP> If that doesn't help, can you make a simplified playground example showing what you're trying to achieve? <SEP> the index.d.ts is too long to be easily understood without context. <SEP> Unfortunately, I suspect what you're trying to do is logically impossible",is there a way to override the this argument type when defining a function?
Summarization," <SEP> HELLO THERE  I am facing problem with my angular 4 ..... it's giving an error <SEP> Left side of comma operator is unused and has no side effects. <SEP> what does it mean <SEP> @NaridaL Carrying with my problem from Wednesday: ```typescript declare module ""*.pug"" {  import pug = require('pug');  const content: pug.compileTemplate;  export default content; } ``` I just discovered that I forgot to install `@types/pug` so the exported type was `any`.  I fixed that and now when I try to use a template I get ""error TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'typeof ""*.pug""' has no compatible call signatures."" <SEP> Here's the declaration from `@types/pug`: ```typescript export type compileTemplate = (locals?: LocalsObject) = <SEP> How do I sort out what's going wrong here? <SEP> @sanketsingh27 What's the line of code that's giving the problem? <SEP>  Wildcard module declarations  <SEP> @hinogi Was that quote directed at me? <SEP> yes, it seems to depend on the type of module and the loader you use <SEP> Yes, but I think the problem is with the type declaration, not the loader code (which isn't hooked into `tsc` at all) <SEP> Though I'm using Webpack in case it does make a difference <SEP> well I would assume if you have something different from `module: ""system""` or `module: ""amd""` <SEP> Webpack uses commonjs, but again I'm not understanding how that affects the type checking.",angular 4 comma operator left side is unused and has no side effects
Summarization," <SEP> Yeah, but I've never heard of anyone else encountering this issue. So, with a tweak to my code, it might disappear forever <SEP> You cant assign to a generic type - the compiler doesnt know the requirements of the type <SEP> It could be a `Fruit` but it could also be a `SuperFruit` or a `SuperMegaUltraFruit` etc. etc. etc. <SEP> But why does it only fail sometimes?  Hmmmm?  Smart guy? <SEP> Because TS is inconsistent as hell, probably",can't assign to a generic type sometimes
Summarization," <SEP>  i had another situation where i wanted to accept *any* type of enum object... theres no way to annotate that, sadly  What about `string | number` <SEP> Note that even for  ```ts enum E { A, B }  function fn(param: E) {}  fn(E.A); // ok  fn(1); // ok also ``` <SEP> Worse <SEP> ```ts fn(4); // worse, ok also ``` <SEP> Even as `4` match no enum in `E` <SEP> TypeScript or my idea",is there a way to annotate enums in typescript?
Summarization," <SEP> https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types <SEP> Ah... so like  <SEP> ? <SEP> One manual solution would be to manually install the test-only modules in the spec directory <SEP> e.g. ``` cd spec npm install @types/jasmine ``` <SEP> But then Travis won't know to install those modules <SEP> Also my project consists of a number of secondary modules, each with their own tests folders. <SEP> I'm not sure how you automate that however.  I don't know if package.json can be configured to install in two different places. <SEP> e.g. /core/collections/map/tests <SEP> If types is specified, only packages listed will be included. For instance: <SEP> One very rude solution would be to put your tests in a separate project entirely... ``` workspace/foo   /package.json workspace/test-foo   /package.json ``` <SEP> @westonpace hehe, not gonna do that :-) <SEP> @NaridaL Specifying types overrides the automatic inclusion of @types? <SEP> yeah it will only load the ones listed. <SEP> @NaridaL thanks, I'll give that a go",is there a way to install test-only modules in the spec directory?
Summarization," <SEP> Even making code reviewing a hard time <SEP> But it's noa a justification. The justification is its one of the most common types. If they're shortening something that is long and unusable, then I'd call that justifyable, so long as its readable. Thats the critical part - that its readable <SEP> anyway I've got to - small children and whatnot. But this is interesting :) <SEP> I discovered another template lang today: Svelte (see https://svelte.dev/docs#DOM_events). Shortening into template is a strong argument but please, not in code, even more a code as library",shortening into a template is not a justification
Summarization," <SEP> hey folks, still struggling a lot with TS, can someone help me here? this code is using jQuery https://share.getcloudapp.com/YEu1GjkO <SEP> Hi floks ,can any help . How to make a local package of typescript and use in another  project of typescript <SEP> what <SEP> You said you don't want to use a package manager so you can just provide the `.ts` files for people to use directly in their project.  But that basically means you need to make sure they compile with the strictest possible settings <SEP> Better solution: Enable `""declaration"": true`, compile to `.js`, then provide the `.js` files and accompanying `.d.ts` <SEP> @goutamdh Are you talking about publish a typescript library to NPM? You write your TS package, compile it to javascript and publish that. However you make sure that your ""main"" attribute points to the javascript entry point and your ""typings"" points to the main declaration file. <SEP> He said above ""I don't want  <SEP> oh. Well then you are going to have to include the src code directly into the project... <SEP> I tried to publish multiple versions for `@types/react-bootstrap` (1.0 is a stub because react-bootstrap 1.0 has built in types, 0.32 is a full type def because react-bootstrap 0.32 does not have built in types) but the published `index.d.ts` is wrong... anyone know what I did wrong here? https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43756#issuecomment-611745423 <SEP> Nobody can use it then",how to make a local typescript package and use it in another project?
Summarization," <SEP> to us all <SEP> :point_up:  <SEP> @krainboltgreene I wasn't paying attention - what I wrote is wrong.  `B` needs to move to the inner function for it to work right, otherwise it will be inferred before the array is passed and always be `unknown` <SEP> like  <SEP> Actually, this will do: ```ts const append =  <SEP> but that's not the same as what you were doing <SEP> why does this code not pass the prettier formatter - ``` interface Theme {      <SEP> it formats the code <SEP> sorry <SEP> well doesn't do any thing",'B' needs to move to the inner function for it to work right
Summarization," <SEP> @david-driscoll I added a comment with my messages from above to your issue. <SEP> @david-driscoll  I tried with and without node resolution mode; seems to behave the same for me either way. <SEP> so above parent/moduleA, parent/moduleB, I have a `parent/node_modules/badpackage` <SEP> so that the logic looks up and sees the same package <SEP> @seanzer the issue is with two ""incompatible"" `Observable",node resolution does not work with 'parent/node_modules/badpackage'
Summarization," <SEP> So I'm having some issues with namespaces.  I want to be able to have a namespace that I can use to access references to names of events that my project uses. I'd  prefer to be able to do something like ```c  foo.emit(MyProject.Events.bar); ``` instead of  ```c foo.emit(""bar""); ```  But I can't for the life of me figure out how. <SEP> Is it react? <SEP> The only reason I ask is that CRAs settings wont allow const enums or namespaces. <SEP> Not using react, I'm using events from Phaser 3 <SEP> Are you getting errors? <SEP> yes <SEP> `Module not found: Error: Can't resolve 'configobjects/customEvents' in 'D:\Coding\game\learning-project\src\controllerobjects'` <SEP> BTW I would suggest doing something other than namespaces.  Are you splitting namespace members across files or something? <SEP> But that error doesnt really look like it has anything to do with namespaces. <SEP> ```c export namespace CollaborativeCanvas {   export namespace Events {     export const CANVASCLICKED: string = ""CanvasClicked"";     export const CANVASCONSTRUCTED: string = ""CanvasConstructed"";     export const COLORSELECTED: string = ""ColorSelected"";     export const CAMERAZOOMED: string = ""CameraZoomed"";     export const CANVASREADY: string = ""CanvasReady"";    } } ``` <SEP> I can't figure out what syntax I'm supposed to use to be able to do what I described <SEP> You consider using an enum for that? <SEP> The error you showed doesnt seem related to that code? <SEP> that code is what is in the file that vscode tries to import when typing something like CollaborativeCanvas.Events.CANVASREADY <SEP> I don't know how to make an enum accessible in way that I want <SEP> Just export it somewhere and import it somewhere else? <SEP> What if I want to group a set of enums? <SEP> But if you mean what I think, then ```ts export enum Enum1 {} export enum Enum2 {} ... ``` Then ```ts import * as Namespace from ./enums export Namespace ``` or something like that <SEP> like there are lots of stuff called Events, I can't figure out how to access that, I'd want it to belong to a namespace or something like I can do in other languages. <SEP> you can use module import/export to do that <SEP> I dont use namespaces, so I dont really know how to use them really <SEP> Im actually not sure of the correct syntax for what I wrote above on the export <SEP> Looks like `export { Namespace }` is the right way",can not resolve 'configobjects/customEvents' in 'D:'
Summarization," <SEP> @reggi  you can get the behavior you want if you use overloads. ```ts export function ServiceState <SEP> I didnt think overloads would work since it returns a class expression on the fly, but you need to specify return type for the overloads.  I always forget about `new` signatures <SEP> @keithlayne that sounds... vaguely familiar? <SEP> found it, #33101 <SEP> Huh, that wasnt one of the search results when I used your keywords <SEP> Oh yeah, I remember this one now <SEP> I used 'specific overload' <SEP> It seemed to pick components at random from different overloads or something weird like that <SEP> Any reason you bring it up?",new signatures doesn't pick components at random from different overloads
Summarization," <SEP> const radioStream = new RadioStream(app, this:Main); <SEP>  Supplied parameters do not match any signature of call target. <SEP> ahh ok <SEP> hm no <SEP> ```const radioStream = new RadioStream(app, this:Main);``` <SEP> this line throws that error above",suplied parameters do not match any signature of call target 
Summarization," <SEP> Hello, it is possible to remove the console.log with quantum build ? <SEP> I thought `interface` was a typescript concept? should it be in my output compiled ts? <SEP> @rohitsodhia no it shouldn't be in the ouput js <SEP> That's what I thought... I wonder why it's being outputted... <SEP> probably some configuration problemw <SEP> how are you compiling? <SEP> It's an Angular Cli project, so using the cli. It doesnt keep the interfaces for other files, but I'm wondering if I'm missing something <SEP> I can show the tsconfig.json if that'd help? <SEP> I looked through it previously, didn't see anything that might stand out <SEP> sure <SEP> which other files does it not keep the interfaces for? <SEP> But I'm largely inexperienced <SEP> ``` {   ""compileOnSave"": false,   ""compilerOptions"": {     ""outDir"": ""./dist/out-tsc"",     ""baseUrl"": ""src"",     ""sourceMap"": true,     ""declaration"": false,     ""moduleResolution"": ""node"",     ""emitDecoratorMetadata"": true,     ""experimentalDecorators"": true,     ""target"": ""es5"",     ""typeRoots"":  <SEP> So I have a utils.ts file that's outside the scope of the angular code, part of the `scripts` array in the angular-cli.json, meant to be a global file. Other interfaces I have in angular components don't show up in the Angular bundle. <SEP> I'm trying to figure out if I'm doing something wrong or its a bug in CLI for me to submit <SEP> and what command are you using to run it? <SEP> `ng serve` <SEP> the cli handles the build under the covers (sorry if you're an angular dev/have angular cli experience, not sure) <SEP> I'm not :P <SEP> Sorry, I know this isn't the channel for angular cli... im asking in the angular gitter as well, to see if this is my misusing the cli <SEP> I can't figure out if I'm doing the TS wrong or the CLI wrong <SEP> so stuck between <SEP> https://github.com/angular/angular-cli/wiki/stories-global-scripts <SEP> this indicates that it isn't compiling the scripts array <SEP> it just includes them <SEP> either import it normally <SEP> or use JS for the script <SEP> or compile them in a separate step <SEP> Hm... I could have sworn it's supposed to compile them, but you have a point <SEP> hey folks! I'm wondering why i get compile errors with the following:  Have a function in `file A` ```` export const doSomething = () = <SEP> because dosomething is a value <SEP> and sometype is a type <SEP> do you want type SomeType = typeof doSomething <SEP> ouch, that makes sense. Thanks! :)",is it possible to remove the console.log with quantum build?
Summarization," <SEP> I'm hitting a problem where a convenience config type erases the keys from the objects I used it for. Could someone offer a helping hand? <SEP> https://www.typescriptlang.org/play?#code/C4TwDgpgBAomCWBnA9gE2gXigbwFBSgDsBDAWwgC4pFgAneQgc32omJUKsIFdSAjCLVwBfXLlCQoAFVrFCiAGbJapYsHjJ5AHikA+KFjwEA2gGsIIKjXpMAulQAUAN2IAbbpWkBKA-usNmUVwAY00aWAAFAEkAZQB5ABEYAH0pACUAQQA5GIAxOLSAWQypKLic5IAhDISqGTlFZVV1MK04JDQIfUMWAHpeomR1YOhgAAs1KCioVE0AcmAiCAhUKGBkakhg+AUQNbHR8GhkBSgAA092lHQzqAPaCBYScmS5VGTENg4qTH0zgBJsBAAHTPCDCKAAaiggJBn3YmmEZxEYn6UHMIEQUCQ1DoAQAPjx+IJxEc1rJ5EoVMkMYhknxiKssBiTmsjqyYNF4klUpkcvkiiUyhVqgkxKF5ItObFEil0tk8gViqVyjFkgBxOKJAw4PoDPjcRbTWZLFbYxb3R4EMGvQjveHfKAOS4Ia4QHwYP6w0FkcFQmFA4EOxHIoJo2nYrEAIhtbw+X00UdJkjoDSppBpFjpjGQaB1LNOEggHK5st5CoFyuFas1iSAA <SEP> That kind of pattern unfortunately requires kind of an ugly hack. @VanTanev  ```ts function makeTransformations <SEP> Then, is there a better pattern that I should employ? <SEP> I'd just annotate the function arguments. <SEP> Hey all. Given `type PossibleKeys = 'foo' | 'bar' | 'baz'`, how can I indicate a key in an interface can be any one of those? e.g.  ``` interface Whatever {    <SEP> @diegoaguilar What is the goal here? <SEP> Wouldn't this be enough? ``` Omit <SEP> Or I'm misunderstanding you",a convenience config type erases the keys from the objects I used it for
Summarization," <SEP> Im having an issue with the triple-slash directives at the top of .ts files messing up chrome devtools.  Sourcemaps arent working right, and the actual breakpoints arent matching up against what I see in the devtools ui.  If I remove the triple-slash directive, debugging works right.  Anyone else seen this? <SEP> I have not, but is this a recent code base? <SEP> yes, Im working in it now <SEP> I am using gulp-typescript and gulp-sourcemaps, so trying to figure out if the issue is there. <SEP> I'm just wondering if you can avoid using `triple-slash` directives <SEP> if I understand this right I could list and order everything under `files` in tsconfig.json, right? <SEP> btw, it is angular 1.5 code that I decided to start writing in typescript - to see how I liked it. <SEP> yes, although the most approprate thing is to move towards modules <SEP> yeah, I hear you there <SEP> but what you can do is have one file <SEP> that does all the references <SEP> and then add that to your files or includes <SEP> I don't know if that will fix your sourcemap problem <SEP> ahh,  good thinking <SEP> what are you using to do your bundling? <SEP> usually problems with sourcemaps lining up are introduced during the bundling process <SEP> all glued together in gulp... <SEP> another `@todo` = webpack <SEP> the releases get bundled (1 file for the app, one for the libs), but what Im debugging now is not bundled. <SEP> so give  it a shot with centralizing all your references <SEP> I definately will.  thanks!",triple-slash directives messing up chrome devtools
Summarization," <SEP> `param.constructor.fromJSON(...)` <SEP> Hmm, does that work? <SEP> (I have never tried) <SEP> it works at runtime but i have no way to typecheck it <SEP> @MicahZoltu The point of covering OLD BROWSERs is second step. First I want to generate a JS which can work in normal way with latest browsers. Thats what I cannot do right now. <SEP> If you want to target bleeding edge, here is a template I use for most of my projects: https://github.com/MicahZoltu/browser-es-modules-template <SEP> Works directly in modern browsers without any bundling step. <SEP> Most people will bundle, and if you plan on doing that then I would use a different template to start with. <SEP> @MicahZoltu Thanks for repo link. I have to use bundle because my code will contain Swiper and also SCSS design. This Library will basically Render HTML widget. <SEP> so... is it just impossible to type check this? it's such a common use case and it's baffling me trying to do it <SEP> Is it really common? Never had a need to do x.constructor.foo()",does param.constructor.fromJSON(...) work at runtime
Summarization," <SEP>  <SEP> Because it just becomes, ``` type Halts = HaltingOracle <SEP> And, well, a primitive type isn't performing any computation <SEP> There is the diagonalization bug, though <SEP> ```ts type LoopForever <SEP> If `Halts` is `false`, we have a contradiction, ```ts type LoopForever <SEP> If `Halts` is `true`, we have another contradiction, <SEP> ```ts type LoopForever <SEP> I think I'll wait till April 1st to make this feature request and hope no one comes up with that diagonalization counter argument <SEP> I'm having an extremely dumb moment <SEP> how do i tell typescript that my type parameter T should be an object with keys <SEP> sorry, should extend an object <SEP> `function handleAnyError <SEP> i tried T extends Record",how do i tell typescript that type parameter T should be an object with keys?
Summarization," <SEP> Anyone have a good example blog post about converting from typings to @type ? <SEP> Is there a way to have a type guard for dotted names on a class instance? I.e., why does only one of these work:  ```ts class A{     value: number | string;          isValueNumber(): this.value is number {         return typeof this.value === 'number';     } } function isValueNumber(instance): instance.value is number {     return typeof instance.value === 'number'; } ``` <SEP> when declaring a tagged union for a class, is there a simple way to avoid the repetition, i.e. `class Foo { type: 'foo' = 'foo'; }` ? <SEP> Is there a way to find out what typings a ""lib"" object contains in typescript? like the lib ""es2017.object"" for instance <SEP> lol <SEP> Literally typed it out and realized I could go look in noide modules <SEP> Time for bed or something! <SEP> ```ts interface IRule {     msg?: string }  function printMsgOrDefault(rule: IRule): string {     return rule.msg || 'No rule' }  const result = printMsgOrDefault(123) console.log(result) ```  Why does this compile happily? If I omit `?` from `msg?: string` then I get an error (expected), but why not now?",is there a way to have a type guard on a class instance?
Summarization," <SEP> same difference <SEP> Set is unique keys, Map is unique keys.  Set you don't care about values. <SEP> @webstrand make `Set` privately inherit from `Map` with `Map` a subtype of `Set`.  Not confusing at all.","Set is unique keys, Map is unique keys"
Summarization," <SEP> I've used the term ""type predicate"" pretty often <SEP> That actually makes more sense than type guard.  A type guard is what you do at the call site <SEP> Hmmm... My generics work on every type which fits the criteria of being in the defined Checks interface... <SEP> Ah, gotcha, if I see overloads I try to remove them ;) <SEP> It's probably the only case where I would choose one or the other based on what the implementation looks like <SEP> My current thought is use generics if I have to, and if I need multiple implementations, make multiple functions instead of overloads. <SEP> Probably for the best.  Overloads are painful in TS",'type predicate' makes more sense than 'type guard'
Summarization," <SEP> any help? https://stackoverflow.com/questions/55318663/how-to-generate-d-ts-and-d-ts-map-files-using-webpack <SEP> @fatcerberus  ""I'm thinking ATL = awesome-typescript-loader https://www.npmjs.com/package/awesome-typescript-loader""  Is ATL still supported? I saw that the last commit was from months ago <SEP> @ShanonJackson niec. `typescript-transformers` sounds like the right direction. <SEP> Is this just completely impossible atm? ``` type X <SEP> As for how it would be useful -  ``` class AClass <SEP> But ig that doesnt *really* make sense <SEP> hm <SEP> oh <SEP> duh <SEP>  <SEP> Back to the first one - is there any way to group generic types? ``` type Structures = {   A: typeof A   B: typeof B } ``` Holds the classes, but how do you pass the generic properties? <SEP> I basically want to be able to `InstanceType <SEP> Sounds like higher-kinded types. <SEP> i'm packaging a library built in TS for use by other projects for the first time. the lib has some .d.ts files that augment types missing in its dependencies. those .d.ts files are not appearing in the packaged build. is there some compiler option i'm missing that will include those? <SEP> or is this something that downstream projects will also need to include?",how to generate d-ts and d-ts-map-files
Summarization, <SEP> I'm trying to create a class decorator ``` function injectShouldComponentUpdate <SEP> https://www.typescriptlang.org/play/#src=function%20injectShouldComponentUpdate%3CT%3E(clazz%3A%20T)%20%7B%0A%20%20%20%20return%20class%20extends%20clazz%20%7B%0A%0A%20%20%20%20%7D%0A%7D <SEP> what am i missing?,"how to create a class decorator function ""injectShouldComponentUpdate"""
Summarization," <SEP> yeah I was gonna say maybe run the code through something similar like typedoc, see if it looks like youd expect and maybe try to narrow down the difference. <SEP> Sadly the Compiler/Language Service APIs arent particularly well documented :frowning: <SEP> I dont know the compiler api but is there any chance that nullability of a type is somehow separate?  I just re-looked at your question and see that its only function return types - I assume everything else shows up like you expect? <SEP> sorry, just throwing out ideas at this point, I have nothing concrete to offer. <SEP> Just for fun: ```ts const f = (x: number) = <SEP> I was checking to make sure the `| null` was included when I moused over a function with a nullable return type and found that. <SEP> I was going to say thats not quite right, but I guess if x is NaN itll be falsy and then return null.  Hmmm. <SEP> If x is 0 it will be falsy too <SEP> No NaN is necessary <SEP> But if I change x to string then the return type still includes null, which I thought the compiler ought to catch <SEP> Yeah Im dumb, this has already been established <SEP> Empty strings are falsy too <SEP> DAGNABBIT <SEP> I was just showing somebody that fact yesterday <SEP> IMO they shouldnt be but yeah <SEP> dang it, I tried with an array and it doesnt include null.  I should be happy its right, but mostly just feel dumb/ <SEP> Sounds like its acting as if strictNullChecks is turned off for whatever reason (`|null|undefined` is then implicit for all types) <SEP> I have had a somewhat breakthrough though... o__O  I decided to log the node's type (rather than the type signature) and...  ``` node.type.getText(); ```  Correctly outputs `string | null`. <SEP> Hmm, so then it recognizes the null is supposed to be there, maybe its just theres a nonstandard way to check it (since strictNullChecks was added later) <SEP> File a bug in the docs :trollface: <SEP> Might have been a hackjob on the implementation",is there any way to separate nullability of a type from the compiler api?
Summarization," <SEP> any idea why it doesn't build, and how to fix it?  I switched to use tsconfig.json and now getting this error <SEP> now i get ```error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.``` <SEP> oh well, stupid typing regression I suppose.   ```var color: Color = (Color as any)",error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'
Summarization," <SEP> Hi guys. I've found some strange thing and I can't figure out where is the problem. I've tsconfig.json: ``` {     ""compilerOptions"": {         ""module"": ""commonjs"",         ""noImplicitAny"": true,         ""preserveConstEnums"": true,         ""sourceRoot"": ""./src"",         ""sourceMap"": true,         ""target"": ""ES5""     } } ```  but tsc ignores sourceRoot and compiles every single file in the top of the project.  Who knows why ? <SEP> Try setting outDir option <SEP> As far as I understood, outDir is not correct option, cause  ``` outDir: { description: ""Redirect output structure to the directory."", type: ""string"", format: ""uri"" } ``` <SEP> outDir is the setting you are looking for. and try set sourceRoot to `.""` <SEP> nope, at all <SEP> it compiles every single file in the project folder, even the node_modules <SEP> outDir option give me option to copy all structure of original files to specific folder <SEP> You need to set `exclude` options too. `exclude:  <SEP> I need to compile only typescripts from src folder <SEP> There is no such option in the http://json.schemastore.org/tsconfig <SEP> which `tsc` version do you use? <SEP> error TS5023: Unknown compiler option 'exclude'. <SEP> but I have the latest one",tsc ignores sourceRoot and compiles every single file in the top of the project
Summarization, <SEP> Basically you take the multiset of all the types  <SEP> You could do that at runtime too <SEP> Hmm I guess it would be tricky if all you have is `keyof someObj` though,can you take the multiset of all the types?
Summarization," <SEP> hi <SEP> @shexm hi there <SEP> ``` <SEP> first time use this site,maybe i should spend some time in learning how to ask a question. <SEP> ``` interface Counter {     (start: number): string;     interval: number;     reset(): void; }  function getCounter(): Counter {     let counter =  <SEP> if you don't get any compiler errors you need to double-check the tsconfig file. this function is a mess. <SEP> make the implementing function an arrow function and you should be good:  ``` let counter: Counter = (start) = <SEP> Is there a way to get the type of an imported json file using `""resolveJsonModule"": true` ? Like (pseudo) `import settings, { SettingsType } from './settings.json'` <SEP> @jacobmadsen do you mean with TJSON? <SEP> @alex-deas_gitlab No, `settings` is strongly typed when imported with `resolveJsonModule` and I want to change the type using a conditional type, so I need the type of `settings` <SEP> @jacobmadsen this works for me: ``` import settings from ./settings.json;  const f = (s: typeof settings) = <SEP> @alex-deas_gitlab Yes, so its like `type X = typeof settings` <SEP> Yes, from there you should be able to deal with it as a type and make changes. <SEP> Thank you <SEP> seriously why there is no `.delete` method in the array type... <SEP> Do i really have to `splice` it every time ? <SEP> Currently having an issue importing the electron app throwing errors while checking via `tsc`....  ``` error TS2724: Module ''electron'' has no exported member 'app'. Did you mean 'App'?  <SEP> The electron npm package has the `electron.d.ts` defined... but i'm not 100% familiar with these files to know if it's a real issue or what <SEP> yeah you can use infer aswell <SEP> ``` type PullArrayType <SEP> and generally you can use infer like that to pull any generic off any interface <SEP> https://gist.github.com/18e13a8e22b5aedf6e29b2606d423ea1 <SEP> how do i type this function so that it will catch when the combination would have a missing key <SEP> eg. if baz didn't have 'd' then this should break <SEP> essentially, the merging of foo bar & baz, or in fact any combination of input args, should have all keys a b c & d <SEP> so args should be any type that has a, b, c and d keys? <SEP> importantly, the combination of them MUST have a b c & d <SEP> but no individual must have those <SEP> so yeah no way to do it without some hand-work and limiting the length of args to like 3. <SEP> theres a reason for that aswell arrays can only have a single type so you can't use array to type args <SEP> so that leaves you with tuple <SEP> tuple can be used to type this but you'd need to do a tuple permutations type-level algorithm <SEP> beyond me <SEP> i'll show example <SEP> @ShanonJackson what i'm building up to is even worse <SEP> ``` type TuplePermutations =  <SEP> oh jesus <SEP> and you just keep chaining all possible unions that way <SEP> this is absolutely impossible <SEP> theres a type you can write that can generate them with abit of conditional types <SEP> hrm <SEP> perhasp my algorithm approach is stupid <SEP> typing it is going to be impossible <SEP> imagen that it's ```combine(objects: TupePermutations, functions:  <SEP> functions arguments in what way? like the argument to the function has to be all the objects passed through the tuples combined? <SEP> i.e   <SEP> yeah it's a bastard of a thing, it's even hard to describe, let me write it up",is there a way to get the type of an imported json file?
Summarization," <SEP> @brianjorden `Recipient <SEP> thanks <SEP> @timwis single element tuple type <SEP> eh yea actually I would have expected an error if I understand what you mean <SEP> I was wondering if it was possible to import ES6 modules into TS files with the `noImplicitAny` flag set? <SEP> I see there is a `declare module` syntax that can be used, but does this mean a declaration for each imported module? I would like to use this as a stopgap while we migrate from JS to TS, but adding extra module declarations (setting imported symbols to `any`) would require a lot of boilerplate. <SEP> ! <SEP> @mattmazzola seems like the issue has to do with generic syntax and actually affect Flow users as well. I am conjecturing based on the above <SEP> It seems to work if I remove `files` from `tsconfig.json` (it used to just specify `index.ts` and let the compiler find everything else) <SEP> @jjrv exclude is node_modules by default in the tsconfig, that might be it <SEP> At least `""exclude"": ",if it was possible to import ES6 modules into TS files with the 'noImplicitAny' flag set?
Summarization," <SEP> @wagerfield  <SEP> If you just want to enforce a particular base class: `T extends Base` <SEP> You cant make TS *not* try to infer `T` but you *can* constrain it <SEP> @fatcerberus yeah that makes sense, I think the only way to achieve what I want to achieve is using an abstract class. <SEP> @thegalah Heres a maybe solution: ```ts enum NavigationScreenType {   SplashScreen,   LoginSelectionScreen,   LoginScreen, }  type SplashScreenProps = { a: number } type LoginSelectionScreenProps = { b: number } type LoginScreenProps = { c: number }  interface PropsMap {    <SEP> I dont really understand the problem tbh - if `param` is type `T` and `T` is inferred as the type of the argument you pass in thats perfectly sound, no? <SEP> yeah I think its an x-y thing <SEP> If you *dont* infer T from the parameters then its basically just a cast in disguise because all the types are erased <SEP> @thegalah for some reason the type of `props` in each branch is `PropsMap <SEP> No because it cant narrow `T` safely <SEP> So the lookup is assuming the constraint inside the function, always <SEP> Huh <SEP> That narrowing is only safe if `T` represents a single value - in this case it does but in the general case you cant safely narrow a type parameter <SEP> Thats why the change in #30769 ends up being so annoying <SEP> um, if in this case it does what is the problem? <SEP> Probably that the compiler would have to prove it first <SEP> e.g. even just `T <SEP> I was thinking a union of enum variants still satisfies the constraint, but doesnt seem like it should cause a problem here",enforcing a particular base class: 'T extends Base'
Summarization," <SEP> most students transitioned to online-only. Some get the semester to end, early. <SEP> Over here, we have online and offline <SEP> So like we're online for 2 days of the week",most students transitioned to online-only. Some get the semester to end
Summarization," <SEP> @crooksey thing with reopening and ""problem solved"" is really weird. Always plays with my mind. <SEP> Yea, it might have been because I opened tsconfig with 1.8, re installed global TS then left the editor open <SEP> After updating to TypeScript 2.2, we have a section of code like this that stopped compiling:  ```ts process(p: Context | undefined) {   while (p != null) {     p = p.parent; // cannot assign undefined to p   } } ``` <SEP> ```ts interface Context {   parent: Context | undefined; } ``` <SEP> @sharwell  I can only try to guess you can write p.parent as Context <SEP> @idchlife We can, but that's not an accurate type assertion. If p.parent is always `Context` then this code never terminates. <SEP> The real concern here is we defined `p` as allowing `undefined`, yet we can't assign that value to it. <SEP> Oh, I see <SEP> The proposed change to fix TypeScript 2.2 compilation errors in https://github.com/tunnelvisionlabs/antlr4ts/pull/286 does exactly what you mentioned. I'm trying to determine two things before merging: 1. Is this a regression that was not intended (i.e. a bug needs to be filed with the TypeScript project)? 2. Is there some other way we should have written this block of code to avoid this situation?","thing with reopening and ""problem solved"" is really weird"
Summarization," <SEP> @AnyhowStep agreed, C pointer syntax is weird.  It gets even weirder when you add `const` to the mix <SEP> Idiomatic C++ shouldnt have many pointers though <SEP> It helps a bit when you keep in mind that array indexing is just syntax sugar for pointer arithmetic <SEP> ...and that therefore there isnt any difference between an array and a pointer, anymore than theres a difference between 1+2 and 2+1 <SEP> Incidentally, thats why it annoys me so much when TS uses similar syntax for semantically very different things","pointer syntax is weird, especially when you add const to the mix"
Summarization," <SEP> Hi, is there a recommended tsconfig for node 12? <SEP> if you look at https://node.green you can see the latest node 12 is green all the way through es2020 except for one line item. <SEP> I think I've been using es2019 as my target.",is there a recommended tsconfig for node 12?
Summarization," <SEP> There's a standard?  From listening to @AnyhowStep complain about the discrepancies between db engines, the fact that a standard even exists surprises me :stuck_out_tongue_winking_eye: <SEP> Ughhh <SEP> The worst part is that my library (at the moment) cannot prevent you from getting an `ER_UPDATE_TABLE_USED` during compile-time <SEP> And adding in types to support this would involve extra type trickery and I'm not sure if it's worth the additional overhead <SEP> I basically need to propagate the names of tables used in subquery expressions. <SEP> I do propagate what tables+columns are used in expressions but it does not distinguish between subquery-vs-non-subquery usage <SEP> And propagating subquery table names only benefits this one use case for MySQL, and does not help with other databases -___- <SEP> Now I'm starting to sound like the TS team ",is there a standard to propagate tables used in subquery expressions?
Summarization," <SEP> Is it an anti-pattern to create a generic getter function to retrieve data with an `any` return type? I just wrote a generic selector for one of my data structures: ``` const getMarketPropById = (prop: string) = <SEP> reading.... <SEP> it's not a anti-pattern at all <SEP> Is there a way for me to properly type the return though? <SEP> yep <SEP> the return type should just be the index type of market, or in a generified version the index type of whatever you're passing in inplace of market <SEP> i'll show trivial example <SEP> ``` const GetFoo = (prop: keyof Foo): Foo <SEP> ``` interface Foo {      <SEP> or full generic...... ``` const Index =  <SEP> Hmm it doesnt look like I can do `Foo <SEP> So by doing: ``` const GetFoo = (prop: keyof Foo): Foo",how to create a generic getter function to retrieve data with an 'any' return type?
Summarization," <SEP> @dtabuenc <SEP> This is strange, I've added the `files` key and after restarting VS Code the property is recognized, but a few minutes later it reverts and is no longer recognized <SEP> Not that I'm aware of <SEP> My mistake, I had added the `files` key to the `compilerOptions` key <SEP> From the project root I have a routers/ directory containing several .ts files.  What tsconfig key is needed for `tsc` to look for .ts files in any directory off of the project root and when it outputs the .js, to do so in a directory structure matching the source? <SEP> I'm not sure I understand the last question maybe an example is in order? <SEP> If I think I understand what you are asking, then no it is not possible. <SEP> It's a good ide to keep all source rooted in another sub-folder such as  `src` and then have `src/routers`  etc.. <SEP> you can combine multiple source directories by using `rootDirs` property, but they won't be named after the original name and that's usually an advanced need that most people won't run into <SEP> the easiest thing you can do is just have a `src` and including `src/**/*` <SEP> What I'm getting hung-up is what you mean  by ""matching dir structure"" <SEP> It may be possible, but you'll have to exclude things like node_moduels etc.. <SEP> you would just include `**/*` <SEP> and probably exclude your output folder too <SEP> going forward though, you are more future proof and will face less problems if your source root is one level deep from your project root",what tsconfig key is needed for tsc to look for .ts files?
Summarization," <SEP> hello! May someone helps me with such thing: I have an interface with some unnessesery fields and implement it, but have no autocompletion fot them. ` interface X { some? : string; } class Y implements X { som... }` <SEP> Well, I have no autocompletion even for `some : string;`, so it just doesn't work for interfaces implementation at all for vs code. <SEP> @flcl42 known issue for a while <SEP> https://github.com/Microsoft/TypeScript/pull/6118 <SEP> it should warn you if you provide an invalid type or is missing (if not optional) though <SEP> @nileshgokhalepune  ``` interface Array <SEP> Thank you, typescript is so nice I forgot it is in active phase of improvments <SEP> hehe",typescript autocompletion doesn't work for unnessesery fields
Summarization," <SEP> I am compiling a class just fine, but getting a `_this._posInfo` is undefined at runtime: <SEP> ``` class GallerySort {     private $_listWrap: JQuery <SEP> The error is on the `start` method. <SEP> you don't seem to be assigning anything to _posinfo anywhere... <SEP> @NaridaL Am I not defining it as a private prop of the class? <SEP> And `start` has `this._posInfo.oldpos = ...`. <SEP> yes but you need to assign something to it <SEP>      private _posInfo: PositionInfo = new PosInfo() <SEP> Ah, right. Thanks. <SEP> Still, I thought tsc would complain about me assigning to `this._posInfo. <SEP> It is set to `true`.",'_this._posInfo' is undefined at runtime 
Summarization," <SEP> Can someone please advise how I can correctly type this: https://www.typescriptlang.org/play/#src=type%20Options%20%3D%20%7B%0D%0A%20%20%20%20count%3A%20number%3B%0D%0A%7D%3B%0D%0A%0D%0Afunction%20inside(this%3A%20Options%2C%20add%3A%20number)%20%7B%0D%0A%20%20%20%20return%20this.count%20%2B%20add%3B%0D%0A%7D%0D%0A%0D%0Afunction%20Add(this%3A%20Options%2C%20count%3A%20number)%20%7B%0D%0A%20%20%20%20this.count%20%3D%20count%3B%0D%0A%0D%0A%20%20%20%20return%20inside.bind(this)%3B%0D%0A%7D%0D%0A%0D%0Aconst%20foo%20%3D%20new%20Add(1)%3B%20%2F%2F%20TS7009%0D%0A%0D%0Aconst%20answer%20%3D%20foo(2)%3B <SEP> noImplicitAny needs to be enabled to see the TS7009 error <SEP> TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type. <SEP> No, without new, there is a runtime error, ""Cannot set property 'count' of undefined"" <SEP> I've tried writing it like this, but I think it is incorrect, and throws different TS errors  ```js class Add {     count: number;      constructor(count: number) {         this.count = count;          return inside.bind(this);     } } ``` <SEP> Thanks, that does seem to work! Not sure about the `any` syntax, but it is better than TS7009","TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type"
Summarization," <SEP> give me a sec pretty sure it can be done doing something like this <SEP> ``` declare module 'memfs/lib/volume.d.ts' {   export class Volume {     static fromJSON(json: {        <SEP> Yeah i get the collides still <SEP> and in typescript documentation <SEP> Not all merges are allowed in TypeScript. Currently, classes can not merge with other classes or with variables. For information on mimicking class merging <SEP> looks like you can't merge it with a interface or namespace either <SEP> or change the extends etc <SEP> yeah sorry nothing works <SEP> ``` declare module 'memfs/lib/volume' { // nothing here will override, and declare class causes already defined} ``` <SEP> GL",is it possible to mimic class merging in typescript?
Summarization," <SEP> @nick-jonas Hi Nick I sent you an off topic email <SEP> Im getting '    Property 'format' does not exist on type 'Duration'.    using @types/moment-duration-format  which contains  ``` declare namespace moment {     interface Duration {         format(template: string, precision?: string, settings?: any): string;     } } ```  any idea why I get this error? <SEP> the code is used like  ``` moment.duration(hours, 'hours').format('HH); ``` <SEP> not sure but 'format' looks like a method not a property ? <SEP> yeah <SEP> just not sure how this should be adjusted",property 'format' does not exist on type 'Duration'
Summarization," <SEP> I created the design, it looks like the mockup <SEP> the header and navigation only so far <SEP> but .. <SEP> when I resize the windows .. everything goes on top of each other :joy:",header and navigation are on top of each other when resizing the windows
Summarization," <SEP> it's  everything but `null` and `undefined` <SEP> whats interesting <SEP> is if I use webs suggestion <SEP> for readonly unknown <SEP> if I dont have a dependsOn property <SEP> it autocompletes with all the options <SEP> if I use just  <SEP> it doesnt show any autocomplete options (beyond the logging one which is part of the intersection) <SEP> so webs is correct, but just  <SEP> so many conflicting situations <SEP> and I totally agree <SEP> but I would also assume the unknown <SEP> because undefined extends unknown <SEP> is Pick <SEP> because wouldnt never be any?",what's the difference between null and undefined?
Summarization," <SEP> @tonysneed yes, but the tests for TypeScript project are not well documented <SEP> My bad on the package.json. It's here: https://github.com/Microsoft/TypeScript/blob/master/package.json <SEP> TS actually uses Mocha",the tests for 'TypeScript' project are not well documented
Summarization, <SEP> `jsonb` makes me think of stuff like CBOR or MsgPack <SEP> You can index properties of a JSON column with a generated column and and index on that generated column in MySQL. Not quite the same thing as postgresql's expression index but same effect overall <SEP> @karanlyons about three fiddy,is there a way to index properties of a JSON column in MySQL?
Summarization," <SEP> calling @webstrand if you've got a minute <SEP> you seem to know a lot about rollup and like it okay <SEP> perfect timing <SEP> I'm thinking about moving to it from webpack for some specific things <SEP> I just sat down <SEP> I'm good like that :P <SEP> hah, wouldn't want you to get any work done <SEP> I have a custom webpack plugin that actually inlines some html stuff, very webpacky, and then outputs it to TS files. <SEP> I know that sounds weird, but it allows an express server to be bundled and serve that stuff. <SEP> makes sense to me. <SEP> the issue is that webpack doesn't see all the inputs in watch mode on subsequent builds, and it screws up the output, which is a DX problem. <SEP> you have any idea if rollup would fit better for that? <SEP> I'm not sure that rollup is your panacea, though. <SEP> It doesn't have features that make it easy to watch arbitrary files <SEP> it outputs the index.ts basically, which needs to see all the files to be correct. <SEP> you _can_ do it, but you'll end up implementing the file-watching yourself <SEP> so it doesn't watch? <SEP> by default I mean <SEP> I think it does, to a certain extent? but the way I use it, it relies on typescript's in-built watching to find changes <SEP> all of my rollup transformations happen _after_ typescript has already compiled source to javascript <SEP> yeah the input here would be both TS and some regular web-type stuff. <SEP> this is what you were using makefiles for, the other day? <SEP> I never actually did that, was just thinking <SEP> Maybe watchman or something would help. <SEP> you could implement a custom transform and use `ttypescript` maybe? <SEP> or maybe I should just tweak my webpack plugin to grab all the files somehow and add them to the set of inputs. <SEP> I've never tried to transform code before typescript got ahold of it <SEP> well I'm using TS normally really, other than the webpack stuff.  It's really that I want all the HTML/CSS/JS inlined. <SEP> I'd put a placeholder string in the .ts file ""1d3919a6-01ca-4f29-bcdc-f9fc0fb60b24"" and then replace it after all of the bundling was done <SEP> so there's TS in that client lib, and it would be standard webpack if I didn't turn it into TS files. <SEP> it's the bundler that's the issue here, not TS.  The downstream TS lib watches the transformed HTML/JS files fine.  They get dumped to a dir in its source tree. <SEP> But I think you've answered my question, that rollup probably won't save the day, it may be less work to continue with webpack. <SEP> yeah, rollup has no special sauce that'll make this any easier",rollup doesn't see all the inputs in watch mode on subsequent builds
Summarization," <SEP> if I have some function which tests whether a string or array is not empty, would it be reasonable to implement it like this? ``` function nonEmpty <SEP> To have some extra ergonomics for the null and undefined cases <SEP> `let str: string | null = ...`",is there a way to test whether a string or array is not empty?
Summarization," <SEP> This isn't strictly TypeScript but I was wondering if anyone could give me some advice with this ``` class Model {   public tableName: string;   public primaryKey: string = 'id';   public static objects: ModelManager = new ModelManager(this.tableName, this.primaryKey);   /* ... */ } ``` <SEP> `Model` is meant to be subclassed, and I want the static `objects` property to be created using the subclass's values for `tableName` and `primaryKey` <SEP> Something like ``` class User extends Model {   public tableName: string = 'users'; }  User.objects.find(1); ``` <SEP> Hmm, it looks like that's actually beyond JS/TS's scope of `static` <SEP> @superhawk610 when you are declaring static variable you can't refer to `this` <SEP> @nijuyr what if `tableName` and `primaryKey` were also static? <SEP> The catch is that I don't want the values from `Model`, I want them from the subclass (eg - `User`) <SEP> @superhawk610 see above ^^ <SEP> Nice, that's nearly identical to the implementation I went with <SEP> I'm coming from Python where parent classes can set default static objects for their children <SEP> Attempting to create something similar to Django's db.Model implementation <SEP> Thanks for writing all that out, much appreciated",is there a way to extend a subclass of a static variable?
Summarization," <SEP> It just takes a really long time for the playground to parse, check, emit and generate the URL <SEP> If there is too much code <SEP> I managed to generate a URL so long that my address bar just displayed ellipsis <SEP> Oh, it gives no indication that it's loading.  The right pane just shows `""use strict"";` being emitted after a few seconds <SEP> That's all you really need <SEP> Yeah, like 5 minutes later and it never loaded <SEP> I think it just doesn't like that one in particular <SEP> Is it possible to have an enum with string values in it used as a return type so that the function can only return values which are specified in the enum? Like <SEP> If they're dynamic you'll have to cast <SEP> @fatcerberus Here's a cool example,  <SEP> number - <SEP> Logically, the next item should be `number` <SEP> But it's `string` <SEP> They are not dymanic. Would I have to write them all out as a type?  () : enum.one | enum.two etc? <SEP> And every `.droste` after that is `string` <SEP> @JoeyHengst  ``` const enum Foo {     A = ""a"",     B = ""b"",     ... } ``` <SEP> @AnyhowStep bug report time? <SEP> Or is that the same one you've been fighting with all along? <SEP> It's a new bug lol <SEP> Before, it would always resolve to `any` <SEP> @AnyhowStep Leave it to you to find ways to break the type inference in new weird and wonderful ways <SEP> @webstrand ok and how would you use Foo as a return type for a function? Would this just work?  () : Foo {} <SEP> Better repro I guess <SEP> @JoeyHengst Yep, it's a type like any other. You'll need to `return Foo.whatever` <SEP> Or do I have to specify them all? Foo.A <SEP> No, the enum itself is a type <SEP> Equivalent to the union of all its members <SEP> You can use either `Foo` or `Foo.A | Foo.B | Foo.C` (if you want to only permit returning a subset <SEP> The enum is a type, and the members are types *and* values. <SEP> which is totally not confusing to anyone <SEP> Kind of like how `1 | 2 | 3` are both types and values <SEP> I walked right into that one <SEP> Note that `const enum`s are special. Everywhere you use `Foo.A`, typescript will replace with the literal `""a""`. <SEP> No, I actually kind of agree with you here Keith.  I always felt literal types were going overboard <SEP> I guess that's pretty duh, but I don't think of enum values at literals for some reason. <SEP> Without literal types, I wouldn't be able to write my super type safe sql query builder  <SEP> Take that back <SEP> `type Foo = 0..Infinty | -0 | 42` <SEP> two dots is an open range <SEP> There's an issue asking for range types <SEP> Filed the bug https://github.com/microsoft/TypeScript/issues/32735",is it possible to have an enum as a return type for the function?
Summarization," <SEP> this.subscriptions is an iterable, not an array? <SEP> forEach would be better, if you're not returning anything <SEP> there are some external libraries that provide ways, though. <SEP> or do something dirty like `",why is this.subscriptions an iterable and not an array?
Summarization," <SEP> https://github.com/typescript-eslint/tslint-to-eslint-config & https://github.com/typescript-eslint/typescript-eslint <SEP> Thats probably a good thing? I dunno. <SEP> Why the difference? ```TypeScript declare const x1: { kind: 'circle' | 'square' }; const y1: { kind: 'circle' } | { kind: 'square' } = x1; // Works  <SEP> It's kind the same thing as how `string <SEP> It's not sound to treat them the same, even if it doesn't matter in certain cases <SEP> but `'circle' <SEP> They are different <SEP> In general: the compiler is not as smart as you <SEP> I see but then why ```TypeScript declare const x1: ('circle' | 'square')",what is the difference between 'circle' and 'string' in es
Summarization," <SEP> and also blurs it futher because pretty much all statically compiled langauges have types exist in the runtime <SEP> Types don't exist when the code runs <SEP> they have no effect on how the code runs at all <SEP> they only exist in typescripts ""typescript"" world",types don't exist in the runtime
Summarization," <SEP> Hey I need your experince ;) <SEP>  I am not sure that is right i am doing or not if is was in javascript just i needed a global varibale to do that but here i need to be more model programing  my problem is that here how i can have access from inside handler to outer varibale i want to change values in side shape and drawManager  please let me know what i am doing wrong :smile:  ```  export class Map {     private Shape: any;     private map: any;     private drawManager: any;     static center = new google.maps.LatLng(48.2, 16.3667);     static canvas: string = 'map';     constructor() {         this.initMap();      }     initMap() {         let mapOption = {             center: Map.center,             scrollwheel: false,             zoom: 5         };          this.map = new google.maps.Map(this.getElement(Map.canvas), mapOption);         this.initDrawingManager();     }      initDrawingManager() {         let markerOptions = { draggable: true };         let drawManagerSettings2 = {             circleOptions: {},             drawingControl: true,             drawingControlOptions: null,             drawingMode: null,             map: this.map,             markerOptions: {},             polygonOptions: {},             polylineOptions: {},             rectangleOptions: {},         }         this.drawManager = new google.maps.drawing.DrawingManager(drawManagerSettings2);         google.maps.event.addListener(this.drawManagerMain, 'drawingmode_changed', function () {             this.mainShape = null;///- <SEP> @rhyek  because TS seems to be doing some flow analysis <SEP> but it doesnt get that the throw can make it jump to the catch block directly <SEP> if you do let x: number | null = null as any, you won't get an error <SEP> what's wrong here ? ```ts interface Letter {}  interface A extends Letter {   a: number; } //interface B, C, D... extends Letter  // A type predicate's type must be assignable to its parameter's type. Type 'A' is not assignable to type 'T'. declare function guard <SEP> I could do this differently like  ``` interface A {   a: number; } type Letter = A | B | C | D;  declare function guard(v: Letter): v is A; ``` this seems better but my problem is that I can't extend `Letter` type. <SEP> How can I infer type of expression using compiler api. I'm writing code tranformer using transformation api, and I have to know types of some expressions.  ``` let a = { q: 'qq' }; let b:any = a.q + 1; ``` For exaple I want to restrict assigning strings to any. How can i determine that `a.q + 1` is string? <SEP> I have Node instance in transform walker. In this case  I will look at VariableDeclaration node and i wood like tet type of Initializer expression <SEP> hi How can I have some proper global variable? <SEP> @hesama110 you can't have a global variable when using modules... You can use a singleton in a module which you import when you need <SEP> @NaridaL do i have access to that singlton variable from inside event handler? <SEP> @ghetolay That would break if I did `interface B extends Base {foo: number}; foo <SEP> @hesama110 actually, nvm, looking at your original code it looks like you want access to `this` of the surroundnig scope. Use an arrow function instead of a function expression and it will work <SEP> @NaridaL if I dont use modules can I have global variable? <SEP> ```         google.maps.event.addListener(this.drawManagerMain, 'drawingmode_changed', () = <SEP>   I am not sure that is right i am doing or not if is was in javascript just i needed a global varibale to do that but here i need to be more model programing  my problem is that here how i can have access from inside handler to outer varibale i want to change values in side shape and drawManager  please let me know what i am doing wrong :smile:  if you see here i posted before maybe it can help to understand what i need :) <SEP> etc <SEP> @NaridaL why would it break ? <SEP> @ghetolay because the default param a is not assignable to B <SEP> other hand I found this code but i dont know how it is working and how i can get the value from that  ``` export function CreateVariable(name: string): any {     let global: any = window;     return global <SEP> @hesama110 did you try using the arrow functions? <SEP> @ghetolay why do you have a generic param <SEP> @NaridaL arrow functions for which part? at handler? <SEP> @NaridaL because the function can take any implementation of Base <SEP> :point_up:  <SEP> @ghetolay then do `function foo(v: Base = a) {}` <SEP> you only need generics when you want to enforce a constraint between arguments and or return values <SEP> @NaridaL sorry i didnot notice that i checked it is the same :-? I think because it is in another context <SEP> @hesama110 https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this <SEP> @NaridaL well you're not really supposed to use a Base directly but I can live with that <SEP> @NaridaL just out of curiosity what if I wanted to do `foo <SEP> `T = Base` ? <SEP> overloading the signature would probably work.. <SEP> ``` foo(): Wrapper <SEP> hum oh yeah it's nice <SEP> that way we even know we get a `Wrapper",how can i have access from inside handler to outer varibale?
Summarization," <SEP> Hi! I'm trying to use the TypeScript compiler API to add comments on class methods. After ES5 code is emitted, the comment appears twice, once on the line preceding the `MyClass.prototype = function(...) { ... }` declaration and once after the `=`, before the `function`. Is there anyway to prevent this behaviour using the compiler API?  Thank you! <SEP> anyone using an Omit and Diff types in 2.9 RC? <SEP> needed to upgrade to 2.9 to finally correctly type my helper class but now stuck getting 3rd party library errors on Omit and Diff <SEP> or is it possible to ignore invalid types in node_modules in 2.9? because my standard tsconfig exclude isn't working... <SEP> @migstopheles I can't figure it out... can you help me please ? <SEP> Happy to, although I'm not 100% clear on what you are trying to achieve <SEP> `Partial` allows the *data* to be undefined. the value will be the default specified on the class property <SEP> `Pick` leaves optional/required fields the same. so `Pick",how to prevent  invalid types in node_modules in 2.9?
Summarization," <SEP> @webstrand https://stackoverflow.com/questions/827649/what-is-the-ruby-spaceship-operator <SEP> :) <SEP> Do an outer join...which is not uncommon :) <SEP> I count that as transformation. You can get a resultset with nulls in columns, but not nulls in non-nullable table columns <SEP> @HarrisonB_gitlab it gets weird sometimes for sure. Most of my experience lately is with postgres <SEP> and then there are some evil clients which transform invalid values, such as invalid dates into NULLs on the client side. Those are awful <SEP> and add composite types there and boom there are footguns <SEP> in pg `x IS NOT NULL` and `NOT (x is NULL)` are different. <SEP> @webstrand I don't disagree that's a transformation <SEP> @keithlayne oh is that not the standard? <SEP> but it's not always straightforward what you're gonna end up with in some ORM-ish stuff I've used. <SEP> depending on the API <SEP> @HarrisonB_gitlab in pg if you have a composite type, like a tuple `t` that's  `(1, NULL)` <SEP> `t IS NOT NULL` = <SEP> `NOT (t IS NULL)` = <SEP> I don't know how standard or not that is TBH <SEP> ...so I tend to write SQL defensively after getting bit a couple times. May not apply for a lot of people. <SEP> also handy is `IS DISTINCT FROM` which behaves predictably WRT nulls <SEP> @theqp   <SEP> @resynth1943   <SEP> It's also a perl operator, that means something entirely different <SEP> didn't know that <SEP> right, probably a comparator-style operator? <SEP> so you'll always get the same sort order <SEP> side note, thanks so much JS for sorting numbers lexicographically. <SEP> don't know those <SEP> in perl, what type is `@#$%var`? :trolleybus: <SEP> perl strings are numbers and numbers are strings. It _generally_ makes no distinction between the two <SEP> That's not a legal type, thankfully <SEP> it is of type trolleybus <SEP> `$#foo` is legal, though <SEP> and causes pain for those who write code highlighters",what is the ruby-spaceship-operator and how does it work?
Summarization," <SEP> @dtabuenc  what does ""dom"" do when you add it to the lib property? <SEP> look at the section for ""including built-in type declarations with --lib"" <SEP> im getting error - `Cannot find name 'Element'. (2304)` <SEP> that is why you added `dom` as well?","what does ""dom"" do when adding it to the lib property?"
Summarization," <SEP> `function (a) { return a }` <SEP> How exactly are you compiling? <SEP> So tsc will emit (usually? Always?) even if there are type errors. <SEP> It stops *implicit* `any`, i.e. the compiler can't infer a more specific type and falls back to `any`.  It won't stop you from using `any` yourself if that's what you expected <SEP> Oh, yeah, tsc will always emit code even in the presence of type errors.  If you want to disable that you can enable `noEmitOnError` <SEP> Oooh ok. <SEP> It's more like a fancy linter than a compiler, really :smiley: <SEP> also a different problem but I think this library is swallowing my errors in `--respawn` mode <SEP> guess i should figure out why that is <SEP> Also also unrelated but I think this sublime text plugin might not be cutting it. What's the best IDE for typescript? Vscode something? <SEP> there are opinions.  But vscode, yes. <SEP> It has first-class TS support built right in",why does tsc emit code even when there are type errors?
Summarization," <SEP> hey, how do you map/reduce objects in TS without disabling the type checker? <SEP> constructing objects in TS is generally such a pain <SEP> doesn't matter - I'm asking how you'd do that in a type-safe manner <SEP> using `Object.entries`, `for..of` etc. is out of the question it seems <SEP> `reduce`, `lodash.reduce`, `lodash.mapValues` typings are useless too <SEP> doing that will allow me to index the object, but not assign the value because of invalid intersection <SEP> actually.. nvm <SEP> using a simple `.map` on its own won't help..",how to map/reduce objects in TS without disabling the type checker
Summarization," <SEP> Hi guys, do anyone know if I can declare decorator on a protected abstract accessor in my base class? <SEP> And when I declare it, is it inhereited? <SEP> no, decorators are called once, when the class is read <SEP> I can't declare it or it isn't inhereited? <SEP> Abstract class can't be read so I can't declare it? <SEP> yup <SEP> Pity, why is that? Is it just decorator assumption? <SEP> no wait <SEP> the abstract class is at runtime <SEP> so you should be able to declare it <SEP> but it wont get inherited <SEP> I get ""decorators not valid here"" error",how to declare decorator on protected abstract accessor in base class
Summarization," <SEP> @ezra-quemuel with jest (ts-jest) you can mock es6 modules <SEP> The trick/problem is that, when es6 modules imports are transpiled to commonjs require calls they are hoisted to the top of the file <SEP> babel-jest hoist your mock calls above the  require calls, but ts-jest doesn't support it yet. So what you can do is to put your jest.mock calls on a module and import first thing to your test file <SEP> ts-jest has other issues, like sometimes inaccurate coverage reports. but its working and super fast <SEP> Guys, did anyone find properly working lib with Dispatcher? Like in Flux, but without react dependencies. Just Dispatcher. <SEP> anyway, i would advocate to inject all the dependencies and import only type information <SEP> just using `reduce` method that  ``` export function fragments(fragment: string) {   return fragment         .split('&')         .map( el = <SEP> with interface, maybe? <SEP> ``` interface ReduceReturnType {   access_token : string;   expires_in : string;   id_token : string; } ``` <SEP> @idchlife how would you tell to `reduce` what is the return type? <SEP> Something like: <SEP> ``` export function fragments(fragment: string) {   return fragment         .split('&')         .map( el = <SEP> oh <SEP> if you do it that way, TS will infere the return type by the structure of the initial value <SEP> but you can explicitly  set reduce generic value <SEP> ``` interface ReduceReturnType {   access_token : string;   expires_in : string;   id_token : string; }  export function fragments(fragment: string) {   return fragment     .split('&')     .map(el = <SEP> this is option #2 <SEP> Also, maybe like this?  ``` interface ReduceReturnType {   access_token : string;   expires_in : string;   id_token : string; }   <SEP> Correction to my 2nd example: ``` interface ReduceReturnType {   access_token? : string;   expires_in? : string;   id_token? : string; }  export function fragments(fragment: string) {   return fragment     .split('&')     .map(el = <SEP> @idchlife in your example you don't have to use an interface and you will still get type information <SEP> or not:P <SEP> @Bnaya Yes, of course. Just made example to show that you can use interface like this. Though did not think about ",how to mock es6 modules with jest (ts-jest)
Summarization," <SEP> I'm trying to understand the behavior of initializers on class members.  Here is my example: ``` class BModel  {     constructor(obj: Object = null) {         Object.assign(this, obj);     } } class MyModel extends BModel {   var1:string = 'initialized'   var2:string; } let model = new MyModel(JSON.parse('{""var1"":""set by assign"", ""var2"":""set by assign""}'))  ;  console.log('test model', model); // emits in console:  // test model MyModel {var1: ""initialized"", var2: ""set by assign""} ``` So I'm guessing class member initializers are set after object construction. Is that right? Is there a better way to specify default values, but still be able to initialize data in the constructor? <SEP> I added a async function to my class but if i call it it never outputs hey. I expected that it will connect and then executes the code after the await. ```   protected async connectMongo() {     try {       await this.mongoClient.connect('mongodb://localhost/test');       console.log('hey');     } catch (e) {       console.log(e);     }     console.log('done');   } ``` <SEP> @sbbowers__twitter  It's actually a bit trickier than that. It's easier if you look at the generated JavaScript code: http://www.typescriptlang.org/play/index.html#src=class%20BModel%20%7B%0A%20%20%20%20constructor(obj%3A%20Object%20%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20Object.assign(this%2C%20obj)%3B%0A%20%20%20%20%7D%0A%7D%0Aclass%20MyModel%20extends%20BModel%20%7B%0A%20%20var1%3Astring%20%3D%20'initialized'%0A%20%20var2%3Astring%3B%0A%7D%0Alet%20model%20%3D%20new%20MyModel(JSON.parse('%7B%22var1%22%3A%22set%20by%20assign%22%2C%20%22var2%22%3A%22set%20by%20assign%22%7D'))%20%20%3B%20%0Aconsole.log('test%20model'%2C%20model)%3B <SEP> MyModel first calls its super constructor, which then does the Object.assign. Afterwards, it continues its own constructor, and thus sets its own default values. <SEP> it's more obvious if you also give MyModel an explicit constructor <SEP> Then the order is: 1. call super constructor 2. assign default values 3. execute remainder of own constructor <SEP> So... There is no way to write a generic constructor that has access to derived class's information? <SEP> has anyone tried to extend eventemitter? I'm trying to extend `on` method like this: <SEP> `on(event: string, listener: Function): this {     return super.on(event, listener);   }` <SEP> I'm afraid not in a typesafe and correct way. I mean, if you pass a `var3` along in your JSON when it's not in `MyModel`, should there be a `var3` property on `model`? <SEP> but got error:  `Type '(event: string, listener: Function) = <SEP> Object.assign is a shotgun approach :stuck_out_tongue:",is there a way to set initializers on class members after object construction?
Summarization," <SEP> hi, how can i provide typings for desctructuring parameters ? <SEP> i know i can do something like this  ```js function foo({y}:{y:ICustomObject} ) {     console.log(  y ); } ``` <SEP> but how about multiple parameters like  ```js function foo({x,y,z}){ console.log(x,y,z); } ``` <SEP> ok, I 'm just stupid :) nevermind",how to provide typings for desctructuring parameters?
Summarization," <SEP> fun times. <SEP> Really though, is it so bad to use a schema dump or a connection to the db?  It's strictly more type info. It's nice to not *need* it, but improving the output when they're present would be awesome.  Although that sounds maybe impossible to do with just the tools at hand? <SEP> how do I add lodash to the TS play box? <SEP> ! <SEP> ! <SEP> !",how to add lodash to the TS play box?
Summarization," <SEP> @aretecode  I'm not sure what you mean? Typescript always compiles straight to js. <SEP> `interface, pubic, private` don't emit anything <SEP> reformat? <SEP> can you give an exampe of what you mean? <SEP> yes <SEP> becomes <SEP> are you just referring to the indentation? <SEP> why do you care? don't you run the js through a minimizer anyhow? <SEP> without compiling every time, or running auto linting fixes every time... <SEP> so you would compile once and then edit the compiled code? <SEP> well then wouldn't you just have to compile and reformat once ? <SEP> and if I had to compile again in the future, I would be able to merge it in <SEP> I don't believe so. <SEP> @tusharmath Do you mean something similar to this? ```  type Similar",typescript always compiles straight to js
Summarization," <SEP> https://github.com/microsoft/TypeScript/issues/32506 <SEP> Uh oh. More generic soundness changes <SEP> https://github.com/microsoft/TypeScript/issues/33379 <SEP> I don't think it actually makes stuff more sound in this case, though <SEP> can you define a type with nested types? <SEP> scratch that - yes you can.",is there a way to define a type with nested types?
Summarization, <SEP> good to know gitter supports all the important markdown features <SEP> a <SEP> like this <SEP> ` <SEP> so apparently any `javascript:` URI is a rickroll <SEP> hilarity ensues <SEP> # :laughing:  ###### :laughing:,gitter supports all the important markdown features
Summarization," <SEP> My experience (with a setup like I described) is that tsc will find those types in subdirectories. <SEP> So it may just mean you need to have the right config in package.json. <SEP> But it *is* possible for that to work, I *think* its a config issue. <SEP> I know this kind of thing is frustrating, and you dont want to rearrange your whole project and have it still not working.",is it possible for tsc to find subdirectories in package.json?
Summarization," <SEP> question: I have a method that expects to access a protected property of `this`, is there a way to declare that?   <SEP> this is the real case I have  <SEP> Yeah you cant do this - protected means only you and your subclasses can access it, never an outside function <SEP> yes, the first example was stupid, that's why I had to provide the second, full example where  it's a subclass trying to get an extended type for the property <SEP> sorry for taking it to the extreme, I'm testing how far can typescript go ;) <SEP> Yeah theres an issue about that - you cant access protected props of another instance of yourself - its not sound in general <SEP> I'm trying to find the issue as it's hard to explain <SEP> Basically the gist is that (from the compiler's POV) you don't know if `bar` is some sister type to `Child`, so it's not safe to allow you to access the protected prop <SEP> I assume that's what you were trying to do?",is there a way to declare a protected property in a method?
Summarization," <SEP> ? <SEP> in the decorator <SEP> but I'm still not sure you can attach metadata to the whole class <SEP> could you explain please, i dont get how i should use target <SEP> it should be something like `Reflect.defineMetaData('ha_type', 'room', target.prototype, ""methodName"")` <SEP> you'll need to consult the spec <SEP> Reflect.defineMetadata('ha_type', 'room',target); does not work <SEP> then maybe you can only attach metadata to a method <SEP> hmm Reflect.metadata() is overloaded 2 times. <SEP> and it says: A default metadata decorator factory that can be used on a class, class member, or parameter.",how to attach metadata to a method in 'reflect.defineMetadata'
Summarization," <SEP> @Lauris01 what do you need to check? it's guaranteed `SomeModel` has a member called `name`,  you just declared it <SEP> whether it's got a value or not is different <SEP> you can check with `model.name !== void 0` <SEP> ok, ill try to ask from the other point of view. what im trying to do is: create a component that would take an array of `SomeModel`(above) and array of variable names that i want to be shown in the list. for example if i would pass  ```  modelArray= SomeModel <SEP> how could i implement it ? <SEP> programing ts and js for only a few weeks, maybe there is other mutch better way ? <SEP> its kind of intresting problem to solve <SEP> @Lauris01 there's a method called `hasOwnProperty` that objects inherit from `Object` <SEP> @DanielRosenwasser i see, thanks <SEP> np :+1:",what do you need to check if a model has a member called name
Summarization," <SEP> Anyone know how to set `--max-old-space-size` to more than 8GB? <SEP> The fucking thing keeps running out of memory when I'm trying to type check. I can't even debug the damn problem <SEP> I tried setting it to 16GB but it just uses 8GB and then gives up. <SEP> ``` async function a(): Promise <SEP> Is there a way to ignore the promised value, while still returning the promise? <SEP> With something like this, I get an error that `type 'string' cannot be assigned to type 'void'`. <SEP> But I don't care about the value returned, I just want the Promise so it can be await'ed later. <SEP> `await b()`? <SEP> I don't want to await it at this point. I want to pass the Promise to the caller. <SEP> But `a()` is an `async` function <SEP> ``` async function a(): Promise <SEP> Right, so `return b()` returns the Promise returned by `b`. <SEP> `await b();` will wait till `b()` returns and then ignore the return value. <SEP> It'll still be `Promise <SEP> ``` async function a(): Promise <SEP> I see what you mean. Thanks. <SEP> Im getting some odd behavior, trying to figure out if im missing something. The set up is a little complex but maybe its not relevant.  I have one library (my backend API) that defines the type signature of my project; I have a second library (my API client library) that depends on the API, which uses those types and exports some functions; finally I have a third project (my web app) that consumes the API client's functions. If you want to see specific source code just let me know and Ill ping you with links.  All the projects are on TypeScript 2.9.1. All the projects' `tsconfig.json`s target `es2015`with `esnext` modules and `node` module resolution. Both the two libraries also both produce declaration files with the `declaration` flag set to `true`.  Now, in my web app, im getting some confusing behavior with the typeslooks like typescript thinks the declarations are invalid. Specifically, this is an example that causes an error:  ``` // web-app/node_modules/@osdiab/api-client/dist/members/trust.d.ts  export default function trust(apiBase: string, authToken: string, memberId: string): Promise <SEP> So is there a way to override local jsdoc comments in a file with a .d.ts file?",how to set '--max-old-space-size' to more than 8GB?
Summarization," <SEP> anyone know why typescript doesn't downcast a literal to see if it satisfies type-checking?    ```typescript function addOne ( x: 1, y: 1 ): 2 { return 2 }  var x = 1 var y = 1 addOne(x, y) // fails because type checked is ""number"" ``` <SEP> I'm guessing that perhaps 1, 2, 3 etc are not actually sub-types of ""number""? <SEP> no, that's not the issue <SEP> it's that `var x = 1` results in x having type ""number"", not ""1"" <SEP> uhh <SEP> did you read <SEP> yes...? <SEP> I'm asking why it doesn't check the literal against other candidate types <SEP> the literal 2 belongs to the type ""number"" but it also belongs to the type ""2"" <SEP> in my program I specify a constraint that I only operate on the literal ""1"" and then create two of them <SEP> and pass them to a function expecting them <SEP> but they are not cast to other candidate types <SEP> only checked as ""number"" <SEP> x also has type ""1"" <SEP> right but it has that type because inference assumes it.  not because this program says that is what the type is <SEP> ya for sure, but the inference system doesn't check this <SEP> which is interesting since it knows the candidate types its trying to satisfy <SEP> namely, 1 or number",why typescript doesn't downcast literal to see if it satisfies type-checking?
Summarization," <SEP> `PussInBoots` Hi, does anyone have experience with Hasura? How does it compare to Apollo Server in the long run? <SEP> is it not possible to do something like this in ts ?    if(!(const r = myfunc())) return r; ? <SEP> that's not legal in javascript <SEP> let alone in typescript <SEP> you might be able to find a babel plugin that lets you do that <SEP> Hi, I am doing this: ```typescript     for (const  <SEP> `Object.entries` always returns string keys. <SEP> @webstrand ok strange...why does it do that when it knows that key is a number? <SEP> Because that's how it's defined: https://github.com/microsoft/TypeScript/blob/master/lib/lib.es2017.object.d.ts#L38 <SEP> @webstrand i see... how can i then explain the ts compiler that its actually a number? <SEP> ```  <SEP> you can coersce it `+k` if you like. <SEP> thanks <SEP> that's my understanding too. But why would `this` be more appropriate? <SEP> because TS won't be able to typecheck `tuple.pop()`, for example <SEP> the thing is, if you use a non-arrow function, `this` changes, doesn't it?",How does Hasura compare to Apollo Server in the long run?
Summarization," <SEP> if i just put  `C extends typeof BaseClass` then i can't  use `c` as a class for extending from, etc either.  no amount of `& BaseClass` or `& IBaseClass` etc combined with `typeof BaseClass` fixes this <SEP> maybe: ```ts const func2 =  <SEP> in that case, the static props/methods are lost from `C`",can't use 'c' as a class if 'C' extends typeof BaseClass
Summarization," <SEP> https://discord.gg/typescript <SEP> you actually used crystal at work?  That's brave of somebody. <SEP> see `tsc --watch` <SEP> @keithlayne we're a small company lol - https://ulayer.net if you're interested - we built our customer panel in Crystal with AmberFramework it's working out well for us <SEP> Yeah so the big caveat about experience with other statically typed languages is that TS's type system is probably different in ways that you might not expect. <SEP> how so? <SEP> Like the foundation is structural typing.  Also, TS and any type info only exist at compile time, then they are completely erased. <SEP> But generally, TS is just JS.  So the answer to many ""how do I do this in TS?"" questions is ""the same as you would in JS"". <SEP> well yeah but the compiler makes it almost certain the data type will be as expected, no? <SEP> even if the types only exist for purposes of knowing the code will work, even if not enforced at runtime <SEP> of course if the code can only flow in an expected way then typescript still does its job right <SEP> Types in most languages aren't enforced at runtime either. <SEP> not sure how LLVM handles it <SEP> Crystal compiler just turns everything into LLVM IR or something then it gets turned into native machine code <SEP> right.   All the type checking is in the compiler there too. <SEP> But importantly you can't do any reflection on the types really, and you can't generate any runtime code (with stock tsc anyway) based off your types. <SEP> What I was gonna say is that a lot of people are surprised by structural typing.  There are no exact types in TS (for now anyway). <SEP> It makes javascript a bit more readable now that I've been so used to seeing data types because of Crystal <SEP> What's important is TS is usually ""can a value of type T be assigned to this thing of type U?"".  Sometimes people are surprised by the answer. <SEP> it's weird not seeing data types in a language now <SEP> When contributing to open source Rails apps its kinda weird not knowing the data type due to a lack of annotations <SEP> Just remember inference is your friend too, I'm sure you're aware.",what is the type system of statically typed languages like TS?
Summarization," <SEP> So I have this in `src/setupProxy.js` (how you configure proxying to a backend in create-react-app).  The tsconfig has `""allowJs"": true, ""isolatedModules"": true, module:  <SEP> Yeah shouldn't that actually be `(number | string) <SEP> yeah <SEP> Its due to distribution blah blah blah <SEP> `isolatedModules` means that TS compiles files individually, without resolving modules or ever looking at anything in a different file.  Are you sure that's what you want? <SEP> which is weird, because in the TS files I have no problems at all with import/exports.",how to configure proxying to a backend in create-react-app
Summarization," <SEP> https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Publishing.md <SEP> I think #9998 might even touch on that <SEP> Too bad TS doesn't have warning/error levels <SEP> Right now, it's just black and white, ""this is an error, this is not an error"" <SEP> But maybe the black and white behavior isn't so bad <SEP> I'll try not specifying the `types` field. Maybe in our case it won't be necessary.   Otherwise, should types generated for different module formats be the same? <SEP> The black and white behavior isnt bad, but I suspect it prevents them from implementing warnings that might be nice to have... since they would break your build by definition <SEP> `noUnusedParameters` would be more useful if it wasnt a build-breaking error <SEP> tsc still emits but returns a nonzero error code so other tools in the chain think it failed <SEP> they could extend the tsconfig format to support warnings pretty easily I think, would be non-breaking. <SEP> practically speaking though, you can delegate those checks to a linter.  Probably get booed by @AnyhowStep. <SEP> Boo <SEP> Linters suck at the moment because we're missing the type relationship API <SEP> the fact that it will exit non-zero but still emit by default can be confusing as well.",should types be the same for different module formats?
Summarization," <SEP> Good question, @tsm91 . <SEP> hmm, ill ask another one then :D  i just got warned in the console that there is a new version of typings, no prob i installed it. But what if there is a newer version of a typing in the registry how can i update typings in an existing project?  typings.json extract: ``` ""ambientDependencies"": {     ""browser-sync"": ""github:DefinitelyTyped/DefinitelyTyped/browser-sync/browser-sync.d.ts#d9b5b35ba3a79ac778c5890531393442439df5dd"", ```  it seems like the versioning is solved by some kind of hash, if i type typings install it will grab the one with the very same hash isn't is? <SEP>  Finally getting into Typescript in development.. real nice <SEP> Anyone ever run into weird production minified transpiled to es5 issues ? <SEP> boss seems to continuously worry about it and is afraid to use babel or typescript because of it... <SEP> If you get a bug due to minification, that's a bug with the minifier, not with TypeScript <SEP> But that's beside the point <SEP> it's rare that emit is implicitly broken <SEP> Very true, but lets say it's some rare edge case and Q&A didn't catch it. What do you do to debug? <SEP> Loaded question I know.. just wondering if there's something big that helps, that I've never heard of @DanielRosenwasser <SEP> 1. TypeScript supports sourcemaps, which allow you to trace your emit back to your original TypeScript source 2. TypeScript's emit is supposed to be readable and canonical-looking JavaScript <SEP> If you compare output between Babel and TypeScript, you'll usually be able to notice these differences <SEP> So I have source maps set up now, but if I'm debugging production and let's say it's an old ie, how could that help <SEP> Thought maps were just helpful for  development  debugging <SEP> This same problem applies to minified JavaScript that wasn't written with TypeScript <SEP> If you have minified JS with no sourcemaps in production, and an error occurs, how are you supposed trace that? <SEP> Very true. Awesome well thank you I got some more research to do! <SEP> you can use sourcemaps in production doesnt it? If you use external source maps chrome will only load it when you open up the dev tools, as far as i know. i dont know about other browser <SEP> another thing about typings, it is only a single file so if that file depends on 20 other files i have to install each of them manually <SEP> what type should i give to a regex? `var lettersRegexp = /^ <SEP> It should just be inferred <SEP> but `RegExp` <SEP> ahh cool, hmm i heard it a lot, i mean inferred  for example `function addition(a: number, b: number) { return a + b; }` we know the return value will be a number  in an `interface` i can not omit it:  ``` interface IOptions {     extension: string;     extensionsList: string <SEP> tsc is a compiler <SEP> do you mean a specific editor?",how to install a newer version of a typing in an existing project?
Summarization," <SEP> I'm kind of surprised it manages to produce like 80 errors though... <SEP> At least, according to the original issue <SEP> Like, it encounters a keyword where it expects an identifier and it just goes completely off the rails from there <SEP> Oh wait, the errors are from different lines, I thought they were all on the same line <SEP> @AnyhowStep you're always running into these limitations of typescript i feel like you need to think to take a step back and wonder why you're pushing it to the limits in the first place not how to extend the overloads out  1 more recursive loop <SEP> I have a use case I'm super interested in and I'm not going to get there without pushing the type system <SEP> you can try to change the syntax though not ideal but sometimes alot better than alternative <SEP> My experimental prototype works. It needs code clean up and needs to be generalized, but it works. <SEP> _.get(obj, key1, key2, key3, key4, key5, key6) will always have a cap at some point however... <SEP> _.get(obj).at(key1).at(key2).at(key3).at(key4).at(key5).get <SEP> wont <SEP> I've played around with **a lot** of variations <SEP> So, I know where you're coming from <SEP> I made something a bit like that using Proxy <SEP> Where doing:  ``` foo.bar.baz ``` creates ```  <SEP> Which can be used as a getter input. <SEP> I actually do have an optional chaining implementation that uses that second syntax precisely because I didn't want to run afoul of the type system <SEP> @rhys-vdw same 1sec <SEP> https://github.com/Microsoft/TypeScript/issues/20846 <SEP> last comment <SEP> ArrayOfPeople.map(_.children <SEP> For a single method/function of the library, I can spend **days** just playing with the different ways to express it. <SEP> But I do have very clear design decisions I cannot compromise on for the API. query building must use a fluent API. Expression composition must use a functional API <SEP> Function composition usually lets me nest more function calls than I can chain methods with a fluent API, even after tweaking the types to get as much mileage as I can (with what knowledge I have from experimenting) <SEP> That experimentation and obsessiveness is why my issues tend to be cluttered with so much noise because I post all the different code snippets I keep trying to work around a perceived (or actual) limitation of the type system",is there a way to extend overloads out 1 more recursive loop?
Summarization," <SEP> Ummm MySQL 5.7 doesn't have CTEs, right? I think. I don't remember anymore <SEP> well you cant introspect the db to generate my code with it running <SEP> it doesn't <SEP> Anyway, that's my excuse for not implementing it yet <SEP> I have an idea for how I'll do it <SEP> my point is that ORMs will struggle to support every piece of syntax <SEP> and what about using db functions easily?  I think that you can make a nice api around that but Ive never really seen one. <SEP> Makes sense. Even for MySQL 5.7, I've only added support for stuff I personally use.",MySQL 5.7 doesn't have CTEs
Summarization," <SEP> Could anyone help me understand how to get a native module compiled through node-gyp accessible in typescript? I can't figure out how to properly declare a type definitions file for the module, nor access it through import in a way that makes typescript happy. Any time I try to do an import `import testModule = require(""../build/Release/test-module""), it says the module can't be found. I'm also not sure where to put the definitions file. I can work around it by creating a wrapper typescript file that does `const testModule = require(""../build/Release/test-module"")` and then wrap everything the module provides, but that seems incorrect. Also, that approach causes TSLint also complains about the require being convertable to an import. Doing so results in the module not being found by TSC again, though. Can anyone provide any input? <SEP> This is using node.js, by the way. Version 9.2.0 and typescript version 3.3.3 <SEP> Using --traceResolution it looks like .node modules are not candidates for loading with import. It tries looking for .js, .jsx, .ts, .tsx, and d.ts, then gives up. How do I load a native .node module in typescript? Can it be done with import? <SEP> Ok. I got it to work; what a PITA.",how to get a native module compiled through node-gyp accessible in typescript
Summarization," <SEP> @keithlayne i know youre trolling but the cause of the error was that he tried to put the `keyof` into the index signature instead of just removing it :wink: <SEP> my philosophy is to never miss a trolling opportunity <SEP> I cant see intellisense in mobile playground - what is the return type? <SEP> `Promise <SEP> Oh, ouch <SEP> Which of course cant (observably) exist at runtime",what is the return type of 'intellisense' in mobile playground?
Summarization," <SEP> I can't quite figure out how to explain it, but the idea is that in TypeProps lurks a generalized pattern matcher <SEP> but for that you'd need a predicate function at the type-level of some sort <SEP> I think that works too yes, IIRC <SEP> okay, a little explanation on how TypeProps works <SEP> ```ts array: {             infer: T extends Array",is there a generalized pattern matcher in TypeProps?
Summarization," <SEP> @JKillian lint tools ofter default to single quotes, so there's that ;) <SEP> @weswigham thanks <SEP> @vivainio  Yup, just what I'm working on :) https://github.com/palantir/tslint/commit/86e1888e4f724d7d5a6dbb69fa9476df38be9aae <SEP> Is it possible to use the `files` property in `tsconfig.json` while also having the compiler recurse down the tree to find all the .ts and .d.ts files?  Or are they mutually exclusive?",is it possible to use the files property in tsconfig.j?
Summarization," <SEP> @initiumSrc  I have seen your example, but with `tsc` there is no more errors, but does not compile into JS :/ <SEP> do you have an example? <SEP> This is the code: ``` ///  <SEP> creates the `main.js`with a 0B size (empty) <SEP> @poliveira89 --out flag is  <SEP> yes you usualy need an out file <SEP> but you have that already <SEP> for me it does compile <SEP> @poliveira89  ``` import * as request from ""request"";  console.log('Start...');  request('http://www.google.com', function (error, response, body) {   if (!error && response.statusCode === 200) {     console.log(body); // Show the HTML for the Google homepage.   } }); ``` Simply using tsc filename ``` ""use strict""; var request = require(""request""); console.log('Start...'); request('http://www.google.com', function (error, response, body) {     if (!error && response.statusCode === 200) {         console.log(body); // Show the HTML for the Google homepage.     } }); ``` <SEP> first file is a .ts right? the second one is the compiled version? <SEP> yes",tsc does not compile in js
Summarization," <SEP> @dtabuenc When I try to use a npm package which doesnt have a declaration file (@types), I get a error `Could not find a declaration file for module 'myLibrary'` when I try to import it with `import * as myLib from 'myLibrary';` <SEP> where should I do it so typescript knows how to use it? <SEP> allright, thanks alot :)",Could not find a declaration file for module 'myLibrary'
Summarization," <SEP> nope, you can only export them. <SEP> Is there a way to handle transient dependencies? Eg if my project depends on lib-a and lib-a depends on lib-b. Which is the most simple way to have my project depend on lib-a and thus on lib-b and which is the most common way to package  lib-a. Do I have to package it at all or can I just refer to .ts files in lib-a? <SEP> @brian-lui  TS is based on JS. interface is just a type definition for a dictionary. dictionaries and objects are all somewhat the same key value stores. So yes you can return a dictionary providing an API. <SEP> @brian-lui  There is 'typeof ReturnType",is there a way to handle transient dependencies?
Summarization," <SEP> :) <SEP> @Ptival, I don't know if there's an expected way. Did you reference your new `foo.d.ts` file in `foo.ts`? <SEP> hmmm no <SEP> I don't use reference paths <SEP> yeah ur right <SEP> i think <SEP> except when they have the same name as a `.ts` in the same folder :( <SEP> I made a folder for all my custom classes in `/classes` and typescript recognized them great <SEP> even though my ts was in another file <SEP> i mean folder <SEP> ! <SEP> How come there's  no hover information in atom when I hover over where the curser is in that screenshot? <SEP> nvm, restarting Atom fixed it",why is there no hover information in atom and when hovering over where cursor is?
Summarization," <SEP> How would I annotate set interval for when I need to cancel it? <SEP> `private interval: xxxx` ` this.interval = setInterval(countIntervals, 1000);` <SEP> :number <SEP> interesting <SEP> why number? <SEP> Because that's what setInterval returns? <SEP> Do you sleep @dtabuenc ? :worried: <SEP> @soelinn On occasion I try. <SEP> hehe <SEP> anyway I am going to bed. Good night. Thanks for your help today again. <SEP> @matthewharwood  You are talking about a standard  javascript setInterval() right ? <SEP> yeah I didn't know setInterval returns a `random`(?) number <SEP> lol <SEP> it returns a numeric id that you can use to feed it into `clearInterval()` <SEP> Yeah I should have tested lol <SEP> I just assumed it was a function <SEP> Is it possible to type a function? <SEP> I feel like I'm going in a rabbit hole <SEP> Why do you want to type a function? <SEP> function returns a function? <SEP> right but why? <SEP> a function can return other things than functions <SEP> you could make your own though. <SEP> It was just a thought experiment lol.  I think it runs into the same closure, private discussion we had a few nights back. <SEP> I have no usecase right now lol <SEP> ``` function mySetInterval(handler: (...args: any <SEP> ahh <SEP> Awesome <SEP> the `()= <SEP> I've got folders for each module of my code. Some of them are wrappers around third-party libraries writing stuff to the window object. How can I make that folder/module append properties to the window object? I have something like: ``` declare global {   interface Window {     io_operation: string;     io_bbout_element_id: string;   } } ``` but get complaints about `Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.` <SEP> I have another folder with another third-party lib writing a few more items to the Window interface. I put these inside `index.d.ts` files",how to annotate set interval when cancelling it?
Summarization," <SEP> Daily reminder that TS is a total mess. <SEP> Yesterday I was busy hacking on bash scripts. In my life I never thought that it would be so painful experience. How come that bash creators failed to introduce into their shitty scripting language arrays and objects, the most basic things? Damn, I think we should drop bash immediately. <SEP> I was writing a tool to manage Konsole sessions and turned out to be a complete mess. I also only recently figured that it provides built-in session managing mechanism but it turned out to be working weirdly.",why bash creators failed to introduce the most basic things into their shitty scripting language?
Summarization," <SEP> I'm working on a React/Typescript app and I would like to use the Algolia Places library (https://github.com/algolia/places/). The NPM package for that library is called `places.js`. It does not include types, but there are some defined in DefinitelyTyped as `places` (https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/places). I've installed the `places.js` and `@types/places` NPM packages, but when I try to do `import places from 'places.js';` I get:  `Could not find a declaration file for module 'places.js'.`  Presumably this is because of the name mismatch between the places.js package and the places types package. Is there some way to resolve this? <SEP> There is not <SEP> It's just weird because the ones in DefinitelyTyped do correspond to the places.js library <SEP> They seem right, I just can't figure out how to refer to them... it makes me think somebody must be using the thing <SEP> Ok, thanks <SEP> Yeah, and if I change that line to `declare namespace places.js` then the code at the end of the file is mad because it's trying to make a variable with a dot in the middle of it <SEP> Put in quotes. <SEP> heh, that would be nice. It seems silly, they're so simple <SEP> Like I said though, a PR to rename the package is what's actually needed. <SEP> your declare namespace there won't do what you think. <SEP> I'm 0%. <SEP> right that doesn't work. <SEP> OK, I'm convinced by @keithlayne.  The solution is to _only_ do (1) of  :point_up:  <SEP> I was thinking renaming could be bad for current users who somehow have this configured to work, but I guess those npms won't go anywhere.",can not import types from places.js
Summarization," <SEP> Hola hola <SEP> There were reports earlier about Typescript supporting Introspection, are there more details on that? <SEP> I haven't heard these reports <SEP> So I'm not sure I can comment :) <SEP> @DanielRosenwasser nodejs/node, angular-ui/bootstrap, angular/material... probably angular/angular. <SEP> Hi! How do i resolve this in Typescript? ``` export default (    <SEP> By not doing Typescript @Truedrog",is there more information on Introspection support in Typescript?
Summarization," <SEP> Hi all, I have a question regarding converting typings written with commonjs in mind, into typings with ""none"" <SEP> I'm migrating a VS 2013 solution that used TS 1.8 and no modules <SEP> I want to migrate it onto VS 2017 with TS 2.5 and no modules <SEP> we're using react and new react typings use commonjs <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react <SEP> is there a way to convert the index.d.ts that's there and contains imports into react.d.ts without any module references? <SEP> I also need to use https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-dom <SEP> and there, there are some imports at the beginning (possibly easier to see my issue with TS) <SEP> I would be very grateful for any hints <SEP> tried various tsc flags to no avail <SEP> I understand that for regular ts file, you should be able to do it <SEP> but TSC seems to quietly fail for me when asked to do the same with types <SEP> Is there a way to get the interfaces a class implements using the compiler API? Type.getBaseTypes() doesn't return those <SEP> @Pajn what have you got so far? <SEP> @voltcode the general rule that seems to hold: typings files can't have any top-level `import` or `export` to be used in a _no module system_ setup <SEP> classDeclaration.heritageClauses <SEP> Has anyone noticed after upgrading to 2.7 that union type arguments need stuff like `{open: true as true}` instead of just `{open: true}`? I'm trying to see if this has been reported but I don't want to create a duplicate issue <SEP> @ShawnTalbert ok, is there a tool that concatenates a d.ts tree and creates single d.ts ? We got previous react typings also from DefinitelyTyped project, so it seems that someone moved one day from module none to module commonjs <SEP> I've been googling for some time now, I hope I don't have to move everything into modules because of that drawback <SEP> in my opinion, TypeScript is oriented towards people using a module system <SEP> I have a question about moduleResolution vs target.  I'm doing server side rendering, which means my tsx components have to be webpackabable, as well as run in nodejs. <SEP> I saw TS has the new esModuleInterop thing. <SEP> I have a library called Travel Agent that I compile, and then use to build other applications. <SEP> This is how I transpile that... <SEP> ``` {   ""compilerOptions"": {     ""outDir"": ""./dist/"",     ""module"": ""commonjs"",     ""target"": ""ES5"",     ""experimentalDecorators"": true,     ""emitDecoratorMetadata"": true,     ""declaration"": true,     ""jsx"": ""react"",     ""lib"":  <SEP> Because it has to run in the browser and in node. <SEP> Should I switch my compile here to `target: ""esnext""`, `moduleResolution: ""commonjs""`, and add the new `esModuleInterop` thing? <SEP> Is that the ""correct"" way to do that? <SEP> I have a feeling I'm going to be seeing lots of this for a while too... https://d.pr/i/Qp4mFO",how to convert react.d.ts into react.d.ts without module references
Summarization," <SEP> Hi Guys, I am trying to write a typing for the "" map"" function which should work for any Functor and is 100% type checkable. But it appears that it is not that easy(or even possible) in typescript. We all know that map should take a function (a :A) = <SEP> Ok, I got it ,  It is a Highly Kinded Types what is needed, and not supported in typescript <SEP> *Higher",how to write a typing for the map function in typescript?
Summarization," <SEP> so, `flatMapDeep` is missing from @types/lodash <SEP> is there any way I can extend the module without editing @types/lodash? <SEP> something like this: ``` import 'lodash';  declare module 'lodash' {   interface LoDashStatic {     flatMapDeep",is there any way to extend the module without editing
Summarization," <SEP> are there any guides or overview on how to use TypeScript purely for a command line application? I don't need React or Vue or any of that, just some good ol' CLI stuff but all the guides I find assume that I'll compile TS to the browser, which is not what I want <SEP> You may consider  <SEP> @sondr3 <SEP> thanks, I'll take a good look",how to use TypeScript purely for a command line application?
Summarization," <SEP> Does anyone know a quick way to get a count of all the typescript errors in a project? <SEP> Is there a required modifier akin to `readonly` to declare that certain properties cannot be `undefined`? <SEP> I want to do it granularly (no `Required <SEP> Given `type A = { a?: number, b?: string }` You should be able to get `type B = { a?: number, b: string }` with `type RequirePick <SEP> On mobile, so untested, but that should work",is there a quick way to count all the typescript errors in a project?
Summarization," <SEP> @NaridaL you pointed me to https://github.com/Microsoft/TypeScript/wiki/FAQ#how-do-i-prevent-two-types-from-being-structurally-compatible last night about my problem... I'm not sure I follow if that's the same problem, I've broken it down to a much simpler scenario:  ```typescript interface OptOnly {     name?: string; }  // works (not expected) const a: OptOnly = 'a';  // doesn't work (expected) const b: OptOnly = {     a:'b' } ``` <SEP> yes, you can break it down even further to `const a: {} = 'a'` <SEP> I guess I'm missing how a string is structurally compatible with type `OptOnly` <SEP> @NaridaL `root=. out=out` with allowJS on, right? <SEP> @wolfgang42 yeah <SEP> well... `OptOnly` doesn't hav emany requirements <SEP> the only requirement is that ""If you include  a property called `name` it should be a string"" <SEP> ``` const a: OptOnly = 'a'; ``` <SEP> satisfy that requirement.... <SEP> there's no property called name that's not a string <SEP> That still gets me `out/src/...` which is one level deeper than the original `src/`.  This seems like it really ought to be simpler than it is, sorry to put you through all this trouble... <SEP> @dtabuenc  has there  _ever_  been a property name that wasn't a string? XD <SEP> @NaridaL  I don't understand your question <SEP> Actually, here's an even weirder question which would also solve my problem: is there any way to transpile (and maybe even typecheck) yaml files? <SEP> @NaridaL  ``` const a: OptOnly = { name: 5 } ; ``` <SEP> would not compile <SEP> because now it does not satisfy your interface <SEP> it has a name property and it is of the wrong type <SEP> I guess that makes sense from a ""does it satisfy the requirements"" standpoint, my mindset is stuck in nomial typed languages <SEP> @dtabuenc Yeah, it was a (bad) joke. I can't think of an occasion where you'd have a `name` prop which wasnt a string. <SEP> @alex-sherwin  Yeah interface only define what something must have.. <SEP> @wolfgang42 second tsconfig possibly. Or simpler, just symlink outsrc - <SEP> it doesn't care if it has other things.. <SEP> EXCEPT <SEP> in object literal assignments <SEP> which is your other case  ``` const b: OptOnly = {     a:'b' } ``` <SEP> in object literal assignments it doesn't allow you to put other properties <SEP> I would argue that perhaps it should also do a similar check when assigning the string above <SEP> ``` const foo  = {     a:'b' }  const b: OptOnly = foo; ``` <SEP> That works... <SEP> even though the only difference is you separated it into a two step assignment.",how to prevent two types from being structurally compatible?
Summarization," <SEP> How could I get this to work? ``` interface I {     prop: string <SEP> It complains that you cant index `S` with `number`, I'm assuming because Its not treated `O` like an `I` when 'deconstructing' it <SEP> ``` type Convert <SEP> Ah, no that doesnt actually do it - I need to keep properties of parts of a union seperate, so it needs to be `extends` <SEP> Need to make a better example",can't index S with number in interface
Summarization," <SEP> but another thing, is it gonna be the same if I want to increase a score for example for a specific user ? <SEP> I mean the same logic? @webstrand <SEP> like increasing or decreasing <SEP> but I guess for that case I have to change the type first and then do the logic <SEP> It might be, it might not be. It's impossible to tell, from my vantage point. You can try it, and the types will prevent you from writing anything invalid. <SEP> yeah, will try out that one <SEP> @webstrand  somehow the state is cleared when dispatching my function, eg: AddWeapon(""1"", weapon)) then it will give me as a result: ""1"" and it will not add a specific weapon to the state for the use which have id ""1"" <SEP> so after that action, my state will be cleared :(",is it gonna be the same if i want to increase a score?
Summarization," <SEP> updog? <SEP> you're supposed to say ""what's UPDOG?"" <SEP> I actually tried googling it, wasn't much help",what's UPDOG?
Summarization," <SEP> i just head about tsx. why do people want that? I don't get it.  It looks terrible to me. <SEP> Ive never actually used it, and my first reaction was  <SEP> @xmcqueen what are your hangups about it? <SEP> I never really considered if I should/shouldn't use it, I just started using it as it seemed standard for React applications <SEP> to close on my earlier question, life was made much better by re-writing my component as a non-arrow function <SEP> hangups it looks like xml, and its designed to generate javascript? I just don't get the use case. <SEP> The use case is basically react and other browser stuff.  Doesnt make sense anywhere else. <SEP> @xmcqueen I don't know if I would agree that it looks any more like xml than it does like HTML, which is the actual target.  Do you really not get the use case of JSX and TSX? Have you ever used React? Is there a better way to describe HTML via JS? <SEP> I definitely thought the idea of writing HTML in JS seemed  smelly, but then once I tried it I really liked it <SEP> @keithlayne and to address your earlier question, it appears that there are generics in TSX components, this is working for me: ```      <SEP> (I'm sure you guys will hate that) <SEP> Syntactically its xml.  e.g. JSX supports self-closing tags ` <SEP> yea i didn't get the use. i read a bit of a few docs and kept wondering why. What you said is more helpful. I'd not even heard of jsx.  I've been using react but am new to it. This is the simple thing I didn't get ""writing HTML in JS"" <SEP> Only works because of error tolerance <SEP> https://stackoverflow.com/questions/3558119/are-non-void-self-closing-tags-valid-in-html5 <SEP> Oh, I guess I've never seen an ` <SEP> Yeah browsers will understand it due to error tolerance but its not technically legal syntax IIRC <SEP> Whereas in xml (and jsx/TSX) it is <SEP> The nice thing about html5 though is the error handling behavior is also standardized <SEP> tl;dr: the self-close slash is optional for void (contentless) elements only, but such elements will self-close anyway even without it <SEP> Anyway yeah jsx = JS + XML <SEP> Yeah Ive never really understood seeing ` <SEP> Probably people who are salty that XHTML never took off :stuck_out_tongue: <SEP> I think it's more clear <SEP> makes a reader immediately certain that they won't find a  closing tag for that element anywhere <SEP> I know this might sound douchey, but if theyre looking for a closing ` <SEP> Yet cases where self-close would be desirable (` <SEP> Its hopping today, way more than usual",why does it look like tsx and its designed to generate javascript?
Summarization," <SEP> I'm trying to extend EventEmitter2 (`class Test extends EventEmitter2`) but unlike custom classes typescript errors out, saying ""TS2507: Type 'typeof ""/Users/viveleroi/Sites/inspire-tree/node_modules/eventemitter2/eventemitter2""' is not a constructor function type"". They have a d.ts file here https://github.com/asyncly/EventEmitter2/blob/master/eventemitter2.d.ts - what can I do to properly extend that? <SEP> nevermind I think I was importing it wrong <SEP> yup I was, silly me. Somehow I had typed it as `import * as EventEmitter2...` rather than `import { EventEmitter2 } from 'eventemitter2';` <SEP>     class A {}      A.prototype.test = function() {}      var a = new A().test(); <SEP> obviously throws `error TS2339: Property 'test' does not exist on type 'A'`",how to properly extend 'eventemitter2' 
Summarization," <SEP> Hi! I have some Problems understanding imports here. ```ts import { IPC } from 'node-ipc'; const ipc = new IPC(); ``` does work flawlessly <SEP> whereas  ```ts import { IPC } from 'node-ipc'; const ipc: IPC = new IPC(); ``` <SEP> gives me error ""Cannot find name 'IPC'."" <SEP> The module's d.ts looks roughly like this: ```ts declare namespace NodeIPC {     class IPC { /* ... */ } } declare const RootIPC: NodeIPC.IPC & { IPC: new () = <SEP> What am I missing? <SEP> @bkircher it's exporting `RootIPC`, which is a const <SEP> for what you want, it would have to be doing something like export = NodeIPC.IPC <SEP> Hmm, I am beginning to suspect that I am actually not supposed to use class IPC  at all... I see examples like  ```ts let ipc = require('node-ipc'); ipc.someFunction(); ipc.someObject.someFunction(); ``` as if `ipc` is a reference to a globally defined object that is created when I require the module... the `const RootIPC` ... am I correct? <SEP> yeah `declare const RootIPC: NodeIPC.IPC` definesan instance of NodeIPC.IPC <SEP> Hmm, interesting... is this considered a  _good_ pattern? To execute code or create objects at require()-time?",can not find name 'IPC' when importing from node-ipc
Summarization," <SEP> There is alternative convention to declare private members different that _ prefix? (Ex. private _memberName.) <SEP> There used to be one in older languages, haven't seen it used much with TypeScript <SEP> @rraziel there are some frameworks  use greek letters other something like # prefix ... there is some standard convention or just is personal convention? <SEP> The # prefix is a new JS/TS feature, it makes them ""truly"" private <SEP> Like, if you do `private field: string`, it's (mostly) private at compile time but you can easily work around it to access the property <SEP> If you do `#field: string`, it's a ""proper"" private like you see in other languages <SEP> How would I type an abstract base class such that child classes should return new instances of themselves? Because something like this: https://is.gd/1MrR7m doesn't work. I don't want to lose type information, so typing the return value as `Base` (or in the example `AbstractBaseClass`) isn't really an option. <SEP> Something like `final` would really solve that problem, but I understand that no such thing exists? <SEP> @Gerrit0 Yeah. I hope they fix that. To me it is the one very most annoying thing about TypeScript. <SEP> Various people say ""it isn't possible, the declaration syntax doesn't support it"". And makes me think ""well, how about adding the support""? I guess anyone can step up and try, but I dislike that they haven't. And they keep going and going with the language features, but leaving declarations behind in the dust. <SEP> How come this is allowed?  ```ts export interface TrackEnd {}  const trackEndData: TrackEnd = {  NonExistantProperty: true }; ```",is there a convention to declare private members different than _ prefix?
Summarization," <SEP> There are those who write in PhpStorm? What to do if the library has no Declaration .d.ts? <SEP> The entire Assembly is written independently. that is not in use built-in tools ide. <SEP> @sebastian-lenz most helpful, thanks! <SEP> i write webworker <SEP> ``` ///  <SEP> and on compilation have errors <SEP> ``` Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2677,39): Error TS2304: Cannot find name 'EventInit'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2772,52): Error TS2304: Cannot find name 'UIEvent'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2893,52): Error TS2304: Cannot find name 'UIEvent'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2929,35): Error TS2304: Cannot find name 'MSAppAsyncOperation'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2935,47): Error TS2304: Cannot find name 'MSExecAtPriorityFunctionCallback'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(2936,41): Error TS2304: Cannot find name 'MSExecAtPriorityFunctionCallback'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3096,13): Error TS2304: Cannot find name 'XMLHttpRequestUpload'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3112,52): Error TS2304: Cannot find name 'UIEvent'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3153,52): Error TS2304: Cannot find name 'UIEvent'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3194,52): Error TS2304: Cannot find name 'UIEvent'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3280,36): Error TS2304: Cannot find name 'Node'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3280,50): Error TS2304: Cannot find name 'NodeList'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3302,16): Error TS2304: Cannot find name 'Position'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3305,13): Error TS2304: Cannot find name 'PositionError'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3308,11): Error TS2304: Cannot find name 'MediaQueryList'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3317,17): Error TS2304: Cannot find name 'MutationRecord'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3317,45): Error TS2304: Cannot find name 'MutationObserver'. Error in Browserify:   node_modules/typescript/bin/lib.webworker.d.ts(3320,19): Error TS2304: Cannot find name 'AudioBuffer'. ``` <SEP> where is problem?",what to do if the library has no Declaration.d.ts?
Summarization," <SEP> !@#$ <SEP> So, I have no choice but to use `snake_case`? <SEP> https://stackoverflow.com/questions/43111996/why-postgresql-does-not-like-uppercase-table-names <SEP> This is so fucking dumb -____- <SEP>  (The folding of unquoted names to lower case in PostgreSQL is incompatible with the SQL standard, which says that unquoted names should be folded to upper case. Thus, foo should be equivalent to ""FOO"" not ""foo"" according to the standard. If you want to write portable applications you are advised to always quote a particular name or never quote it.) <SEP> What happened to following the SQL standard!? ",why should i use snake_case instead of uppercase?
Summarization," <SEP> TIL VSCode understands git's merge-conflict markers <SEP> ! <SEP> ! <SEP> @fatcerberus <SEP> I got it lol <SEP> Yeah, it makes resolving conflicts wayyyyyy simpler",TIL VSCode git understands merge-conflict markers 
Summarization," <SEP> Is there a way to build an object key out of a concatenated string without declaring the object first? For example: https://www.typescriptlang.org/play/#src=%0D%0A%7B%20%60my%24%7Bstring%7D%60%3A%20thing%20%7D <SEP> @maiermic it worked with a simple own module import/export <SEP> ``` {   ""compilerOptions"": {     ""target"": ""es6"",     ""module"": ""commonjs"",     ""sourceMap"": true,     ""allowJs"": true,     ""moduleResolution"": ""node"",     ""allowSyntheticDefaultImports"": true,     ""lib"": ",build an object key from a concatenated string without declaring the object first
Summarization," <SEP> @AnyhowStep I'm not sure I understand. You can't have a const as a class member <SEP> What version of TypeScript are you using <SEP> Playground <SEP> `as const` doesn't make `side` readonly. <SEP> https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions <SEP> At a certain point you are no longer really naming them, so much as describing them <SEP> So, I told myself <SEP> I knew I was wrong. But I was finding an excuse to avoid it <SEP> Now, I have to refactor the whole damn project, just to accommodate it, because I finally understand the problem well enough <SEP> I don't think most people will interact with these types directly. <SEP> They can use the library's functions and not worry about the categorization of the stuff. It's only really important when you write invalid SQL queries and need that error caught during compile time",is it possible to have a const as a class member?
Summarization," <SEP> @ShawnTalbert awesome, thank you so much! Cheers. <SEP> Is it a good idea to leave `classes` and use `modules` instead? Because for NodeJS, there's no concept of importing `.js` files like in a web browser does. The Node way is to use `modules`. <SEP> But then we would need a package to make a web browser understand `modules`. <SEP> @AskYous  I don't know what you mean by the first sentence but browsers do understand modules by way of `requirejs`, `systemjs` and similar <SEP> I was asking if it's a good idea to stop using classes, as in: https://www.typescriptlang.org/docs/handbook/classes.html <SEP> And instead use modules <SEP> classes !== modules? <SEP> yeah theyre different <SEP> classes describe types in an OO sense <SEP> ya <SEP> modules are a higher level code organization construct,  at least in my mind <SEP> But I can't import classes in nodejs <SEP> is there an equalavent to ` <SEP> yes, it's `require()` but you should (imho)  be using modules in your browser environment <SEP> can require import a `.ts` file that consists of only a class definition? <SEP> you should ` <SEP> i mean a non-website app. like a nodejs console app <SEP> If I make a class in typescript, how can I use it in NodeJS? <SEP> I'm not sure if the latest nodejs supports `class` (e.g. ECMAScript2015), but if it does you should be able to `export` your class in a module and access via a node `require()' <SEP> ah ok <SEP> but then I might as well ditch `class`es and use modules alone <SEP> yes, if you're not using classes in the OO design sense then just modules are probably want you want. <SEP> Yeah I would be using them for OO <SEP> then create modules that export classes <SEP> what does classes have that modules doesn't havev <SEP> you can instantiate a class <SEP> and so on <SEP> u use modules in ur web apps? <SEP> Yes, I use Aurelia for web apps and that's very much module oriented <SEP> cool. That's probably the solution <SEP> `export class MyClass`. Ooooohh... <SEP> thats the solution",is it a good idea to use modules instead of classes?
Summarization," <SEP> Yes I understand fur may be undefined, but I'm sure my api call returns animals with fur, so I guess it's safe enough and a good compromise. <SEP> Anyway thanks to both of you. <SEP> @GreenMonkeyBoy If you're going to do that, I recommend  <SEP> type-assertions like `foo as Whatever` are fragile and can easily hide bugs <SEP> I need to take a break, but I will check your code and try it in my real app later. <SEP> Also, the reason I wrap the class implementation in an IIFE is so that the emitted javascript class can have the name `Animal` and not something else, like `AnimalImpl`",typeassertions like 'foo as Whatever' are fragile and can easily hide bugs 
Summarization," <SEP> `tsc -w` does not appear to delete compiled files when the source file is deleted. <SEP> is it really not possible to get the type of a yield expression in typescript? D: <SEP> @johnfn i just used the first example here and type inference detects `number` https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function* <SEP> if i `yield` an additional value of a different type, it infers the union type <SEP> @eyelidlessness what i mean is the thing where you'd do `gen.next(""foo"")` <SEP> and then `const result = yield 5 // result is now ""foo""` <SEP> i don't know how TS could infer that type. <SEP> then the yield expression would return the second paramterized type <SEP> and .next() would be parameterized over the same thing <SEP> wait, are you saying you don't want inference, you just want to specify the type? <SEP> why not `const result: string = yield 5;`? <SEP> if i did something like that, i lose all the benefits of type inference <SEP> because i just manually set the type and both the sender and receiver lol <SEP> the argument to `next` is `any` <SEP> yeah.......... thats the problem lol <SEP> it isnt actually any in practical scenarios <SEP> the type of next() is whatever the generator expects it to be <SEP> like imagine <SEP> which is why i think you would want to specify it  in the generator <SEP> it should be another type parameter on `IterableIterator` <SEP> if i specify it once (on the generator) then next() should automatically have the correct argument type <SEP> actually wtf <SEP> i can actually just modify the type definitions <SEP> by adding the second type parameter lol <SEP> but its not _terrible_",is there a way to get the type of a yield expression in typescript?
Summarization," <SEP> Does the typescript compiler API/language service include a way to find out what output files will be produced without actually compiling?  I want to integrate typescript into my Cell build tool but I need to know in advance what files will be produced in order for up-to-date checking to work properly <SEP> I wonder if --listFiles works without compiling <SEP> doesn't look like it :/ <SEP> --skipLibCheck would make it faster, too",is there a way to know what output files will be produced without compiling?
Summarization," <SEP> @ShadowManu Thanks for the sample. I removed the 2nd type parameter. I had to do it in a slightly different way but your example helped. Again, T is a property in Z, Z & T are both inharited  so its complicated. anyway, thanks again! <SEP> Hi! I'm read redux doc, and wonder: Why MakeActionCreator was not write as makeActionCreator2 ? Why makeActionCreator better then makeActionCreator2 ? ```  function makeActionCreator(type, ...argNames) {     return function(...args) {         let action = { type }         argNames.forEach((arg, index) = <SEP> Are there plans for ADTs/Discriminated Unions beyond literal string values? <SEP> while it's super-awesome to be able to write, for instance,  ```ts type ControlStates = ""start"" | ""loading"" | ""done"" ```  I don't have a good way of referencing `ControlStates.___` and having autocomplete kick in, or of enumerating all of the acceptable values <SEP> some kind of compile-time constant -- kinda like enums, but not ambiguous/hacky, would be nice <SEP> failing that, allowing string-enums would be nice <SEP> So the answer for my qustion was perfomance... <SEP> Anyone has any idea on how to debug module resolution issues?",why was makeActionCreator2 not written as makeActionCreator2?
Summarization," <SEP> Hey, what would the best way to test an extension which uses the vscode.window.showinputbox function? <SEP> Regarding `export default`: it takes a value, not an identifier specifically.  This is per ES spec, e.g. you can legally do `export default 812;` <SEP> Its a really annoying inconsistency but its part of the language unfortunately :frowning:",how to test an extension which uses vscode.window.showinputbox
Summarization," <SEP> @G-Rath I suspect youre doing the overloads wrong based on your snippet above - you have to declare all the overloads you actually want as signatures only and then the actual implementation should have a signature compatible with all of those.  The implementation itself isnt used to typecheck call sites. <SEP> Its an easy mistake to make <SEP> I don't understand what you mean by that - without the implementation I can't add the overloads? <SEP> TS complains that it expects the method implementation to follow straight after <SEP> In other words instead of: ```ts function f(x: string) function f(x: number) {     // do stuff } ``` You want instead: ```ts function f(x: string); function f(x: number); function f(x: number | string) {     // do stuff } ``` <SEP> but ya I mean if thats what I have to do, thats what I'll do. I was just trying to avoid that if possible :) <SEP> @killerspaz what do you mean? where is the input param missing...? <SEP> What is the type of `SocketEvent.Open` and `.Close`? <SEP> Is it an enum? <SEP>  Its always legal for a callback to disregard a parameter <SEP> but the input needs to be optional, which is why the `?` was on the interface definition. <SEP> so inverted approach, yes that works fine without the `?` but when I want NO parameters to the method, then it barfs saying I didn't supply `undefined` to the method (such as a `logout` reducer that doesn't need parameters) <SEP> Woops sorry, but ya you can add the `?` back and it still works fine :) <SEP> Alright, so then you'll have to refactor :wink:",TS complains that it expects the method implementation to follow straight after fatcer
Summarization," <SEP> gosh, how do you tell typescript it's an array of classes?! I don't want to say which ones, don't want to use a generic necessarily, it's just a freaking array of some dump classes :tableflip: <SEP> `Dump <SEP> `unknown <SEP> ` <SEP> yesterday, we figured we should alias `any` with `whatever`. Hence, I might go with `whatever <SEP> Unknown is safer <SEP> sure, that was a joke anyway",how to tell typescript it's an array of classes?
Summarization," <SEP> I just think it's a design limitation, TypeScript isn't able to represent that.  Not that it's impossible theoretically <SEP> Like, at the call site of that arrow function that type will be perfect - it's just that the compiler isn't looking at what you're assigning it to when typechecking the arrow function itself <SEP> Which seems reasonable since it's just an expression - you could just as well assign it to something more permissive <SEP> Does it never do that? I'll experiment. <SEP> I somehow thought it did. <SEP> I think you misunderstand - it can represent the overloads as a *type* perfectly fine.  What I mean is it has no way to represent, *in literal form*, a function expression with overloads <SEP> Because once it's out of literal form and just a variable, all bets are off <SEP> Like, conceptually what you're doing is declaring this permissive arrow function and then attaching overloads to it after the fact - so it can't use those for type checking <SEP> Am I explaining that well? <SEP> OK, I can see that the argument of fooOrBar on the third-last line of the original code would be non-denotable if it was inferred from the type that the function was being assigned to. <SEP> But I was hoping it would be inferred anyway :) <SEP> I think what we'd need to make this work is some kind of better contextual typing - where TS could see you're assigning the function literal to a function type with overloads and have those contribute to type checking the literal itself <SEP> It's theoretically possible, we even have this kind of context-sensitive typing for a lot of things (how it infers parameter types for inline callbacks e.g.), but it doesn't do that for function expressions to my knowledge <SEP> Although I get what you're talking about now, I did anyway just double-check that function parameters **are** normally inferred when assigning to a simple function type. <SEP> It seems to just be when assigning to an overloaded function type that it isn't inferred - maybe that's because it's un-denotable, so it just says ""sod it, I guess that's `any`"". <SEP> Yeah, like I said, it's possible *in theory*; I don't know how much work it would be to implement in practice though.  Would be pretty neat <SEP> It was an interesting thing to think about, thanks :smiley: (but sorry I couldn't help)",typescript isn't able to represent function expressions with overloads
Summarization, <SEP> how do you make a key conditionally optional? <SEP> I thought key: T extends Whatever ? goodType: undefined <SEP> would work <SEP> but it doesnt seem to? <SEP> still looking for a key in an object literal assignment <SEP> ``` type CollectionMeta <SEP> but when I do CollectionMeta <SEP> ``` const meta : CollectionMeta <SEP> complains Im missing nextKey,how to make a key conditionally optional?
Summarization," <SEP> Q: In TS src/compiler it is very rare for there being classes, and it's mostly namespaced modules/exports. Is that just a design principle for 'simplicity'? Or is it for performance reasons? <SEP> @skeate @osdiab the core lib also has `NonNullable <SEP> @colonelchlorine classes are very limited, so some experts agree that they should be mostly avoided. I don't think there's a performance cost in either direction. <SEP> I'm not sure why the TS team doesn't use them, there's no code that needs classes, so it's purely up to you whether you use them <SEP> if you use something like React or MobX though, they force you to use classes (for a somewhat okay-ish reason) <SEP> @SimonMeskens thanks. I guess it's the old procedural vs oop question. Not sure if ms devs are here on gitter, but was just curious why they went that way and if there were plans to change that <SEP> it's not procedural vs oop <SEP> it's prototypal vs oop <SEP> prototypal is strictly more powerful than oop, so classes limit your options <SEP> well, modules with exported methods aren't really prototypal. it's just a collection of functions <SEP> fair yeah <SEP> I guess you could then say it's functional vs oop? <SEP> and the TS team has a more functional style? <SEP> which is actually rather common for compilers <SEP> I'm currently reading up on the theory behind all of this, models of computation, type systems, etc, it's quite fascinating <SEP> if you want to understand the oop part of the equation, look at Luca Cardelli's research he did at Microsoft in the 90's <SEP> his book ""A Theory of Objects"" is profound <SEP> interesting. i'll check that out. <SEP> another interesting read is the actor model of computation, which is a very good model for writing asynchronous code. I think it's the basis for WebWorkers <SEP> it's the reason why WebWorkers don't allow you to share state easily",is there a reason for the lack of classes in src/compiler?
Summarization," <SEP> @vogler I'd need to see the full definition of `dbm` <SEP> in general, no there's no way to get the return type of a generic function, like `dbm`. <SEP> Basically, what you have to do, is figure out what the return type of `dbm` actually is, and then extract that definition into a type alias like ``` type DbmReturnType <SEP> and then define `const dbm =  <SEP> You can have typescript generate the definition for you, by exporting `dbm` and inspecting the resulting `.d.ts` file. <SEP> That function is honestly too complex for me to analyze, here. <SEP> actually, it's return type is `{  <SEP> then you're out of luck, unfortunately. There's no mechanism to get the return type of a generic function <SEP> You can try `ReturnType <SEP> but, right now, the type of `db2` would be `{  <SEP> Thanks! Works: ~~~typescript type model = Lowercase",is there a way to get the return type of a generic function?
Summarization," <SEP> What are people using for typing ES6 environment? es6-shims feels a bit weird, if I'm not using es6 shims and just relying on an es6 runtime :) <SEP> Would anyone know what's up with the below? It seems like `any <SEP> Ah - just upgraded to 1.8.9 and it went away :) <SEP> oh spoke too soon. Anyway here's a live version of the issue: http://bit.ly/1SwzjL0",what are people using for typing ES6 environment?
Summarization," <SEP> Hey folks <SEP> How can I add a property to a class below another one so that the positions of each node in the AST are regenerated? <SEP> If I create a new property using `ts.createProperty` and add this to the class members, for simplicity at the end, then the `pos` and `end` is always `-1` <SEP> I suppose I somehow have to update the sourceFile and all the positions of each node <SEP> How can I do that? <SEP> What I like to do is, assuming I have the following input ``` class Foo {   @FooBar()   foobar: number; } ```  Is to add a property `__foobar` right below the one that has the decorator `FooBar`. So the output is supposed to be  ``` class Foo {   @FooBar()   foobar: number;    __foobar; } ``` <SEP> ! <SEP> guys, why my connect() function dont see this return ? <SEP> I am using angular with typescript, maybe from the architecture point of view is already wrong, but I have a `interface` which a property can accept to kind of type, one for when the data is return from the API and other when it is fill from a `select` form element, it looks like that:  ``` export interface ProviderLinkSection {     id?: number;     name: string,     ccid_pointclick: string,     utm_campaign: string,     created?: string;     updated?: string; }  export interface SelectOption {     value: string|number,     name: string }  export interface ProviderLink {     //  <SEP> now the problem is when I want to do a `map` when I know that the `section` value would be of type `SelectOption <SEP> ``` protected transform(record: ProviderLink) {             return {...record, ...{ sections: record.sections.map(s = <SEP> which would be the best way to resolve it? or maybe I am misusing it <SEP> I resolved it but I wanted to know if how I am using it is the correct way <SEP> solution: ``` protected transform(record: ProviderLink) {              return {...record, ...{ sections: (record.sections as SelectOption <SEP> @xavadu_twitter  Since `sections` is a union of arrays there are limitations on the invokeability  of  the methods.  Just yesterday i answered a similar question on SO: https://stackoverflow.com/questions/56884065/typed-arrays-and-union-types/56889350#56889350 <SEP> @dragomirtitian thanks, I wil lcheck it... the more complicated part from TS for me, is knowing if I am using it well more than ""do it work without error"" <SEP> Yeah I get that, especially since while the TS type system models JS pretty well there are still blind spots <SEP> So you don't know if asserting here is good or bad. <SEP> yes, indeed, and BTW a similar ""well usage"" small question:  the `null` type in `sections` should be explicityly declared in the `interface` or is not necessary? <SEP> In this case you will probably need some asssertion <SEP> If you want to assign `null` to it then yes it is necessary. If you have `strictNullChecks` `null` will not be assignable to any other type so anything you want to allow nulls in you need to add `| null` to the type <SEP> I see, thanks for all the answers <SEP> @arkes987 `return`?",how to add a property to a class below another one?
Summarization," <SEP> ? <SEP> for type safety of course <SEP> there's no typesafety at runtime <SEP> I realize that <SEP> but you can constrain the types <SEP> so I'm still not understanding <SEP> constrain it how? <SEP> constraints would be purely compile time <SEP> I will need to probably try to produce this mythical thing <SEP> I cannot really say if it makes sense I guess <SEP> you can generate a javascript object that satisfies a typescript interface <SEP> but there will be no runtime type checking of that <SEP> I would like to avoid doing ```for ( const k in o )``` after I know the precise shape <SEP> and do what instead? <SEP> set the known keys <SEP> diretly <SEP> you won't know the keys at runtime at least for an interface <SEP> either you know the keys at compile-time or you don't <SEP> if you don't then you have to use reflection <SEP> which I guess `const k in c` can be considered javascript's flavor of reflection <SEP> it is exactly that <SEP> I think what I'm thinking of probably borders on the line of dependent types <SEP> so I feel like the answer is probably no <SEP> sure but for example V8 <SEP> generates classes at run-time <SEP> and functions that consume them <SEP> at run-time <SEP> and there is static ""safety"" between those constructions <SEP> since it cannot know ahead of time what code you will try to execute <SEP> well you could certainly generate a class/object whatever and a corresponding function <SEP> ya <SEP> but in a sense, you are the compiler there <SEP> ya <SEP> it's stuff like this tho <SEP> that dynamic langs can do which makes them interesting <SEP> but there is no type-safety between existing call that will call your new function <SEP> the real achievement of TS will be capturing this level of expressivity <SEP> hrm <SEP> I will try to throw a simple example together <SEP> maybe my question will just unwravel as you say <SEP> go for it.... interested in seeing exactly how you would use this. <SEP> ah it's used for the webgl wrapper <SEP> to implement more efficient run-time performance <SEP> for a generic interface <SEP> in terms of static to dynamic code type safety <SEP> aye <SEP> you're correct though that w/o type-safe reflection",is there a way to constrain dtabuenc at runtime?
Summarization," <SEP> ``` create <SEP> You should use that, instead of `{}` <SEP> yeah better <SEP> Why do you have the default there, by the way? It'll always be inferred <SEP> unless you want `initState` to be optional? <SEP> No, I mean it's always unused. I can't think of any way the default gets used, it's always inferred from the parameter `initState` <SEP> but anyways this is the way to infer a value from an argument, isn't?",why is webstrand  always inferred from initState
Summarization, <SEP> Anybody familiar with the Typescript Emitter API? <SEP> or the AST functiosn? <SEP> Want to generate a `const` variable but `createVariableDeclaration()` doesnt seem to do it,how to generate a variable using the createVariableDeclaration()
Summarization," <SEP> Is it possible to write a constructor signature which accepts rest parameters as an array or as an array with first element as array? <SEP> I wanted to enable both syntaxes of passing individual elements or an array ``` const instance1 = new Thing('myThing',  <SEP> However, it only seems to work with `any <SEP> so it's an array of numbers or an array containing array of numbers <SEP> hope that makes sense.... <SEP> given that we have rest and spread, I'm not sure it matters much to accept both syntaxes but interesting to try",is it possible to write a constructor signature which accepts rest parameters as an array or
Summarization," <SEP> Any of you know how far off 2.0 is? days or weeks? <SEP> And what kind of tooling support should be expected for the new 2.0 features at time of release? VSCode seems pretty up to date, but I'm wondering about Visual Studio <SEP> https://github.com/Microsoft/TypeScript/issues/5039#baseUrl <SEP> how to use this path mapping feature? <SEP> i can transpile to commonjs or systemjs but browser won't load it afterwards <SEP> i want to use it with angular2 btw <SEP> @DeusProx path mapping is meant to reflect your SystemJS/AMD configuration for re-mapping imports <SEP> the idea is they're supposed to reflect your config options",how to use  DeusProx '' path mapping feature in vs
Summarization," <SEP> how do i cast a json string to a typescript object ? <SEP> @thbt  If it's a json string I suppose you should do something like ```const myObject = JSON.parse(myString) as MyType```? <SEP> ok thanks, but is MyType an interface or a class ? <SEP> or can it be both ? @Souldrinker <SEP> yes, it can be either...",how do i cast a json string to a typescript object?
Summarization," <SEP> Yeah usually you put it on a CDN so the browser just pulls it from cache every time... if you're lucky multiple sites will pull from the same CDN and you get it for free <SEP> yeah, we def. give every asset a unique url and cache for 2years <SEP> but right or wrong, customers complain when our widget is larger <SEP> yeah so heres a random question - any JS fetch-like library anyone knows of that you can tell to use a proxy? <SEP> why? whats the use-case <SEP> um, proxying <SEP> :P <SEP> window.fetch = Proxy(fetch); <SEP> haha <SEP> thats cute <SEP> I think using a proxy in JS is maybe disallowed for security reasons <SEP> but I havent really been able to find definitive info <SEP> No browser stops the use of proxy on anything atm <SEP> to be clear, Im not talking about JS proxy class, Im talking about a web proxy (SOCKS?  or whatever) <SEP> oh Web Proxy? never heard of it <SEP> thought u were talking about ES6 Proxy <SEP> No, like connecting to the web through a proxy server <SEP> like you can configure your browser to do it <SEP> but allowing random JS to do that is pretty much saying  <SEP> possibly <SEP> I dont really know",is there a way to use a proxy in a fetch-like library?
Summarization," <SEP> @webstrand You cant intercept imports afaik - they are resolved statically, before any code is run <SEP> And import maps stopped working in chrome 81, unless they changed the flag.  I was quite upset since I need them for oozaru :frowning: <SEP> I love ES modules, I dont think I could ever give them up <SEP> Im not clicking that",cant intercept imports afaik - they are resolved statically
Summarization," <SEP> @keithlayne  is there a way to achieve it with npm ? <SEP> but I have one lib that requires webpack, then tsc from the webpack-generated sources, then other webpack builds depend on that. <SEP> either that or `import cssnano = require('cssnano')` <SEP> I have turned it in my 3 tsconfig.ts files (global, server, client) but it doesn't work actually <SEP> I have tried it to put esModuleInterop before but didn't worked so I removed it and added it to react TS project",is there a way to achieve it with npm ?
Summarization," <SEP> @dragomirtitian my goodness it works! thanks a bunch! <SEP> ! <SEP> Hi there, I meet a problem, how to tell b its type is A without type assertion? <SEP> Well ok so is there a way to make a type that would exclude all nullable properties of other type ?",how to make a type that excludes all nullable properties of other type?
Summarization," <SEP> @Mossop that's because checking the truthiness of an `unknown` value doesn't narrow the type, but `typeof obj === 'object'` narrows it to `object | null` which can then be narrowed with a truthiness check <SEP> Can I somehow do `import React from 'react'` and then react is pulled from another node_modules directory than the one in `./` ? <SEP> @tieTYT `for (const index in sceneMethods) ...` should do it",can i import react from another node_modules directory than the one in
Summarization, <SEP> hello anyone uses systemjs and typescript together? <SEP> anyone with deep knowledge of typescript floating around? got interested in sweetJS recently because i'm more of a fan of Scala style syntax and i was wondering if you can basically write something that helps typescript understand macros and what they evaluate to so i can use sweetJS in a personal project to try it out <SEP> i want typescript to understand that this.... ```  <SEP> is the same as this <SEP> ``` ,is there a way to make typescript understand macros and what they evaluate to?
Summarization," <SEP> how do I know that my function is overriding a function in parent class? <SEP> at runtime or when editing? <SEP> when editing <SEP> i am watching this video <SEP> and the guy is saying: this function overrides the parent function, but dunno how he knows that <SEP> Well if you know the parent class has that function, then a function with the same name in a subclass will automatically override it.. <SEP> WebStorm shows little icons beside overriding functions. <SEP> ahaa <SEP> thanks @NaridaL <SEP> can u import something to ur module, that doesn't exist in ur current project? <SEP> for example, can u import a module from an online repo? <SEP> I am seeing this guy writing something like import * from '@microsoft/somethingbla bla '",how do you know a function is overriding a function in parent class?
Summarization," <SEP> How do folks typically learn how to ingest typings from `@types`? Do you just use something from the library that requires some annotation, see how it explodes, add stuff, adjust? <SEP> I generally assume that the `@types` declarations are accurate and proceed to use the library as if it were any other lib written in TS <SEP> so I have a `.d.ts` file where I augment a lib interface and it's working fine unless I try to import a type and use it. Anything imported is resolved as any in the end. ``` import { TypeA } from '...';  module 'lib' {     interface A {         a: string; // works fine         b: TypeA; // becomes any    } } ``` <SEP> @ShawnTalbert How do you resolve when your consuming of the types is incorrect? I guess Im just getting the hang of typed langsvery often, the type explosion tells me exactly what I have to fix from these libs, but sometimes the explosion is extremely long <SEP> @ShawnTalbert ah, nice... thanks so muchwill do (still learning TS)",how do you learn how to ingest typings from @types？
Summarization," <SEP> @alukach Yep. You can write some simple functions to make things safer, if you want: ```ts function brand <SEP> I've done this in a few places. <SEP> Then, if you _really_ care about performance, you can use something like  <SEP> not perfect. You can brand anything with that, no matter if it's right or not. <SEP> so, just be careful :P <SEP> yeah, he'd need to create a type that has all of the properties of `Foo` except for the ``ed ones. <SEP> Side note, we _can_ filter object properties by prefix, now! Using template literals <SEP> I'm not seeing how a brand would be useful for my use case <SEP> ```ts interface Foo {     ""private"": 'foo';     id: number; }  function brand <SEP> Point in favor of not using symbols, I suppose? <SEP> ```ts brand <SEP> call it whatever you want, `brand` might be the wrong name <SEP> @keithlayne See the definition of `brand`, that's why I never wrap my typescript code. Is there a sane way to wrap that?",ts function brand '' and keithlayne not perfect
Summarization, <SEP> I'm trying to create a class decorator ``` function injectShouldComponentUpdate <SEP> https://www.typescriptlang.org/play/#src=function%20injectShouldComponentUpdate%3CT%3E(clazz%3A%20T)%20%7B%0A%20%20%20%20return%20class%20extends%20clazz%20%7B%0A%0A%20%20%20%20%7D%0A%7D <SEP> what am i missing?,how to create a class decorator  function injectShouldComponentUpdate
Summarization, <SEP> I'm trying to migrate an existing SPA based upon RequireJs to Typescript and I'm running into problems concerning module resolution <SEP> I've got my config.js set up for requireJs where I define paths like   <SEP> Now I've googled ,unable to migrate a SPA based upon requirejs to Typescript
Summarization," <SEP> I'm thinking there might be a misunderstanding where he doesn't realize `namespace` actually creates an object at runtime <SEP> And then proceeds to not use that object <SEP> Good catch <SEP> I guess I'll go write some playground stuff <SEP> The error goes away if you remove the `import`s because then TS thinks the namespace is global and therefore can't prove it isn't used <SEP> Oh, yeah, I remember that thing where they implicitly make it global if there are no imports/exports <SEP> It's totally confusing and not at all how ES modules actually work but I guess they can't remove it because of backward compatibility <SEP> The error is actually alerting him to a potentially bigger problem - because he's added imports, the test will no longer be accessible from other files without exporting it <SEP> I thought he absolutely does not want to use it anywhere <SEP> Which just made no sense to me <SEP> In that case he literally has written dead code <SEP> It's totally unreachable <SEP> I think your theory is more likely <SEP> That's what I'm thinking, a misunderstanding of how modules work",namespace is global when there are no imports/export
Summarization," <SEP> Are there any other highlights for 1.8 implemented at present? <SEP> I noticed that all of my gulp tooling broke again with 1.7/1.8, hah <SEP> Is there a reasonable way to say ""any string should be a valid key into this class""? <SEP> Would that just mean inheriting from `{ <SEP> I would expect that ```js class Something {   <SEP> Better yet, is there a way to say ""this type boxes this other type"" like ES6 Proxy objects?","is there a way to say ""any string should be a valid key into this class"
Summarization," <SEP> When it boils down to it, nothing I do tends to be that complicated. <SEP> yeah that would be cool. <SEP> I feel like a broken record when people get the ""could be an unrelated type"" error. <SEP> I'm always looking to reduce the degrees of freedom for the user WRT generics. <SEP> The fewer type params,  the fewer ways they can break it. <SEP> What's the fundamental problem with constructor functions? That TS can't tell it's a constructor function?",TS can't tell it's a constructor function
Summarization," <SEP> https://gitter.im/Angular-4/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link <SEP> @aaronbeall im guessing the issue is that you can't infer `T` from the signature? <SEP> Right <SEP> Yeah it works if I pass in the whole object... but that's not really doable in my case :-/ <SEP> I haven't seen one... <SEP> seemed like something i should have encountered before, but i don't see it in `lib.d.ts` <SEP> I have an interface `x` and what to create an object instance with the shape of my interface without creating a class `y` which is implementing interface `x`  ``` let x1 = {} as x; x1.propname = ""bla"" // getting error TypeError: Can't add property x, object is not extensible ``` <SEP> any thoughts? <SEP> you are creating an empty object <SEP> and then truing to cast it to X <SEP> and then trying to add a property <SEP> you'll need to do  ```ts let x1: X = { propName: 'blah' } ``` <SEP> for example <SEP> ahh yeah, but If i change the `propName `to `propNoName` I would need to change all my `let x1: X = { propName: 'blah' }` cases <SEP> I just was thinking if it is possible to create an object shape dynamically just based on interface without relying on any classes or explicit property declarations <SEP> How do you loop through interface properties in typescript? <SEP> @kuncevic You can't, interfaces don't exist at runtime so there is nothing to iterate over. <SEP> @dtabuenc yeah i c",is there a way to infer T from the signature?
Summarization," <SEP> the obj is a different thing completely than what `this` is from the function member <SEP> then you shouldn't have the this <SEP> But `page` is *not* a `Context/Client` <SEP> right.. so in that case then you shouldn't type the `this` <SEP> I see <SEP> especially in a declaration, it's not providing you any benefit <SEP> But the thing is I've typed the `this` in my implementation... I guess I need a *separate* signature declaration that omits the `this`? <SEP> I'm implementing the function, but *not* the construction of the page object <SEP> that the function is attached to <SEP> I only need to declare that <SEP> But, so far, my declarations have run into problems with understanding the bound `this` <SEP> you could do this:  ```  interface Context {     context: string; }  function foo(this: Context, x: number) {     this.context; }  // magic Nightwatch sorcery  interface Funcs {     foo: (x:number)= <SEP> so the version you put inside obj is not typed as bound to a different type",is there a way to omit the this in a signature declaration
Summarization," <SEP> here's a really nub question <SEP> what's the quckest way to write some binary data out to a file? <SEP> w/ node i mean <SEP> create Buffer, load it, then use fs? <SEP> assuming you have the data somewhere in memory already? <SEP> ya <SEP> ( this is a contrived situation for writing this library ) <SEP> yeah if it's already in memory just write it out using a stream <SEP> kk <SEP> fs functions don't seem to support taking ArrayBuffer as argument yet <SEP> otherwise worked like a charm",what's the quckest way to write binary data out to a file?
Summarization," <SEP> Hey, How should I try to use this typing? https://github.com/chartjs/Chart.js/blob/master/types/index.esm.d.ts#L474 <SEP> `import type {Chart} from ""chart.js/types/index.esm"";` This doesn't seem to do anything useful <SEP> At least not in WebStorm <SEP> What's typescript's current saying about unused function parameters? How should they named?",what's typescript's current saying about unused function parameters?
Summarization," <SEP> Hi, could someone help me with an ambient module delcaration? <SEP> I think I just need to do `declare module ""*.module.scss"";` <SEP> But I don't know where to put this declaration! <SEP> I thought in a folder in `typeRoots`, but that would require creating a subfolder with a `*` in its name, which can't be right. <SEP> Sorry for the plug, but a small library maybe someone will find useful: https://github.com/spacejack/pojod",ambient module delcaration - where to put declaration?
Summarization," <SEP> So using ts-mocha it just works.  vscode still shows it as wrong, but the code runs in tests and when running the server now. <SEP> Steps forward I guess. <SEP> Thanks Damian <SEP> I can't figure out why vs code doesn't see the tsconfig.json's lib though and still flags it as an error <SEP> So my target was originally ES6 <SEP> Let me try changing back to es6 in my tsconfig.json and see if that helps <SEP> Changing the target back to es6 doesn't seem to make a difference.  Am I misundertanding what the target is? <SEP> How do you mean? <SEP> changing target to es6 only works if you don't have a ""lib"" variable specified in the compiler options I think <SEP> I remove the lib, and it didn't make a difference. <SEP> Hm.. <SEP> ``` {  ""sourceMap"": true,  ""moduleResolution"": ""node"",  ""target"": ""esnext"",  ""module"": ""commonjs"",  ""allowSyntheticDefaultImports"": true } ``` <SEP> Still teh same error with that tsconfig.json <SEP> That's the full tsconfig.json <SEP> Oh?",vscode still flags tsconfig.json lib as an error
Summarization," <SEP> Hi everyone. I've been working with some data lately which are more or less dispatch maps/tables, and I'm struggling to find a nice way to type them. My solutions feel incomplete, and I suspect I must be missing something here. There must be a better way. I've created a gist to describe my problems if anyone's interested in taking a look and providing some feedback: https://gist.github.com/steveadams/d716bfd2f966a194a1270f8aa93ee9d2 <SEP> And of course, I'd be grateful to be pointed somewhere else if this isn't the right place for this! <SEP>  Is there a way to define on the called function though that the type of one of the parameters is now different? I know that user-defined guards would be one way, but they have to return a boolean.  @itsjamie  Have you looked at assertion functions?  That's exactly what they do:  ```ts function init(x: PartialFoo): asserts x is RequiredFoo {   // Here we do stuff, presumably that ensures x actually is a RequiredFoo   // It should throw to signal failure } ``` <SEP> Dumbest question ever (nobody's talking anyway): ```typescript interface X {   (someParam: string): number;   readonly a: string; } ``` <SEP> How do you create such an object? <SEP> (without casts) <SEP> ```ts function makeX(): X {     function foo(s: string) {         return 42;     }     foo.a = 'bar';     return foo; } ``` <SEP> @keithlayne hm is that supposed to work? I get `Property 'a' does not exist on type '(s: string) = <SEP> (because that's what I was trying to do and why I wanted to avoid casts) <SEP> Ah nvm it goes away with the return",is there a way to change the type of a parameter on the called function?
Summarization," <SEP> not exact equivalent of `| null` if i get it right <SEP> yep, I'm still not sure in what context you're wanting `Optional`? <SEP> I'm not familiar at all with python, let alone it's new type system. <SEP> in python `Optional <SEP> but as a parameter, property, variable, etc? <SEP> (there is no null in python but `None` I just make the example JS syntax) <SEP> any object doesn't matter. In python (almost) everything is an object <SEP> even basic types are objects <SEP> ah that will be handy",what is the equivalent of | null in python?
Summarization," <SEP> I am trying out typescript and there's something I don't understand. I've  installed `@types/mongoose` and imported the module using `import * as Mongoose from ""mongoose""`, so far so good.  But now I want to assign the Mongoose type to my variable :  ``` export default (mongoose: Mongoose) = <SEP> does that one work? <SEP> I had that too. deleted it from the top-level index.d.ts <SEP> nevermind, I need to used `typeof` <SEP> I have no index.d.ts <SEP> so that can't be it",how to assign the type of mongoose to a variable?
Summarization," <SEP> 120MB isn't the size of any bundles, it's the size of the profiler output <SEP> the webpack profile plugin creates a JSON file that you drop into Chrome Devtools to view the timeline and flame chart <SEP> Unfortunately it's too big and causes the chrome devtools to die <SEP> So I'm stuck just guessing why it takes so long to compile <SEP> The chunking is working correctly, all of the node_modules related chunks are nicely packaged up, and separated from my own code, but it seems like there's no sort of long-term caching happening in the builds. My options are just to try to use the DLL plugin to wrap up the node_modules dependencies, and also to try to turn on transpileOnly alongside a forked type checker <SEP> That _should_ speed up build times, but it's a shot in the dark <SEP> The Awesome Typescript Loader reports that the type checking process takes a whole 3 seconds, but the time before it prints that statement is where all of the build time is spent",why does the webpack profile plugin take so long to compile?
Summarization," <SEP> OK for some reason both my ""workbench Repro"" links are the same and populate it with your code from before (with the fileaname typo), one sec <SEP> ""Export"" in the bug workbench seems pretty glitchy <SEP> Just paste this in there:  ```ts // @filename: one.ts import * as Bundle from ""./two""; namespace Foo {   export const ImportStar = Bundle;   //           ^?   export const ExplicitClass = Bundle.xyz;   //           ^?   export type ExplicitType = Bundle.SomeType;   //           ^? }  // @filename: two.ts export class xyz {   x?: string } export type SomeType = string; export const SOME_CONST = 1; ```  When I put that in an ""empty"" workbench, it correctly shows the expected file contents under Debug - <SEP> If you run that in a regular interpreter, those types are correctly resolved <SEP> The bug workbench appears to be broken, in that regard <SEP> right that's what I was saying above <SEP> ah, I missed that. <SEP> I spent a fair bit of time trying to work up a Workbench example of using `import * as Whatever` then exporting it as a const, to get around the fact that you can't `export namespace Events { export * as Whatever from ""..."" }` <SEP> but the result is useless in Workbench because of that bug <SEP> and no matter what you're better off keeping values out of merged namespaces for the reasons y'all went over yesterday <SEP> I use namespace merging to attach a common *interface* to classes (FooService.Options instead of FooServiceOptions) but that's strictly a style preference <SEP> I also consider merging a value namespace with a type-only, to be safe ```ts type UUIDString = string & { brand: true }; namespace UUIDString {     export function validate(x: string): x is UUIDString { ... } } ``` <SEP> but even with `interface`s you get surprising behavior: ```ts interface UUID {     string: string;     binary: UInt8Array } namespace UUID {     export function unpack(x: string): UUID { ... } } interface MyUUID extends UUID {} MyUUID.unpack // confusing ``` <SEP> I really wish javascript hadn't decided to inherit static members, when `extend`ing another class. <SEP> then ```ts class Foo {} namespace Foo {     export type S = string; }  class Bar extends Foo {} Bar.S // nobody would ever expect this to work ``` <SEP> I guess they had to: `this.constructor.StaticMember` :frowning: <SEP> @thw0rted just saw,  <SEP> I suspected earlier that there was some kind of ordering issue <SEP> but I didn't mess with the export thing, I just copy/paste from the address bar <SEP> @thw0rted thanks for the work <SEP> ```export const ImportStar = Bundle;``` still exports only the value not the type if Bundle were for instance a class correct? <SEP> I think Im narrowing in on using a namespace Events {} and a namespace Types {} in each module and exporting those along with the class in the module <SEP> so the imports are ```import Foo, {Types as FooTypes, Events as FooEvents} from ./Foo``` <SEP> and that way most import will just be the default import <SEP> its unfortunate <SEP> but seems to be the only work around that simplifies and brings the option to use the typescript meta info <SEP> hmm, but Im still early in implementing this, and can already see some challenges <SEP> for instance I do want to extend the Events namespace when one class extends another (for the most part) <SEP> but dont want the strict structure checking that ts imposes if it is in the class <SEP> a flat module space gives me the most flexibility, but I can easily see that spawling quickly",'Export'links in 'workbench Repro'are wrong
Summarization," <SEP> yeah that's just a cast at best <SEP> is that possible without passing in another arg? <SEP> ``` isNullableFoo <SEP> He never said `Foo` is a function <SEP> Or did he? <SEP> no <SEP> Yeah I misinterpreted - thought he wanted a type guard for that whole function type <SEP> but you can't *name* that type in the string if that's what you're trying to do. <SEP> so, there is no way to access the generic inside the function? <SEP> No - the types are erased at runtime and theres only one implementation so it doesnt really make sense to ask  <SEP> how would you actualy check it?  The check has to be at runtime, when the type is erased. <SEP> Effectively T is a universal quantifier <SEP> You need an alternate channel (like a string arg) to communicate the check type at runtime <SEP> An `isNullable` type predicate doesn't make much sense. <SEP> could you explain? <SEP> What does your `Foo <SEP> If you take an `unknown` as input it is definitely nullable. <SEP> @keithlayne Basically he wants a function that, given `T = string` returns true if the arg is `Foo <SEP> If its say `Foo <SEP> Which is tricky <SEP> sorry, was distracted <SEP> @AnyhowStep I have `export interface Foo <SEP> I think it will depend a great deal on the implementation of `Foo` tbh <SEP> I want to guard that a value from a responses payload is of type `Foo <SEP> *response <SEP> you could do a type lookup by value <SEP> For some specific `T`, am I correct in that assessment <SEP> @fatcerberus exactly <SEP> Yeah thats tricky because of the type erasure <SEP> @keithlayne what do you mean by a type lookup by value? <SEP> At runtime you only have a `Foo`, the generic is completely erased <SEP> @fatcerberus I'd expect this to be a common problem, so that it isn't indicates to me I'm doing something wrong <SEP> at least it seems to indicate so <SEP> I could write type guards for each possible T but that seems unnecessarily repetitive <SEP> Basically you need to do two checks: is this thing a Foo? And if so does the value it encapsulates have the expected type? <SEP> ```ts interface Lookup {   number: number   string:  string   boolean: boolean } declare function isFooey <SEP> Could use a higher-order function for that maybe <SEP> then you'd have to probably switch on type to do legit checks <SEP> wow <SEP> and you would constrain `T` to stuff in your lookup type. <SEP> Something like this should get you pretty close to what you want (but isn't 100% sound) ```ts function isNullableFoo <SEP> but you'd get inference :P <SEP> `isObjectWithOwnEnumerableKeys()` is just this  <SEP> because it's the name of the type <SEP> Your original example had `type : string` <SEP> ah, that was because I was passing the type name in as a string <SEP> Seems fair to infer `TypeT` would be constrained by `string` <SEP> There is no general case for writing a 100% sound type guard (as of this moment). But there are special cases where you can get it right. <SEP> This case is an interesting one as its due to an impedance mismatch between compile- and runtime, something TS usually tries to avoid <SEP> The problem is that at runtime its not a `Foo <SEP> could also infer unions possibly, which is not great <SEP> The lookup type correlates a value with a type, which is a way to kind of bridge the gap in certain cases. <SEP> @keithlayne in the example you gave would `K` be inferred from `type`? <SEP> yes",is that possible without passing in another arg?
Summarization," <SEP> So I have some node.js code I'm trying to port to ts.  One function takes an object {idA: <SEP> function foo(obj: { <SEP> @ghalle  thanks! that was it <SEP> @blendsdk you can post about it on here if you'd like; the community is always interested in new projects. <SEP> You can also check out https://reddit.com/r/typescript (and if it's general enough, maybe https://reddit.com/r/programming), and there's an IRC channel on FreeNode <SEP> @acopalipsis same as JS though there's an interesting proposal here: https://github.com/Microsoft/TypeScript/issues/2763#issuecomment-95239090 <SEP> Note that we have a bug tracking that properties need to be non-enumerable: See #3610 <SEP> @sarod @basarat has a very useful book:  https://github.com/basarat/typescript-book https://basarat.gitbooks.io/typescript/content/docs/getting-started.html <SEP> @delaneyj I think something like  ```TypeScript interface MyObject {      <SEP> Ah @ghalle answered you <SEP> @DanielRosenwasser  still having issues with some libraries.  Immutable.js for example.  If i include `""node_modules/immutable/dist/immutable.d.ts""` its gives a `Duplicate identifier 'Immutable'.`  But if I remove it I get a `cannot find namespace 'Immutable'`.  Any ideas what I'm doing wrong? <SEP> include in the files section of tsconfig.json <SEP> Thanks @DanielRosenwasser I'll give it.a try. <SEP> Found a small edge-case with noImplictAny: ```typescript class Foo {     foo: {bar: number} }  class Baz extends Foo {     foo = {bar: undefined} // error TS7018: Object literal's property 'bar' implicitly has an 'any' type. } ``` <SEP> @Gaelan that's by design right now; the `foo` in `Baz` currently doesn't get contextually typed by  the one in `Foo`. I'd suggest adding a ' :+1: ' on #3667 <SEP> @delaneyj how are you trying to include it? Are you using both a `/// ",porting node.js code to typescript
Summarization," <SEP> let me grab a quick sample <SEP> Mate, please.. its late and your going to blow my mind haha <SEP> ^ <SEP> To be honest, if I look at examples. you can do loads of weird shit <SEP> and I'm just suprised it all works <SEP> Kabloom! <SEP> wait. i had no idea you could do this <SEP> Lmao, ima read up on namespaces cause this seems pretty cool. <SEP> So this would mean that like you said, i could put my ""static"" method on the namespace, but still use a class with the same name as the namespace. <SEP> yup <SEP> i'm trying to understand what the use case for this is <SEP> I am going to have to figure this out haha, thats cool tho <SEP> it just looks a bit nicer @eyelidlessness, no real use <SEP> but then I can say the same thing about classes ;) <SEP> looks nicer than the `static` keyword? <SEP> This is kind of the thing I dislike about ts/js though, theres a thousand ways to do the same thing isn't ther <SEP> yeah, man, lots of people don't even use any OO at all <SEP> https://github.com/masaeedu/fp/blob/33ef55528e8cfd4c123dad2def4865084ba45f2d/src/classes/traversable.js <SEP> that's pretty idiomatic code for a lot of codebases these days <SEP> that's pure JS though, I don't recommend trying to type it in TypeScript <SEP> I've typed a few of his pieces of code and they tend to require like 300 lines of type code to support his 20 line samples :) <SEP> good fun though <SEP> I'm going to have to bail and actually try and implement some of the stuff u just told me about, thx heaps for the help tho <SEP> now I know about another 10 options to set up the thing I want haha <SEP> sure man, experiment a little and find a new comfort zone <SEP> just don't default to what you learned from Java, look at the options first, then pick <SEP> if it ends up looking like Java, no problem <SEP> I'm just trying to figure out how to keep my code as clean as possible, since thats what my project is about. <SEP> yeah, if you start out trying to make JS into java you're going to run into some frustrations <SEP> I mean, if you try to do stuff in java in general you're going to run into frustrations. But thats probably because im no expert on that either <SEP> its Generics are pretty decent <SEP> on account of them just erasing them anyway XD",what is the use case for Horizahn_gitlab?
Summarization," <SEP> .d.ts files have no effect on package size <SEP> can't be bothered reading everything but just thought i'd say that <SEP> They have an effect, just not a _significant_ one.",.d.ts files have no effect on package size
Summarization," <SEP> Hey <SEP> \+ there is NonNullable <SEP> @rraziel Looks promising, but doesn't seem to work. The field is still nullable afterwards. I tried with `Exclude <SEP> The inferred type is ``` t: {     foo: number | null;     bar: string; } & Required <SEP> Ah true, I think the exclude does nothing <SEP> Cause that's not the right one hehe <SEP> More like Omit <SEP> ```typescript function filterNullBy <SEP> That cast is ugly though <SEP> Yeah, and it actually makes you do `t as unknown as Omit <SEP>  Conversion of type 'T' to type 'Pick <SEP> Hm that's the message you get with the as unknown? <SEP> Or without it? <SEP> That's without as unknown. <SEP> So it works with as unknown? <SEP> The cast works, but the output type still doesn't convert the field to `number`. <SEP> Lemme see in VSCode <SEP> Example: ``` const obs$: Observable <SEP> I've gotta go actually, but thanks for the help. :) <SEP> Ah right it's because you use null <SEP> And I was thinking of ? <SEP> (or undefined) <SEP> So yeah you'd probably have to drop a `NonNullable` in there too",exclude magnusbakken does nothing to make the field null
Summarization," <SEP> @rraziel not quite, single event listener + a check `event.target instanceof HTMLButtonElement`. No need for a ton of listeners. I'd also not add jQuery just for that though... <SEP> Oh well, whatever suits your needs <SEP> Speaking of needs, is there some magic TS construct that can do ```typescript function x(arg0: T0, arg1: T1, arg2: T2) { } type blah = /*magic construct here so that blah is  <SEP> ```ts type blah = Parameters <SEP> Likely won't work how you want if `x` is generic or overloaded though",is there some magic TS construct that can do typescript function  x
Summarization," <SEP> @AnyhowStep IMO there should be something like `strictIndexSignatures` that basically adds the `| undefined` for you <SEP> Obviously they can't make that the default behavior now because backwards compatibility <SEP> Also relevant and interesting discussion w.r.t. ""safe"" vs. ""unsafe"" keys: https://github.com/microsoft/TypeScript/issues/13778#issuecomment-286859503 <SEP> He makes good points <SEP> tl;dr: The type system isn't strong enough to distinguish between the safe and unsafe keys for the typical use cases of index signatures, and assuming the worst would be annoying in most cases <SEP> If you force the user to cast, you haven't gained any net type safety <SEP> @jasonkuhrt I'd just use one of the TS AST visualizers <SEP> there's like fifty if you google, I'm not sure whether any is better than the other <SEP> @fatcerberus you could just switch to using Map instead of { } for most things and get the safety you want and likely marginally better performance <SEP> Dependent types. I'll vote the guy who adds it to TS for president <SEP> Not that compiler design has anything to do with running a country <SEP> But you can't do worse than the US <SEP> Careful, crazy supporters of *both* parties will take that as a personal insult and try to lynch you <SEP> This is why I stay out of political discussions, because you literally can't win <SEP> Or even break even",strictIndexSignatures should be the default behavior for index signatures
Summarization," <SEP> hey folks <SEP> you guys here are superesperienced and smart <SEP> anyone work here with ArcGIS <SEP> it does not recognize the { <SEP> i hate it because it doesnt use commonJS <SEP> DOJO and AMD <SEP> @TheDucc  where are you definiing the interface? <SEP> top level in the file? <SEP> This works: interface  WorkLog = {} is it the same? <SEP> no that's not valid typescript <SEP> can you show your whole file? <SEP> I can....but that seems above and beyond.  There is alot going on; most of it totally error free.  How best to share a file? <SEP> My thought is you are putting the interface in the wrong place. <SEP> it needs to be top-level not nested inside anything <SEP> ``` export class HGManageComponent implements OnInit {   //define all the variables; including interface   //    //then functions  } ``` <SEP> no the interfaces have to go outside the class <SEP> put them above it <SEP> HAHAHA <SEP> not inside it <SEP> You read the noob part of my Org post, right? <SEP> That solves the syntax problem <SEP> @dtabuenc All of your solutions WORKed.  I am so grateful. <SEP> @dtabuenc yes they are entered in string form by user.  this hsould be simple and don't want to writ emy own parser <SEP> let math = require('mathjs');  this works..",where are you definiing the interface in the file?
Summarization," <SEP> Anyone know why WebStorm does not approve of the same control flow analysis that the compiler does? <SEP> @jeffijoe with 2016.2.4 I've switched to enable the 'typescript service' checkbox and it seems to resolve things the same as the compiler now. <SEP> @ShawnTalbert when I enable TypeScript Service, nothing is checked at all anymore, not even undeclared variables",why does WebStorm not approve of control flow analysis like the compiler does?
Summarization," <SEP> hi all i m trying to implement service worker for existing angular app written in typescript, i m seeing a type script error when i m trying to initialize any advise? <SEP> ! <SEP> ts23339: property service worker doesnot exist on type navigator <SEP>  @rhys-vdw everything in @types is read unless you specify `types` in tsconfig  @NaridaL Thanks! I think this is included as a dependency of a dev dependency for a build tool as opposed to the development deps, so perhaps I need to enumerate everything I want in  `types`. Is that how this is usually done? <SEP> @NaridaL Ah, interesting. I still want to check my actual dependencies. It's just that some Node.js dependencies are in my `devDependencies` but are unused in the actual app. They're used for webpack which is actually not currently written in TypeScript. <SEP> OH there's a gitter! Was surprised at how quiet IRC was... lol <SEP> Well hello folks, I'm creating my initial state and setting recipients to  <SEP> don't worry, not that much activity in here either lol <SEP> @timwis setting to  <SEP> if you write `let x =  <SEP> oh you may want to say `let x: Recipient <SEP> if that is the ""type"" of each array element <SEP> Is it possible to export a function AND an interface from a commonJS style module? <SEP> example: <SEP> ``` export = named_timers;  declare function named_timers(timerName?: string): named_timers.NamedTimerCollection | named_timers.NamedTimer;  declare namespace named_timers {  export interface NamedTimerCollection {  }   export interface NamedTimer {  } } ``` <SEP> i'm exporting the function object `named_timers` but I also want to access the interfaces it may return.  how can i do this? <SEP> i'm importing with: <SEP> honestly no clue, but i am curious, what benefit or reason is there to use commonJS style at this point? (simply not very familiar with it) <SEP> it's the existing module codebase <SEP> gotcha <SEP> although actually can i `export default function named_timers(timerName?: string): named_timers.NamedTimerCollection | named_timers.NamedTimer;`? <SEP> for a commonjs module, your previous snippet seemed more accurate <SEP> yay",service worker does not exist on type navigator for existing angular app written in typescript
Summarization," <SEP> i have a question... how do i return a rejected promise in an async function? <SEP> if i do this ``` async function(){ return Promise.reject(); } ```  will typescript be smart enough not to wrap the promise in another promise? <SEP> there's no such thing as a promise in a promise <SEP> They are auto-flattened. <SEP> nice to hear <SEP> who auto flattens the promises? the javascript vm? <SEP> TS can get confused and think that things are `Promise <SEP> ok perfect <SEP> thanks <SEP> See the discussion of the suggested `awaited` keyword. <SEP> It's too bad that we have auto-flattening. Otherwise `Promise` would be a monad <SEP> In TS 4.1 you can make an `Awaited` type that does the same thing. <SEP> who cares what is and isn't a monad when the language can't abstract the concept?  :trolleybus: <SEP> The trolleybus hasn't come around in quite a while. <SEP> I love the idea of traits/typeclasses <SEP> if only we'd gotten that, instead of the `class` in javascript <SEP> @keithlayne now I understand what you were getting at. Added to the list",how do i return a rejected promise in an async function?
Summarization," <SEP> With Jest, how are you supposed to test if a certain value is inside the DOM? <SEP> `  <SEP> `expect(new Fish()).toBeEatenByA(Shark)` I don't have an answer to the question, I just think this particular realization of a fluent API is amusing",how to test if a value is inside the DOM with Jest?
Summarization," <SEP> good balance though? <SEP> idris 2 <SEP> He hasn't released it yet, though. <SEP> Kinda makes me think of how some people describe rust in terms of the greater effort <SEP> With rust its more dealing with the borrow checker. The type system isn't turing complete (as far as  I know) and inference just works. <SEP> I <SEP> The problem with Haskell IMO is the terseness often makes things more obtuse than necessary, and also encourages pointfree style, making it even *more* confusing <SEP> Yeah I was gonna say in terms of the borrow checker and the worthwhile gains from appeasing it <SEP> function composition + currying + type inference = what the hell is going on <SEP> I wouldn't call the borrow checker part of the type-system. Maybe I'm wrong <SEP> I didn't mean to imply it was, just talking about greater effort from the programmer in order to get some correctness benefit <SEP> People, myself included, really like the idea of immutability. Haskell provides that, and it provides awesome tools for working with it.",is idris 2 a good balance between rust and inference?
Summarization," <SEP> Id like to now create a fully typed interceptor chain in an array or similar then <SEP> I can have multiple such chains, however the user defines them. <SEP> I mean, what does an interceptor chain look like? <SEP> Are you wanting a chain like`  <SEP> basically just an `Array <SEP> If I use `Array <SEP> A chain would be: ` <SEP> @alpox HEre's an example ```ts type GetLastFx <SEP> there a bug in that, just a sec <SEP> I rly gotta leran more about that `infer` <SEP> beware that typescript types are structural. Meaning `interface foo { _: string }` is indistinguishable from `interface bar { _: string }` <SEP> critically, this means for `interface foo <SEP> I think thats fine for my case",how to create a fully typed interceptor chain?
Summarization," <SEP> It's probably a configuration issue for me but has anyone experienced an issue where you set tsconfig.json for noUnusedLocals and it creates false positives. I'm using aurelia which by default is using a filename convention to bring the html and ts together instead of in a single file like angular is defaulted to. Any property i declare in my .ts and use only in my .html is flagged as unused <SEP> ``` /**   I want to make a generic with constraints to objects that all of values in them are from limited types.   I have a feeling it's possbile, but i can't get it right.    Here's my failed attempt:  */  interface IGenericRow {    <SEP> Would IRow be your interface and then GenericRow and SpecificRow be your implementations? <SEP> IGenericRow is just to make the constraint <SEP> i came across this issue: https://github.com/Microsoft/TypeScript/issues/10941 Seems like limitation of TS atm :( <SEP> I suppose i do not understand the purpose fully. Is probably a limitation of my brain. You just want to enforce that all implementations only have properties with string number or date types? <SEP> yes <SEP> It's for  database row <SEP> You seem more knowledgeable so probably just grasping here but why does ISpecificRow need to be an interface instead of just SpecificRow <SEP> class <SEP> seems like it would give you what you want",unused properties flagged as nounusedlocals in tsconfig.json
Summarization," <SEP> ok...? <SEP> https://stackoverflow.com/questions/14810506/map-function-for-objects-instead-of-arrays <SEP> Hahaha, sorry; I meant I'm unable to. I'm  trying to basically have a typed version of Bluebird's `props` http://bluebirdjs.com/docs/api/promise.props.html <SEP> You want to type a function which does what you've described? <SEP> I want a function which runs promises and returns a typed object <SEP> So for each promise, it's return value should be specific, and not `any` <SEP> not entirely sure that's possible <SEP> so if I have, say: ``` var getters = {   a:(conf:ACONFIG)= <SEP> That is, result should have the type: `{a:ARESULT,b:BRESULT}` <SEP> Hmmm <SEP> try `function mapper <SEP> Ah, I see. Gonna try thanks!",map-function-for-objects-instead-of-arrays with promises
Summarization," <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chrome/index.d.ts#L5942 <SEP> id is optional <SEP> ok, I see what you mean. I assumed all tabs have an id. thank you! <SEP> you should be able to access process.env in webpack.config.js <SEP> you can use alias to point config to config-production.ts or something similar <SEP> well this is less modifying a file and just exchanging it with another depending on a flag <SEP> https://stackoverflow.com/questions/30030031/passing-environment-dependent-variables-in-webpack <SEP> that is closer to what you asked <SEP> anyone know what is wrong with this tsx? ```   render () {     const { turbines } = this.props as any      return {turbines.map(item = <SEP> after `return {` <SEP> ! <SEP> maybe doesn't like the mixture <SEP> ``` ./src/components/Turbines/index.tsx (17,8): error TS2686: 'React' refers to a UMD global, but the current file is a module. Consider adding an import instead.  ``` <SEP> this fixed it import * as React from 'react'",how to access process.env in webpack.config.js?
Summarization," <SEP> 120MB isn't the size of any bundles, it's the size of the profiler output <SEP> the webpack profile plugin creates a JSON file that you drop into Chrome Devtools to view the timeline and flame chart <SEP> Unfortunately it's too big and causes the chrome devtools to die <SEP> So I'm stuck just guessing why it takes so long to compile <SEP> The chunking is working correctly, all of the node_modules related chunks are nicely packaged up, and separated from my own code, but it seems like there's no sort of long-term caching happening in the builds. My options are just to try to use the DLL plugin to wrap up the node_modules dependencies, and also to try to turn on transpileOnly alongside a forked type checker <SEP> That _should_ speed up build times, but it's a shot in the dark <SEP> The Awesome Typescript Loader reports that the type checking process takes a whole 3 seconds, but the time before it prints that statement is where all of the build time is spent",why does the webpack profile plugin take so long to compile TestSubject
Summarization, <SEP> tslint... I want to allow 'null' but not 'undefined' ... not sure what this entails for setup? <SEP> are you sure you don't want it  <SEP> I like only having null personally... but TS seems opinionated on it.,is it possible to have 'null'but not 'undefined？
Summarization," <SEP> Hello everyone, I'm struggling to find a way to do this, sorry if this is such a newbie question:  How can I transform a function like the following: (value, obj) = <SEP> @xjuanc function parameter names are not present in the type system, you have to do it like this https://www.typescriptlang.org/play?#code/MYewdgzgLgBAZgVzMA6gSygCwEwEEBOA5hDALwwAUAhkQIwBcMSA1mCAO5gA0MNh2jFm04BKMgD4AUDBm86AbkmhIsEACMAVgDEkwMpQDecwrR59sMAL6MjfBkzCsO3YwIdPOVsaSmz4u9Cw8IghqOjMibBF5IA <SEP> Thanks a lot for the example! Managed to make it work, thaanks",how to transform a function when parameter names are not present in the type system
Summarization, <SEP> let's say I have `type Foo = A | B` and `type Bar = C` how do I declare a `type Baz = A | B | C` by destrucruting Foo? <SEP> `type Baz = Foo | Bar` <SEP> if I have a  ```typescript type Foo = {   a: 1 | 2 | 3 | 4;   b: any;   c: any; } ```  How do I create a type `Bar` that picks only the `Foo`'s with `a: 1 | 2`, How do I create a type `Bar` that picks only the `Foo`'s with `a: 1 | 2` 
Summarization," <SEP> Hey guys.  Any suggestions on a trivial way to do this?  It's telling me `req.headers.authorization` may be  string or undefined, and I can't assign it to a string.  We already do a check and throw an error if req.headers.authorization is undefined, so it will ALWAYS be defined here.   ```     await fetchAgent(req.headers.authorization) ``` <SEP> control flow inference *should* catch that but if you have any kind of indirection (e.g. call a function that throws) it won't catch it <SEP> if you're totally sure it's a string you can cast it <SEP> So just add `as string`?",can not assign req.headers.authorization to a string
Summarization," <SEP> Hi guys! I would like to learn more about typescript. Could you tell me a good tutorial on TODO list that uses fake webapi? Thanks! <SEP> @fatcerberus Thank you! <SEP> For example, getters that return a string literal are inferred as `string` and not the literal <SEP> I dont know if thats what youre hitting but it could be",is there a good typescript tutorial that uses fake webapi?
Summarization," <SEP> :( <SEP> :O <SEP> want me to tell you how it ends? <SEP> they all die <SEP> https://nodejs.org/api/modules.html#modules_require_cache It says it only reloads if you *delete* a key from the object <SEP> are you in a separate TZ from Sydney?  I assume youre an hour later maybe? <SEP> yeah, I never said what to do w/ `require.cache`, just that you'll need it :P <SEP> excuse me before <SEP> We get the sun first thanks <SEP> Oh I thought you meant like `require.cache <SEP> Yeah Im easily confused <SEP> we get the brand new fresh sunlight, before it hits anyone else <SEP> the way I remember it is: we come first, then everyone else :D <SEP> we're ahead of literally everyone <SEP> I can send you the lotto numbers from the future if you'd like ;) <SEP> I assume you saw Endgame already, @keithlayne ? <SEP> google tells me youre two hours ahead of Sydney?  Thats what I meant. <SEP> I did. <SEP> My kiddos love the superhero stuff.  I like it too. <SEP> Alright just making sure because otherwise spider-man would be a big spoiler, hehe <SEP> Hmm this is a weird one https://github.com/microsoft/TypeScript/issues/32279 <SEP> I just have to remember that Sydney is 14 hours ahead of us.  Which means I have an hour to fix some CSS.  Which is why I was procrastinating. <SEP> Dunno... I've never actually used it <SEP> I spend most of my free time actively trying to forget I've used it <SEP> I guess it's bad then <SEP> eh its ok - i used it a while ago, but like they break everything on new releases, it was *so* slow... just <SEP> oh yeah they can",how does'modules_require_cache'reload
Summarization," <SEP> @am17torres 1sec i got you fam <SEP> you want to check  the keys corresponding type if that type extends undefined you want to strip that key out <SEP> then return keyof that new type <SEP> i'll just code out example <SEP> unconvertable <SEP> This seems like a very poor way to do this, but did get past the compiler errors. ```typescript const properties:Array <SEP> so wierd the typescript playground is fucking me today <SEP> give me a sec just going to do it in IDE then show difference in playground output <SEP> sounds good <SEP> ``` interface IO {  a: string  b: string  c?: string | undefined  d: number; }   export type RemoveUndefined <SEP> jesus that took me ages sorry @am17torres <SEP> that second one does the trick <SEP> c doesn't have to have union for it to work either just the ""?"" will work <SEP> Wow this is really cool <SEP> I need a second to process this haha <SEP> export type RemoveUndefined <SEP> Ah, I see <SEP> Let me give this a rip <SEP> The only thing I'm having trouble following is the last `",unconvertable vs unconvertable in typescript playground
Summarization," <SEP> @NaridaL You're right.  I'm seeing a different error now coming from this code: ``` import {VNode} from ""snabbdom/vnode"";  export interface Module {   (vnode: VNode, attributes: Map <SEP> I'm seeing `Invalid module name in augmentation... which cannot be augmented` <SEP> I'm trying to update a library and it's a consistent issue coming from all the modules declared in the file:  https://github.com/snabbdom/snabbdom-to-html/blob/master/type-definitions/snabbdom-to-html.d.ts#L7 <SEP> if you have a top level import or export the file is a *module* <SEP> `declare module` blocks in modules are *module augmentations* <SEP> https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation <SEP> you need to put the imports and exports inside the declare module block <SEP> Ahh, got it <SEP> Thanks for the explanation, saved me a bunch of time <SEP> If I put them under the module declarations does that mean I need to repeat the declarations?  How do I share those types among the different module declarations? <SEP> if you put the export interface Module inside declare module ""stump"" <SEP> you can do import {Module} from 'stump' in the other modules <SEP> Got it!  Thanks a ton... I was so confused",error:invalid module name in augmentation which cannot be augmented
Summarization," <SEP> I find the `as` syntax much clearer than angle-brackets and have tried to drop that cast style everywhere <SEP> I think there might even be a linter rule to forbid it? <SEP> It's confusing because the outer angle brackets are a cast but the inner brackets are a generic parameter <SEP> `new FormControl(new Date() as ControlState <SEP> although if that's an Angular FormControl, I don't think you need the cast at all because FormControl values are just `any` (or maybe `unknown`?)  -- there have been efforts to make them typed / generic but nothing in the core library yet",'as' syntax is much cleaner than angle-brackets and have tired to drop that cast style everywhere 
Summarization, <SEP> https://stackoverflow.com/questions/59718142/typescript-place-constraint-on-specific-lookup-type-of-generic-object-type <SEP> T <SEP> I now know that much is true <SEP> I ended up getting a pretty good answer on SO,typescript place constraint on specific lookup type of generic object type
Summarization," <SEP> Hi! The following code won't type-check. Is it intended? ``` class Person {     getId(): number {         return 1;     } }  interface Identifyable <SEP> For me, it doesn't know what Map is <SEP> It is the standard ES6 Map. (I'm running tsc `v2.0.6`) <SEP> @sam-s4s  Unfortunately no, that's not possible yet. <SEP> Typescript doesn't *yet* support higher-kinded types <SEP> thought so!",typescript doesn't  yet support higher-kinded types.
Summarization," <SEP> @ShanonJackson is `SELF` what I think it is? a magic reference to... itself?   Also that second solution won't work in my case, as its causing exactly what I want to avoid by directly referencing `Slot`(unless thats a typo) <SEP> oh just use the top one then <SEP> oh yeah sorry TSlot my bad let me fix that <SEP> yeah just use top one <SEP> Cool fix, but strikes me as rather convoluted. Like, this all makes sense in terms of why it's happening, but ya... feels like it shouldn't be happening (i.e TS should handle it) :/ <SEP> yeah it feels wrong, there's probably a way to shorthand it alittle but this is the sacrifice we need to make to use unions sometimes <SEP> unions are amazing feature but because they have to be distributed sometimes it can lead to weird behaviors <SEP> Yeah; I've already come to terms with the fact that I'm going to need to make some sacrifices to be both strongly typed & somewhat reusable across bots - I'm at least going to have to cast somewhere.  Do you guys have any tips in general for handling deeply nested types? Like when you're working with inputs coming from apis and services? <SEP> just 1 interface? not following <SEP> then if you want types that derive from that interface <SEP> just go <SEP> Interface <SEP> The whole thing I'm wanting to avoid here is having to have the `Lex` namespace custom-defined for each project. I'm aiming to be able to do extends on the things I need to override.  One second, and I'll give an example",is SELF a magic reference to itself?
Summarization," <SEP> That's the part that I'm not liking about the language, sometimes I know what I want to express, and it's always something relatively simple, but I'm just unable to express it with TS's type system. I'm not sure I've ever had a similar problem with JS, there if you can imagine an algorithm or something you can also write it, TS's type system feels very unexpressive in comparison. On the flip side at least there's a great community around it :) <SEP> Any way to specify a type as ""an object with whatever properties you want"" ? I previously thought you could say `T extends {  <SEP> both :) <SEP> Record <SEP> `{ blah: 7 } `",any way to specify a type as an object with whatever properties you want?
Summarization," <SEP> But in JS youd convert the number to a string and compare that :trollface: <SEP> Actually, now that I think about it, so long as you use string literals, the interpreter should perform string interning. <SEP> I don't think there will be much difference in performance between using numbers vs literal strings.",there is not a difference in performance between numbers vs string literals.
Summarization," <SEP> It's useful for things like creating an iterator for some structure that may mutate during iteration, but you don't want to re-visit items <SEP> You _can_ do everything with a regular `Set`, but it would have potentially negative memory impact <SEP> Also for C++ objects, since those _can_ have destructors. If you keep a C++ object around, one that holds open a file descriptor, you could run out of free file descriptors <SEP> Every time `iterator.next()` gets called, you check if the element is in a `WeakSet`. If it is, you skip that element. If it's not, you add that element to the WeakSet. <SEP> file descriptor = file handle (on linux) <SEP> the OS usually limits the number of file handles any one process can have open. <SEP> sockets, and various other system resources can also be file descriptors <SEP> a file handle is what you get after you've opened a file. It's usually independent of the file name <SEP> not usually. But `for(x of y)` calls it for me <SEP> that would copy the data structure. It also prevents the iterator from picking up deletions/insertions <SEP> yeah, it's for when you intend to be iterating the data structure at the same time as mutating it. <SEP> yep. You could even have it mutate the data structure if you want to confuse people <SEP> I think there may even be an async iterator protocol now? I forget <SEP> In chrome they're all nearly the same <SEP> firefox apparently doesn't have the same optimizations <SEP> I betcha under chrome, it's compiling the `for..of` array into a `for(i; i ",It's useful for things like creating an iterator for some structure that may mutate during iteration
Summarization," <SEP> `#issuecomment-` <SEP> Is there any workaround for using `keyof` for private properties? I have a practical use case for such requirement  <SEP> I'm not aware of any way to do that, since it's for testing, I'd probably just accept the less useful `string` annotation as the test will fail if you typo it anyways.",is there any workaround for using 'keyof' for private properties?
Summarization," <SEP> @czhower am trying to do what u told me yesterday, to start with TS with just notepad <SEP> and I have no idea how to begin :joy: <SEP> create a hello world type app in TS. just use say test.ts <SEP> compile with TSC <SEP> make an html file with a script tag to your JS file that TSC made <SEP> open the html file in a browser. Voila :)9 <SEP> Then I would move over and get VS Code working to make debugging easier etc unless you have another IDE in mind. <SEP> ha <SEP> yeah <SEP> it worked <SEP> i have server.ts and ran tsc server.ts <SEP> it generated the .js file <SEP> there's something weird tho <SEP> I have the code like this:  ``` var name: string = ""Brittany""; ``` <SEP> i get this error message <SEP> ""cannot redeclare block scope variable name"" <SEP> that's the only line I have in my file <SEP> if i change it to name1 it works fine <SEP> name is in use, already in the dom <SEP> what DOM? <SEP> i mean, what if i use nodejs? <SEP> thats just one of many things why JS sucks. Best to put everything in a namespace <SEP> with no browser <SEP> no. <SEP> so  ""name""is a reserved keyword in JS? :S <SEP> didn't know that <SEP> hmm ok",how to start with TS with just notepad and begin :joy:?
Summarization," <SEP> excellent advice :D <SEP> or, write really stupid code, so that the mistakes are easy to spot <SEP> I assume that's the *raison d'etre* for golang <SEP> :fire: <SEP> Hello there ! I have a small question around mapped type and how to implement a function that return one: let's say that I want a function, that taking a union type returns the corresponding default value ```     type Circle = { radius: number, center: ",how to implement a function that return a corresponding default value?
Summarization," <SEP> any ideas how I get round this? <SEP> ! <SEP>       TS2345: Argument of type 'void' is not assignable to parameter of type 'TimerHandler'. <SEP> `addObserverForTrades` returns `void` which is not a `function` as expected as first parameter to `setTimeout( fn, delay )` <SEP> ok thx <SEP> I have a component called ContentList that accepts type `T` and the problem that I'm having is that I need to assign a type to ContentList dynamically. Like, for example  ``` render() {    ContentList <SEP> If `Type1` can be determined from the class somehow, you could use conditional types. Otherwise, I'd just use a union: ```ts   <SEP> Hello,  `readonly` is great but is there a way to say `writeonly` ? <SEP> In a regular type, I don't believe so... you could maybe create a class with no getter and just a setter for a property? <SEP> Yes I *may* do that... *But* I want a decorator that applies ONLY to static **writable** members (property, method, accessor) <SEP> Luis: Can you show more context? What does your if condition look like in the render method? Is there an instance of the `Type1` stored as a property there? There's probably a way to use a conditional type that will resolve that <SEP> Salathiel: I think I know how to do that, but will need to check once I get to a computer <SEP> @Gerrit0 Is there anything here that is not clear now?",error:TS2345: Argument of type 'void' is not assignable to parameter of type 'TimerHandler'.
Summarization, <SEP> but there's a free tier if you're stuff fits it that's good for 12 months if you've never used AWS before IIRC <SEP> big money baller <SEP> but it may be much better than I'd thought.,is there a free tier for people who havent used AWS before?
Summarization," <SEP> Does anyone know how to make a version of `Required <SEP> Actually it seems the real problem is that TS 3.1 that type alias gives `Type 'K' cannot be used to index type 'P'.` on `NonNullable <SEP> Wait a sec... my type alias was screwed up all along, that should be `T",how to make a version of Required in TS 3.1?
Summarization," <SEP> ``` type CountsType = {    <SEP> `counts <SEP> Shouldn't the ternary keep `undefined` from getting through? <SEP> I can get it to work with a non-null assertion (eg - `counts <SEP> If you use `counts.foo ? counts.foo.toString() : ''` instead, it works as expected. <SEP> Ah, interesting <SEP> Unfortunately I need dynamic access so it will actually be something like `counts <SEP> `counts <SEP> Cool, thanks",shouldn't the ternary prevent undefined from getting through with a non-null assertion such as 'counts'?
Summarization," <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts#L191 <SEP> Hello,  I have the following typing problem that Im not sure how to resolve.  I have to constructur that need to call the super class constructor. The superclass constructor has 3 overloads.  1) string 2) string, Option 3) Option  I made this auxiliary function to build the arguments that need to be sent to the super constructor.  ``` function constructorArgs(config: SequelizeConfig | string):  <SEP> @NaridaL sorry for being unclear, my question is relating to how to give specific typing to children, not the generic `ReactNode` typing that is built-in <SEP> @patsissons you want to constrain the types of children that can be passed to your component? <SEP> yes, that was the idea <SEP> looking at the typings that doesn't seem possible <SEP> the children param is fixed to the type above <SEP> @bilby91 TS doesn't type the spread operator currently... <SEP> just do ...(consArgs() as any)",when I have to constructur that need to call the super class constructor I have typing problem.
Summarization," <SEP> Ah, nice! So in the last playground sample, is the `keyof this` thing considered to be an F-Bound type? <SEP> Yeah, basically when you use `this` in a method signature the compiler secretly adds a type parameter to the containing class <SEP> So it has the same effect as what we were doing manually <SEP> ah ok <SEP> In that issue, is  `Array <SEP> What does @metaweta mean by the ` <SEP> That's not a valid type, I'm not sure what the deal there is.  As for the ` <SEP> It's similar to Scala syntax which uses ` <SEP> So for example here ```ts interface Foo <SEP> ` <SEP> Yeah, exactly <SEP> Is there any current way to express that? <SEP> @pelotom's solution is ",is the 'keyof this' thing considered to be an F-Bound type?
Summarization," <SEP> The index signature effectively means  <SEP> Note that most importantly it *doesnt* mean  <SEP> Nope, index signature is not a rest signature, thats a common mistake - it explicitly means everything <SEP> Infinity minus anything is still infinity ","index signature is not a rest signature, thats a common mistake."
Summarization," <SEP> thats why you train them, to try to approach the actual outputs of the desired function for a given input <SEP> So yeah, not gonna take over the world, Elon Musk <SEP> Yeah, ""given this pattern as input, I want this pattern as output"" <SEP> You can simulate really complicated functions that way but in the end it's still a dumb mapping of input to output <SEP> But about the inverse thing, Id bet that actually determining two functions are inverses is undecidable.  Which seems like a prerequisite to generating an inverse function.",why train them to approach the outputs of the desired function for a given input?
Summarization," <SEP> @pantonis treeshaking remove unused code, you could just compare before/after code <SEP> or maybe there is an option on some tools to get the unused code <SEP> @ghetolay how do I enable treeshaking? <SEP> you don't enable it you use a tool to do it <SEP> rollup is the most popular atm <SEP> dunno if webpack 2 finally do proper treeshaking",how to remove unused code using treeshaking?
Summarization," <SEP> @cdaringe concrete sample please <SEP> that sentence doesn't really make sense <SEP> there's only one interface, not sure where you're getting a second <SEP> the code I provided should work 100% if I understand tsx correctly <SEP> hmm.  i made a minimal viable example, and it took <SEP> retrying old example to see what i missed <SEP> it works? <SEP> almost!  im finding that <SEP> ```ts type NothingBut <SEP> isnt associative? <SEP> e.g., i get different results if i swap my inputs for `T` and `U` <SEP> obviously yes <SEP> T = the exact type, U = the type that should match that exact type <SEP> btw, I just checked and this exact code is also in the github issue you linked <SEP> I'm fairly certain you're still forgetting to give Button a generic type @cdaringe <SEP> Button HAS to have a generic type <SEP> ```ts type NothingBut <SEP> yeah, see, where's the generic type? <SEP> it's not optional <SEP> ```ts export function Button  <SEP> because you need the generic type? <SEP> how else are you getting the type of thing passed in? <SEP> P takes the shape of whatever you pass in <SEP> I don't understand why you want to remove it? Do you have a dislike for generic types? <SEP> no, i don't, but the type i want to pass in ultimately is a strict union <SEP> so? <SEP> ```ts export function Button  <SEP> that works <SEP> you can give that first type parameter whatever shape you want","Does seem ts type ""NothingBut '' doesn't associative?"
Summarization," <SEP> WHO DARES DISTURB MY SLUMBER <SEP> I got @ed <SEP> just use an interface with the same name as the class with a constructor on the interface aswell? <SEP> think that will also work <SEP> Oh I see, it's just a mention <SEP> Sorry  <SEP> BACK TO MY SUBTERRANEAN LAIR <SEP> I'll just leave this here aswell, about OOP and FP. No matter what side your on this guy has speaks some universal truth about why its so difficult to build a good OOP system <SEP> https://www.youtube.com/watch?v=US8QG9I1XW0&t <SEP> @reggi that fixes the types, but that's not really your problem I don't think.  You want the subclass to change `beta` without reassigning it if I understand correctly, and what you've written will not do that. <SEP> Inheritance is hard because its an all-or-nothing thing.  By the Liskov principle youre saying  <SEP> TSs structural subtyping is better IMO <SEP> Sometimes it would be nice to have exact types though <SEP> @keithlayne yeah I think you're right <SEP> I've said it like 3 times :trolleybus: <SEP> but nobody listens to me :crying_cat_face: <SEP> :P <SEP> So when you have a full OOP system it ends up getting way more complex than necessary (more layers of inheritance, etc.) just to model all the exceptions-to-the-rule <SEP> For instance I might say I want any Cat but then you give me a SaberToothTiger and it eats my entire family... so now you have to remodel the system into BigCat and DomesticCat which in turn inherit from Cat... and so on and so forth down the rabbit hole <SEP> Or the cat hole, as the case may be <SEP> And you rarely know all the demarcation points up front <SEP> works great for a UI framework, not so much for the rest of the universe <SEP> Is this the expected behavior? ```TypeScript // @strictBindCallApply: true interface I <SEP> I think because `f` has no this type annotated, the arg to `call` doesn't matter. <SEP> i.e. ```ts interface I <SEP> You get the same error with: <SEP> ```ts const foo: I <SEP> So I think that *is* expected behavior. <SEP> I guess what I don't understand is why `f(): this` has no ""this type annotated""? <SEP> that would be `f(this: something): this` <SEP> I don't think TS restricts the receiver unless it's explicitly annotated. <SEP> Sorry, I don't really know what the proper vocabulary is for discussing this, so I think that made my statement confusing. <SEP> I'm with you now thanks! <SEP> :relieved: <SEP> Hmm how about this? ```TypeScript // @strictBindCallApply: true interface I <SEP> expected? <SEP> yeah.  the `this` for `call` is assignable to `I <SEP> Even this ```TypeScript // @strictBindCallApply: true interface I <SEP> oh should be `: U` nevermind <SEP> Still doesn't work ```TypeScript // @strictBindCallApply: true interface I <SEP> what version of TS are you on? <SEP> 196c0aa0783ddd7520f9accd54d53c3223f5a47c <SEP> upstream/master <SEP> hahaha <SEP> sorry I don't have my git hash glasses on <SEP> but that's on or near the current TS master?  So 3.8-ish? <SEP> yup <SEP> The reason I asked is that `{}` which seems to come out of nowhere, so I thought maybe it was failing to infer and defaulting to that, but the default when unconstrained is now `unknown` I think, so ignore me. <SEP> weird, I get `unknown` there.  Which makes me think the return type is getting defaulted. <SEP> Any chance this has come up before? Searching for related issues <SEP> I meant to ask you if you were just poking around or if this was to accomplish something specific. <SEP> half and half <SEP> one actual instance is `Array.prototype.map.call(buf, BigInt)` <SEP> it's not checking that `buf` and `BigInt` are compatible <SEP> maybe that's fine <SEP> (it's checking that `Array.prototype` and `BigInt` are compatible) <SEP> in other words `any`",is there a way to change the subclass name without re-assigning?
Summarization," <SEP> @tieTYT I may be able to help get it working for you <SEP> What does your build process look like? <SEP> If you can run `tsc -p .` and still see the issue, I suspect your `tsconfig.json` is using `files`? <SEP> the web is slowly being killed off and replaced with *apps*. It's sad <SEP> just when things were finally beginning to get good","If you can run `tsc -p .` and still see the issue, I suspect your `tsconfig.json` is using `files`?"
Summarization," <SEP> @DanielRosenwasser Is there a place I can read up on what ""contextual typing"" means from the perspective of the type checker? <SEP> Also, when resolving an overload within the type checker, is it a terrible idea to compare the call expression to a signature non-positionally? <SEP> I'm looking at this feature: https://github.com/Microsoft/TypeScript/issues/1336","what does ""contextual typing"" mean from the perspective of the type checker?"
Summarization," <SEP> /s <SEP> Wait, Lewis Carol as a mathematician?  I always figured he was a linguist <SEP> https://github.com/microsoft/TypeScript/pull/32611#issuecomment-516606096 https://github.com/microsoft/TypeScript/pull/32611/commits/1ef46f64dec1defe8be48990b7f0c4bf615ed343 <SEP> @jcalz If recursive conditional types are not officially supported, why do we have tests written for them? =P <SEP> Haha so he just discovered what you already did like a week ago <SEP> Not really - it turns out the 50-type limit is for 50 of the *same type*.  If you have a bunch of different types in the expansion it can go really deep <SEP> https://github.com/microsoft/TypeScript/issues/31823#issuecomment-506045385 <SEP> @AnyhowStep Thinking about the instantiation count limit they implemented, my thought is that the main issue with it is you get penalized even for work it doesnt have to do (i.e. the type it needs already exists).  But on the other hand you dont necessarily want it only counting newly created types either since thats dependent on the surrounding code (locally nondeterminisic)... its a tricky problem <SEP> Which is why its fine in your case probably... the 14m instantiations you hit must be mostly duplicate requests that dont need to create a type <SEP> If you want to resolve a more complex type, get a better computer",why do we have tests written for recursive conditional types?
Summarization, <SEP> Any way to extend Node global variable type?  ``` declare var Node: typeof Node & any; declare var Node: any; var Node = {} // ERROR????  ``` <SEP> @theduke Try to use ``export * from 'myinterfaces.ts'``  <SEP>  is there a way to re-export all interfaces defined in another module?  `export * from x` <SEP> C'mon guys! I need that ``Node`` name! <SEP> global augmentation? Not sure what you are trying to do. <SEP> Im just trying to reassign Node variable in the global scope. That's it. <SEP> `this`? `global`? Have not done that so I dont know. <SEP> http://www.typescriptlang.org/play/index.html#src=declare%20var%20Node%3A%20typeof%20Node%20%26%20any%3B%0D%0Adeclare%20var%20Node%3A%20any%3B%0D%0Avar%20Node%20%3D%20%7B%7D%20%2F%2F%20%3F%3F%3F%3F,how to extend node global variable type?
Summarization," <SEP> hi everyone. what's the easiest way to override existing typings from npm? I'm using a library but typings are old and I need to add a bunch of stuff <SEP> @PavelPenkov making a PR is pretty easy :-P <SEP> @PavelPenkov otherwise it depends on the dts.. if it's for amodule, copy it locally and wrap itin declare module ""blah"" {} <SEP> @NaridaL thanks. where should the imports original `d.ts` uses go? <SEP> also inside the declare module <SEP> @PavelPenkov you mean the @types/okg version? that is done automatically <SEP> if the types you are writing are for a different version of the package",what the easiest way to override existing typings from npm?
Summarization," <SEP> All this time, I thought `INSERT IGNORE` meant ""insert the row, unless it collides with another row with the same key"". And that it would throw if you gave it bad data (like the above example) <SEP> Nope. It does mean to not insert on collision, but it also means to ignore as many errors as possible and try to force the row to be inserted <SEP> @G-Rath Thought you might like another reason to look down on MySQL <SEP> We have a module type def that looks like this  ``` declare module 'vue2-google-maps' {   export const install: PluginFunction <SEP> did you try `typeof import(...)`? <SEP> More weird Github UI things <SEP> The tags don't have deterministic ordering","`INSERT IGNORE` meant ""insert the row, unless it collides with another row with the same key"". "
Summarization," <SEP> Hello everyone <SEP> I am getting this error when compiling (from Angular) ``` error TS2339: Property 'replaceChildren' does not exist on type 'HTMLElement' ``` <SEP> there is a method named `replaceChildren` in HTMLElement <SEP> https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren <SEP> typescript version: 4.1.5 <SEP> Thats a pretty old version of TS, have you tried the current version <SEP> I am gonna try, but I don't think this is the issue <SEP> I am not able to upgrade because this would require upgrading Angular version as well <SEP> but I highly doubt that this could be the TS version, `replaceChildren` method is part of the DOM API and should be supported <SEP> I found a related issue https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/985 <SEP> but yeah seems like the version upgrade would fix this https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1034 <SEP> the change was introduced around August, so after 4.1.5 <SEP> thanks ! <SEP> good to know thanks <SEP> yeah you have to annotate the methods in the derived class",error TS2339: Property 'replaceChildren' does not exist on type 'HTMLElement' 
Summarization," <SEP> I read about monoids.  Addition is one because x + 0 = 0 <SEP> but like with monadic list composition, it's not always clear what the monoid is <SEP> suffice to say, you might be able to define multiple monads for one data structure <SEP> But how do you model that property as a type - it's just an attribute of the operator itself <SEP> right, but that's the right way of thinking about, you're ""getting"" the problem <SEP> you can model that btw, using a Theorem Solver, which is like a HOP (higher order programming language) <SEP> let's give an example of multiple monads for one data structure <SEP> for example, if you take the subset of Lists with 0 or 1 values, you can define the Maybe Monad on List",how do you model multiple monads for one data structure?
Summarization," <SEP> so, i've got typescript upgraded to ~2.7.0, but it's still not able to resolve the jasmine calls from within the describe block. <SEP> i think it's the combination of several things on the CI server. on my laptop, it just works. <SEP> are you still getting the compilation errors? <SEP> no, i was just testing to see what would happen with the compilation errors. i wanted to see if i could set the references that way. <SEP> i just don't know enough about debugging typescript to know where to start <SEP> is there someway to get the source maps? <SEP> it's not a TypeScript bug <SEP> no need to debug the TS <SEP> it's definitely not a typescript bug. <SEP> you already have sourcemaps I think, I saw some references to .map files <SEP> you probably want to create a SO issue tagged with `jasmine` <SEP> yeh, i think that  would be best. thanks for the help though","when got typescript upgraded to 2.7.0, but it's still not able to resolve the jasmine calls from within the describe block."
Summarization," <SEP> https://github.com/Microsoft/TypeScript/issues/20503 <SEP> https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208 <SEP> Hm yep that seems to be the issue <SEP> Makes sense. Still annoying. :) <SEP> Sounds like it's a common question :smile: <SEP> You can make a utility method. <SEP> ``` function typedObjectKeys <SEP> Yep, exactly what I did :) <SEP> :+1:",can you make a utility method with typedobjectkeys?
Summarization," <SEP> @MicahZoltu Maybe libraries will ship with import maps? That way, f.e.  ```html  <SEP> I don't think that works, because what's in the import map depends on how your website is laid out <SEP> The package maintainer can't account for that <SEP> The assumption here would be some sort of convention, like ""make sure node_modules"" is at the root of the web server, or something. <SEP> Basically that's what `jspm` does, but it uses a `jspm_packages` folder. <SEP> Ah, cool, using importmaps without a shim, in Chrome (thanks for the idea to JSPM docs):  ```html  <SEP> Because Chrome doesn't support `src` on importmap `script`s yet. <SEP> The browser does need to support dynamic `import()` though ('course if you're using import maps anyway that's likely a given) <SEP> If NPM sets a standard (and implementation) for generating import maps, then people would easily be able to follow the node_modules-in-root convention. <SEP> That code reminds me a bit of the dynamic import polyfill I used in oozaru",is it possible to use importmaps without a shim in browsers?
Summarization, <SEP> Anybody hear about the `is-promise` fiasco yesterday? <SEP> Here's the type they publish for  their one-line package: ```ts declare function isPromise <SEP> /facepalm <SEP> Less bad than left pad? <SEP> seemed to be along those lines.  Things were bad for 2-3 hours.  I wasn't really around JS at all during left-pad. <SEP> Shorter at least then. <SEP> @AnyhowStep I'm pretty sure it was you that filed the issue but can't seem to find it... wasn't there code that works until you turned on --declaration and then TS errors?,Anybody hear about the `is-promise` fiasco yesterday?
Summarization," <SEP> Hi, I'm new to typescript and currently trying to convert a React codebase to it. This means I've been relying on @types/react a lot, but I haven't found any place where they're actually documented. Am I missing something? <SEP> @gtklocker not really... Types are generally self-explanatory <SEP> is there anything in particular you are having trouble with <SEP> Yeah I guess they are, once you find out which ones they ought to be <SEP> For example in React, I wouldn't be able to know that a React element is of type React.ReactElement <SEP> sure, when I see it it's very obvious <SEP> but how are people actually discovering these? <SEP> reading the actual typings files and trying to make sense of them? <SEP> yeah I guess <SEP> plus I'm not using any completion software, or vscode, does that make a huge difference? <SEP> Well autocomplete is like half the reason to use types <SEP> and when you hover over a function in vs code you get shown its arg and return types <SEP> which would probably help in your case... <SEP> yeah I guess so <SEP> thanks for helping out :) <SEP> @NaridaL <SEP> yeah... in this case TS could figure it out <SEP> but it doesn't <SEP> I'd recommend writing it out <SEP> what do you mean? Making an issue? <SEP> no, just write ``` const USERS_ACTION_1 = ' <SEP> Aaaah yeah, it's what I've done as the other option is not working ;) But I wanted to know whether I was missing something or not. (as I thought there should be something done about that in 2.4) <SEP> Is it possible to have an index signature on a class with other methods?",I am trying to convert a React codebase to typescript ut I haven't found any place where they're actually documented.
Summarization, <SEP> Anyone in Gitter want to invest? <SEP> I could have sworn there was a design document in the Duktape repo discussing the direct vs. indirect eval thing in depth (including why aliasing triggers indirectness) but I can't find it <SEP> This sounds like a waste of resources (in particular: electricity),there is a design document about direct vs. indirect eval?
Summarization," <SEP> Anyone know why I'm not seeing any variables in the `scope` section? <SEP> ! <SEP> it's a JS file that has been `// @ts-nocheck`ed <SEP> huh. That's pretty weird, I'm guessing the source map is malformed? <SEP> You can try turning off source maps in your debugger, right now, to see the hidden variables <SEP> @webstrand Thanks, that did it! <SEP> my hero <SEP> That means that this is probably an actual typescript bug <SEP> Should I try filing/reporting it? <SEP> If you can take the time to make a small reproduciable example, that would be great <SEP> I'm guessing the key things that cause this bug are: a `.ts` file with `// @ts-nocheck` (which has only been supported since TS 3.7) <SEP> I'm also using Electron. could that be part of it? <SEP> Maybe, but if the source map is the issue, then all browsers should show the same issue (providing they actually load the source-map). I'll try reproducing it later, when I have time. <SEP> I'm trying to do it right now :)",why am i not seeing any variables in the 'scope' section?
Summarization," <SEP> Ladies and gentlemen,   Is there a way to detect a bi-variant assignment via public compiler API?   My situation (https://github.com/Microsoft/TypeScript/issues/3067): ``` interface A {     x: string; }  interface B {     x: string;     y: string; }  function copyB(value: B): B {     return undefined; }  var values: A <SEP> crossposted: https://github.com/Microsoft/TypeScript/issues/3523 <SEP> I think you can do something like: <SEP> ``` function method(blah: Foo | Bar) {} ``` <SEP> (I'm not sure on the exact syntax, but I have seen something like that before. <SEP> @Zoltu that's correct <SEP> Im defining an interface. Im not implementing anything <SEP> I believe you can do the same sort of thing: <SEP> ``` export interface Foo {  blah: string | boolean; } ``` <SEP> Though, that assumes both are named `blah` <SEP> right, but I dont want to do it for a property of Foo. I want Foo to be one of string or boolean <SEP> here is exact real world scenatio https://github.com/mohsen1/swagger.d.ts/blob/753de7b34ccbd3221a7bd21b89b2e4a28806cbf2/swagger.d.ts#L79 <SEP> I would like to have a `Security` interface which is equal to `BasicAuthenticationSecurity|OAuth2AccessCodeSecurity|OAuth2ApplicationSecurity|OAuth2ImplicitSecurity|OAuth2PasswordSecurity|ApiKeySecurity` <SEP> ```   export interface Operation {     ...     security?: BasicAuthenticationSecurity | OAuth2AccessCodeSecurity | OAuth2ApplicationSecurity | OAuth2ImplicitSecurity | OAuth2PasswordSecurity | ApiKeySecurity;   } ``` <SEP> I believe that is the best that you can do. <SEP> It is saying that the `security` field can be one of 7 things (undefined is an option due to the `?:`). <SEP> thats what Im doing right now. Its ugly. Specially when I need to repeat that line <SEP> As far as I know, there isn't a way to alias that union to a single new type. <SEP> Yeah, this is a fundamental problem with legacy JavaScript libraries.  They have a tendency to use unions *everywhere*. <SEP> I assume you are defining an interface for a legacy JavaScript library? <SEP> Nope, its for a JSON Schema <SEP> BTW someone should write a JSON Schema to TS Interface convertor <SEP> If you have control of the schema, I recommend rethinking its design to avoid the union.  If you don't, then I think you just have to deal with it.  :/ <SEP> It can be a feature request :) <SEP> I can see value in aliasing a union, primarily for this sort of situation (where you are trying to add static typing to a legacy system). <SEP> `export union AuthenticationTypes  = BasicAuthenticationSecurity|OAuth2AccessCodeSecurity|OAuth2ApplicationSecurity|OAuth2ImplicitSecurity|OAuth2PasswordSecurity|ApiKeySecurity` <SEP> Oh, sweet!",is there a way to detect a bi-variant assignment via public compiler API?
Summarization," <SEP> https://github.com/microsoft/pict <SEP> basically write declarative tests, and watch the bugs fall out.  Im a big fan, but I dont know whats out there for doing that in JS <SEP> cool <SEP> I wish there were a javascript library equivalent to:  <SEP> I've never used a fuzzer before. They seem cool in theory <SEP>  A.9.7 Example: Sudoku  <SEP> What the fuck <SEP> Jesus christ <SEP>  A.9.10 Example: Eight queens puzzle  Wtf. They don't mess around <SEP> And it's fast too, it's doing better than a simple exhaustive search <SEP> I should learn prolog now and learn how this library works <SEP> Nice. A Github repo https://github.com/triska/clpfd <SEP> https://github.com/triska/clpz <SEP> `clp(z)` doesn't work on open source prolog interpreters, unfortunately. <SEP> O; <SEP> It's using stuff not found in open source interpreters? <SEP> No polyfill? =P <SEP> 'fraid not.  <SEP> I think it uses tags, which aren't supported by swi. Some progress had been made, last I checked. <SEP> yep <SEP> They're not missing syntax, but special predicates that do  things like ""tag"" variables so that they unify only under certain conditions, are missing. <SEP> raccoons used to get most of my cat food <SEP> My cat eats the dog food, dog eats the cat food.  Works itself out.",is there a javascript library equivalent to?
Summarization," <SEP> @webstrand that's amazing, thank you so much! I'm rewriting  <SEP> @fabiospampinato  <SEP> @webstrand I believe there's a PR open to implement actual subtractive types in TypeScript - or if not, definitely serious discussion around doing so.  Let me see if I can find the issue now <SEP> YEah here it is - #29317",is there a PR open to implement actual subtractive types in TypeScript?
Summarization," <SEP> So I'm trying to figure something out. I have a view implementing a popover custom attribute, which contains buttons that need to perform actions. I can call the action functions from the HTML element that implements my popover, but not from the buttons themselves within that popover (x() is not a function). How can I enable these functions in my custom element (child)? <SEP> Sorry everyone meant for Aurelia/discuss <SEP> is there a tslint place where I can ask questions?",how to call action functions from a view that implements a custom attribute?
Summarization," <SEP> I'm thinking what I really want is a dumb-phone, plus a 10"" tablet with data connection <SEP> I'm not really happy at all with any of the android phone's that I've had since android 4 was a thing <SEP> This is fun: <SEP> Whenever the iPhone 4 came out, that was my first smart <SEP> I got a nexus 10 in 2012, unfortunately it broke. Prior to that I hadn't used android at all.",how about a dumb-phone and a 10 tablet with data connection?
Summarization," <SEP> It wouldnt really be practical to distribute over every possible value of a double (2^64 possible bit patterns) <SEP> I'm not saying it should, but the typesystem should treat `number` as if it could <SEP> how would that work though <SEP> I'd most likely implement special cases for all the uses that I could think of, and otherwise bail-out with a type error <SEP> Dammit I was supposed to be working on a source map parser and the TS gitter distracted me yet again :wavy_dash: :fist: :wavy_dash: <SEP> That was supposed to represent a shaking fist but it... didn't come across as well as I wanted <SEP> or something dirty <SEP> shame on you",the typesystem should treat number as if it could
Summarization," <SEP> if you give me a Playground sample, I'll write it for you @rhys-vdw, can't be that hard <SEP> I wouldn't have thought so. I'll do it now <SEP> I don't like to have extraneous types :D <SEP> we're opposites <SEP> ```ts type Match <SEP> that's one of my types @Gerrit0 <SEP> so you need each property with an array value? <SEP> Playground <SEP> @Gerrit0 the reason I prefer long types btw is because someone will import my module and see like 400 different types otherwise, most of which are just intermediaries",is it possible to have multiple types for a single property?
Summarization," <SEP> Can I make TypeScript prevent me from returning `any`? <SEP> Can I prevent it from accepting this code? ```js function returnsString(): string {   return JSON.parse('null') } ``` <SEP> Mmmmm <SEP> depends on how hacky you want to get i guess because ""any"" is technically a supertype of string so therefore compilers happy <SEP> and the signature of JSON.parse is ```  parse(text: string, reviver?: (key: any, value: any) = <SEP> That makes sense <SEP> I would like it to return something like a ""JSONObject"" with methods so I can extract data, therefore forcing me to deserialize the string into my own types. Maybe there is a library that does something like that? Do you know any? <SEP> BTW thank you for the reply :D <SEP> something like..... this? ``` function parseTo <SEP> parseTo <SEP> parseTo <SEP> parseTo <SEP> except JSON.parse would be JSON.parse(str) sorry <SEP> yeah, but this still trusts the input :D I found `io-ts` its exactly what I wanted <SEP> https://github.com/gcanti/io-ts",can i make TypeScript prevent me from returning 'any'?
Summarization, <SEP> Here's a suggestion... <SEP> First off. <SEP> Build a static version of the JSON model you expect back. <SEP> I would even go as far as Object.freeze(.) every branch/leaf in the tree. <SEP> And then have that as a constant... <SEP> So... <SEP> Like this:,Build a static version of the JSON model you expect back.
Summarization," <SEP> hey guys, any exemple of a project using node with typescript, besides Angular2? <SEP> of big* projects <SEP> @vladima any idea when pathMapping will be merged into typescript@next builds? <SEP> quick question: in tsconfig.json, what exactly is the ""system"" value for the ""modules"" key? <SEP> Over time, there's been a number of module formats for JS. For example, Node modules typically use the CommonJS format, where they use a `require` function to get their dependencies and an `exports` variable to set their exports <SEP> Similarly `system` is simply one more alternative, in which the module interacts with a `System` global to `register` and `import` dependencies <SEP> Which one you pick depends on the environment you want the generated JS code to run in, and whether there's any further preprocessors that will run on the code","any exemple of a project using node with typescript, besides Angular2 of big* projects?"
Summarization," <SEP> Any ideas on how to convert `{ a?: string, b: number }` to `{ a: string | undefined, b: number }`? <SEP> you mean something like this: ```ts type x = { a?: string, b: number }; type y = Required <SEP> no, not exactly. it should require a key to be always provided, even if `undefined` <SEP> `RequireKeys","how to convert `{ a?: string, b: number }` to`{ a: string | undefined, b: number }`?"
Summarization," <SEP> Does `uiCapabilities?: () = <SEP> (If you need `Capabilities`, remember to surround the function type with parentheses) <SEP> @webstrand thanks a lot <SEP> Ugh <SEP> Now I need more tests and run-time checks <SEP> !","f you need `Capabilities`, remember to surround the function type with parentheses."
Summarization," <SEP> if you cannot send `$key` to the server, you'll have to run your object through a sanitize function to strip the unwanted bits, no way to automate that unfortunately <SEP> Hmm.. I think I'm going to create two interfaces then <SEP> that sounds like the most reasonable plan <SEP> not sure yet if I will ever send the objects i retrieve back to the server so this seems to fit better <SEP> and either use polymorphism or a type union to express the actual object <SEP> a type union is a third type?",if you cannot send `$key` to the server no way to automate that unfortunately 
Summarization," <SEP> https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208 <SEP> But for some of my use-cases i've make my own function, typedObjectKeys that returns  Array <SEP> @aaronbeall tuple type? <SEP> seems really close... it does allow situations it shouldn't in my case <SEP> yes but that's valid for function args anyways <SEP> 1,2,3",is there a way to use tuple type for function args?
Summarization," <SEP> Hi, I'm trying to migrate to Typescript 2 and this bit of code 'typeof resp === ""String""' is throwing an error TS2365: Operator '===' cannot be applied to types. Not sure why this is an issue ? <SEP> oh nm that was silly <SEP>  @sohailsomani yes I am   Alright, welcome to the most fun you'll hate to have.","when migrate to Typescript 2 and this bit of code 'typeof resp === ""String""' is throwing an error TS2365: Operator '===' cannot be applied to types."
Summarization," <SEP> Hello guys how can I add types definition for 3rd party npm which does not have them. Typescript 3 <SEP> I want to modify  ```  interface ListProps { refP: React.ReactNode} ``` but it not allowed me to change props. <SEP> @ddeath this may help: https://www.typescriptlang.org/docs/handbook/declaration-files/templates/module-d-ts.html <SEP> @ddeath i create file with only line: `declare module 'rc-table'` <SEP> @kapilpipaliya thanks, I solved it already, not sure why, but I had to use `typeRoots` <SEP> @ddeath i dont have to use typeRoots, it works default for me, but thanks <SEP> i am writting types in typing folder too",how to add types definition for 3rd party npm in TS 3?
Summarization," <SEP> Any one knows how to have intellisense for Objects? <SEP> ! <SEP> If I remove the first string, it works <SEP> ! <SEP> But I want to have intellisense for both.  ``` {isDisplay: 'Displays'}  {isDisplay: {flex: true}} ``` <SEP> how can I properly export this without re-implementing everything in the interfaces inside of the exported classes?",how to have intellisense for objects?
Summarization," <SEP> Hi. I can't figure out why my npm module import isn't working. I installed the package with `npm install`, so it's in a `node_modules` directory at the top of my project. According to https://www.typescriptlang.org/docs/handbook/module-resolution.html, typescript should be looking there -- the .ts is in a `./static/js/` subdirectory. Instead, I'm getting a ""cannot find module"" error. Hints? <SEP> I feel like it'S the kind of ""it's awesome in theory, but not in practice"" kind of thing <SEP> @reverie The dumb answer is just move the .d.ts <SEP> @nickiannone So it's a .js package, but that should work if I also reference the .d.ts from definitelytyped, right? <SEP> It seems like several different situations can result in the same error message about the module not being found. Wish there was a verbose mode. <SEP> Yeah, there's kind of a double system in place. <SEP> Your TS has to know how to reach the .d.ts, and you have to have your compiled JS be able to reach the node_modules folder. <SEP> like, TS doesn't have a solid linker-step like most compiled languages just yet, it seems <SEP> maybe someone with more experience than me can talk more <SEP> write your own .d.ts file, extend the namespace or module, and extend the interface",can't figure out why npm module import isn't working
Summarization," <SEP>  The recursive-select must be a simple select, not a compound. The recursive-select is allowed to include an ORDER BY, LIMIT, and/or OFFSET.  I had no clue recursive CTEs only had two parts. Never had to use a recursive CTE yet. <SEP> is there a way to enable warning for not awaited calls in TS? i am using strict=true and eslint, and get no warnings yet <SEP> ```          ""no-return-await"":  <SEP> Seems like I have it disabled <SEP> lol <SEP> ```          ""@typescript-eslint/no-floating-promises"":  <SEP> There's also ""@typescript-eslint/no-misused-promises"" <SEP> I think `no-floating-promises` is what you want <SEP> Looks correct to me",recursive-select must be a simple select not a compound
Summarization," <SEP> I'd consider Opaleye one: https://hackage.haskell.org/package/opaleye <SEP> OK, baby done eating, so a slightly better example, perhaps. Had a business case where there were several domain objects of various types stored in a DB.  There was a user permissions / capabilities system as well.  We were able to implement the permissions system's semantics in an domain-object-agnostic fashion, which would involve a series of joins and filters.  This implementation would apply to any query (partially constructed or complete) to achieve the desired restrictions.  Further, we could require that direct table access to the domain object tables (if desired) could only be achieved via an application of the permissions system.  The end result of this is that queries could be built up in smaller, semantically meaningful pieces, the results of which could then be fed through the higher-order permissions system, which would produce a transformed query which was still highly efficient, but had the correct access restrictions applied to it.    Constructing those types of queries in raw sql, by hand, for each underlying query or operation which supported the business functionality would have been extremely expensive and highly error prone, almost certain to be wrong in some places. <SEP> Might be hard to visualize without concrete details that i can't provide, but hopefully gives a little more flavor",implementing a 'permissions-agnostic' semantics framework
Summarization," <SEP> TS integration in VS is a total mess, I gave up on it long ago, I just uninstalled everything TS related in VS and just use VS Code to edit ts files <SEP> VS Code is so much easier on the eyes too <SEP> and sooo much faster too <SEP> For sure! Funny too how MS made Typescript and yet it doesn't play nice in VS",TS integration in VS is a total mess simonvizzini
Summarization," <SEP> I'm trying to convert to TypeScript a project with which I'm learning react-native, and it's now running and everything, but I have a couple questions <SEP> In https://github.com/Kronuz/currency-converter-starter-ts/blob/master/app/components/Logo/Logo.tsx#L35..L36 <SEP> I'm getting: Object is possibly 'undefined' <SEP> how should I go about with this things? <SEP> (as those are initialized during componentDidMount) <SEP> You can tell Typescript that the properties will be assigned elsewhere by defining them like this: `keyboardShowListener !: EmitterSubscription;`, though this does open you up to potential runtime errors if you don't initialize it.",object is possibly 'undefined' when converting from react-native
Summarization," <SEP> The backend api is robust. If the sqlite database is corrupt or malformed, it auto-downloads the last good backup. <SEP> but with event sourcing you could actually edit with the app while online. :P <SEP> man, that's just gross. ""product owner"" doesn't tell me much,  we talking somebody likely to break stuff?","f the sqlite database is corrupt or malformed, it auto-downloads the last good backup."
Summarization," <SEP> This seems to have been open for a while--just encountered a use-case for it: https://github.com/microsoft/TypeScript/issues/420 <SEP> Is there a way to narrow a type by asserting a property? e.g. ```TypeScript const { done as false, value:  <SEP> I understand a guard is recommended? https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/#stricter-generators <SEP> but is there a compile-time-only solution? <SEP> Best I've got is this, ```ts declare const iter : {   next () : { done : boolean, value :  <SEP> Note that it **is** unsafe to do this <SEP> I don't remember what the return type of `next()` is supposed to be <SEP> Is it a discriminated union? <SEP> ```ts declare const iter : {   next () : (     | { done : false, value :  <SEP> The solution depends on whether it's a discriminated union or not",is there a way to narrow a type by asserting a property?e.g. TypeScript const
Summarization," <SEP> Going through various type libs, and can't find `Nullable <SEP> ``` type Nullable <SEP> (and NonNullable I suppose)",can not find Nullable  type Nullable
Summarization," <SEP> Maybe this will help - https://typescript-play.js.org/#code/MYGwhgzhAECC0G9oDMD2qBc0B2BXAtgEYCmATtALzQAcAjAEwDc0AvgFACW2ALmcmMGLQAQohToseImWbsQxbtAAeWeFSRpM0BgAZqrRm3mKAnllFVsxAO5wAFAEpDQA <SEP> they are literally the same type as far as TS is concerned <SEP> that's acceptable <SEP> So theres no way to know whether a constructor created it or not given only the instance type <SEP> (Notice I swapped the assignments to illustrate) <SEP> mhmm <SEP> so.. let me ask you this then <SEP> instead of `extends`, is there a way to compare properties and value types of two objects in a similar fashion? <SEP> because i really don't care if they have the same footprint <SEP> You said that before, and if thats the case then your question morphs into  <SEP> Branded types, in other words <SEP> it doesn't morph into that question though.   it's literally ""i have this specific set of properties, and value types. does the object i'm passing match that?"" that's basic typescript <SEP> because i already have the class type, and can get the properties of that class type trivially <SEP> the properties/value types are known <SEP> So then `extends` is what you want, if you know all the specific types upfront.  It seemed like you wanted to know in general  <SEP> nevermind i'm wrong.. and going in circles trying to reason about it <SEP> Yeah I was going to say, I felt like we might be arguing in circles <SEP> lol, sorry about that.  thanks for the patience :thumbsup: <SEP> @ShanonJackson @keithlayne @karanlyons - maybe one of you guys can help out? <SEP> Wow Ive managed to not look at gitter all day, Ive totally been productive. <SEP> the only real mechanism here with `extends` is checking against `object` then <SEP> @fatcerberus  so setting the `extends` question aside, and the complications of identifying a class... i'm a bit confused why this doesn't work correctly: https://bit.ly/2VrNlr5 <SEP> i extend `object`, which is correctly identifying it.. and the nesting of `AtLeastOne <SEP> i would've thought that would work <SEP> oh <SEP> This should fail right? ```ts func({ foo: {} }) func({}) ``` <SEP> yes <SEP> those should both fail <SEP> hrm... no.. my guess as to why it wasn't working had to do with the Partial <SEP> also a rather annoying aspect...   the typescript playground with my latest link appears to be handling it just fine - but i'm getting a Javascript heap out of memory trying to tsc --build with this in my actual project, lol <SEP> visual studio code types are still showing up properly though, which i find a bit strange. oh well - will set that aside for now <SEP> Am I missing something, or does this work as expected?  <SEP> ```ts AtLeastOne <SEP> ooooh <SEP> i think that might be what i'm looking for <SEP> There's probably a way to do it shorter with `Pick` & other helpers, but I find it easier to reason about when I avoid them <SEP> `Record` in particular <SEP> yeah.. this definitely looks simpler <SEP> the `Partial <SEP> but the resulting type is so much cleaner with the way you've done it <SEP> cleaner = easier to read and follow, lol <SEP> Note that recursive types in general tend not to work well so I recommend avoiding them if possible",is there a way to know if a constructor created it or not?
Summarization," <SEP> Hello Friends: Plz can someone explain to me why i got this error <SEP> ! <SEP> ```ts  function cc <SEP> ```log (property) cc: boolean Type '{ cc: boolean; }' is not assignable to type 'ccinterface'.   'ccinterface' could be instantiated with an arbitrary type which could be unrelated to '{ cc: boolean; }'.(2322) ``` <SEP> **it's logical that the typescript is not able to know that the return is exatcment what I declared** <SEP> yeah so there are a couple of issues there. <SEP> One is that a generic function that's only used in the function's return type like that is actually just a hidden type assertion. <SEP> But more importantly: there's no need for this to be generic. <SEP> Really, it doesn't *need* any types to be annotated to work totally fine. <SEP> for the first thing, imagine calling it as `cc <SEP> i understood thanks @keithlayne <SEP> this is my full test example <SEP> ```ts function cc <SEP> I wanted to create an object with multiple functions <SEP> `cc` is not actually generic. Stuff like that is generally A Bad IdeaTM. <SEP> Oki, thanks <SEP> interesting (?) question: it seems that properties declared on interface Object {}, such as hasOwnProperty, are hidden by default from autocomplete (even though you can still use them without errors). im wondering if there's a way for this not to be the case <SEP> the backstory is im providing my own base lib.d.ts file",why i got this error ：log (property) cc: boolean Type '{ cc: boolean; }' is not assignable to type 'ccinterface'.   'ccinterface' could be instantiated with an arbitrary type
Summarization," <SEP> https://github.com/mightyiam/cyclejs-components/blob/master/tsconfig.json <SEP> https://github.com/mightyiam/cyclejs-components/blob/master/webpack.config.js <SEP> Do I have something missing? <SEP> I'm not sure what target es2017 will make out of the imports though <SEP> I'm not so much into the es imports but maybe it is just a similar solution as I assumed for webpack <SEP> @con-ssc I tried ES2015 as the target and it seems the same result. And it makes sense, because what determines the target module system is `module`, not `target`.", what target es2017 will make out of the imports though？
Summarization," <SEP> hey guys, is there a way to configure (somewhere in `package.json` or `tsconfig.json`) that I want to use 'own typings (`.d.ts` files)' without having it inside the `node_modules/@types` folder? <SEP> when I copy the files to the node_modules directory my ng2 app finds it, but otherwise it is complaining about not finding the namespace <SEP> @dtabuenc Actually it is ",is there a way to configure (somewhere in `package.json` or `tsconfig.json`) that I want to use 'own typings (`.d.ts` files)' without having it inside the `node_modules/@types` folder
Summarization," <SEP> getting back into TypeScript \o/ <SEP> how's everyone been? <SEP> I forget, what's the current best way again to get a purely type-level unique symbol type? <SEP> `type Foo = unique symbol;` obviously doesn't work, but I don't want to declare a fake `const`, is that the only way? <SEP> ```ts declare namespace TypeProp {         export const species: unique symbol;         export const kind: unique symbol; } ``` <SEP> this seems to work fine",what's the best way to get a purely type-level unique symbol type?
Summarization," <SEP> Are higher order types supported as type arguments of TS generics? For example,  ```typescript type MyType <SEP> (this above doesn't work so I guess not) <SEP> Hmm maybe some recursive definition like  ```typescript VariadicAssign <SEP> @Gerrit0 did you make  it  work?!? Genius! My shit  complains of circularity, besides other issues ```typescript // from ",are higher order types supported as type arguments of TS generics?
Summarization," <SEP> Hey guys <SEP> i have interface EventListener <SEP> then I have class CustomEventListener implements EventListener <SEP> when I make instance of CustomEventListener and invoke onEvent method  ther is error <SEP> (2,43): error TS2315: Type 'EventListener' is not generic. <SEP> @scrambledcode  `EventListener` interface already exists https://developer.mozilla.org/en-US/docs/Web/API/EventListener <SEP> ... and it's not generic <SEP> :)",error TS2315: Type 'EventListener' is not generic
Summarization," <SEP> Hmm. Why when I do /// <SEP> I did export = ClassName at the end of the TS file <SEP> `/// <SEP> Personally, I don't use internal modules at all.  External only for me. <SEP> `export class Foo {}` will result in Foo being an external module, which means you bring it in to your other package like `import { Foo } from 'foo';`. <SEP> `class Foo {}` will result in Foo being an internal module, which means you bring it in with `///",why is 'export = ClassName at the end of the TS file?
Summarization, <SEP> @ShawnTalbert  @westonpace  @blindmonkey TYVM :) I will refactor to that later <SEP> what's the current version of typescript playground? <SEP> i cant reproduce my problem :(,what's the current version of typescript playground?
Summarization," <SEP> is this a good place for this question? Consider the following generic type definition:  ``` type Unshift <SEP> 1) yes: <SEP> 2) yes <SEP> alright then <SEP> school me Shanon <SEP> 1sec <SEP> ``` export type Unshift <SEP> Concat is for Array.push <SEP> Concat is for tuple push* <SEP> Unshift is for Tuple unshift obviously <SEP> Hope this helps. <SEP> nice <SEP> enormously, thank you <SEP> :point_up:  <SEP> :point_up:  <SEP> Hey @ShanonJackson , @keithlayne , @G-Rath   With ",Consider the following generic type definition:  ``` type Unshift 
Summarization," <SEP> What are people using for typing ES6 environment? es6-shims feels a bit weird, if I'm not using es6 shims and just relying on an es6 runtime :) <SEP> Would anyone know what's up with the below? It seems like `any <SEP> Ah - just upgraded to 1.8.9 and it went away :) <SEP> oh spoke too soon. Anyway here's a live version of the issue: http://bit.ly/1SwzjL0",what are people using for typing ES6 environment?
Summarization," <SEP> I wish I had a project to build in rust. <SEP> me too <SEP> but all of my ideas need electron/js <SEP> let's come up with one for funsies <SEP> BIG DATA <SEP> compile your rust to wasm then :P <SEP> I hope they formalize a spec for accessing the DOM from wasm, because that's what I need <SEP> the only idea I've come up with in the last decade only requires github pretty much :| <SEP> I don't know that they will...are they working on it?  I saw a talk or two about WASI recently, which I'm not sold on but has interesting potential. <SEP> Sounds like a high/low level mismatch to me <SEP> I remember someone here quite a while ago saying until wasm can do all the things js can do in the browser that it's all garbage <SEP> which I disagree strongly with <SEP> I don't think the goal has anything to do with replacing JS in the browser <SEP> for most things, though, javascript is good enough TM <SEP> I could see it being useful for number crunching, cpu intensive tasks. <SEP> but like yarn 2 had an interesting thing, I can't remember where I read it <SEP> like SAT or constraint optimization <SEP> also `pnpm` is pretty awesome <SEP> isn't wasm an extension of asm.js, more or less? <SEP> but both technologies solve the same kinds of problems: <SEP> If I ever need access to a C library in the browser, it'd be my goto",is there a way to access the DOM from wasm?
Summarization," <SEP> Yeah although I would just stay way from default exports <SEP> they aren't that useful <SEP> so in your `App.tsx` just use `export` instead of `export default` <SEP> result1 would be number, result2 string and result3 a an `Array <SEP> yeah ... it's the little things that keep the grammar simple I guess <SEP> can you paste the code you ended up using? <SEP> This compiles fine for me: ``` class Bar{  }  class Foo{  }  var p1:Bar <SEP> but you probably need to call `Promise.all` with type parameters: ``` Promise.all <SEP> No <SEP> the typing looks like: ```   all",`App.tsx` just use `export` instead of `export default`
Summarization," <SEP> Is it an anti-pattern to create a generic getter function to retrieve data with an `any` return type? I just wrote a generic selector for one of my data structures: ``` const getMarketPropById = (prop: string) = <SEP> reading.... <SEP> it's not a anti-pattern at all <SEP> Is there a way for me to properly type the return though? <SEP> yep <SEP> the return type should just be the index type of market, or in a generified version the index type of whatever you're passing in inplace of market <SEP> i'll show trivial example <SEP> ``` const GetFoo = (prop: keyof Foo): Foo <SEP> ``` interface Foo {      <SEP> or full generic...... ``` const Index =  <SEP> Hmm it doesnt look like I can do `Foo <SEP> So by doing: ``` const GetFoo = (prop: keyof Foo): Foo",how to create a generic getter function with an any return type?
Summarization," <SEP> Ugh, I used to be a real sucker for the low level specifics of cpp. I used to only use static_cast, dynamic_cast, reinterpret_cast and looked down on c-style casts. They **are** different but I can't remember the difference without looking it up anymore <SEP> I can think of one use of reinterpret_cast without looking it up online: binary serialization/deserialization <SEP> You cast your pointer to a class/struct to a pointer to a char using reinterpret_cast. Then write it to a file (passing in the sizeof your class/struct) <SEP> Then read a file, reinterpret_cast the char ptr to struct ptr <SEP> Ignoring versioning (backwards/forwards compatibility), it makes serialization and deserialization blazing fast <SEP> Yeah I thought of that but I was thinking there was an easier way. <SEP> I thought of the dumbest use ever: a runtime endianness check :smirk: <SEP> I really am rusty. Had to stop to think how that would work for too long <SEP> All just bits and ptrs dammit <SEP> But its amazingly dumb, so dont worry about it <SEP> Also you forgot `const_cast` :trollface: <SEP> Noooooooooo <SEP> Wait <SEP> Isn't that one super dangerous? <SEP> Removes const ness, was it? <SEP> ""Substitution failure is not an error"" <SEP> More people should be hit in the head with that one tho",reinterpret_cast makes binary serialization and deserialization blazing
Summarization," <SEP> From my understanding everything is moving to npm <SEP> you just add `""typings"": ""dist/library.d.ts""` in your package.json <SEP> and the compiler will use normal module resolution rules to find it <SEP> so if you're consuming types, probably have to use typigns, but if your publishing your own it should just work as long as it's distributed with your package <SEP> Does anyone know how to override tsconfig options when using ts-loader with webpack? <SEP> Example, my tsconfig.json has `outDir: ""dist""` but i don't want webpack to see this <SEP> Hmm... looks like there is a `ts.configFileName: ...` property in config",how to override tsconfig when using tsloader with webpack
Summarization," <SEP> Ok fellow typescripters, running into an interesting error when using `ReturnType` and `Parameters` and then drilling into one particular parameter: https://www.typescriptlang.org/play?#code/LAKAxgNghgzjAEBhATgezgNShAlgEygBcBTAHgEkA7HQgOWMIHdVkBrAFQE8AHY+YgB4lKeBOSo16TFq1IAlBgFdklLrwrU6DZmzXEAfIfgBvUPHPwcmqTtYAueBK3TdPYgG5QZi2FSUYhMiKYIQsABRWktoyDk42MnoAlCbeFhaEABY4MAB0kc628AC8ltbRbJ4gaQC+XlXpyFBWALJQlJxhBIRQDgAKUI0AtgzEyDDySip6GlEuHG76ANoA5IFNlMsAuksADJvJpvVp5r7+hPCU5azF8JnZeWVzYYmVxxaXczlrVp1EUC+peC1ECA0LxNjPBwKQjKVRuGYFBILFJHY7ISaUW5ZXL5cGsZ6vCzA4GgKwkZAAMygYD45DxpAAIkRFIM9PoUWlvpRft0HEyYay3IkHJRFBAIJUSSAyaMqTTHHErozmYLeOzDmlIY56fyWWzQFLILAEHiAIzKgV6fhCYgiBCiwYAI1Gi22lkG3AgxGGlEIYh1KrZHIa6x5PQuLOdyFdwoj4uDb1OMFQXpyEFQAHMwwDUWl0TCVHGJYDiXUjXB4HiAEwWvVua3CUQRp0ut04D1en1+7VK3WqgwJ26NH5dcMOqMxkViiCDtJJlPENOZ7OEt752FF1dAg11S6MJBoTDYfBEYhhZ7Fdl7ytXU3PF5AA <SEP> I cannot apparently assign the output of a method to the signature of the return type of a function I pass in? <SEP> I thought at the very least I'd get a laugh.  What do you guys think? <SEP> `ReturnType` is conditional, so unless the types match exactly, typescript won't let you do that when `ReturnType` has an unresolved generic parameter <SEP> ```ts     toNetwork(): INetwork <SEP> Look at you with your bad self!  Wahoo! <SEP> Now how do I account for the last line? <SEP> There's some kind of logic error in your types, I'm not sure where it is. <SEP> blindly attempting to fix it indicates that the circular reference in `InitNetworkType extends IInitNetwork <SEP> the issue is that you're passing in your `Network1 <SEP> Ty @webstrand, you have helped greatly! <SEP> The fixed version thanks to @webstrand: https://www.typescriptlang.org/play?#code/LAKAxgNghgzjAEBhATgezgNShAlgEygBcBTAHgEkA7HQgOWMIHdVkBrAFQE8AHY+YgB4lKeBOSo16TFq1IAFKMigBbBsWQxSAJQYBXZJS68K1Og2ZsjxAHwBtAOSElOSvYC6dgAxvb369fgAb1B4UPgXSXMZAC54CTNpSx5iAG5QELCwVEoYJ10wQhYACgiEi1ZY+KlyqwBKIIywsMIACxwYADpS6pl4AF5w0x62NJAmgF90sebnSgBZKEpOIoJCKFiAQWQlTnlFFTUNbT0DKxNIxI5ku0dZ9y8fP3rg6abQrJzCeEootn74VrtLpDX6sIq1UZvMI-S4dJxQFwrIhQCGNeCTEBowrDMG1So4vZKVQkI46Qj6QzJc5lGRWG7wlz3XyPDwNV5vZAnSgAtqdbqg8GQsIYjGgFwkgBmUDAfHIBIAIkRdMo6WymgzKEi1rFFeSVclbG48d9dBAIKNRSBxeopTK4lVQaRdcrVS8muD8Y7nfreNZQJbILAEDiAIxOpU+viCYSiE3KABG6gCOGU3AgxFUlEIYgVEddWNmWvWccTyENxsopogaqh8A+MFQ6Y6EFQAHMi6j2U1OeSDCazULQiKpoG4PAcQAmcN6qz8ITEEQISsJpPhVPpzPZuK5mfXGuhDVF2LL0vl49V-dveuN4jNtsdwccrn981o4eYkA-RhINCYbD4IhiCKcF+gCL9x1BMMTyTcFO3AlB0BgLBcFWICQL6MDiG-SdSGg5BrFglIgA",error when using ReturnType and Parameters
Summarization," <SEP> Hi everyone, it's good to be back.   In a Create-React-App typescript project my build failed.  A small change to the signature of one component solved the issue.  original signature:  (DR is for DeepReadonly) ```ts const Pagination: DRFC <SEP> ! <SEP> @fatcerberus , @AnyhowStep , @dragomirtitian , any insights into this issue?",riginal signature:  (DR is for DeepReadonly) ```ts const Pagination: DRFC   In a Create-React-App typescript project
Summarization," <SEP> can any1 help me with ? http://stackoverflow.com/questions/43948188/how-to-fix-types-duplicates <SEP> My god do you even sleep guys? <SEP> @idchlife I was about to sleep, then found a solution to my problem :D <SEP> anyway, it's too late for me .. good night all! <SEP> just copy RTCDataChannel into your own d.ts <SEP> But then RTCPeerConnection is missing addDataChannel method <SEP> well the problem is you got conflicting type definitions <SEP> into your own separate d.ts file <SEP> and you can augment any interfaces you need with additional methods etc.. <SEP> @vardius why would it be missing the addDataChannel method if it's in the original .d.ts? <SEP> yep but to solve it right i would have to copy lib.d.ts on modify it <SEP> well if it's just a matter of missing methods <SEP> you can augment <SEP> nope it is not, the lib.d.ts does have peer connection type but it is missing data channel completely <SEP> @vardius I'd modify the webrtc.d.ts... it's probably shorter <SEP> if you wanna try to build i can give u a github with project setup <SEP> you can chose to modify one or the other whichever is easiest <SEP> Sure, post it. <SEP> but what I'm saying is you can often create new types/or augment existing ones <SEP> by just re-declaring the interface and adding the additional methods <SEP> typescript will merge your definition with the one from lib.d.ts. <SEP> I'm surprised TS cannot into ""multiple declarations merging one into another"". Hm... Well if types differ (one have name: number and another name: string) that's the real problem",RTCPeerConnection is missing 'addDataChannel '
Summarization," <SEP> Hi @SimonMeskens , regarding the issue we were talking about yesterday, here is an updated sample that fails the same way I'm experiencing (had to add more properties in the constructor of the subclass)  <SEP> If  building with tsc,  src/types is normally ignored? types/ doesn't appear in lib/types and then shows me errors, unable to find the types dir in lib/. <SEP> Confused now whether it's default behavior or if I have something not configured correctly.",error:unable to find the types dir in lib when building with tsc
Summarization," <SEP> You want tuple to union. <SEP> `Map <SEP> :point_up: ~~I forget what the syntax is for that, but it is pretty simple.~~ <SEP> ```typescript Map <SEP> @keithlayne Good. But number can be any <SEP> what? <SEP> I don't know what the number will be <SEP> `typeof  <SEP> To parrot @keithlayne  ` <SEP> I'm not saying *a* number, but actually `number`. <SEP> Got it. Thank you <SEP> it can also get confusing when types and values look exactly the same. <SEP> Like now https://prnt.sc/po887d <SEP> I've seen that lightshot thing used a bunch of times on github issues and stuff <SEP> yeah what I wrote is for a tuple value <SEP> Why is it so prevalent? <SEP> `const weird:  <SEP> @Avinar-24 What is the definition of `DERIVED_FIELD_FORMATS`?",is there a way to add a tuple to a map?
Summarization," <SEP> But the project was conceived to do all the things determined by 12+ years of business, and he's treating it like a startup MVP.  It's not wrong, but it's not right.  The plus side is pushing to some kind of basic feature completeness earlier, we weren't focused and spent a long time not answering important design and implementation questions. <SEP> Anyway, I'm ambivalent about it all...there are trade-offs, just like everything. <SEP> But anyway, my eyes crossed and I just clicked ""approve"" on the PR.  Nothing else for it.",why is he treating the project like a startup MVP?
Summarization," <SEP> TS and eslint warnings are very different. An eslint warning will show up with an `@eslint` prefix or something similar on VS code <SEP> Literally, _infinite_, as in infinite nesting. <SEP> If you're therefore hydrating the data from an API, you actually don't need to worry about it too much, that's just classic over-engineering. <SEP> It's especially true if you also happen to control the data the API produces. <SEP> Also, it appears the warning is coming from the `circular-dependency-plugin` in Webpack, which Angular's CLI uses to compile your application. <SEP> We're looking at your class Foo and Bar <SEP> I know, because the data is irrelevant to the problem at hand. <SEP> You'll get a ""cannot access property foo/bar of undefined"" <SEP> Instead of actually getting your classes <SEP> Well, instead of getting hung up on that, how would you ""properly"" hydrated multiple entity models? I'm genuinely asking. <SEP> If you add proper exit conditions, does it still complain? <SEP> Just disable it <SEP> Do you have a reproducible playground? <SEP> So, your circular dependency shouldn't stop tsc from compiling your code",eslint warning will show up with an `@eslint` prefix or something similar on VS code
Summarization," <SEP> I believe in you. Go for OOM on error message emit <SEP>  <SEP> @AnyhowStep cries in OOM every day <SEP> we all aspire to your greatness <SEP>  @AnyhowStep walks into a bar.  It OOMs. <SEP> Ah fuck <SEP> So, I looked closer at how my coworkers have done their serverless thing <SEP> I don't know much about AWS lambdas and serverless <SEP> But I'm **pretty confident** they've done it wrong <SEP> So, they have a project, and it exports, say, 3 functions A, B, C <SEP> They create 3 lambdas LA, LB, LC <SEP> And upload that one project to LA, LB, LC <SEP> Then, 1. configure LA to invoke project.A 1. configure LB to invoke project.B 1. configure LC to invoke project.C <SEP> No tree shaking <SEP> No dead code elimination <SEP> LA has code for B and C, but B and C are never run <SEP> LB has code for A and C, but A and C are never run <SEP> @ShanonJackson Am I crazy here? Or is this a heck up? <SEP> The thing is, I'm pretty sure this is the perfect use case for TS' composite projects <SEP> Just make each entry point its own sub-project <SEP> Then it'll not upload unnecessary stuff <SEP> Yeah, they're using the `serverless` npm package <SEP> Yeah, it's giving me headaches, just looking at it",Go for OOM on error message emit
Summarization," <SEP> 10ms roundtrip to chicago <SEP> well.. 15ms anyway <SEP> I just said all that to arrive at the point that streaming usually only happens in the first half of the month here <SEP> And well, boxed sets seem like a great tradeoff consdering how hard it is to get dr. who here <SEP> I've been told I talk too much <SEP> eh, it's fine. <SEP> backblaze will ship a hardrive to you, if you fill it up with goodies <SEP> video conferences are fun on satellite.  I (am working on it but) tend to interrupt people.  The COO does too.  It's all wacky fun when we have meetings and I have like 1000ms latency. <SEP> 1tb/month is 395mbps... wow <SEP> i didn't know you could stream meetings over satilite, that's impressive <SEP> our cap is 100GB now.  When I was stuck with verizon it was 30GB for like $150/mo with TEN DOLLARS PER GIG OVERAGE <SEP> no, my math is wacked that's 3.3kbps <SEP> I have three kids, we had some bad months <SEP> I throttled everyone but me at the router for a while <SEP> my current cell plan has no cap, but they throttle you after 22Gb <SEP> that is pretty darn good. <SEP> unless it's super expensive <SEP> Nope, four sim cards with the same plan works out to 100 a month <SEP> I'm using cricket wireless, though I can't find my plan on their website <SEP> you mean you buy a 4-line plan and only use one or you switch sim cards? <SEP> like some kind of spy <SEP> that'd be pretty cool... I remember seeing a pci card with slots for four sim cards <SEP> that's far more boring than the spy version.  You should stick with that.",streaming on satilite only happens in the first half of the month
Summarization," <SEP> can anyone explain this to me? https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgIIAdgCUIGd0D2IuEAkpALbIDeAUAL622iSyIobZ6HEp3LIA2slAATCAA8AXMlxgooAObIAujLkKQygD7IQAVwoAjaMl1GCBADYQ4IM2kw58REuQhVdnZzzeVBKgxMNmDIEsgy3tyuKAC8NLQCwJS4MsLUIqIyAIwATADMyPSqADSJyBZGMvL6EGUCuHAUOSXI5Y1WVgCeMgDkBBSKvWWMtAiu1hAAdFYEigAUEgCUANxMCFZwuLjIACp4ofzI6AoAbnCQyFB4+lahMhaTdg76IOIwoBCia+WiBOTIeZLBICAQhY7QXBECKOLguXjIeJHUEVAhVZA1CDlAT0NYosAAC2AuCm11wt1C8XQkKIU0qeKKDCAA <SEP> Why is a boolean property not assignable to a boolean value?! <SEP> do I really have to do `this.result = person.bob as boolean`?  And if I have an array of items, I will have to do `(person.items as ApiResponseItem <SEP> Is there a reason you didn't just write ```ts     let person = {       bob: true     };     this.result = person.bob; ``` <SEP> In general if the only thing you know about the thing you have is that it's an `ApiResponse` then you don't know for a fact (and neither does the compiler) that `person.bob` is a bool <SEP> But if you're just building object literals on demand then you can leave off the type annotation - if you try to use it as an `ApiResponse` later and something is incompatible you'll get the error then <SEP> here's a simpler repro of your error ```ts declare function foo(x: 1): void;  let x: number = 1; foo(x); ``` <SEP> Note that TS *does* narrow unions on assignment (the above would narrow `string | number` to `number`, e.g.), but not inside object literals <SEP> You might be interested in https://github.com/microsoft/TypeScript/issues/47920 <SEP> i tried to put the merge type on the outside, and then it worked, But I still wonder, why does this happen",can anyone explain this to me? https://www.typescriptlang.org/play
Summarization," <SEP> https://www.typescriptlang.org/docs/handbook/module-resolution.html <SEP> look into the paths config option, you can tell TS where to look for individual modules. <SEP> And you can run tsc with --listFiles to see where it's looking for modules when it fails to find one. <SEP> It gives you detailed information how it's using the paths etc <SEP> Sorry, listFiles gives you a list of read files, I meant --traceResolution <SEP> @NaridaL yeah it was more a random guess then a startling insight :P <SEP> not entirely sure.",how can i tell tsc where to look for a specific module?
Summarization, <SEP> can I create d.ts files from .ts files automatically somehow? <SEP> @Mosho1 im also interessted in this question. i just trying to get all the informations together how to get started writing npm modules in typescript. in case you find the answere would be predicate if you post it here. later i will search for this too and then create a small documentation and starter package for others ... <SEP> quick what i found out so far is that there is an  tsc --declaration parameter <SEP> maybe you can google more about how to use it ... <SEP> @SET001 what is the context .. why would you iterate over an interface? <SEP> another thing i saw but not tried yet was: https://github.com/SitePen/dts-generator <SEP> @ellerbrock I actually solved my issue without having to do that in the end <SEP> but I'll take a look anyway,can i create d.ts files from.ts files automatically?
Summarization," <SEP> Basically I want `strict=true` to mean, ""Compiler will complain about everything by default, you can disable some of those complaints manually if you want"". <SEP> As it stands now, by default TS complains about nothing, `strict=true` makes it complain about some subset of things it can complain about, and the only way to tell it to ""complain about everything"" is to manually go through and set every flag individually. <SEP> The only downside is that `(""bar"" | ""baz"") <SEP> you cannot rely their order anyway <SEP> Those are pretty significantly different types... <SEP> I didnt say they werent. <SEP> However, at a glance at your playground link, `('bar'|'baz') <SEP> oh wait so `{x: never}` would mean that it's not a key! <SEP> nice exploit :D <SEP> Yeah, @AnyhowStep showed me that trick the other day. <SEP> Well `('bar'|'baz') <SEP> I wanted to strip all of the `X` typed properties off of an interface. <SEP> TypeScript doesn't have a mechanism for expressing a `Set` array. <SEP> But order isnt really guaranteed for the return array of `Object.keys` I dont _think_, and theres no way to express, like `butOnlyOneOfEach <SEP> yeah and that's way beyond what i'd type anyway <SEP> how would you even trigger an error, even if it knew that ""only one of each""?","the only way to tell Compoler to \""complain about everything\"" is to manually go through and set every flag individually."
Summarization," <SEP> in type position I'd agree `Array` is more consistent. <SEP> I have a project using __no__ external module system. Hence it seems I must use `///ref`erences to type declarations, yes? <SEP> @ShawnTalbert I think you could use the tsconfig to point at included types if you keep additional types separately. But if you use no module system and no tsconfig.... then yes <SEP> from the docs ``` {    ""compilerOptions"": {        ""typeRoots"" :  <SEP>  This config file will include all packages under ./typings, and no packages from ./node_modules/@types. <SEP> Thanks @Sammons  I'll experiment more with that. The issue I have is I still use npm to install some dependencies. So I have a file that depends on some npm package `A`.  Type declarations for Package `A` includes a `///ref` that has to reach into `node_modules/xxx` to find a `.d.ts` file. However, since I haven't `npm install`d from the Package A folder TSC errors because it can't resolve the sub dependency. <SEP> Basically I have a dependency of a dependency who's type declarations are only available if I npm install from `node_modules/A` <SEP> How does one deal with that? <SEP> Yes, normally one `npm install`s direct dependencies. Here I would have to `cd node_modules/A; npm install` in order to have the subdependencies <SEP> I've abandoned `typings` back around TS 2.0",is Array more consistent with references
Summarization," <SEP> hi all, somebody knows how to enable typescript 3.0 features? <SEP> @egoarka Just upgrade your version of TypeScript (via npm most likely, depends on your project). <SEP> @SamHH  already, nothing happens (new features don't work) <SEP> it turns out that I forgot to change environment version of ts in vscode -_- <SEP> @egoarka Has to be a build config issue. <SEP> ! <SEP> @SamHH by default vscode point to prev version of ts and vscode doesn't suggest to update to last version",how to enable typescript 3.0 features in vscode?
Summarization," <SEP> Dear People! I'm super new in TypeScript and after 6 hours of surfing google and documentation came here as I have no more power to get clear answer and solution.  ` interface getKeys_object {     source:object;     keys:string <SEP> You must not have strict null checks on, because the one you say is OK is implicitly any because `getKeys_keys | getKeys_object` has no index signature.  So its not OK. <SEP> Otherwise your error message is straightforward. <SEP> If you are using i.e. vscode you can hover over those variables and see what types TS has inferred for them, which is the union. <SEP> Also you dont need that type annotation in your function. <SEP> So all of this works fine: ```ts interface getKeys_object {   source: object   keys: string <SEP> You could also overload your function so that TS knows the return type when you only have one argument.  Not sure its worth it though. <SEP> To do that, just add these lines before the function definition: ```ts function getKeys(source: object): getKeys_keys function getKeys(source: object, only: boolean): getKeys_keys | getKeys_object ``` ...then you wouldnt need the type guard on `outputKeys`. <SEP> Thank you HUGE @keithlayne  Yeah I'm doing TS self learning in VS and WebStorm in parallel to see which one gives better results haha Looks adding  TypeScript to my vanilla js with JSDoc life will makes everything more clear and smart. Thank you again for solution and tips and especially last one which looks strange due function repeat :D <SEP> Yeah those are just function signatures, in your case the original implementation would not change, and would still be included as-is in addition to these lines. <SEP> The TS docs are not good, but apparently a long-term project is trying to address that.  But the overload stuff is described here: https://www.typescriptlang.org/docs/handbook/functions.html <SEP> hmm, how can I fix this issue: ``` export class BaseService <SEP> thank you for such a detailed support! i hope this information will help some one else if it will be not lost in deep gitter space <SEP> Just want to make sure you understood the original error - that TS wasnt sure which of the two types it was working with, so thats why you need the `if` so it can narrow the type to what you want in the block. <SEP> Obviously I can't use Entity within my Decorator, since it is a type... any ideas? <SEP> Gitter will self destruct in 20 seconds. <SEP> Greeeaat <SEP>  Gitter will self destruct in 20 seconds.  i will do PDF print then of this discussion <SEP> Haha, its just that gitter is pretty bad.  And its hard to search sometimes for no clear reason.  It needs an easy transcript export feature. <SEP> @ezintz Its supposed to take a class? <SEP> Theres that whole confusing thing of TS classes where there are multiple things with the same name. <SEP> Yes, sir. so my decorator would like to have a class :) <SEP> But I would like to have it kinda generic, so I can have a Photo or User entity <SEP> maybe a class factory function?  Where you pass the class and maybe even infer the generic type, so it can capture the class and put it in the decorator? <SEP> I was thinking so... <SEP> I could also pass the instance directly to the constructor... but I just wanted to make sure I am not missing something... <SEP> That's how I am currently using: ``` export class UserService extends BaseService",typescript interface getKeys_object  source: object keys: string ''
Summarization," <SEP> Hey, I'm updating rollup-plugin-typescript and when adding the option to use the language service for compilation I noticed that typescript doesn't automatically find .d.ts files like using transpileModule does. What am I doing wrong? <SEP> @thasmo Sorry, didn't notice there were two different things. <SEP> ``` import * as Vue from 'vue'  var MyComponent = Vue.extend({     template: 'A custom component!' }) Vue.component('my-component', MyComponent) ``` <SEP> that is working on my end <SEP> Ye. There's a weird thing going on. One sec. <SEP> and you can't call the parameter `Vue`, because that will overwrite the the var <SEP> What the heck is a `typeof Vue` type? oO <SEP> it's the type of the variable Vue <SEP> Which in that case is ... `Vue`? <SEP> No <SEP> If you have `class Foo { b() {} static a() {} }` <SEP> variable `new Foo()` has type `Foo` <SEP> which has the method b <SEP> the variable (class) `Foo` has the type `typeof Foo` <SEP> which has the method a <SEP> so you can call Foo.a() <SEP> Weird. I guess not. But I need to dig into that more. <SEP> Why wouldn't they just use `Vue` directly? What's the difference between `Vue` and `typeof Vue`? Would`Vue` not work at all? <SEP> No <SEP> Vue has the instance methods <SEP> typeof Vue has static methods <SEP> Ah, okay. <SEP> if they were the same you could do something like (new Vue()).component() which doesn't make sense <SEP> That's more understandable to me. :D",typescript doesn't automatically find .d.ts files like using transpileModule does when updating rollup-plugin-typescript
Summarization," <SEP>  Also, you might find `https://www.typescriptlang.org/play#example/assertion-functions` to be interesting.  Thanks. I initially tried `assert(m === 'todo' || m === 'time');` to narrow the type, but just resulted in `string`. <SEP> is there a way to index into namespaces? ~~~typescript type Actions = Prisma.TodoDelegate <SEP> Also, how could I make the part under abstract type as specific as the concrete definitions above? ~~~typescript   const lift = ",is there a way to index into namespaces?
Summarization," <SEP> How can you reproduce that error?  Oh, I see: ```ts const x: readonly  <SEP> I probably never would have even looked up there, since the length is obviously the issue <SEP> I only start reading upward if the stuff at the bottom confuses me <SEP> But yeah, that's not the right error <SEP> well in my case the length wasn't the issue, it was something not matching a conditional type the way i expected and falling back to another inferred length <SEP> So it *is* the length issue.  https://github.com/microsoft/TypeScript/pull/30916 made readonly array/tuple errors more user-friendly, but it seems it has this bad effect when the error is due to a length mismatch and not mutability <SEP> well it *shouldn't be* the length that's the issue. the length of the type and the length of the assignment were both `1`",how to reproduce ts const x: readonly '' error
Summarization," <SEP> I'd expect ChanceStatic to be an interface, so you'd get something like ``` declare var chance: ChanceStatic; exports = chance; ``` <SEP> truth be told I am not entirely sure how Chance should be consumed via d.ts <SEP> I thought it should be `import {Chance} from ""chance""` but the `new()` is on `ChanceStatic` <SEP> it has 2 exports <SEP> so I believe `{ChanceStatic as Chance}` is valid right? <SEP> just like how you'd do  ```TypeScript var Chance = require(""chance"") ``` <SEP> I am trying to to resort to non ES6 includes <SEP> ES6 imports aren't compatible with CommonJS `module.exports = blah` overrides <SEP> Can you link me to the package documentation you're using and the .d.ts file you're using?",how to consume ChanceStatic via d.ts?
Summarization," <SEP> Hi Everyone, <SEP>  I am trying to work with   Promise.allSettled( <SEP> Because it might be a rejection.  Notice that `PromiseRejectedResult` doesn't have a `.value`, it has a `.reason` instead.  You need to check the status to narrow it first. <SEP> worked, thnks <SEP> ```ts if (result.status === 'fulfilled') {     result.value;  // ok } else {     result.reason;  // ok } ``` <SEP> TS was trying to save you from a runtime bug :) <SEP> Any semantics experts around? In CS terms (language-agnostic) what would a proper classification for anything-allowed or nothing-allowed types be? (ie, TypeScript has 'any' and 'never', JSON uses {} and { not: {} }  Ideally, a word to categorize: Anything, Nothing, and Empty (void, undefined) <SEP> TS compiler refers to them as intrinsics, which is accurate, but I'm wondering if there's more official terminology? <SEP> Or, I should say, more specific to those types, not official :) <SEP> `never` is a ""bottom type"" <SEP> I prefer to call it the ""escape hatch type"", since it allows you to ""escape"" from type checking (which may or may not be a good idea, sometimes)",how to use Promise.allSettled( fatcerberus> )
Summarization," <SEP> You can answer it <SEP> It does have some limitations <SEP> also, I didn't want to complicate things at the time, but is there a way of saying that I can only refer to fields that are of type boolean? <SEP> for instance arrays are not supported. <SEP> yeah, I can make that modification <SEP> is that done by reducing this? `T extends string | number | bigint | boolean ` <SEP> nope. That's there to prevent infinite recursion <SEP> hrm I guess not <SEP> the problem is `string` has properties of it's own and RecKeyof will happily walk down that infinite path <SEP> same with functions and every other type. <SEP> ``` type RecKeyof <SEP> If you need to exclude other types from traversal, for instance `RecKeyof <SEP> which resolves to ``` ""foo"" | ""foo.toString"" | ""foo.toDateString"" | ""foo.toTimeString"" | ""foo.toLocaleString"" | ""foo.toLocaleDateString"" | ""foo.toLocaleTimeString"" | ""foo.valueOf"" | ""foo.getTime"" | ... 79 more ... | ""foo <SEP> Just add it to the initial `T extends ` list, for instance `T extends Date | ...` will no longer generate keys for `Date` objects. <SEP> gotcha <SEP> that's awesome, thanks <SEP> hm, this doesn't work: https://www.typescriptlang.org/play?#code/C4TwDgpgBAwg9gWzAGwgDwPICMBWEDGwUAvFAN4BQUUYATgJYL3D0BuEAjAFxRZxyoAhgDsA3FSj5EKdD0rVqdRszYQATDwDOwBsIDm4hTQZMW7AMw8+AiCMMKpSVGjkSjS06oAsV-kLFuUAC+gQBEAGZwtAA6wgCQ6IJOEKE8oaH2IUHiFAD0uVCgkFAASgQA0hAgcOEAPAAqAHwk1HkF1PVQ6MAQwgAmmlDaunpQAD5QwgCuCFgQtOO89Hr0wkQT1v5QbQoT08jIi1P9EOGrEH2LABRXAHT3grR6mjwiIACUJM1vUJ871BNaLY+nBhMgQFBjgBrYRwADuwgA2gBdKAAfkmEHYC1c+QUiPKUFWUChVRqUHqyJ4hO6vQGQx0q1GGMJEwABgASMjlIK3LllfCVap1eoE5GNIJs9lcnmI0L8ipkkViiWhZFsqA8YRY+Y7IKI0nCinInJFaACoU1BrNUjbDpdNA9fqDYZMxbTWbzRZYZarda8Py2YR291TA5HE5nbWXCY3e63R7PV7CD5fKA-T6A4Gg8GQ4Qw+FI1EY7XYzXkCQEonBw3kynUh1O+mu-Toilixt0wabINtwk8aXc3kKwVKhoqyWD2UAchHluV5XFQWn6vLpd1+tr4WNOT983Cgnw0AAsiAyuF5r0jxXqAgQEKeBax-BkphcARgI1xCEKFJhNooDhKIoU0bgoFPc9L2Ea9SHkKA7wfKBQg8FR2A4UIKB-P8AKA2gQI0cCz1OKCYJveD7yqNJHBkNBbhQswIHMDCsNBAD6AAdREYB6gAC3oTR6jgF8wHoVAwIg4igWg6BYIkBDKKgadqOcOiTFQxjp0wihf1YogOK43j+ME4TRPUHgJIvKTSLg+SQB4JTpGcOV6NUJjkU0n88WwvSABFQWATi1kMgShOkUzxKIyyrxkis8XIxDkLUhi1AwvFPIKbyiT8tZAu4viQpM1ACIskiYsoOLbLSFyLFSgogiAA <SEP> single vs double quotes, change it to `myKey: ""complex <SEP> oh <SEP> I don't really care about that feature, I'll just get rid of the bracket notation <SEP> bracket notation makes things hard",is there a way to exclude fields of type boolean from traversal?
Summarization," <SEP> Hi All, I'm looking to resolve the following issue: <SEP> TypeError: Cannot read property 'directoryExists' of undefined <SEP> Where are you getting the object you're calling `directoryExists` on from? An `import`? <SEP> The typescript version is typescript@2.9.2 and nodejs version is v8.11.3 <SEP> If so, are you using rollup? <SEP> I guess from an function <SEP> /* @internal */     function directoryProbablyExists(directoryName, host) {         // if host does not support 'directoryExists' assume that directory will exist         return !host.directoryExists || host.directoryExists(directoryName);     } <SEP> so `host` is undefined <SEP> You need to first check that `host` is defined. <SEP> Also that function has no type annotations, are you sure this is actually typescript? <SEP> @webstrand you kinda went to an oddly specific place right at the beginning :smile: <SEP> I was upgrading and downgrading nodejs, installing angular. <SEP> @keithlayne rollup has been quietly inserting `undefined` in place of my imports, recently. <SEP> which is...awesome? <SEP> 13:13:25.148 Compiling TypeScript sources through ngc 13:13:30.916  13:13:30.916 BUILD ERROR 13:13:30.916 : TypeError: Cannot read property 'directoryExists' of undefined 13:13:30.916     at directoryProbablyExists <SEP> What is calling directoryProbablyExists, and where is the parameter `host` coming from? <SEP> Wait, you're compiling _typescript_ itself? <SEP> Given this type: ``` export type DatastoreType <SEP> No, we are running a npm angular test and typescript is part of it <SEP> `Object.assign({}, { id }, t)` <SEP> the calling to directoryProbablyExists is  inside one of the npm package <SEP> angular <SEP> @keithlayne Ha! Thats so easy! Thanks! <SEP> 13:13:21.960 Building Angular Package 13:13:24.872 Building entry point 'pd-sg' 13:13:24.872 Rendering Stylesheets 13:13:25.066 Rendering Templates 13:13:25.148 Compiling TypeScript sources through ngc 13:13:30.916  13:13:30.916 BUILD ERROR 13:13:30.916 : TypeError: Cannot read property 'directoryExists' of undefined 13:13:30.916     at directoryProbablyExists (/gocd/agents/go-linux-agent-3/pipelines/notifyAndBuild_ExpertI02/Expert/pd-client/node_modules/typescript/lib/typescript.js:24023:22) <SEP> Phew.  Glad it worked :smile: <SEP> :thumbsup: :thumbsup: <SEP> a more complete log from the latest build <SEP> @dsenecalb then I have no idea. You probably downgraded to a version of nodejs that's too old <SEP> then I use to the original version of nodejs (v8.11.3) <SEP> And still same error. is there an issue with TypeScript iself? <SEP> @jacobg dumb me, if you have object spread available its just `{ id, ...t }` <SEP> @dsenecalb Probably not, unless you obtained `tsc` from a strange source. <SEP> modify directoryProbablyExists and add `console.trace()` directly before the offending line. <SEP> Which I guess TS support regardless of your lib/target (right?) so it should work. <SEP> and re-run your build <SEP> let's have a try",can not read property directoryExists' of undefined webstrand
Summarization," <SEP> Can any of you recommend a syntax highlighter in js that can do online parsing correctly? <SEP> Like, `highlight.js` claims to but it also appears to fall over because it doesnt actually recognize when its only got a partial amount of data. <SEP> you mean highlight invalid syntax? <SEP> @fatcerberus Do you think it'd be worthwhile to report this bug, even though I haven't been able to reproduce it? <SEP> @keithlayne Highlight code in general. Im using it for highlighting for HTTP requests and responses, but the latter is obviously streamed output and I cant find anything in the javascript ecosystem that handles that correctly. <SEP> `highlight.js` specifically seems to assume that its always getting full tokens (so basically it consumes all data in the buffer regardless of whether or not its disambiguatable yet) and the state it returns doesnt properly represent the full internal state of the parser (so, for example, it falls over at language transitions despite this being something it can handle when not used online). <SEP> Hrm, I dunno, how hard would it really be for me to write a lexer for HTTP1.1, XML, CSS, and JS/ON? <SEP> Not really that hard for the first three. <SEP> @webstrand What bug? <SEP> They will probably consider it unactionable if you cant provide a self-contained repro <SEP> Anyone know if it's possible to assign the type of the `data` property on XHR responses by what the `responseType` is set to? <SEP> Such that.. `obj = new XMLHTTPRequest(); obj.responseType = 'arraybuffer';` would mean that `data` instead of being the union of all types, would only be arraybuffer in the response. <SEP> I think you could force it with `as` and/or a type guard check, maybe.",can any of you recommend a syntax highlighter in js that can do online parsing correctly?
Summarization," <SEP> This may be is a bizarre question. But still, I am want to get some opinions on it.  From Typescript 2.9.2, one can use the `import` keyword as a way to find the type of a module. For example  ``` function getUser (): typeof import('./Models/User').default {   return //   } ```  This works great. But using it generic cannot work, since `import` is not a type or an interface  ``` // Not a valid syntax function getModel <SEP> Isn't there an import type in 3.8 <SEP> https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export <SEP> Seems like it would be cleaner (and work) <SEP> I believe, `import` is a keyword. The example you shared shows, how to import just types from a module <SEP> and not the implementation <SEP> Hm isn't that what you're trying to do? <SEP> ``` function getModel <SEP> Seems like a type to me <SEP> Okay, maybe I missing something, Can you tell me, how about tweaking my code to make it work? <SEP> Or something <SEP> `Import` is not a type exported by the `User` model <SEP> I want a function to accept a string (which is the module path) and return type of that module. <SEP> Actually even that makes no sense <SEP> Actually what it makes no sense <SEP> so, say, your module abcd has export class X {}, you want `getModel('abcd')` to have a return type X? <SEP> Yes <SEP> Using `typeof import('module')` as a type, returns the type. But using dynamic imports returns a promise",how to use import keyword in typescript 2.9.2?
Summarization, <SEP> What is the difference between these two codes  OK ```ts type F <SEP> how to trigger the function inside a another function when the checkbox is clicked in javascript <SEP> ? call the function. <SEP> yes <SEP> @ShanonJackson  thnks <SEP> @karanlyons  What does a dependency resolution mean? <SEP>  Operation changes depending on distribution function when left side of conditional type is type parameter But on the right side it should not matter <SEP> Basically the order in which those types are dependent on each other. <SEP> Example of changing behavior on the left side:  ```ts type Foo = 1 | 2 extends infer P ? ,what is the difference between ts and type F 
Summarization," <SEP> Perhaps a silly question, I have imported a promise from core-js as a polyfill via `import { Promise } from ""core-js"";` however TypeScript is complaining that `Promise` is declared but is never used (this is true,  I do not create new Promises directly, but require the polyfill). How can I remove this warning without changing the compiler settings to be less strict? <SEP> @ryanewtaylor maybe just `import 'core-js'` <SEP> That was it. Thanks @spacejack ! <SEP> is there any way to have any index signature for methods of a class? i want to be able to just do `class Foo extends ParentClass ... ` and have every method in my class inherit the index signature defined in the parent.... this doesn't work: ``` interface RequestContext {   user: { id: number; name: string } }  class Entity {    <SEP> the index signature is not inherited in the `getFriends` method, if i want type safety, i have to specify the type on the params... which would be a lot of duplicate typing across a lot of files, which i'm trying to avoid... any way to handle it? <SEP> well, you can just assign properties in the constructor <SEP> ```ts interface RequestContext {   user: { id: number; name: string }; }  class Entity {    <SEP> object literals are probably better suited for that <SEP> yeah <SEP> using a class feels awkward for something like that <SEP> @aluanhaddad ooooh, that works! thank you... and yeah object literals are better for most of these cases, i use them in about 99% of these situations, lot more boring details going on behind the scenes why i need the class <SEP> OK, but `Entity` is an empty class <SEP> anyone know if it's possible to ""ignore"" (pass-through) a generic type like this? `Bar` has one generic parameter, but I don't care what kind of `Bar` it is in this instance  ```ts type Foo <SEP> it _wants_ me to do this, but it seems unnecessary ```ts type Foo <SEP> @aluanhaddad in the actual code i do have there are other things defined in both the child and the parent class, all good. thank you again for the help! <SEP> can't do this either, of course ```ts type Foo <SEP> @jrylan  No problem <SEP> @dwieeb use any ? <SEP> @dwieeb how is `Foo` used? You can use a default generic but it might foul the inference. <SEP> @ghetolay any is never an option :smile: <SEP> (type pun, sorry) <SEP> :heart: <SEP> lol. Not bad <SEP> @aluanhaddad you mean like this? ```ts type Foo <SEP> (that syntax isn't allowed, btw) <SEP>  I don't care what kind of Bar  don't this means Bar can be of *any* type ? <SEP> If you don't care the _safe_ thing would be to use `{}` ```ts type Foo <SEP> @ghetolay it can certainly be of any type, but it could also be of a particular type, too, and I want the return type (`Promise <SEP> What is an example implementation? <SEP> @aluanhaddad let's say `Bar` already has that constraint on its signature. so `Bar <SEP> Well that's not quite a constraint but if so, then you don't need to specify it's type parameter <SEP> lol, there, fixed <SEP> defining `Foo` still requires explicitly defining what type of `Bar` is, even with the default in the generic parameter of `Bar` itself <SEP> seems odd <SEP> wait, I'm wrong <SEP> I was about to say it works <SEP> @dwieeb works for me https://goo.gl/UP5q2v <SEP> `Bar` needs to use `T` otherwise it will not behave correctly",how to get index signature when importing a promise from core-js?
Summarization," <SEP> https://discordapp.com/channels/508357248330760243/674669985607712790/710317068544639018 <SEP> I didn't look at the relevant stuff in the deno repo, but I don't know how they could feasibly pull that off.  TS team insists that dogfooding is critical to `tsc` development.  Deno is effectively gonna fork the language if they do this.  Or maybe it pushes TS towards a real spec, since deno seems to have some real interest and momentum. <SEP> hopefully toward a real spec. Multiple competing implementations are a feature not a bug, imo <SEP> I would *love* to have a spec I could reference about the nitty-gritty of typescript's type-checker <SEP> agreed.  I used to get kinda upset about the spec status.  I've kinda mellowed though. <SEP> I am somewhat worried the language will need to be forked to incorperate the changes to javascript that are landing this year and the next <SEP> I mean implementing in rust and targeting WASM makes a lot of sense.  You could still target metal for building possibly and generate the bindings for lib usage.  Maybe.  Don't really know how that works exactly. <SEP> Do they really have a plan?  I assume they do, they are very involved with TC39 these days. <SEP> Seems there are already too many config flags. <SEP> We've got `#private` and `@decorators` landing, I fear they'll be bolted on to the language, like what they've done with `symbols` <SEP> in a way it's already kind of a mess considering how much is out in the wild that was built with older versions.  I mean a decent percentage of stuff should still work, but still. <SEP> I'm not sure they *can* be incorporated into the language without major breaking changes <SEP> there's other stuff in the pipeline that conflicts with TS too, probably/possibly TS-inspired.  I dunno.  Maybe TS falls by the wayside and JS embraces some kind of gradual typing. <SEP> anyway, fixed my bug, need sleep.  :zzz: <SEP> that'd be a dream. But I'd doubt that javascript would incorporate a type system with anywhere near the complexity of typescript <SEP> Maybe something similar to Dart... <SEP> Here's a simplified form of what I'm actually working on. I have a Command class: ``` export abstract class Command {  abstract name: string | null;  subcommands: (typeof Command & (new () = <SEP> That example is *supposed* to implement `main.ts greet  <SEP> You're going to have to implement it differently, you're hitting a problem with javascripts form of inheritance: the superclass's constructor *must run fully* before the subclass can set properties on it. <SEP> A setter on the superclass makes the most sense to me, since typescript forces you to assign `subcommands`, you don't need to worry about methods being called on the class before your setter runs <SEP> I don't follow you there. Setter on the super class while keeping `name` and `subcommands` as class fields? <SEP> @metanomial Here's what I mean:  <SEP> If you hit ""Run"" you can see that it works <SEP> You'll probably want to extend it so that `new ExampleCommand().subcommands = ",how could they feasibly do dogfooding for deno?
Summarization," <SEP> As you know, framework comes and go. Why would you couple your business logic with any framework? <SEP> Controllers are a generic concept in many frameworks <SEP> I'm mostly referring to server-side Controllers <SEP> aha <SEP> @unional but how would you code without relying on the framework you're using? <SEP> i found uncle bob clean architecture <SEP> When talking about MVC, there is a big difference in the original definition of MVC and the MVC today.  If you think of controller as business logic, then yes. The rest is just SRP and Open Close. <SEP> I think now-adays people consider controllers as a very thin layer <SEP>  i found uncle bob clean architecture  Yes, thats what Im referring to. <SEP> just providing minimal interfacing with the external technology <SEP> whethere it be browser events <SEP> or server requests <SEP> hmm <SEP> so correct me if am wrong here <SEP> let's say I wanna go with typescript/angular <SEP> unconvertable",why would you code without relying on the framework you're using?
Summarization," <SEP> If I want to use redux saga then I have to use Babel for es5 support, right? <SEP> why this is not valid? <SEP> ``` export function hashPassword(input: string): Promise",why this is not valid?export function hashPassword(input: string): Promise
Summarization," <SEP> How can I write a type such that if the `type` property has a value of `X`, then that type also has the property `X`, and if the `type` property has a value of `Y`, then that type also has the property `Y` <SEP> ```ts type XOrY = { type: X, X: whatever } | { type: Y, Y: whatever }; ``` <SEP> only works if `X` and `Y` don't overlap though.  Usually we use string literals for discriminators. <SEP> Nice that was easy. Love it.",how to write a 'type'such that a 'type property
Summarization," <SEP> hi ) can anybody help with this question? http://stackoverflow.com/questions/34862013/systemjs-typescript-angular2-and-modularity <SEP> Your question seems related to https://stackoverflow.com/questions/34766219/typescript-module-resolution <SEP> @berwyn yep, it seems same, but i dont see solution for my case there.. 'moduleResolution: classic' gives same ts compiler errors <SEP> Yeah, it looks like the Angular team resorted to doing some crazy mapping stuff to get it to work (and you'd probably have to do the inverse if you did `moduleResolution: node`). <SEP> this one looks same https://github.com/Microsoft/TypeScript/issues/5304 i didnt look at typescript issues, my bad <SEP> @artaommahe Couldn't you just do relative paths there? <SEP> For the first error, just prefix what you already have with `./` <SEP> @masaeedu nope, this breaks modularity. i want to import any module's class from anywhere jsut by `import Smth from 'smth-moule'` or smth like this, without depending on the relative position <SEP> Relative paths also have the drawback of getting really, really verbose in any sort of compartmentalised folder structure <SEP> Well, one thing you could do is link your own package as a node module and install it as a dependency :P <SEP> And then node resolution would work <SEP> @masaeedu too expensive ) <SEP> `myPackage/something/something` <SEP> I'm not sure what you mean by ""too expensive"" <SEP> At runtime your stuff is resolved via SystemJS, none of this node stuff matters, no? <SEP> @masaeedu all my app consists of many modules and it's not usefull create packages from all of them <SEP> Well you wouldn't install each of them as a module <SEP> I'm talking about your entire app <SEP> At the root level <SEP> @masaeedu looks like uglyhack ( <SEP> So the folder that contains `bootstrap.ts` <SEP> For sure it is <SEP> found big discussion about this case here https://github.com/Microsoft/TypeScript/issues/5039 <SEP> Yes, there's a number of people waiting on that <SEP> thx for chat )",moduleResolution: classic gives same ts compiler errors
Summarization," <SEP> Like, when using an append-only table (log table) to record changes to a boolean value, when the table is empty, what is the value? Certain applications might default to false. Others might default to true. But if you use three valued logic, you get null. And your WHERE condition might become null and SQL will more or less treat it as false. And you suddenly introduce subtle bugs because you expected the default to be true. <SEP> So, COALESCE(subquery, true) would save the day <SEP> Yeah, it does <SEP> Yay duality <SEP> You even still have double negation elimination <SEP> NOT x is NEG(x)",what is the value of a boolean value in an append-only table
Summarization," <SEP> npm install typscript@beta <SEP> it seems I had a bunch of broken import paths around that were somehow detected to be broken <SEP> e.g. relative imports were ""working fine"" with 1.8, but breaking in 2.0 - because they were not pointing to the proper directory <SEP> how to compile typescript modules to nodejs? <SEP> I can't require ts builded by webpack",how to compile typescript modules to nodejs?
Summarization," <SEP> Gentlemen, are there any good tools that allow me: a) to automate npm package creation and publishing from TypeScript based code? b) to create a skeleton project that is ready for such package generation & publishing?  I know that in order to make a ready-to-use typescript npm package, I need both precompiled javascript code of the library as well as the .d.ts typings for this js code. Now, I don't know how to properly organize the codebase and I really don't want to spend too much time on scaffolding questions at this point. Thanks! <SEP> @another-guy Well assuming you have an index.ts which is the entry point of the module, you should be able to compile with the `""declaration"": true` and `""module"": ""commonjs""` options in your tsconfig.json file. <SEP> You can try npm installing it straight from a github (or other git) repo before putting it on npm. <SEP> @spacejack thanks! do you know by chance an example of such github repo? Your explanation has a bit too many shortcuts for my level of knowledge. <SEP> @another-guy  have you read this ? https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html <SEP> there's really not much to it, it's just like any other javascript <SEP> you just have to enable `""declaration"": true` and `""module"": ""commonjs""` in your `tsconfig.json` <SEP> and compile it with `tsc` <SEP> when you compile it typescript will take care of generating both the `.js` and the `d.ts` for you <SEP> if your main file is `index.ts` that's all you have to do <SEP> if it's named something else you need to change `main:` and `types:` in your package.json to match the name of the entry file and the corresponding `d.ts.` file <SEP> this would result in TS compiled to JS or even some form of npm pacjage ready for deployment, right? then i'll still need to publish it to npm package repository <SEP> some people like to create a separate `dist` folder and use `outdir` setting in `tsconfig.json` so that compiled scripts+declarations go to separate folder than your `.ts` files <SEP> good <SEP> for me it's hard to pick the `dist` vs no `dist` way. i wish there was a prefered/recommended way I could follow <SEP> then it seems to be a best practice <SEP> makes sense! thanks a ton, Daniel",how to automate npm package generation & publishing from typescript based code
Summarization," <SEP> https://www.npmjs.com/package/@types/fhir <SEP> What I download on my JSON is a Bundle <SEP> ok <SEP> and in your code do `getJsonData() as fhir.Bundle` <SEP> and it should be typed correctly <SEP> Though VSCode is able to see the fhir namespace fine, ng serve complains a lot with `Cannot find namespace 'fhir'.` <SEP> Do I have to `import` it somehow? <SEP> and ",can not find namespace 'fhir' in ng serve
Summarization," <SEP> now I cant reasign it either: <SEP> ! <SEP> being assignable as (seemingly) `any` but not allowing any keys to be specified is quite odd <SEP> So TS treats and empty object differently, despite still not marking it as any implicitly. <SEP> Yeah, news to me. But given that TS sits on top of JS, I just am always prepared for all kinds of odd stuff. <SEP> i just don't understand under what circumstances anyone would want the `{}` type <SEP> if you force any it will not err here.. but at run time expect something bad <SEP> !",why is any not assignable but not reassignable?
Summarization," <SEP> It seems there are at least 4 options for Vue 2, TypeScript 2, and Webpack 2 integration; vue-ts-loader, vue-class-component, vue-typescript, av-ts.  Would someone experienced with them comment as to your preferred solution? <SEP> @mohsen1 I'm using `@types/lodash` from standard npm repos. I can see in the `index.d.ts` that it just does a `decalre var _:  _.LodashStatic`  which means as long as you include it at least once in your compilation context `_` will beavailable everywhere. <SEP> There are no top-level exports in the typing, so it's treated as a global ""script"" type declaration. Other projects like angular 1 typings use `export =` and `export as namespace`so that the declarations are treated differently if they are being used from a module or from a script. <SEP> `export=angular` for example will be what you get when you do `import * as angular from angular` whereas if you are `/// <SEP> If you add the `export=` and `export as` to lodash typings it would break people who are using modules but have come to depend on the current behavior of `_` being available everywhere as long as it is imported at least once into the compilation context.",Would someone experienced with vues' comment as to your preferred solution?
Summarization," <SEP> How do I make typescript-bot and dt-bot revisit my pull request? https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18641 <SEP> @Naktibalda I'm not sure it needs to <SEP> someone just hast to merge your PR, try tagging andy-ms if you're getting impatient <SEP> it has all the wrong tags <SEP> I will give it a few more days. <SEP> (unless it has side effects)",how do i make typescript-bot and dt-bot revisit my pull request
Summarization," <SEP> @LabEG if you want your library have typings right out of npm, you can use this spanking new feature: http://www.typescriptlang.org/docs/handbook/typings-for-npm-packages.html in the package.json <SEP> ``` {     ""name"": ""foo"",     ""author"": ""Vandelay Industries"",     ""version"": ""1.0.0"",     ""main"": ""./lib/foo.js"",     ""typings"": ""./lib/foo.d.ts"" } ``` <SEP> it's automatically detected, no need to install using ""typings install"" or ""tsd install"" <SEP> node imports the javascript files, if your library is used from node I think having ts files there won't do anything <SEP> @LabEG I think if you ts files from ts, you can rely on having .ts files in the package <SEP> "" So import { b } from ""moduleB"" in source file /src/moduleA.ts would result in the following lookups:  /root/src/node_modules/moduleB.ts /root/src/node_modules/moduleB.tsx /root/src/node_modules/moduleB.d.ts /root/src/node_modules/moduleB/package.json (if it specifies a ""typings"" property) /root/src/node_modules/moduleB/index.ts /root/src/node_modules/moduleB/index.tsx /root/src/node_modules/moduleB/index.d.ts"" <SEP> http://www.typescriptlang.org/docs/handbook/module-resolution.html <SEP> TypeScript looks for a .ts file in the node_modules <SEP> and apparently it must be named index.ts <SEP> yep, i know about relative paths, but i think that needed `""tmain"": ""./lib/foo.ts"",` this parameters in package.json <SEP> tmain, didn't know that <SEP> the module-resolution.html says it should be named ""index.ts"", I think that page need to include tmain if it's a thing <SEP> because compiler settings does not allow compiling all libraries on all setups",typings for npm packages can be found in package.json
Summarization," <SEP> Hi there! I'm trying to exclude some folders of my project in a refactor I'm doing (e.g. : modules/settings). I have correctly set this configuration in the tsconfig file, but somehow the files are being transpiled. `tsc --traceResolution` gives me the route for the included files and how it is resolved, but not where it is being requested, any idea how I can advance any further with this? <SEP> Is there a way to natively run server-side TypeScript? A kind of NodeTS natively supporting TypeSCript features. <SEP> you can use ts-node, but if you plan to use non-isomorphic code (access to window or document), you'll have to use some sort of mocking or a library like domino <SEP> @Kompwu otherwise you can just have your typescript code for your server scripts, and transpile a new version when you perform any changes... <SEP> Sounds good, really :) <SEP> Looks good! no docs yet tho <SEP> It seems perfect for APIs & WebServer. <SEP> Everything's compiled so insane perf :)",how to run server-side typescript with ts-node?
Summarization," <SEP> and if they want to update their cache `git submodule update --init --recursive` <SEP> if they forget, they just have an out-of-date cache, and `yarn` has to build the packages <SEP> ...but `git pull --recurse-submodules` would also include that command, right? <SEP> yes. <SEP> now the question is how easy it is to update the cache itself. <SEP> but if it's only me doing it, sounds not too bad. <SEP> I believe, though I haven't done it myself, that you can commit changes to the submodule back to the original branch.",how easy is it to update the cache itself?
Summarization," <SEP> `import 'fileWhichSetsUpMockRequire'` <SEP> and make sure that's the first import in your test file <SEP> What's the correct `--lib` setting for node projects? <SEP> @aaronbeall not dom <SEP> and then it depends on the version... <SEP> Aha, makes sense. Thanks <SEP> Hey, can anyone help me with this? I'm using mapKeys function from lodash and getting error down below:  ``` interface abc {   a: string;   b: number; }  const x: abc = { a: '1', b: 3 };  mapKeys(x); // error here   <SEP> @iFarmGolems  <SEP> @NaridaL yeah, did that but I got another issue, my real interface is declared as   ``` interface MyInterface {     field_news_event_add_info: Uuid <SEP> sub-interfaces? <SEP> `field_news_event_add_info: Uuid <SEP> Uuid <SEP> why would you have to change anything in the Uuid interface? <SEP> x is a MyInterface right? <SEP> ok ill post my whole interface\ <SEP> mapKeys(x as any) is probably the simplest <SEP> ``` interface BasicDrupalResponse {    <SEP> you aren't going to get anything sensible out anyway, because TS can't map over keys <SEP> yeah tbh the string signature there isn't a good idea because TS isn't going to warn you if you misspell a prop <SEP> So when I use it like that, it still complains because of the child interfaces do not have their index signature <SEP> that doesn't make snese... what's the exact error? <SEP> ``` export interface ProductsNewsResponse extends BasicDrupalResponse {    <SEP> oh im lost <SEP> yeah.. <SEP> ill probably mark it as any <SEP> thanks anyway <SEP> don't use string indexes, they aren't what you want",what's the correct --lib setting for node projects?
Summarization," <SEP> I think webstorm uses far more - I get the feeling it also leverages all the goodness they've built up for plain JS intellisense <SEP> I have often a problem with ts and vs 2015 (latest ts version too): looks like that sometimes even I update a few ts files, the ts compilation process is not started, and when I run the application I don't see the modifications applied. I don't know if this happens after errors: just a few minutes ago I changed a file, ran it using F5, the app started without any change, I stopped, pressed the rebuild command and this time ts compilation started, showing a ts error in the change I've done. Is there some way to solve this problem? <SEP> and without using reference path",ts compilation doesn't start when a ts file is updated
Summarization," <SEP> I thought you can still have a property caches for ""regular"" objects? <SEP> Like `{x:1, y:2}` <SEP> Hidden classes have nothing to do with regular JS classes <SEP> So you want to make sure that's as consistent as possible <SEP> Don't randomly add and delete properties, etc. <SEP> Use object literals whereever possible <SEP> and so on <SEP> TS helps in this regard but the type system isn't *quite* strong enough to guarantee you take advantage of the optimizations at all times <SEP> FWIW `class` won't help you get the optimization either - AFAIU it's more about what the actual own-properties of the object are whether it gets a hidden class <SEP> IIRC, the requirement is that all of the properties on the object are known at construction time. <SEP> That makes sense","is there a way to have a property cache for ""regular"" objects"
Summarization," <SEP> Hi all, I want to use onseeked event in my class and play the movie when the event is firing <SEP> I want to know how could I do this with TS ? <SEP> same way like in es6 <SEP> ad eventemitter = <SEP> its not a specific typescript task, feature <SEP> so I select my HTMLVideoElement and after I want to execute the fonction like $movie.onseeked( () = <SEP> @DrMabuse23 Ok I will try to find in the doc thx <SEP> @fr4ngus i use rxjs for that",how could I use onseeked event in my class and play the movie when the event is firing  with TS ?
Summarization," <SEP> Hey, I'm new to TypeScript, working on my first project that's being distributed to the rest of the team as an NPM package and running into a pathing issue. Can anyone take a look and give me pointers at what I'm doing wrong? https://gist.github.com/mattfelten/058701f2a2bcee37430142c009462a2d <SEP> Is there a way to import all object definitions from a file? <SEP> I've got quite a few and it would be nice to just bring in * or what have you. <SEP> import * as X from ""Y"" <SEP> X.foo <SEP> X.bar <SEP> Hmm. Guess I'll give that a go, although a bit more verbose than I'd hope for in describing the type. <SEP> you can also async a import and it will give you all its exports as an object <SEP> Not something I've heard of. <SEP> I.E  ``` const getObj = async() = <SEP> Ah, no that's okay. It's all interface definitions so I'm not sure that fits. <SEP> ahhh... for typings <SEP> Yeah. <SEP> yeah import * as X then should work <SEP> I can live with it. Thanks!",is there a way to import all object definitions from a file?
Summarization," <SEP> Hi all please help me with, defining getter of a private optional member of a class <SEP> ! <SEP> currently I am getting above error.",how to define getter of private optional member of a class?
Summarization," <SEP> that compiles without any warnings or errors on TSC 2.2.1 @alexjurkiewicz <SEP> well, the slightly modified version: ``` abstract class BaseClass {   abstract foo(a, b); } class MyClass extends BaseClass {   foo(a, b) { console.log(b); }; } ``` <SEP> What is the standard approach/solution for generating multiple schemas from a single source?  I currently have TS classes + Joi objects (some of which have 600+ attributes), Id prefer to have a single source of truth that builds TS Interfaces, GraphQL IDL, etc.  Is there a solution like that out there already,  or do I have to roll my own with custom decorators? <SEP> Sorry if this is common knowledge, I have jumped into the deep end",what is the standard approach for generating multiple schemas from a single source?
Summarization, <SEP> :P <SEP>  Wouldn't S just be the name of your array index here?  @rraziel You mean shouldn't it be a generic? I'm trying to avoid that. <SEP> I'd like the function that accepts DSN to be able to accept an object on the fly.,Wouldn't S just be the name of your array index here? 
Summarization," <SEP> Is there a way to solve this implicit any error without adding  an index signature? ``` const test = {     'validKey': '' }  const key =  <SEP> Is there some way to specify that `key <SEP> @josh18 how about <SEP> ```typescript interface Test {  validKey: string }  const test: Test = {     'validKey': '' }  const key: (keyof Test) <SEP> or even <SEP> ```typescript const test = {     'validKey': '' }  const key: (keyof typeof test) <SEP> :P <SEP> eh yeah :) <SEP> ah perfect! Thanks so much both of you,  was just trying to my head around how I could use keyof in an array type <SEP> createDialog(dialogComponent: { new(): DialogComponent }) <SEP> what does the ""new()"" really do here? <SEP> Just looks like any object with a `new` property that returns a `DialogComponent` <SEP> @ncphi_twitter sure, but why not pass DialogComponent directly? I wonder if it's to avoid name mangling (AOT compiler on angular) <SEP> Not sure why, but it looks like it doesn't want a DialogComponent, it wants something that creates DialogComponents <SEP> ``` const dialogFactory = { new: () = <SEP> I'm not sure what the context is though, so I can't speak to why it works that way. <SEP> oh, i see, they implement a factory, and need something they can call `new Something`  on <SEP> thanks @ncphi_twitter <SEP> I think it would `dialogFactory.new()` rather then `new dialogFactory()` <SEP> But yeah that's right. Poor naming choice for the first argument of `dialogComponent` <SEP> @ncphi_twitter well: ``` function factory(ctor: { new(): A }): A {     return new ctor(); } ``` <SEP> is apparently legal <SEP> https://www.typescriptlang.org/docs/handbook/generics.html mentions the idiom as well <SEP> cool trick <SEP> That's interesting. <SEP> nifty <SEP> I'm wondering what all matches `{ new(): A }` <SEP> Would `function X() { returns new A() }` work? <SEP> only if you pass the literal with new() i think <SEP> as an arg to X <SEP> that's the way I read the spec <SEP> ``` function genX(Something: { new (): X }) {   return new Something() }  class X { }  // Valid genX(X)   // Valid class X2 extends X { } genX(X2)  // Invalid genX({   new(): X {     return new X()   } })   // Invalid genX(() = <SEP> sounds about right <SEP> So it actually forces it to be a class <SEP> Even though technically in JS the last example does conform to the interface",is there a way to solve  implicit any error '' without index signature
Summarization," <SEP> @felixfbecker Well, with our current setup with babel runtime  in our config.js (jspm/systemjs) there seem to be somewhat of a slowdown. Also the aurelia-bundler is considerably slower than in our other project using promises. Another thing is that we get js and !jstranspiled in the Chrome dev tools and thus have to debug the TS transpiled ES6 code rather than the ts files, etc...  Also I'd like to use Visual Studio to transpile my files and be able to run my combined client/webapi project with F5 and not use some kind of gulp watch stuff on another port and thus having to fiddle with cors... <SEP> I would recommend to not use babel runtime. <SEP> Yup, but it was meant to be a temporary thing until TS2.0 dropped and now with the 2.1 RC out I hope the VS tooling will soon be released so I can finally ditch babel completely... <SEP> Are you not using Gulp? <SEP> And/Or Browserify/Webpack? <SEP> I use gulp for some bundling/packaging and use the aurelia-bundler (that I suppose use the jspm bundler behind the scenes), but don't use gulp to watch/transpile the code... <SEP> Because it is literally just ```ts browserify('src/main.ts').plugin(tsify).plugin(babelify).bundle() ``` <SEP> And iirc VS has no problem running GUl <SEP> Gulp tasks <SEP> anyhow according to the roadmap the 2.1 release should be out this month, so I guess I'll have to be patient for a couple of days more so I don't think I'll bother changing the setup until then, but the thing is I don't want to run gulp when I'm coding. I want to be able to just press F5 in the studio to start both the Aurelia client and .NET WebApi in my local IIS Express... <SEP> Where is the difference between running gulp or tsc? <SEP> ?? With the VS2015 plugin (which is still on 2.0.6 on typescriptlang.org) I don't have to worry about running either. The studio plugin transpiles the code when I save the ts files and I don't have to bother with either gulp or tsc directly...",Where is the difference between running gulp or tsc?
Summarization," <SEP> I am using Jasmine. Why do I get this error? <SEP> ```  error TS2345: Argument of type '2' is not assignable to parameter of type 'Expected <SEP> here's the signature toEqual(expected: Expected <SEP> The type of `list` is ` <SEP> The type of `list` should probably be `something <SEP> oh... <SEP> Thank you <SEP> I'm working on a legacy app that doesn't use modules. What is the right way to declare lodash? <SEP> `declare const _: ???` <SEP> the DT types almost certainly support that <SEP> did you install `@types/lodash`? <SEP> yes <SEP> if it doesn't just work, then `declare const _: typeof import('lodash');` <SEP> if what doesn't work? <SEP> using `_` as a global. <SEP> thanks <SEP> it has `export as namespace _;` which means it should work <SEP> Someone seriously needs to write something with `// $ExpectType` that plugs into the TS langauge server. This is just wrong... ```ts type Pass = 'pass' type Test <SEP> you might need something like `///  <SEP> `types=""lodash""` <SEP> you must be battle-scarred if you know that off the top of your head <SEP> okay this is a tricky situation. I can get eslint/tsc to accept  that, but when Jasmine executes it, I get this error: `ReferenceError: _ is not defined` <SEP> I'm trying to think of why that is. My situation is so weird due to the nature of this legacy app <SEP> because it's not loaded <SEP> in your test you might just need `import _ from 'lodash';` <SEP> is there a way to load it without using modules? <SEP> Oh good idea <SEP> what's jasmine again?  Is it just matchers and stuff or is it browsery? <SEP> @Gerrit0 I was thinking about that for a minute and I wasn't sure how to implement that. <SEP> Jasmine is a unit test Library <SEP> that import didn't work. If I don't use it in the file i import it into, does it still get imported? <SEP> schmaybe <SEP> or does it get stripped away? <SEP> I guess that's easy to try and see <SEP> probably not <SEP> I have no idea either Keith. I know I want it badly enough that I'll probably end up doing it sometime though. <SEP> Trying to answer https://stackoverflow.com/q/60795256/7186598 and I've passed my threshold for type assertion testing. <SEP> https://stackoverflow.com/questions/45801756/jasmine-adding-lodash-to-testing <SEP> Also the playground auto indent is infuriating. <SEP> Wait why am I working in the playground... <SEP> I can't do that accepted answer because it uses an import <SEP> this is tricky. I don't really understand what's happening. I did `npm i lodash` and I also Installed the types <SEP> I think this is a legit error, not a typing issue <SEP> so I think when I'm running Jasmine tests it truly does not have access to lodash <SEP> Yep. <SEP> If you are running jasmine on node, you *must* have imports.",error TS2345: Argument of type '2' is not assignable to parameter
Summarization," <SEP> let's say you have a project with inlined types from which you then create an npm UMD bundle. What's the strategy to 1) expose (re-export) just a subset of the types, mainly those around the public API, and 2) put the types into a single `d.ts` file instead of having them strewn across hundreds of declaration files mimicking the original folder structure? <SEP> seems an outstanding issue: https://github.com/microsoft/TypeScript/issues/4433 <SEP> there's  <SEP> I haven't used it <SEP> there's also some thing from microsoft that I can never find that might help with those kinds of things <SEP> I can never remember the stupid name <SEP> I think this is it: https://api-extractor.com/",how to expose a subset of types into a single d.ts file
Summarization," <SEP> hi <SEP> `import  jpg from './leaves.jpg'` shows up read in my vscode i have it defined in webpack to be intercepted by a `file-loader` so it will compile ok, but how do i make vscode IDE not mark it as error <SEP> i need some help with this <SEP> hello, someone help <SEP> @sondr3 the typescript compiler itself is written in TS so thats a point of reference too <SEP> yes it is possible to Omit the index signature from a type, you just need to use the old type to construct a new type without a index signature <SEP> @ShanonJackson would you be able to show an example ? <SEP> yeah sure 1sec <SEP> almost got it sorry <SEP> enjoy <SEP> ``` interface SessionData {      <SEP> Its also possible to write a generic ""RemoveIndex"" type pretty easily based on this <SEP> @martabrzeszczyk <SEP> let me know if it doesn't work for you <SEP> Explaining why something seems the way it is to you is not the least of challenges <SEP> `walk()`  shouldn't return a `string` but `void` <SEP> `'walking'` is a `string` <SEP> @erwinheitzman <SEP>  #metoo <SEP> I'll let some more experienced `tsc` professionals answer you the WHY - @fatcerberus @Gerrit0 @dragomirtitian @keithlayne  <SEP> There is no bottom type until TypeScript 2.0. Therefore void in an interface is essentially saying ""you should ignore a return value from a function. But just like excess parameters, TypeScript evaluates if the resulting object can be conformed to the shape of the interface. So the below is valid (although a bit surprising): <SEP> the above* <SEP> this snippet shamelessly stolen from the github issue <SEP> @ShanonJackson seems to work typetastic How long does it take to learn writing such types? <SEP> sit in gitter long enough you just pick this stuff up, i'm no expert <SEP> ok :) <SEP> @ShanonJackson does the part ` <SEP> yes <SEP> ok <SEP> Ah I see, so it technically still implements the interface because a confirming caller will just ignore the return type, it doesnt break the contract <SEP> *conforming <SEP> @fatcerberus - Do you have advanced knowledge in mathematics ? <SEP> Just things Ive picked up here and there from reading wikipedia, nothing formal <SEP> From times to times, I'll wonder what I missed along the line that I don't completely grabs the things around playing with types. <SEP> it has to be undefined, because it has to treat is an arrow function, and you also want it to be treated as an arrow function because at the moment you're relying on your target always being ES5 because if it ever goes to ES6 the result will change <SEP> Arrow functions per spec always take the `this` of their surrounding scope",how do i make vscode IDE not mark 'import  jpg from './leaves.jpg'' as error
Summarization," <SEP> Anyone know why I'm getting `Property 'readonly' does not exist on type 'DetailedHTMLProps <SEP> Do the definitions for the input element not have the readonly property? That's a valid and useful property of HTML  input elements... <SEP> `readOnly` <SEP> capital O <SEP> try that <SEP> @sam-s4s  Thanks that was it! <SEP> so dumb of me HAHA! <SEP> thats the kind of thing autocomplete should help with... <SEP> hehe :D <SEP> So this is not TypeScript related, but I found out today that in Haskell, a typeclass needs the type it's used with to have the correct number of type params, which is why `Either` can only map over its right side (the left side is partially applied away in order to create its monad instance)... and I think I came up with a hypothetical design that could fix that: ```ts class Functor F T where     map R :: (T - <SEP> So, I have a project... ``` /myProject/ ``` and inside it is a library... ``` /myProject/myLib/ ``` All this is fine and has been working well for ages. But now I want to separate the library out of the project folder, because it's shared by multiple projects now...  ``` /myProject/ /myLib/ ``` <SEP> and myProject will  be importing stuff directly from... ``` ../myLib/whatever ``` <SEP> but when compiling this, it breaks <SEP> stuff in myLib needs things from `node_modules` <SEP> but the lib itself doesn't have, or want, its own node_modules... it wants to use whatever the owning project has <SEP> for example, here is an error: `../lib/utils.ts(66,25): error TS2307: Cannot find module 'moment'.` <SEP> But, of course, the project I'm compiling actually does have moment <SEP> But for some reason, it's like it's trying to compile the lib in isolation to the project that's importing its files <SEP> Help! :P <SEP> Why does the fact that the files are outside of the project directory change the way they're compiled? Can't I just use external files regardless of their location?",Property readonly does not exist on type 'DetailedHTMLProps'
Summarization," <SEP> You can get close: `obj = { ...defaultVals, ...givenVals };` <SEP> ~~But no such luck for already-populated objects~~ <SEP> Wait yes, `obj = { ...defaults, ...obj };` <SEP> Whether *TypeScript* will like it or not is another story <SEP> Downside of course is that it creates a new object <SEP> instead of mutating the existing one <SEP> If you put something in `exclude` tsc won't process it (unless something else explicitly imports it), which means it also doesn't know about anything in it.  I would find it strange if this *wasn't* the case <SEP> Think of tsconfig.json like a project file and `include`/`exclude` determines which files are part of the project <SEP> And tsc produces output for every source file that's part of the project, unconditionally <SEP> @Uzlopak He was being sarcastic :stuck_out_tongue: <SEP> Just found this: https://github.com/microsoft/TypeScript/issues/39066 Private methods make sense, but private *accessors*?  What, you don't trust your own class to work directly with its own data?","If you put something in 'exclude', tsc won't process it "
Summarization," <SEP> has it ever happened to anyone that ""paths"" aliases work when doing `tsc build` but not when doing `concurrently \""tsc -w\"" \""nodemon dist/server.js\""` <SEP> or using `tsc-watch` <SEP> it says it can't find module `@user/index` when i run it from watch, but when i just build my code it builds fine <SEP> i defined a `baseUrl` and `paths` in my `tsconfig.json` <SEP> `paths` only tells tsc where to find modules - tsc doesnt edit the import specifiers so the path you use still has to be valid at runtime <SEP> hmm, not sure i follow. isn't the source rebuilt every time a change happens? so i would assume that it applies those rules when the rebuild happens",tsc doesn't edit the import specifiers so the path you use still has to be valid at runtime
Summarization," <SEP> you use monads all the time Bruce <SEP> you just never use them to their fullest power <SEP> Array is a Monad <SEP> promise is apparently categorically NOT one <SEP> it is <SEP> well <SEP> hmm <SEP> Facebook status: it's complicated <SEP> ...monad laws...blah blah blah... <SEP> again, I've never missed Promise not being a Monad <SEP> Functor and Applicative are where it's at really <SEP> how often do you need flatMap? <SEP> booyah <SEP> freeking autocorrect is killing me",Array is a monad 
Summarization," <SEP> @TimonVS https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19928 <SEP> Hello, can somebody explain how to use `SystemJs` modules for TS? <SEP> ! <SEP> ! <SEP> and it's never called(",how to use 'SystemJs' modules for TS?
Summarization," <SEP> Thats why I made `from()`, I love how concise chaining list operations looks but I find Lodash is too much of a performance hit and you *definitely* dont want to chain array methods (unnecessary copies) so I wanted something like Lodash that approached the performance of hand-written loops <SEP> (I know Lazy.js exists) <SEP> But yeah this is why arrow functions were my favorite thing that was added in ES6.  ES5 style function lambdas = super ugly <SEP> Where can I take a look at `from()` Bruce? It's kind of a difficult name to search for. <SEP> Yeah I chain array methods all the time :frowning: I guess clarity is what Im looking for more than performance - its a little annoying that there is such a high abstraction cost in JS when there isnt in other languages. <SEP> I dont have a separate repo for it yet but its part of my miniSphere game engines standard library: <SEP> https://github.com/fatcerberus/minisphere/blob/v5.3.0/assets/system/runtime/from.js <SEP> I use LINQ terms for map and filter (select and where) because I find they read back better in a chain <SEP> If anyone wants to use it feel free :smiley: <SEP> I do need to type this at some point which wont be easy because of the way it iterates (push instead of pull) <SEP> So when I understood that `map (fg) === (map f)  <SEP> from() would likely serve you well - it creates no copies unless it absolutely needs to (whole-list transforms like sort, e.g.) <SEP> Very neat, took me a few minutes to understand how `run$` & `compile$` work, but everything else was super clear. <SEP> Ha, just started looking at it, and the first thing I thought is how annoyed I am by languages that dont have a built-in identity function. <SEP> OMG you use tabs.  Have to stop reading :trollface: <SEP> I dont like to force my tab size preference on others so if someone wants to view the code with 2-space tabs they can just flip a switch in their IDE - thats why I use tabs <SEP> I stay far away from religious tab vs. space debates  <SEP> :+1: <SEP>  The issue isn't that `listener` is a union, its that `listeners <SEP> @fatcerberus Why do you put $ after your function names? <SEP> I suppose that's probably it, you can still have type safety in `addEventListener` if your `listeners` object stores any allowed function, external users don't need to know. It's what I did in  <SEP> oh more Typescript to digest. Thanks! <SEP> :pig_nose: <SEP> The `$` indicates its private - dont call from outside.  I have an irrational hatred of underscores I guess <SEP> @funkjunky maybe look in the TS DOM lib.  The `addEventListener` there seems to enforce types on listeners based on the event name. <SEP> on `Window` I mean. <SEP> Ok thanks for the lead Keith. <SEP> Ya, I think for now I'll just use `TAnyFunction` and lose the type safety on the functions.  @Gerrit0 implementation is very nice, but I'm hesitant to add that extra layer of abstraction for the type safety, but honestly it was so clean and simple that I'm gonna keep it bookmarked =P <SEP> :+1: Typescript 3.0 did wonderful things for the tuple, it wasn't possible before then <SEP> oh wow, I didnt know this: https://github.com/tiimgreen/github-cheat-sheet#adjust-tab-space <SEP> so I can keep my religion to myself <SEP> Im waiting patiently for private fields although Id be lying if I said I didnt also hate the `#` sigil almost as much as underscores... <SEP> @keithlayne <SEP> Yes thats why I used tabs.  You cant do that with spaces  <SEP> (Stupid mobile gitter sends the message as soon as keyboard disappears) <SEP> but you dont *need* to do it with spaces! :smiley_cat: <SEP> Religion aside, hows the code? <SEP> Not a huge fan of golang, but the gofmt idea is a good one to put those arguments to bed <SEP> It looks super useful.  I didnt read it at a super deep understanding level, that would take a lot more effort. <SEP> But thats why we write libraries, so the hard stuff is hidden.  I like the API though. <SEP> but I agree `flatMap` would be a good addition. <SEP> Basically it lets you do from(list).where(filterFunc).select(mapFunc).sort(...) etc. and it only makes copies when necessary <SEP> And you can reuse partial chains <SEP> At some point Ill polish it up, maybe add typings and make a dedicated repository for it",Where can I take a look at 'from()' Bruce?
Summarization," <SEP> ? <SEP> Not for classes? What does that mean? <SEP> Do you mean it doesn't instantiate a new class object to hold your data? <SEP> for example `{r: /myregex/}` won't be able to serialize/deserialize correctly <SEP> That's because it's not valid json <SEP> It would serialize though <SEP> sure, but it can be serialized/deserialized with JSON if you know the types <SEP> something so I could do this: ``` interface foo extends Serializable{ someProp: Date; fooProp: string; } ``` then the lib (at compile time) could also generate metadata info for the runtime to use during deserialise. and at runtime it could modify the `JSON.parse()`function to use the metadata to always deserialise correctly and throw errors if data wasnt structured right <SEP> It would serialize as `'{r: /myregex/}'` <SEP> @pascalwhoop I don't think you need any customization. Are you concerned that people might throw invalid data from third-party systems? <SEP> In most CS apps you have a mirrored setup <SEP> @ochrons I don't understand what you're asking <SEP> @pascalwhoop Metadata can either be passed between systems or pre-shared <SEP> In the case of Client Server apps, it's normally pre-shared <SEP> To do this we share the source interfaces and make sure when we create an `info` object, we always use a matching `info` object at the client <SEP> okay Ill tell you my story and  then you tell me where, in an ideal world, I would have to change something to make it right.   AngularJS has a DatePipe. It takes either a Date Object or TimeInMillis and gives out a UI Human readable String. But most times it gets data received from a backend and that will then not be a Date Object but rather a String that results from `JSON.stringify(new Date());` So first my thought was  <SEP> OK, I see what you're asking, but in this case some of your servers are returning invalid data <SEP> If I ask for the user's name from the server and it sends back the number -76, that's not a valid response <SEP> (unless you have a very odd name!) <SEP> If I define a server end interface as  ``` class Idata { name: string, childcount: number, age: number } ``` <SEP> I can create a class from that in my server, and when I call JSON.stringify on it, I will always get the same structure sending <SEP> and with ```typescript class Idata { name: string, birthdate: Date } ``` what would you get <SEP> If I now share that with a client (at compile time), then when the client receives their data they simply say  ``` JSON.parse(incoming) as Idata ``` and we know it's matching exactly what the server sent out <SEP> I mean, who stores `age` when you should store a birthdate :) <SEP> Naive developers :) <SEP> You can't send a `class` in javascript <SEP> You can pass one around in your program, but it has to be serialized to send it <SEP> Remember, a class only consists of its data values, it's a static set of code instructions pointing to an instance identifier and data items <SEP> When you 'send' it you only send the data items <SEP> @jsobell can you explain the `as`? I havent seen that before and it might just be what Im looking for and I just didnt read the Docs carefully enough :angel: <SEP> @pascalwhoop It's simply a cast <SEP> If you assign the parsed value to a variable of type Idata it will do the same thing <SEP> yeah and I wrote that but I hate when my classes look like this  ``` export class Context extends BaseModel implements Serializable <SEP> That's why I asked you if you mean *validate*, not deserialise <SEP> But even then, the object you create at the client is not the same object as at the server, and doesn't need to be <SEP> I just feel like there has to be some sort of generic abstraction layer possible that will keep other people from doing this over and over again. It feels much too structured to not be possible in a generic way that can then be used by any <SEP> I suspect you have to write your own, or use decorators on all your properties",not serialize/deserialize for classes
Summarization," <SEP> Has anyone encountered ""Cannot find module ' <SEP> just make sure the compiler doesn't try to compile your node_modules <SEP> exclude in tsconfig.json, exclude the node_modules folder <SEP> also ensure the package you're importing (assuming npm) has proper typings (which is why you wouldn't need `@types...` <SEP> I have the exclude option set. <SEP> do you have a github repo so we can reproduce it? <SEP> The error only triggers after a css file change (when the css file is being imported into JS.) <SEP> @SimonMeskens thanks I'll keep chugging <SEP> @citycide  ```ts const MyClass: MyClass = class MyClass {     constructor(mixin) {         Object.assign(this, mixin);     }      a = 4; } as MyClass;  declare interface MyClass {     new  <SEP> does that help? <SEP> syntax is a bit goofy, but that should work <SEP> it just might... how about if there are multiple mixins? <SEP> would they compound on each other? <SEP> depends, not sure how dynamic I can make it <SEP> well I've done something similar to this recently by adding the properties of a constructor's `options` sub-object to the class and that worked well. but say if I mean to accept something like an array of possible plugins, am I able to add all their methods? <SEP> well, the issue then is that you have to convert a union A | B | C into A & B & C, I'm not immediately sure how to do it, but I feel like I'm missing an obvious solution <SEP> hmm I see the trouble <SEP> I'm wondering if this is more trouble than it's worth though - maybe something more like pure function wrappers would be better <SEP> the easy solution is to write a bunch of overloads of course <SEP> if you make 10 overloads, it supports up to 10 mixins, etc <SEP> and this is basically inversion of control, so it's a well-supported paradigm <SEP> but yes, function wrappers sound superior <SEP> if this was just JS I would prefer the route we're on but I'd like it to be strongly typed <SEP> yeah, it's such a big issue, typing JS <SEP> the problem is that JS is basically one of the more powerful languages in existence, so it's really easy to write simple things that are super hard to type <SEP> it's basically a lisp in that regard <SEP> which is why TS has probably the most powerful _type system_ in existence <SEP> it's getting there yeah :) <SEP> it's probably not anywhere near the top of the list yet <SEP> then again, it's turing complete, so in a sense, it's already provably as powerful as it gets <SEP> conditional types are pretty wild though <SEP> man, have you seen the code I wrote lately? <SEP> it's crazeballs <SEP> I'm writing full on monad abstractions that work perfectly with conditional types <SEP> there's one big issue with them though, in that they can't handle generic functions <SEP> if that ever makes it in, it goes through the roof <SEP> and spread types would be another big one",Can not find module in tsconfig.json
Summarization," <SEP> Is it possible to create a `DeepPartial <SEP> this may work? ``` type DeepPartial <SEP> Oh, will try it! <SEP> seems to work: ``` type DeepPartial <SEP> Indeed it does! Ingenious. Thanks! <SEP> probably another definition that should be in the core type defs <SEP> I agree <SEP> Want to propose it on github? I'd vote for it <SEP> https://github.com/Microsoft/TypeScript/issues/13500 appears to discuss this concept already, i'll just add my suggestion",is it possible to create a DeepPartial?
Summarization," <SEP> Hello Everyone <SEP> I'm new to TypeScript <SEP> can any one suggest me a link or documents to start Type Script? <SEP> official docs <SEP> @sallojusuresh  https://github.com/kaflan/angularTYpescript2 my mini doc start with webpack + angular 1.5 <SEP> thank you @kaflan :) <SEP> What's the best way to use Promises in TypeScript when targeting ES5? I had thought the TS compiler had a way of transpiling them if I had `target:""es5""` in my tsconfig, but that doesn't appear to be the case. Is it necessary to use a polyfill? <SEP> Guys, does anyone know how to set type to a variable with all optional values. I mean to be able do not strict implementation. <SEP> @robinchesterman yes you do. You can use stuff like `core-js` or some es6 polyfill. I do however recommend using the bluebird library, especially with the syntax `imort * as Promise from 'bluebird';`. When Promise API gets normally supported then its easy to remove/change it. <SEP> @kobvel either you do an interface with properties using the `?` modifier or you start type-casting as you need, either with `object as Casting` or ` <SEP> TypeScript generates an ""async-await to generator"" function for each file using async-await. Is it possible to tell TypeScript to just require some runtime instead? Something like `babel-plugin-transform-runtime`? <SEP> @jeffijoe I'm using jspm and is using babel runtime to transpile my es6 code generated by TypeScript containing the yields that came from the async/await stuff like this... I'm however still on babel 5, since I was hoping to get rid of babel completely when TypeScript 2.0 drops... ```   transpiler: ""babel"",   babelOptions: {     ""optional"":  <SEP> @Souldrinker ah, okay - TS does support async-await though <SEP> @ShadowManu Thanks - I've added in bluebird and it seems to work with webpack ProvidePlugin. I honestly thought until now (like 6 months!) that TS compiler was converting my ES6 Promises for me, until I just tested in Internet Explorer! <SEP> I guess I'll have to live with the excess code being generated <SEP> ok, does the latest TypeScript2 beta support async/await to ES5 now? Because since quite a while back I've had to set TypeScript to output ES6 to be able to use async/await and then do runtime transpilation using babel runtime to ES5 to work in browsers... <SEP> Oh, I'm not sure how that works. I am transpiling to ES6 + commonjs for node 6 <SEP> ah, ok... I need my code running in Internet Explorer and other browsers that doesn't support that stuff, thus the need for babel runtime... <SEP> What does a self-registering metaclass do? <SEP> is it like a decorator? or is it a monad? <SEP> is it possible to create a type that is `any` but with another name ,(create a type that is equal to `any`)? <SEP> why? <SEP> to complete that interface later, but for now it's equal to any <SEP> well you can go and do ```type YourNewType = any; ``` <SEP> thanks <SEP> Is there a way to explicitly disallow extra properties on objects? <SEP> ``` interface Test {foo: string; bar: string; } interface Test2 {foo: string; bar: string; baz: string; }  function dumpTest(test: Test) {     return dumpData(test); }  function dumpData(data: { <SEP> id really like the second `dumpTest` to be a compile error <SEP> @con-ssc  - I guess its sort of like a decorator. <SEP> then I would use decorators :)",What's the best way to use Promises in TypeScript when targeting ES5?
Summarization, <SEP> It feels better after this session. I don't have many challanges left. Hopefully will be done in 3-4 evenings more. <SEP> @dtabuenc big ups for the help tonight. Time to sleep! <SEP> it only gets harder when you want to start using stricter types everywhere,it only gets harder when you want to start using stricter types everywhere 
Summarization," <SEP> unconvertable <SEP> It works! Thanks. Playing around with it I notice that if I move the declare to my `typings.d.ts` and leave `three-extends.d.ts` empty, it works fine. But if I remove the include to `three-extends.d.ts` from my `tsconfig.json` it stops working, even though there's no code in the file. Why _must_ I have `three-extends.d.ts` even if the declare is elsewhere? <SEP> `import three from three` is required in your `typings.d.ts` <SEP> Hrm? I'm not doing an import in my `typings.d.ts`. Everything is working fine though.",'import three from three' is required in your 'typings.d.ts'
Summarization," <SEP> Anyone have experience using TypeScript with D3.js? I feel like I've entered type-hell <SEP> The types for d3 look decent, what issues are you having? <SEP> @webstrand In D3.js, we can often set attributes of the generated svgs using something like ``` const path = d3.arc();  svg.append('path')    .attr('d', arc); ``` where arc uses this interface: `interface Arc <SEP> However, the compiler then errors cuz the parameter for a custom attribute like `d` has a type (`ValueFn <SEP> I'm confused as to how a custom attribute might even have that type constraint? <SEP> Anywho, I have a stack overflow question ",how to use typescript with d3.js?
Summarization," <SEP> quiz time <SEP> `put <SEP> axios.put signature <SEP> list all that's wrong with it <SEP> it's not much of TS issues but API <SEP> it's a cast <SEP> In this example `action` in `CreateDirectory` needs to be a prop, can't be a method. How can I make `action` a method?  ``` class PlopAction {     name: string     action: CustomActionFunction      constructor(plop: Plop) {         plop.setActionType(this.name, this.action)     }  }  export class CreateDirectory extends PlopAction {     name = CreateDirectory.name     // action (answers, config, plop) { // fails     action = (answers, config, plop) = <SEP> Explicit param as `string` seemed like the obvious (?) problem <SEP> hmmmm....""explicity"" is kinda fun, I might keep that. <SEP> yeah, but could sorta work, you'd just get a union of the import types",how to make 'action' a method in CreateDirectory
Summarization," <SEP> Hey y'all remember how to link to a Gitter comment? <SEP> ooooh, alt-click. But in a personal chat, I don't see the alt-click option. Weird. <SEP>  <SEP> ""before"" vs ""after"" <SEP> @ertw_gitlab thanks, I wanted to double check that statement since  things in FE can move quite fast :) <SEP> Hi all, has anyone used `undux`? https://github.com/bcherny/undux I'm investigating current state management patterns in React, and comparing different libraries and the builtin context API. <SEP> I just discovered `undux` and it looks really promising. It seems to be written by the author of  <SEP> It has a novel and really clean looking interface using getters/setters to apply state changes, which looks like it preserves an immutable interface without a bunch of boilerplate or using another library like `immutable`. <SEP> What's weird is that it's two years old, but has nowhere near the uptake of any other library I'm comparing with (redux / mobx / overmind), so just looking for any insight on why that might be. <SEP> The first question you should be asking yourself is whether or not you need external state management in the first place <SEP> The modern context API with the `useContext` hook and `useReducer` should cover like 90% of use cases <SEP> and if you're sharing so much state globally that you've outgrown the built-ins, I've got a lot of questions <SEP> If you get to the point where you're sure there's a necessity, you should know why the necessity exists, and then you can use that information to inform your decision on which one to use <SEP> Something I'm struggling with is unnecessary rerenders in child components when I change global state in the context provider. My guess is that I'm using it incorrectly. Any pointers on how best to use context, and especially make it foolproof for junior developers who are jumping into the codebase? Something I like about what I'm seeing in `undux` is that it has one way to interface with state, and it is typesafe. <SEP> The initial pattern I hit on was to use `useReducer`, and wrap the entire app in a provider like I would do with Redux, but maybe I can just hook into the state store more deeply into the tree if that makes sense? <SEP> @ertw_gitlab what I do is create a context that doesn't store its data in React state, but local JS state, and emit change events, then consume the change events in my context consumers like so:  ``` const context = useContext(FooContext); const  <SEP> it's fairly easy to wire something up that generates a context that emit events for you automatically according to whatever you want <SEP> mine generates `context.onFooChange(handler: foo = <SEP> and then you can just keep your provider at the root <SEP> worth noting that I don't bother to do this on all but one project where performance is critical (loan applications, tiny delays become conversion rate drops very quickly) <SEP> who cares about the standard, adhere to the principle of least surprise, and do what you think people will expect your software to do rather than what the standard says it should, unless you are going to be 100% standards compliant and advertise that <SEP> The thing I'm working on is trying to **unify** a bunch of databases. A lot of ORMs/query builders don't actually try to do that. They'll guarantee they can run queries on the different databases, but not that the behaviour will actually be consistent. <SEP> If database A has feature X, and database B does not, I can, + Drop the feature entirely because B does not support it. So, I can't unify what isn't there. + Try to emulate feature X for database B.",how to link to a comment in a Gitter comment?
Summarization," <SEP> Hi all, I have some JS code fo which I maneged to create a type definition (a .d.ts) file, which works perfectly if I only import the export from that ts file. However, my library is in JS, and I would expect that having a type definition file which is indicated as typings document would override any JSDoc in the JS code. But it seems that doesn't work. Any hints? <SEP> It seems that using @type { import().namespace} does work... <SEP> hi, is there a shorthand for this? ``` const s: ""veryveryverylongstring"" = ""veryveryverylongstring""; ``` <SEP> meaning, the `const x = 'aa'` should automatically narrow down to `'aa'` type <SEP> to narrow down non-primitive types, you can do: ```ts const o = { s: ""veryveryverylongstring"" } as const; ``` <SEP> I thought you had to `as const` to avoid widening primitive types -- maybe it changed within the last few versions? <SEP> You can just do `const s = ""veryveryverylongstring"" as const` without wrapping it in an object. <SEP> i had an other question regarding `const o = { s: ""veryveryverylongstring"" }` but unintentionally deleted it <SEP> ah <SEP> the delete and edit button are too close to each other",importing a type definition from a.d.ts file does not override
Summarization," <SEP> Huh. I was pretty sure Gitter used to let you use Ctrl+V to upload images <SEP> ! <SEP> Now I have to drag and drop? Yuck <SEP> Anyway, I think it's pretty cool TSConf is letting you donate tickets to the virtual event <SEP> It does, but sometimes it doesn't like it <SEP> (work with ctrl+v) <SEP> I even had times where it wouldn't drag/drop or ctrl+v and I had to basically use markdown to show the image <SEP> Yeah I saw that the other day, you signing up already? <SEP> I'm curious what happens with the donation, if there's no one to claim the donated ticket. <SEP> Probably donated to ACLU or something <SEP>  SitePen will donate 25% of ticket sales to the ACLU to fight voter suppression and help effect real change in one of the root causes of systemic racism. <SEP> From the tsconf website <SEP> But I don't know for sure though <SEP> I wonder what the benefit of attending the virtual conference will be, though, since they'll probably just release the recordings shortly after <SEP> Networking? <SEP> @keithlayne I've set a reminder to buy the ticket before Jul 31 <SEP> I haven't been keeping up with TS at all. So, I'll probably benefit from the conference talks, this time <SEP> yeah seems like the 2018 conf talks were way more valuable to me because I was just learning TS.  Last year's were not that informative. <SEP> If you keep up with the repo and releases you probably know a lot of what they're gonna say. <SEP> But I do like watching the keynote and the Q&A stuff.  Not sure why. <SEP> But that binary arithmetic thing is a good example - it's kinda neat, but old hat if you've seen that kind of thing before.  Plus the TS wasn't how I'd do it if I were gonna do that.  But the guy was super energetic, so it seemed like a fun talk. <SEP> Agreed. There's probably going to be at least one of those talks again, haha",what happens to the donation if there's no one to claim the ticket?
Summarization," <SEP> Hi! I want to type a result that might be one of a few things. Is there some way to do this such that: 1. I can access all the fields as optional without checking the type, but also 2. I can only access specific type's fields when I do check the type. I've tried `{ t: string, a?: string, b?: string } & ({t:""a"", a: string} | {t:""b"", b: string})`, but this way I can still see `a?` inside `if ( <SEP> ...`if(x.t === ""b"") {...}` <SEP> @ktosiek ? <SEP> Required <SEP> Hey All!  I'm looking for some advice regarding Interfaces and Enum's.  I have a couple of Enum's, all with the same structure, here's some examples:  ``` export enum Color {   Red = 0,   Green = 1,   Blue = 2 }  export enum Shape {   Square = 0,   Triangle = 1,   Circle = 2 }  ```  And I want to create an interface, that has a property that must be an enum of this above structure, so something like this:  ``` export interface Object {   name: string;   value: number;   enum: ??? }  ```  So each of my Objects created has the ""enum"" property, which is supposed to be either ""Color"" or ""Shape"". However, I can't figure out how I would write that as a type - So if anyone has any suggestions, please let me know :) <SEP> @JesperKSmith wouldn't `Color | Shape` work? <SEP> @ktosiek Yes, the issue is this is a sample. In reality I have 50+ enums, so a generic type would be best :) <SEP> Maybe you do need a type that sums all the enums. Why is there so many of them that might go into one field? <SEP> The enum's are used as a mapping of database properties. I have a lot of database properties that are represented by an integer, which then translate to a specific value. The examples I included are just to demonstrate the issue I'm facing",is there a way to type a result without checking the type?
Summarization," <SEP> Hey everyone, node.js user trying to get typescript 1.6 to work (first time).  using node 4.0 and have my tsconfig like so ``` {   ""compilerOptions"":{     ""target"":""ES6"",     ""out"":""./build/server.js"",     ""sourceMap"":true,     ""experimentalAsyncFunctions"":true   },   ""exclude"": <SEP> I've been using babel's async/await and really was hoping to convert some code over ts1.6 <SEP> Hey @delaneyj, @weswigham has a fix for this on #4811. Until then you can emit down to ES5 as a target. <SEP> hmm, if i change the ```""target"":""ES5"",    ""module"":""commonjs""``` part tsc doesn't complain but end with a file with only a single line pointing to source maps @DanielRosenwasser <SEP> @delaneyj You should take a look at this: https://github.com/bootstraponline/async_await_typescript <SEP> @ghalle  so you have to babel the typescript eh? <SEP> thanks @ghalle  @DanielRosenwasser, this is the rosetta stone i was looking for! <SEP> looks like you miss out on the vs code debugger if you go that route. <SEP> Oh, you shouldn't use `--out` in conjunction with `--module` <SEP> @weswigham is working on a `--bundle` option as well as per #4434. Clearly he's the answer to all your problems :smile: <SEP> well i hope so but just trying to get started, just wanted babel with types  :worried: <SEP> well hope to get that without a billion  <SEP> You don't need to use `///  <SEP> you can use `tsconfig.json` for most of those uses <SEP> @DanielRosenwasser  is there a guide? i've seen it mentioned, but no real details <SEP> Take a look at  <SEP> If you have any questions, I'll try to answer them and maybe fix up the wiki to answer them <SEP> Thanks @DanielRosenwasser, its a little confusing.  For now I'm trying to get just vanilla es5/node/typescript enviornment working.    I don't see any mention of external js lib references in that wiki. <SEP> so i've done an ```npm init -y; tsd --init;  npm install --save moment;  tsd install moment --save``` <SEP> my current tsconfig.json looks like ```{   ""compilerOptions"":{     ""target"":""ES5"",     ""module"": ""commonjs"",     ""inlineSourceMap"":true,     ""moduleResolution"":""node"",     ""outFile"": ""built/server.js"",     ""removeComments"": true   },   ""exclude"": <SEP> Well you'll just add the appropriate `.d.ts` file to your `files` field <SEP> if i include ```""files"": <SEP> Do I need to list every *.d.ts individually?",can't get typescript 1.6 to work with node.js 4.0
Summarization," <SEP> Hey I'm trying to create an `index.ts` that combines files from a bunch of directories into one export: ``` import * as MockSystemService from ""./SystemService/MockSystemService""; import * as SystemService from ""./SystemService/SystemService"";  export {     SystemService: { MockSystemService, SystemService } }; ```  Does this look reasonable? <SEP> Oh, you want to describe the type of your callback <SEP> ```ts var x: (x: number, y: string) = <SEP> Isnt it  just :function ? <SEP> I want to add one more field in the interface. But I want to define the value in the interface myself. <SEP> It's possible, but that's too broad <SEP> See that code I pasted earlier? <SEP> Just write  ```ts interface Foo {     bar: Bar;     createThing(): Thing; } ``` <SEP> Can you link to the code you're talking about? <SEP> @DanielRosenwasser https://gitter.im/Microsoft/TypeScript?at=5706bf6e2a2f4d42761285a8 <SEP> I want to add one more field <SEP> @akanieski why do you want an extra layer of indirection in your export? <SEP> @askyous What field do you want to add? <SEP> I want to add one more field called `db`, which provides access to the db to implement the crud operations. That way all the classes that implement my interface have access to the db. <SEP> ```ts export interface ICRUD {     db: DbType;      create(obj: Object, callback: () = <SEP> @DanielRosenwasser But I still wouldn't know if I can set a pre-defined value for `db`. I should make that DBType in your code into a `class` instead of an `interface`. Because I can set variables with values in a `class`. <SEP>  or when you're in a situation that you have multiple classes implementing the same contract without a connection between them other then the contract. In this case the interface is a contract.  This is the situation I'm in. But I want all classes to have a specific variable available to them that has a specific value. <SEP> So it would have both. Some requirements, and some variables that's the same across all classes. <SEP> @shlomiassaf how about the one variable that I want them to have a specific value? Like I want all the classes to have a variable `myVar` that is always `5`. <SEP> In my contract / interface, can I make a rule to say that the classes have to extend a specific class? That specific class would have the pre-defined variable. <SEP>  Unlike an interface, an abstract class may contain implementation details for its members. <SEP> Perfect. Thank you! <SEP> from http://www.typescriptlang.org/docs/handbook/classes.html <SEP> abstract was the solution",how to create an 'index.ts' that combines files from multiple directories
Summarization," <SEP> Hi. What should I choose an interface or a class? <SEP> function execute() - <SEP> The Result is an object with some properties. Without methods. <SEP> for the result ? Interface <SEP> When should I choose a class? <SEP> Only when I have methods? <SEP> there is no answer for that, I would say when you use a constructor. <SEP> but you could work without class at all, it's up to you <SEP> I want some type checking. <SEP> Thanks. I'll write an interface. <SEP> you don't need class for that <SEP> some would even say create an interface for each class <SEP> @KalitaAlexey  in general prefer interfaces over classes for describing the structure of types. <SEP> They are much more flexible. <SEP> Use a class when you need to have a specific implementation of methods <SEP> Also an interface has no overhead. A class has, isn't it? <SEP> interfaces don't have any runtime impact <SEP> I've got. Thanks a lot. <SEP> class is an actual physical object with a prototype <SEP> The nice thing about interfaces is that because of structural typing, anything can iplement them without having to explicitly do so <SEP> you can create a symlink or (junction point in windows)",waht should i choose an interface or a class?
Summarization," <SEP> I've got 4 other components similar to this but I'm missing smth here <SEP> http://i.imgur.com/s66Oqyj.png how do I define some variable to have the type `Sidebar`? <SEP> `let foo: Sidebar` ? Something like that? <SEP> @FernandoBasso declare let foo: Sidebar <SEP> @NaridaL I installed `@types/semantic-ui`. Shouldn't the types be available without using the `delcare` syntax? <SEP> Also, I am not sure what to ready/study about this subject. <SEP> oh yeah I thought you were in a .d.ts <SEP> Sorry I let a lot of info out of the initial question. <SEP> Hi guys, I'd like your opinion: I need to map data and rename properties that come from an API Would you prefer to use plain objects (typed via interfaces ) or create a class? <SEP> class <SEP> simpler",how to define a variable to have the type sidebar?
Summarization," <SEP> I've used them in the past to tell TypeScript to expect a different type of HTML element, but while using ramda or webpack things got so confusing/convoluted I still don't know if I trust how I figured them out <SEP> you can write your own typings, using `declare module ""ramda"" { ... }` <SEP> or (and I do not recommend this, either) `// @ts-ignore` <SEP> you'd put that in your global.d.ts or in your typings folder",using ramda and webpack to tell TypeScript to expect a different type of HTML element
Summarization," <SEP> Hello guys, I'm looking for a programmer partner for my startup, I prefer young programmers, I'm 16, I want someone between (15-19) years old, contact me by my email: murillonascimento04@gmail.com <SEP> ok <SEP> I have : ```tsx interface PieProps extends PieDef {     activeShape?: PieActiveShape; } ``` how to get type of `activeShape` without undefined? `props: PieProps <SEP> You said its optional, it automatically has undefined in the type <SEP> because it might not exist <SEP> So you have to check that <SEP> I want to write a component like: `const RenderActiveShape: PieProps <SEP> @kapilpipaliya  ``` type Example = {  foo?: string; } const x: Exclude <SEP> @webstrand thank you. Still trying to get my head around type of usage. I read the words, feel like I understand, but then just doesnt work out in my code lol. <SEP> would then ``` type Letters = A | B; <SEP> ``` type Letters = A | B;  var letters : typeof Letters = A ``` <SEP> be the same thing? <SEP> Nope, when you define `type Letters` every identifier is in the type-namespace. So you're getting the _type_ called `A` (which is the instance-type of the class `A`) and the _type_ called `B` (which is the instance-type of the class `B`) <SEP> Have you ever dabbled in perl? It's rather similar to how `%foo` and `@foo` are in different namespaces. <SEP> When you declare `var letters : typeof Letters` typescript looks for an identifier `Letters` in the _value-namespace_ and tries to get type of that identifer. <SEP> I realize that `namespace` is becoming an overloaded term. I'm not talking about typescript's `namespace {}` syntax. I hope that's not too confusing? <SEP> I like to call it the type-space and value-space <SEP> not to be confused with hammerspace <SEP> types get erased during the build, so they don't even need to be present at runtime. <SEP> so that makes a little more sense <SEP> kind of like the phases we talked about earlier (regarding generics), this is operating in two different places <SEP> in Dart these layers are not separate",how to get type of activeShape without undefined
Summarization," <SEP> Hey @DanielRosenwasser in your treasure trove of samples do you have something that async-ifies a function that deals with callbacks rather than promises? (what I am working with = https://gist.github.com/bherila/43e41e9df3d8275f79a5 ) <SEP> (To clarify, obviously if it's an interface it can be used as a type, wondering about the differences beyond that) <SEP> @bherila does this help - http://stackoverflow.com/questions/33599688/how-to-use-es7-async-await-with-streams <SEP> yes <SEP> I was actually just having another issue with bluebird :) <SEP> is what you want <SEP> Well since I'm using async/await I had to switch the output type to ES6 <SEP> but now that I switched to ES6, I have the issue that hapi.d.ts which I included, is also referencing bluebird.d.ts <SEP> and that is pulling in Promise and resulting in this issue - <SEP> it is all callbacks, I just have to redo the d.ts file for hapi.js because it includes bluebird and is breaking the build when I try to use ES6 promises <SEP> What would be the right way to structure a typing file for this? https://github.com/gpbl/react-day-picker/blob/master/DayPicker.js <SEP> Also confused why I can do `export default SomeNamespace.foo` but not `export {SomeNamespace.foo as default}` <SEP> `declare module ""DayPicker"" { export = SomeNamespace }`? <SEP> That's the pattern used by most browser libraries on DT <SEP> @JKillian that's because that's how the ES6 syntax works - `export default  <SEP> @weswigham  This is what I ended up with: https://github.com/JKillian/DefinitelyTyped/blob/react-day-picker/react-day-picker/react-day-picker.d.ts",What would be the right way to structure a typing file?
Summarization," <SEP> I'm really interested in something that will take TypeScript code and generate a reflection module that will allow you to test if an object implements a specific interface and the like. Has any work been done on this? Has this been proposed before? I'm quite sure that it has, but I can't find anything. <SEP> I never knew an interface could extend a class... <SEP> ``` class A {     getInt(): number {         return 4;     } } interface B extends A {  } class C implements B {     getInt(): number {         return NaN;     } } ``` <SEP> @AnyhowStep Yup. But it's one of those dangerous parts of TypeScript that you should be careful with. <SEP> A class can also `implement` another class as an interface <SEP> I think I've used it before when something I used as an interface was `declare class` in the typings of a library, and I wanted to extend the interface <SEP> Or something like that",is there a way to generate a reflection module that tests if an object implements?
Summarization," <SEP> hello does anyone here use yup? i have a type error when i add a custom test to yup ```   schema = Yup.object({                     'Ingreso': Yup.number().nullable().required('Debe ingresar un numero')                         .integer('Debe ingresar un numero entero')                         .test('caracteres', 'El valor debe tener 20 caracteres o menos',                             (value: any, context: any) = <SEP> changing parameter types to (value:number, context:object) didn't help <SEP> `TestFunction`s only take one argument, the value <SEP> I'm not sure where you got `context` from? But according to the types, the context is passed through `this` instead <SEP> yeah the documentation seems not to match the types <SEP> ` (this: any, value: any) = <SEP> beware, the types could be out of date <SEP> since Yup doesn't provide it's own types <SEP> i thought yup themselves make their own type definition <SEP> original value is not in context type either <SEP> nope, `yup` types are crowd-sourced: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/yup/index.d.ts#L413 <SEP> typings for yup were last updated 12 days ago, so they should be fairly up-to-date. <SEP> i updated the typings but the originalValue property is not in the context <SEP> can i change the typings manually?","TestFunction only take one argument, the value "
Summarization," <SEP> Hi guys!We are going to use in our project Typescript and React,so I wanted to ask about preferred way to unit-test typescript based apps? <SEP> @ValeryLosik I must say that if you would not find preferred method for testing you are always have a nice option to compile your test files to js and test exactly them. <SEP> Works for me! <SEP> @idchlife thanks for the answer.Are you writing your tests using Typescript? <SEP> yes. because I'm testing services also. <SEP> Why not have types there? <SEP> @ValeryLosik afaik there's nothing ts-specific about unit tests. The main testing libraries ll have declaration files, so writing the tests in ts isn't an issue <SEP> @NaridaL  @idchlife  I need to explain,I have started to explore Jest,because of it easy setup and have wrote several tests,but recently noticed that it doesn't throw any typechecking error inside spec file or SUT file(for example const a:boolean = 'string') <SEP> IDE doesn't? Or are you running tsc on the command line? <SEP> @NaridaL command-line approach <SEP> tsconfig issue probably <SEP> Do your test files end with .ts? <SEP> yes,spec.ts <SEP> and you've included the directory? <SEP> you can call tsc with --listFiles to see if it's even reading the file. <SEP> @NaridaL as I understand,this is jest a issue https://github.com/facebook/jest/issues/2168 That's why I thinking about something else <SEP> @NaridaL   If  I am running tsc it produces an error,but jest is responsible for running tests and it doesn't handle errors comming out of tsc.",is there a preferred way to unit test typescript based apps?
Summarization," <SEP> Hi guys, can you help me ? <SEP> How I can use `ConstructorParameters <SEP> For example i have class ``` class Foo {     constructor(bar: string) {} }  type Args = ConstructorParameters <SEP> maybe `ConstructorParameters <SEP> @blemoine thanks a lot. 9 hours of coding affect my brains :) <SEP> i'm passing a private function to another class to call. is that against the spirit of private functions? <SEP> is it possble to access static propertry of class, insinde instance of this class, without referecing to class name? <SEP> something like `self::cBuildings`? <SEP> I need this because I want this logic in base class which I would like to extend and all classes wich would extend it should address to it's own static `cBuildings` <SEP> have the base types pass up the type you'd like to do static resolution off of? <SEP> ``` export class Building{  static cBuildings: number = 0  cost: number = 0  income: number = 0  outcome: number = 0  name: string = 'Building'  type: string = 'Building'   constructor(){   this.name = `${this.name}${++self.cBuildings}`    } }  export class GoldMine extends Building{  cost = 1000  income = 100  outcome = 5  name = 'GoldMine'  type = 'GoldMine' } ``` <SEP> here is I want ^^ instances of GoldMine should have it's own counter <SEP> but `self.cBuildings` is not working <SEP> what I can do is this.name = `${this.name}${++Building.cBuildings}`  but then GoldMine will share same counter <SEP> found a dirty hack for this - to create property on contructor itself",how to use ConstructorParameters?
Summarization, <SEP> was just talking about that yesterday.  I dont know how Id plug a fuzzer into what Ive got.  Also dont know whats good in JS fuzzers. <SEP> Sad: no emoji for  <SEP> unconvertable,how Id plug a fuzzer into what Ive got and whats good in JS fuzzers
Summarization, <SEP> Is there a shorthand for subtracting the properties in type B from A ? <SEP> This doesn't work... https://www.typescriptlang.org/play/#src=interface%20A%20%7B%0D%0A%09x%3A%20number%0D%0A%09y%3A%20number%0D%0A%7D%0D%0A%0D%0Ainterface%20B%20%7B%0D%0A%09y%3A%20number%0D%0A%7D%0D%0A%0D%0Atype%20C%20%3D%20Exclude%3CA%2C%20B%3E%0D%0A%0D%0Alet%20c%3A%20C%20%3D%20%7B%20x%3A%201%20%7D%0D%0A <SEP> Or any way to do that... I can't seem to find an example <SEP> ah <SEP>     type C = {          <SEP>  interface A {   (): number   (n: number): void  }   interface B {   (n: number): void  },is there a shorthand for subtracting the properties in type B from A?
Summarization," <SEP> ^ <SEP> so even though your var is declared in your for loop, it's actually as if you had declared it at the top of your function <SEP> outside of the for loop <SEP> ok i got it. so i have to use more let i my code (when i am want the vars to reside in the blocks) <SEP> you should aim to always use `let` and `const` <SEP> ehh <SEP> and just don't use `var` anymore <SEP> I suppose so ya as general advice <SEP> i was programming c# before and thats was a bit confusing for me <SEP> const is a read only let ? <SEP> right <SEP> ""sort of"" <SEP> or is it global? <SEP> you cannot reassign a const <SEP> but the object in const is still mutable <SEP> ok <SEP> it's not global <SEP> you just can't use a const on the left side of an equal more than once <SEP> ``` const x = 5 x = 6 // not allows  const foo = { x: 5 } foo.x = 5 // allowed ``` <SEP> so it's not composite const or immutability, just the binding to the name ""x"" itself <SEP> @stevekane yep <SEP> @dtabuenc i don't think the keyof operator is very smart :/ <SEP> I've been battling this shit for days now <SEP> is it possible to extend a class from an other module? i am looking for a way to seperate my lib <SEP> ``` type Block <SEP>  @FloMaetschke_twitter  nothing like partial classes no <SEP> only statics you could add <SEP> much of this is noise, but focus on the forObj and forPair definitions <SEP> this SHOULD work <SEP> but it does not <SEP> sorry, i no longer mean partial classes, that was just an idea i got from old c# days <SEP> partial classes were a bad idea in c# anyways... <SEP> i want to say in my app.   var x = new MyClass();   i can do x.doSomething();   but when importing an addionaly sub module i could also do x.doExtraStuff(); <SEP> it is but it will be hacky to do that in typescript",what is the difference between 'let' and 'const'?
Summarization," <SEP> how do I type stuff like this <SEP> ```js function foo(a,b) {   // stuff } foo.prototype.Bar = function bar() {    // ... } ``` <SEP> I'm referring to typing foo <SEP> no I'm rewriting to ts the `unified` library <SEP> and it's full of prototype based patterns <SEP> I solved it like this in the end @webstrand <SEP> no I can't <SEP> the implementation of `Foo` is up to the consumer of the library <SEP> ```ts interface ParserInterface {   parse: () = <SEP> I handled it like that for the time being <SEP> that will be my next step <SEP> atm I'm aiming at 100% compliance with the original tests <SEP> I'll break the api later <SEP> the author of fp-ts told me I was going through much work and said I should've just wrapped the lib",how to type prototype based patterns
Summarization," <SEP> Hey, is there any option to validate type of index?  ``` let foo:{  <SEP> I want to allow only numbers as indexes/keys. <SEP> ```ts let foo:{  <SEP> @Gerrit0  Thanks, I needed to check noImplicitAny option as well to get error. <SEP> Yea, that should always be on anyways <SEP> ok",is there any way to validate type of index?  
Summarization," <SEP> @NaridaL thank you very much! Reflect design keys for typescript is not documented anywhere? desigh:returntype etc <SEP> Those are defined by reflect-metadata which isn't part of typescript but a general proposal. <SEP> https://rbuckton.github.io/reflect-metadata/ <SEP> And `    console.log(Reflect.getMetadataKeys(clazz, methodName));` will tell you what's available anyways. <SEP> I'm actually fascinated <SEP> So they want to add types to JS I know it <SEP> But I didn't know it gone that far into types <SEP> See also https://github.com/Microsoft/TypeScript/pull/2589 for more details <SEP> thanks @westonpace <SEP> @idchlife Check this out :D https://www.npmjs.com/package/runtime-type-checks <SEP> Yeah, idea is nice but package as I see is outdated <SEP> Working runtime type checks exist for FlowType <SEP> But they were buggy year ago <SEP> Like it could've changed your scope or did not add scope at all etc <SEP> Basically making it not usable <SEP> https://github.com/pleerock/class-validator  there this and other libraries from @pleerock they can give injections, type checks etc <SEP> But basically runtime type checks for typescript are as good as dead <SEP> And I don't actually know is it for better or worse <SEP> proposals and issues are raised several times every year <SEP> but they die because TS have different philosophy. <SEP> I'm wondering why not add like separate dev team for this case. But again, why bother if there might be actually type check in JS sometime in future <SEP> again, a man can dream. <SEP> also, there is elm, which does look promising <SEP> there is no ""any"" type. but again, I'm afraid it will have the same outcome as dartlang had <SEP> because working with js modules requires them to be elm or at least elm compatible (which is hard to achieve)",'reflect-metadata' design keys for typescript is not documented
Summarization," <SEP> usually you publish the types alongside the JS in an npm package.  That gives consumers everything they need to use your package. <SEP> I see <SEP> I was asking because I noticed that there's a `types` key that can be used `package.json` files and it often points to `entrypoint.d.ts` <SEP> the trouble is when I compile my typescript project I get a declaration file for each module and wasn't sure If they should be explicitly exposed <SEP> but if it's all handled by npm then it's all good I guess :smile: <SEP> yeah so the types are usually emitted alongside the JS <SEP> if you set the `""main""` key or whatever it's called it will probably just work <SEP> yeah I think I just have `""main"": ""dist""` in some of my packages <SEP> with all my top-level stuff named `index.ts|js|d.ts`",is there a way to expose the types in npm packages?
Summarization," <SEP> I dont understand why that fixes it but good that you got it fixed :smiley: <SEP> Thats a much more sane build time <SEP> @LuisAverhoff I think there's probably some disconnect somewhere, allowing typescript to infer the generic type of `ContentList` resolves the issue: https://stackblitz.com/edit/react-ts-rm9e6f <SEP> @kungfooman it looks like you have no-implicit-any turned on. The `lol` property is picked up because of declaration merging, but you'll need to define types for the functions at the functions, something like this should work: ```ts /**  * @param {any} type  * @param {any} time   * @param {any} value   */ function AnimationKeyable(type, time, value) {     this.init(type, time, value) }  /**  * @param {any} type  * @param {any} time  * @param {any} value  */ AnimationKeyable.prototype.init = function (type, time, value) {     // Todo } ``` <SEP> @SalathielGenese I think your decorator issue might be a TS bug/limitation. Even setting `target` to be the nonsensical `number` allows compilation to complete without errors. <SEP> @fatcerberus There was an open pull request, so I had to implement those changes manually and force webpack to use that version of the loader instead of the one installed from NPM. The core issue was that webpack loaders are _supposed_ to be stateless, which meant that the loader had to re-create the typescript program for each file being linted - because by convention they weren't supposed to share the program between calls.  That's dumb, and expensive. The first iteration of the solution was to cache the program in the webpack instance. This broke linting with webpack --watch, which is really important for dev builds. It caused the first linting results to get reported over and over again. The fix for that was to cache the program per webpack instance, with a plugin that listens for the ""done"" event and clears that cache. <SEP> Thanks you for have taken a look @Gerrit0. I think I will be forced to set time to look at TypeScript compiler and play with it until I know how to add features to it. <SEP> @SalathielGenese I also spent some time trying to make the writable check work... doesn't look like it's possible.  ```ts type WithReadonly = { readonly prop: string } type WithoutReadonly = { prop: string } type Result = WithReadonly extends WithoutReadonly ? true : false // = <SEP> Actually, nevermind <SEP> I should have googled first",typescript inference of ContentList doesn't seem to work
Summarization," <SEP>  Anyone with typescript, vue and requirejs experience? Can't load vue module. ```javascript declare var require: any; require.config({     paths: {         ""knockout"": ""bower_components/knockout/dist/knockout"",         ""vue"": ""bower_components/vue/dist/vue"",     }, }); ```  I loaded in knockout, since I'm familiar with it and just starting off with vue,  just to see if I was going crazy... I'm not. ```javascript import * as ko from ""knockout""    //this works import Vue from ""vue""                 // <SEP> does vue include types in the npm packages or do you have @types/vue installed? <SEP> your problem is not related to requirejs <SEP> if you can't find a module it's usually a missing d.ts file <SEP> Likely you need to do `import * as Vue from vue`, or better yet, stay with the old way `import Vue = require(vue)` if you are not targeting es6 <SEP> I tried installing @types/vue but it reutnred that vue already had its own types <SEP> i tried import * as Vue from 'vue' (same result) <SEP> ill try the other way <SEP> i see bower_components/vue/types/index.d.ts, vue.d.ts etc.. <SEP> you'r not using npm? <SEP> does typescript need to be made aware of this path somewhere <SEP> that's why <SEP> why don't you use npm? <SEP> just `npm install vue` <SEP> instead of bower <SEP> then `import * as Vue from 'vue'` <SEP> or `import Vue = require('vue')` <SEP> i try to keep npm to toolchain packages and bower to packages that the front end needs <SEP> # latest stable $ bower install vue  ^from vue's website on how to install <SEP> you are making your life very difficult with typescript <SEP> that will load global <SEP> you can use path mapping <SEP> hmm.. what about the performance cost <SEP> nodes modules loading system is hierarchical, sometimes modules will load twice <SEP> ""Bower is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree (size heavy) while Bower requires a flat dependency tree (puts the burden of dependency resolution on the user). A nested dependency tree means that your dependencies can have their own dependencies which can have their own, and so on. This is really great on the server where you don't have to care much about space and latency. It lets you not have to care about dependency conflicts as all your dependencies use e.g. their own version of Underscore. This obviously doesn't work that well on the front-end. Imagine a site having to download three copies of jQuery. The reason many projects use both is that they use Bower for front-end packages and npm for developer tools like Yeoman, Grunt, Gulp, JSHint, CoffeeScript, etc. All package managers have many downsides. You just have to pick which you can live with."" <SEP> ^not my quote, just what ive learned, put into better words than me <SEP> so no more bower for me lol <SEP> good to know, thank you! <SEP> nope",can't load vue module ( typescript + vue + requirejs )
Summarization," <SEP> Hey all, anyone have experience with Validator.ts? <SEP> @JKillian Thank you!! My internet was down and now I can respone :D <SEP> @ravi-mone you can use arrow functions, which doesn't create a `this`",how to use Validator.ts?
Summarization, <SEP> @wolfgang42 like this https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/lodash/index.d.ts#L10249 <SEP> @brittanyrutherford making progress at least? <SEP> how can I see the unused css in my page?,how can i see the unused css in my page?
Summarization," <SEP> k, can we see `_matchAllQueryTerms`  and `TaggableInterface` as well?  To be honest, grabbing at straws here :confused: <SEP> cuz that looks right to me too <SEP> well, easy enough to try. Does the code transpile if the inputs are all string <SEP> where the TaggableInterface question is probably the more intesting one to answer",can we see '_matchAllQueryTerms' and 'TaggableInterface' as well?
Summarization," <SEP> Like LINQ syntax? <SEP> or the library itself <SEP> There hasn't been a proposal yet <SEP> and generally we try not to create new expression-level synax unless it's part of upcoming versions of JavaScript <SEP> let x = from customer in customers where customer.State == ""Washington""; <SEP> There *was* a proposal for array comprehensions in ECMAScript <SEP> https://github.com/Microsoft/TypeScript/issues/4666 <SEP> http://wiki.ecmascript.org/doku.php?id=harmony%3aarray_comprehensions <SEP> They were going to be in ES2015, but they were dropped a little over a year ago <SEP> Hi @DanielRosenwasser , is this a spec? #6160 <SEP> I understand that you want to be faithful to the propsed future of JavaScript.  But it might be very interesting for MS to add some compelling features to TypeScript that everyone would want to use.  Linq would certainly be that.  It might force the slowpokes working on ECMAScript to think a little harder about the future.  Just my 2 cents.... <SEP> I get that perspective, but if it turns out that the committee did decide to adopt the feature, but picked even a slightly different syntax, that would put us in an extremely bad position <SEP> I was looking at that @falsandtru, I don't see specifically in the TypeScript spec where signature merging occurs for union types <SEP> I understand.  But still... :) <SEP> I know, new syntax is awesome :smiley_cat: <SEP> I completely get it <SEP> but that's why we can't proceed with things like #16 <SEP> Darn, I'm totally for #16. But it makes sense to stay consistent with ES",is there a proposal for array comprehensions in ECMAScript?
Summarization," <SEP> I can refactor any boolean function into a one-liner <SEP> `return true;` <SEP> No, thats weak sauce.  It cant return true all the time. ```js const booleanFun = () = <SEP> Although that seems like it would have too nice of a distributions <SEP> Maybe `Math.random()  <SEP> Think fast - do they have the same distribution (assuming random actually is)? <SEP> Hmm... my first instinct is no... but probably yes? <SEP> I dont know.  But it seems like a fun question. <SEP> also assuming that first function was 50/50 true/false, which I dont think it is because random is  <SEP> I had to figure that out a while back... I don't remember now though <SEP> 0, 1) is correct though, it excludes 1.0 <SEP> yeah I just wasnt sure if Id gotten the symbols mixed up. <SEP> https://github.com/fatcerberus/minisphere/blob/master/assets/system/runtime/random.js#L43-L46 This is the code I wrote for boolean random <SEP> I think the logic I used to figure that out was * `0  <SEP> I pretty much never write yoda conditions.  Not sure why I did it there <SEP> Fun: ```js  <SEP> Hows that for a super efficient use of array methods <SEP> It took me a second to figure out you were using `map` to *populate* the array.  I got confused when I saw `Array(n)` and went ""...won't that make everything be undefined?"" <SEP> Yeah creating an array of n elements from a function in JS is something Id need to google still at this point.  That was the quickest thing off the top of my head. <SEP> I honestly think this behavior is pretty weird: ```js  <SEP> I understand the first one, `Array()` creates a sparse array and `map` skips over holes.  I guess the array iterator doesn't... <SEP> Yay more JS weirdness <SEP> So my crude proof for the random thing: each side of the comparison is equally likely to have each value in the range  <SEP> Dont make fun of me, Im not really good at probability. <SEP> I figured it was just because the probabilities *themselves* averaged out to 0.5 over a large number of samples <SEP> Kind of like, higher-order probability.  Or something. <SEP> But yeah, I wouldn't know where to start as far as formalizing that <SEP> Whats that sparse array look like?  `{ length: 5 }` or something?  I know  <SEP> Yeah, it's an array object with `{ length: 5 }`.  The index properties don't exist: ```  <SEP> Oh wow, this isnt really what I expected:  ```js  <SEP> Yeah it's called ""sparse"" because some of the indices don't actually exist as real properties <SEP> And yes directly assigning to an index will extend the array if it's not that big <SEP> yeah its kinda misleading (to my brain at least) that it can have a length and no indexes <SEP> That's why some people say JS arrays aren't really arrays :smile: <SEP> It's an object with some magical behavior to make it look like a dynamic array <SEP> Yeah Im not too worried about that gap in my knowledge, not likely that Ill be using that too much <SEP> In general I would avoid sparse arrays like the plague <SEP> A lot of spec algorithms (like `map`, `filter`, etc.) skip over the holes which is a pretty big footgun <SEP> but the random thing should be a simple integral assuming truly random distribution, aside from intuitive proofs <SEP> maybe  <SEP> I always thought that relating it to the physics of motion (position, velocity, acceleration) was the most intuitive thing for basic calculus.  I could see the basic relations on 2d plots, but the real world is more relatable. <SEP> This is so cool: https://www.wolframalpha.com/input/?i=integrate+1+-+x+dx+from+0+to+1 <SEP> and incidentally makes me feel pretty awesome that I said the right thing <SEP> My intuition is that for each _x_ in  <SEP> The test for your triangle thing is exactly `x  <SEP> One thing I really dont know about is different distributions for RNGs.  I assume you can do the same kind of analysis for those, that would be interesting. <SEP> Chi squared is the one that immediately springs to mind",super efficient use of array methods
Summarization, <SEP> when does `new Date(...)` ever return a string? <SEP> ```new Date(invalid)``` <SEP> maybe its just in a browser? <SEP> actually its an object <SEP> its an object but not a date <SEP> i think its an object with the toString set to return ,when does 'new Date(...)' ever return a string?
Summarization," <SEP> `schema-decorator` can handle nested arrays and objects and whatnot easily but I can see why you would shrink away <SEP> From having to write it <SEP> ts-transformer-keys you can actually use to solve you're problem it allows you to use an interface as if it exists at runtime <SEP> meaning you can just write code like this ``` interface Foo {    name: string; } ``` <SEP> But I need the type data too. <SEP> Not just the list of property names. <SEP> Heheh, all good. Just making sure I understood what it did. Thanks though. :)",'schema-decorator' can handle nested arrays and objects
Summarization," <SEP> Has anyone gotten the webstorm debugger to work with ts-node? <SEP> i can get mocha using it - but i cant get the primary webstorm debugger to run <SEP> it runs the app but fails to hit break points <SEP> @rightisleft Did you see this? https://github.com/TypeStrong/ts-node/issues/188 <SEP> Working with flawed declaration files drives me mad <SEP> It's so difficult to get TS to recognize it <SEP> Ok, merging works pretty well, even for minor differences in extends, which is pretty cool :-) <SEP> @rhalff I've been struggling with similar problems recently. <SEP> I ended up removing the @types/package_name dependency as well and copying its contents to my own custom `types/package_name/index.d.ts` dir and setting typeRoots to ` <SEP> I tried doing interface merging, but couldn't get it to work. <SEP> I would love it if the TS team took the time to document all these cases in a blog post or something. I know the handbook covers some of it. But most of the time it's not enough for me. <SEP> So you end up relying on trial and error. <SEP> @sgronblo my include is defined as `""include"":  <SEP> What kind of interface merging are you doing specifically? <SEP> I'm excited to hear about the experiences of somebody who has been struggling with the same stuff as me :) <SEP> Ok, so you wanna add the extends that brings in the NavigatorBatteryStatus attributes <SEP> Why is this code in TSJS-lib-generator though? <SEP> Isn't this something that gets added by some Cordova plugin? <SEP> The first problem I had was about a cordova plugin, the battery status thing was my next problem :) The battery api is non standard and the link I gave is from a revoked pull request but useful in my case. <SEP> Ah so the battery API is available in some mobile browsers then? <SEP> Maybe that should be packaged up into its own @types/mobile-api or something like that <SEP> It's only supported in chrome & chrome for android apparently... But I'm upgrading an old ionic app and converting to typescript. After that will see if using this battery api was a smart thing to do or not. <SEP> Anyway it sounds to me like this use case matches the ""Global plugin"" pattern described in the TS handbook: https://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-plugin-d-ts.html <SEP> https://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html#global-plugin",webstorm debugger doesn't work with ts-node
Summarization," <SEP> Is anyone interested in checking out some TypeScript enum utilities I'm working on and provide feedback? I'm seeking feedback about whether it seems like a convenient/useful utility, if there's any additional functionality I should add, etc. <SEP> Github link: https://github.com/UselessPickles/ts-enum-util <SEP> Reference documentation in the README is very incomplete, but the code itself is fully documented <SEP> @UselessPickles not to be a jerk, but i think TS provides most of the functionality already <SEP> keys - <SEP> or maybe i'm missing something related to the interfaces you specify below that <SEP> how so?  I'm not aware of a convenient way to do many of the things I implemented: reverse lookup the name of a string enum's value, get a list of all values of an enum (ignoring the reverse lookup entries that Typescript automatically ads to numeric enums), easily typeguard a plain number/string as an enum type, etc <SEP> Object.keys returns a list of string; my utility returns a list of string,iteral union type of exactly the possible enum keys. Object.keys will also return the numeric key entries of a numeric enum that are used for reverse lookups. <SEP> for reverse lookup, i'd recommend changing your example to not use a number enum <SEP> i haven't experienced the issue with numeric enums and keys/values mixed bc i don't use numeric enums. i just assumed they accounted for that. sorry <SEP> can you say more about this?  <SEP> afaict i don't see that in the examples <SEP> but the source code is extensively documented <SEP> typeguard example... <SEP> like I said; the README is very incomplete, the examples are not exhaustive, etc <SEP> well <SEP> now i will be a jerk <SEP> don't make me read your source code to evaluate the value of your lib <SEP> i hate having to read a library's source code to use that library <SEP> and for something i'm not being forced to use, it's an automatic disqualification <SEP> it's not so much reading source code, but looking at signatures of methods and reading the documentation of the methods/params basically the same exact thing I'll be replicating in the README <SEP> ```ts declare const value: string; if ($enum(MyStringEnum).isValue(value)) {     // type of 'value' is now 'MyStringEnum' } ``` <SEP> so it's either reading the source code or installing it and exploring it with intellisense <SEP> update your readme to be clear about the lib's value prop. that's how you get people to evaluate and adopt it <SEP> if the readme isn't demonstrating why i should use it, i'm going to stop looking and go back to what i was doing <SEP> yes that does sound valuable <SEP> i highly recommend you make your readme reflect the value <SEP> yup; work in progress <SEP> :thumbsup: <SEP> BTW - you examples of using bracket lookup rather than my `getKey` and `getKeyOrDefault` is backwards <SEP> bracket lookup looks up value by key <SEP> it also looks up by value <SEP> for numeric <SEP> right <SEP> which is the example your readme uses <SEP> catch-22 - I'd like to get feedback early on to avoid any major rework, but I need to invest in a full README writeup before I can get feedback :( <SEP> oh well; I'll try again in a few days",is there a convenient way to reverse lookup a string enum's value?
Summarization," <SEP> I believe its possible to specify a different directory as your type definition root, but its highly recommended to keep your .d.ts files next to your .js files <SEP> They can be in seperate directory <SEP> Well, I do want to keep `CSInterface.js` and `CSInterface.d.ts` together, since thats a 3rd-party library. But Id like to put them into a /lib folder, separate from the folder where I have `.ts` files which use them. <SEP> I feel like I just need to set something correctly in `webpack.config.js` and/or `tsconfig.json`, but I dont know what. Im so new to both of these technologies. <SEP> You don't need the js and d.ts if you have a TS file & webpack <SEP> Evidently I do. <SEP> Im getting errors when I move those two `CSInterface` files. <SEP> Let me make sure I understand. This CSInterface.js and CSInterface.d.ts are build artifacts of a CSInterface.ts you have within this project? If they are build artifacts and you are wanting to include them in a bundled webapp (via webpack) you can use a TypeScript file loader, such as `ts-loader` or `awesome-typescript-loader` for webpack, which will accept TS files rather than needing to include JS files. <SEP> No. <SEP> CSInterface.js is a library. It is provided by Adobe for making extensions using their Adobe CEP platform. <SEP> then it goes in node_modules? unless you're copying/pasting the source into your project? <SEP> in which case its seperate to where you have .ts files already <SEP> Unfortunately, Adobe does not make Adobe CEP nor CSInterface.js available via npm. <SEP> That doesn't seem to be his problem <SEP> I downloaded the CSInterface.js file and placed it into its own /lib folder, separate from my main folder where the `index.ts` and the compiled `index.js` files rea.",is it possible to specify a different type definition root directory for.d.ts files?
Summarization," <SEP> :P <SEP> Okay, just making sure <SEP> (Meant in a funny jokey reply, not angry) <SEP> I like the two-level generic you have going there :smile: <SEP> I just want it to give proper feedback for developers. <SEP> Sorry it took so long to get to the root of the issue <SEP> Nope, no problem. <SEP> ty for your very generous help! <SEP> n/p, always happy to help <SEP> Can a method inherit a type? <SEP> Not sure what you mean <SEP> Like can I just say:  <SEP> Because when I remove the ` <SEP> If I understand correctly: ```ts class Foo {     fooey(x: this): void; }  new Foo().fooey(new Foo()); ``` <SEP> Also works if the class is generic <SEP> This doesnt work: ``` class GPU <SEP> This works: ``` class GPU <SEP> Yeah, you need the latter because the type can vary on two axes (when the class is constructed, then again depending on the function the user passed) <SEP> In the former, `ArgT` is fixed at class construction <SEP> HOWEVER, you *could* do this with the former version: ```ts const gpu = new GPU <SEP> Your problem there was that `new GPU()` has no inference source for `ArgT`, but you can provide it explicitly <SEP> ""Overly complex, it is ",can a method inherit a type?
Summarization," <SEP> `Andreas Weinzierl` is it possible to use Map with a custom hash and equal function? <SEP> `Andreas Weinzierl` (The problem is that Map compares the objects by reference by default) <SEP> Not directly I dont think, but you could subclass it and use your own `set`/`get`/`has`/`delete`/etc. to do whatever youd like with your key before lookup. <SEP> Youd probably need to have it hold a separate internal mapping of keys  <SEP> ! <SEP> ! <SEP> Thats not how interfaces work. <SEP> Youre defining `IncrementEnthusiasm` as some object with the key `type` and value `constants.INCREMENT_ENTHUSIASM`. <SEP> What you want is something like `type IncrementEnthusiasm = constants.INCREMENT_ENTHUSIASM;` Id bet. <SEP> Right now your function `IncrementEnthusiasm` has the type `() = <SEP> Yeah, youll need to roll your own at least to some extent. `Map` just does ref checks by default, IIRC, so usually youd end up synthesizing some string key to work around that when you need to. <SEP> Ah, you also want the type inferred. <SEP> Well, you can do it with some gross generic + extends I guess. <SEP> Im sure theres a better option, but it escapes me. <SEP> Yeah, its still pretty limited. <SEP> Im not sure theres a way to get a totally generic inference here.",is it possible to use map with a custom hash and equal function?
Summarization," <SEP> Is there a way to ""patch"" typings for a module? i.e using declaration merging? <SEP> yes <SEP> Yes <SEP> :wave: Shanon <SEP> Can you use it to change the type of a parameter of a function of a class? <SEP> Change ? No.  Overload ? Sure <SEP> Replacing would be fine. The situation is <SEP>  A function of a class  Isn't that a method ? <SEP> I'm using `memfs`, which has a class `Volume`, which has this function:  ```     fromJSON(json: {          <SEP>   <SEP> I need to make that   I'm using `memfs`, which has a class `Volume`, which has this function:  ```     fromJSON(json: {          <SEP> Mmm... you may be able to change it using an interface that shares the name of the class <SEP> Ans it is bad design",is there a way to patch typings for a module?
Summarization," <SEP> Hi all, I'm updating an Angular project and started getting lint error due to one of my interfaces having a `type` property. I'm getting an error: `'type' is declared here.` so how could I disabled/fix this issue since my interface represents an object that **does** have the `type` property :/ <SEP> quote it, maybe? <SEP> Why would the linter complain about that <SEP> I had a bunch of other issues, and ended up fixing those and the error magically went away. :O <SEP> I guess the other issues made the linter trip up, pretty funky no doubt",lint error when using an interface with a type property
Summarization," <SEP> QA wise I cant remember what we did in terms of tooling there but we just had snapshot testing against our preferred rendered output. <SEP> mate i still write actual css, actual css is the only way to style things in the web <SEP> there is no alternative <SEP> Youre outputting to CSS but youre not actually *writing* CSS. <SEP> you are writing css",css is the only way to style things in the web
Summarization," <SEP> Hi, all! Could somebody point me webWorker example written in typeScript? <SEP> @NikitaPanteleev I know that vscode uses webworker for their stuff maybe look there under languages <SEP> @4k It helps getting rid of webpack due to taking care of async/await without webpack etc <SEP> @Z3roCoder do you mean Babel? <SEP> Ugh, yes. I meant babel. x.x <SEP> @Z3roCoder well then that is true, although babel offers a bit more than async/await.",is there any webWorker example written in typeScript?
Summarization, <SEP> Hi Folks is `typeRoots` option still supported ? <SEP> for whatever reason tsc seems to ignore that option for me <SEP> Nothings indicates it isn't in the compiler options <SEP> https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types <SEP> What practice do you guys use do map a database schema to typescript definition files? Do you do it at all?,is typeRoots option still supported?
Summarization," <SEP> let's say I have a project A with a dependency on package B I also have a project C which reexports type declarations for package B how can I get my compiler to use the types from C when including C as a devDependency of A? <SEP> @yorhodes So A imports B and C, where C is devDependency. Both B and C have types with the same names, and you want to use the ones from C?  If I'm understanding that correctly, you can import the types directly from the appropriate package.  ie. `import { MyType1 } from 'package-C'` <SEP> hmm right okay but it's a bit more complicated suppose that A is actually A1, A2, and A3 and they have dependencies on each other C redeclares all of these modules and ideally B can `import { x } from A1` and the types will resolve to C's declarations even in the nested dependency case <SEP> I know if I have C locally I can use the `compilerOptions.typeRoots` to specify a relative path to C if C wasn't ""local"" but was listed as a devDependency, how could I get the same behavior?",how do i get my compiler to use the types from a redeclarated module
Summarization," <SEP> Is there way to also trigger duplicate identifier when Im using keys as Enum? <SEP> Clarify please? <SEP> yep <SEP> @webstrand yep, but I little bit do not care about this issue in runtime :D... thanks :)",is there a way to trigger duplicate identifier when using keys as Enum?
Summarization," <SEP> ? <SEP> example, I'm implementing an Entity Component System for a game engine <SEP> not oop -- data driven --  just using classes to enforce object shapes, hence object oriented design pattern <SEP> FWIW `abstract static` I agree with - `static` methods on interfaces dont make any sense to me though since an interface describes an object, not a class <SEP> You dont need to have a class to use interfaces <SEP> @keithlayne  JS is prototypical and dynamic OO !!! <SEP> exactly <SEP> prototypal inheritance != OO <SEP> prototypical inheritance is a flavor of OO <SEP> @keithlayne the GOF disagrees with you <SEP> https://en.wikipedia.org/wiki/Prototype-based_programming   <SEP> Either way, It also has first class functions so it facilitates functional style too - its pointless to argue what paradigm JS best exemplifies since its multi-paradigm <SEP> I'd rather not argue that either. It's well suited in both realms <SEP> I was gonna say the dogmatic adherance to design patterns is the worst thing about the OO community.  I read the GOF book 20 years ago and thought it was awesome.  But it spawned a disturbing cult. <SEP> Also nobody can agree on what the different paradigms mean anyway so no sense arguing about that either <SEP> the problem is saying ""Yeah I dont see OO as a wonderful thing, and I dont think it fits JS particularly well."" is just as dogmatic <SEP> but anyways, thanks guys! helped me talk through it <SEP> I didnt mean it as such. <SEP> I think it fits fine in a lot of cases but I see a lot of people shoehorning OO into designs that are probably more complicated that way. <SEP> unconvertable <SEP> Everyone sees things differently",static methods on interfaces dont make sense fatcerberus
Summarization," <SEP> Given a type that is an array of objects, how do I create a new type that is an object, where the keys are values of a specific property in the array objects, and the values of the object are the type of one of the object generics.  With JS code, it would look like this: ``` const obj = arr.reduce((acc, element) = <SEP> Thats why I was against null coalescencing - I wanted undefined coalescing instead <SEP> Why not both? <SEP> Like have it coalesce both. <SEP> It does do both <SEP> And my point was that *because* it does both, these two functions are now not equivalent: ```ts function foo1(arg = 1) { bar(arg); } function foo2(arg) { bar(arg ?? 1); } ``` <SEP> Which seems like a recipe for surprises <SEP> Ah. Isn't that one of the reasons the TS team opts to use undefined by default and then only use null sparingly? <SEP> would prefer to use explicit `null` as much as possible, but there's the presence thing. <SEP> or, could we have just one null please? <SEP> @keithlayne Silly rabbit, sanity is for kids! <SEP> mmmmm...cereal <SEP> Not gonna lie, the null and undefined thing has been useful to me for my library <SEP> Values from database are always `null` or some value. Never `undefined` <SEP> It leads to this convenient `fetchValueOrUndefined()` function. <SEP> So, if it fetches `undefined`, you know no rows were found with the value. Otherwise, it fetched a value or null <SEP> If we only had one kind of `null`, missing properties would be regarded as `null` <SEP> Then update statements would be harder to write an API for <SEP> Can't do `obj.column` because it could be intentionally null, `{ column : null }`, or unintentionally null, `{}` <SEP> Gotta do `""column"" in obj` to determine if the `null` from `obj.column` is intentional or not <SEP> I believe that will do the trick.",how do you create a new type based on an array of objects?
Summarization," <SEP> It is wise to focus on fundamentals, then pick a framework and learn how to use and, and more importantly how it works. <SEP> a lot of it just comes with experience <SEP> yeah, I watched couple of courses on pluralsight for Angular <SEP> @brittanyrutherford Is there a concrete project you're trying to make? That's the basis for choosing what technolgies to use^^. <SEP> and am asked to study typescript <SEP> but other than that, I don't master any framework <SEP> @NaridaL for example, I wanted to build a blog for myself, just to throw things there for fun <SEP> something like mini wordpress <SEP> Like I see a lot of the react people obsessed with stuf like flux and  redux and thinking it's like some magical new way for all the things... and largely creating much more complex architectures than they need to because they don't really fully understand the cost/benefits of what they are doing... they are just following latest trends/blogs <SEP> I think that learning is very well coupled with dedication. I once wanted to master Symfony2 (php). So I had a train ride for like 4 days. I had notebook, power and no internet. But I had symfony2 source on computer. And very strong will to learn it and learn how good code is written (I know it's subjective but hey, I used globals and another shit at the time). So I was sitting and reading all the source code. I must say - reading source code may be not the best way to pump your skills. But for me it was a deal breaker.  Also, projects. I mean like todo, email app, hell even small social network in chosen language/framework - and you are already raising your skills. In spare time of course <SEP> so I was learning express/mongodb <SEP> there's a lot of groupthing and echo-chamber.... <SEP> it takes a lot of experience to be a ble to decypher through the noise <SEP> @dtabuenc good words. Too much noise nowadays. And some media-targeted devs are not helping <SEP> dont' focus on learning technologies <SEP> technologies come and go... focus on solving problems, creating things.. <SEP> then go search for technology that might help you solve that specific problem or create that thing <SEP> but creating things requires knowing technologies <SEP> OK, here's the thing <SEP> I want to create a blog for me for example <SEP> where there's authentication (I know I can use passport.js ) .. mongoDB <SEP> but the UI <SEP> pick one <SEP> and learn it <SEP> how do I know which one to pick? <SEP> am now at the ""make a decision"" point <SEP> pick one <SEP> based on what <SEP> look through <SEP> read docs <SEP> they all are <SEP> Angular = single page app <SEP> your case is simple <SEP> angular can be single page or not single page <SEP> really? <SEP> :S <SEP> react can be single page <SEP> Hey guys, won't it be neat at first to try build on clean js? To distinguish which is front and which is back? <SEP> And what is needed at front? <SEP> Learn about SOLID <SEP> the only part of angular that makes it single-page app is the router <SEP> SOLID? <SEP> https://en.wikipedia.org/wiki/SOLID_(object-oriented_design) <SEP> the only solid I know is border: 1px black solid :joy: <SEP> SOLID is a bit over-sold IMO <SEP> if you just follow the ""S"" (Single responsibility principle)  your 90% of the way there <SEP> It is, but the understanding it is important. <SEP> hmm <SEP> okay <SEP> thanks @unional :) <SEP> SOL are the most important. <SEP> then I ask... tell me an example when you've used ""Liskov substitution"" <SEP> or ""open-closed"" <SEP> During interview most candidate doesnt even know what is SOLID...","focusing on fundamentals, then picking a framework and learning how it works"
Summarization," <SEP> ahh directional <SEP> so if `never` leaks, I usually get errors, because I can't assign anything to it. <SEP> and so  <SEP> `any` can be thought of as approximately top and bottom simultaneously, but in practice it's just the ""shut up, typescript"" type <SEP> lucky for us there are no `any`s in the lib.d.ts :trolleybus: <SEP> :eyes: that's not true... <SEP> Hence the :trolleybus: <SEP> `unknown` is like your `Object` in the java ""everything everything is an Object"" model <SEP> what about primitive types, I was sure java had things like `int` which weren't objects? <SEP> everything's an object, but kinda useless because you can't do much with it. Except may `toString` it or something. <SEP> it's been a long time... <SEP> I never used java and never had any interest in it either <SEP> java is like dart in that even primitives are objets <SEP> it's got some cool ideas. it's not all bad <SEP> but you're all about C#, its redneck cousin <SEP> but a lot of typing. <SEP> need an IDE or you'll get RSI <SEP> I mean there are primitives, but it really wants to box them <SEP> still would take kotlin over java any day though",how about primitive types like unknown and fatcerberus
Summarization," <SEP>  just thought I'd ask a non-TS question here.  So, I compiled some TS. And decided to run the JS with `node`. The compiled JS looks something like this,  ```ts const x = require(""../folder""); console.log(x); ```  `x` is not supposed to be an empty object but it is, for some reason.  -----  When I change it to this,  ```ts const x = require(""../folder/index""); console.log(x); ```  It works and `x` is non-empty.  I just checked and I'm pretty sure I don't have any circular dependencies. <SEP> _10 things I regret about Node.js_, **Ryan Dahl** <SEP> Maybe Ryan finally undertook action about his regrets ?! <SEP> @SalathielGenese that think to remove time from date dont seems to work <SEP> Agh. I fucked up. I needed to just delete my `dist` folder and rebuild. <SEP> I forgot I had a `country.ts` file before. And it was large. So, I refactored it to a `country` folder with `country/index.ts` and other files.  But I didn't delete the `dist` folder <SEP> So, the `dist` folder had the `country.ts` file and `country` folder. <SEP> `country.js`* <SEP> So, when I called `require()`, it was loading `country.js` because I hadn't deleted it. -___- <SEP> @qnapek_twitter <SEP> ! <SEP> ! <SEP> I should have remembered to delete `dist` after moving files around. Been a while since I used `node` directly instead of `ts-node`. <SEP> Shit, that was timezone. When i setting time to 00:00 timezone shit moves datepicker one day before <SEP> so yeah it works <SEP> kind of <SEP> Could you just call `.setHours`, `.setMinutes`, `.setSeconds`, and `.setMilliseconds`?",why doesn't node work with circular dependencies?
Summarization," <SEP> Hi, I experienced a weird behavior in the type checker. I wanted to know the reason behind it. Here is the playground sample: https://bit.ly/2FNm1yM Would you please take a look? <SEP> Thanks  @Gerrit0 , but how do I make it a tuple? And why it works when I call `arg` with the object literal and not when the same literal is defined as a variable? <SEP> Oh, cool. Yes it worked :) Thanks  @Gerrit0 <SEP> I don't know. This is the official type definition of `arg` library: https://github.com/zeit/arg/blob/master/index.d.ts",how to make arg a tuple in arg checker?
Summarization," <SEP> https://mobile.twitter.com/luotojesse/status/1373405056675016711 <SEP> kek <SEP> anything to get through firewalls. Lots of requests to gitter won't show up as odd to any administrator <SEP> How does one go about writing ALL the code? <SEP> Someone told me it requires an infinite number of monkeys and typewriters <SEP> monkeys are obsolete, it's all GPUs now. If you think about it, that's basically what bitcoin is. Millions of monkeys typing away on virtual typewriters, in search of proofs. <SEP> I still dont get cryptocurrency.  Why is it actually worth anything? <SEP> I mean, cold <SEP> hard cash isnt either but its backed by a government <SEP> I mean, the government can print as much of that cold hard cash as they want to, and no one can stop them. <SEP> cryptocurrency, at least in theory, prevents such a runaway. <SEP> All money is, is a medium to transfer future value. I earn money in exchange for my time and effort, so that I can delay actually being rewarded for my time and effort. <SEP> people think bitcoin has value only because other people think bitcoin has value. Their shared belief is founded in the knowledge that nobody can just print bitcoins <SEP> True, although in the case of bitcoin, the computer is putting in the effort for you which seems to throw off the balance <SEP> That's not actually the value of the system. The effort the computer puts in has no relation to the value of bitcoin. <SEP> the only value that contributes is to make it infeasible for someone to print as much bitcoin as they want <SEP> That's why a lot of people are lamenting the energy costs of bitcoin mining. <SEP> Ah <SEP> But you're right, in the end. Bitcoin only has value because people think it does. <SEP> And money is only as valueable as what you can trade it for. <SEP> Which in a free market is  <SEP> Its all relative <SEP> yeah. That's why there are tonnes of people who make money off of arbitrage between different fungible mediums <SEP> thankfully, people can only communicate so fast, so our money doesn't devalue overnight. <SEP> Yeah, that makes sense <SEP> Its amazing how much intrinsic value is to be found in pure mathematics.  My revelations about the nature of identity the past few months are rooted in category theory, for instance",why doesn't it require an infinite number of monkeys to write the code
Summarization," <SEP> its a really good point <SEP> I guess Im always focused on this <SEP> holy batman <SEP> yes, the object literal with the keys was faster <SEP> that is a bit scary for me <SEP> just gets rid of the lower level functions?",why is the object literal faster than the object literal with the keys?
Summarization," <SEP> I really don't grok ""unknown"". I feel like an API response is technically unknown until run through a type guard, but I can't figure out what crazy stuff I need to check to get to the point where I can start validating fields in it are right. Is there a best practice set of checks to effectively get from unknown to any? Currently I do something like  ``` function isMyType(arg: unknown): arg is MyType {   if (!arg || !(typeof arg == 'object') || arg == null) return false;    //I want to check existence and validity of required fields here }``` Is it just that I need to add something like `let objArg = arg as any;` after that first line? Are there things I'm missing before it's actually reasonable to do so? <SEP> If you start needing to validate fields for API requests/responses and whatnot, you're better off using a dedicated library for it, in my opinion. <SEP> Or just some boilerplate <SEP> Try something like this,  <SEP> ```ts  interface MyType {     x : number,     y : string,     z : boolean, }  function isMyType(arg: unknown): arg is MyType {   if (!isObjectWithOwnEnumerableKeys <SEP> `isObjectWithOwnEnumerableKeys()` is some lame boilerplate function I wrote <SEP> You can modify it to suit your needs <SEP> You can also narrow to a class type by using `instanceof` <SEP> I can't be the only one who finds that a bit... esoteric? Are there good libraries for validating untrusted data at the edge? Though I appreciate the example, I can probably work with this if needed. <SEP> io-ts comes to mind <SEP> If you're more adventurous and wanna' try something not as well known, https://github.com/anyhowstep/type-mapping  (Disclaimer, I wrote this) <SEP> But definitely check out https://github.com/gcanti/io-ts <SEP> Appreciate it! Thanks <SEP> there's other stuff like https://github.com/epoberezkin/ajv, https://github.com/hapijs/joi, https://github.com/pelotom/runtypes <SEP> runtypes is another decent one <SEP> runtypes comes with https://github.com/hmil/rest.ts <SEP> Which uses axios and express wrappers to give you type-safe API clients and servers <SEP> Thanks both. In my case I'm building a webapp that is embedded into another webapp, and which fetches data from external APIs at runtime, so I think I'm going to go the lightestweight approach with boilerplate like AnyhowStep first recommended",is there a best practice set of checks to effectively get from unknown to any?
Summarization," <SEP> which is pretty much how the `this` type works under the hood <SEP> It secretly makes the function generic <SEP> then hides it from you <SEP> I only remember that because of this comment by Ryan: https://github.com/microsoft/TypeScript/issues/36803#issuecomment-589872912  <SEP> Also that comment is way more recent than I remember.  I thought I first saw it last year in 2019, but it was clearly posted in february of this year...",how does the this type works under the hood?
Summarization," <SEP> Does anyone have any idea why TS would fail with TS2349 on the following example:  ``` function test <SEP> You need to add `isDebug` as a property in your class:  ``` class Queue {   isDebug: boolean; } ```  @glitchperfect <SEP> Oh, found this in TS docs, regarding my issue: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#narrowing-functions-now-intersects--object-and-unconstrained-generic-type-parameters  It's intended behaviour.",Does anyone have any idea why TS would fail with TS2349 on the following example:  function test 
Summarization," <SEP> @ShawnTalbert thanks coz I can't get it working https://jsfiddle.net/15kw1L7c/ maybe you guys can help here <SEP> as long as your target browsers are accurately described by your tsconfig you should be OK <SEP> if you want newer libs on older browsers you will need to polyfill <SEP> @ShawnTalbert what i expect is have multi inheritence I mean have multi class implements with default value on properties/method <SEP> @dwickern Thanks a lot for the information. <SEP> @istiti You're completely missing the ""Mixin"" part of the example, i.e. the applyMixin function <SEP> what you're doing now is just using disposable as an interface <SEP> @istiti  you might want to look at the 'improved' support for mixins from TS 2.2 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html and see if it suits your needs <SEP> Okay this is really bizarre... I'm going to chalk this up to `yarn` doing something odd.  By simply removing and re-adding `@types/sinon-chai` as a dependency,  everything magically worked.  My `package.json` didn't change, nor did my `yarn.lock`... <SEP> I'm wondering if I ran some command incorrectly after bumping a version in my package.json... <SEP> Sorry if I'm spamming folks with theorizing, hopefully it will help someone else <SEP> to confirm @tstackhouse, you no longer suspect import ordering to be the problem? <SEP> I do not.  I tested it in isolation and it seemed to be the case, but broadening to my whole project did not bear that suspicion out <SEP> great. I'd hate to have to start thinking import ordering was crucial <SEP> I suspect it was something with the way `yarn` handled dependencies, and something may have gotten wires crossed after I bumped a version in `package.json` and ran a `yarn install`.  It's possible that I should have ran `yarn upgrade` instead. <SEP> perhaps you should have run `npm` :) <SEP> @NaridaL thanks to point me that cant we in a way avoid it? You mean my example missing only appyMixin to get working? <SEP> no <SEP> and yes <SEP> @ShawnTalbert hm you doc little bit out of scope for me <SEP> copy your code to the typescript playground to see what it gets compiled to.. <SEP> And cant ts appyit automaticslly? <SEP> no <SEP> that approach to mixins isn't built into the language -  the `applyMixin` is just javascript <SEP> Please applogises me im writing from smartphone <SEP> @NaridaL why no? What are motivations? <SEP> I recommend you look towards using class based mixins per the doc I linked as they use plain language features only, and are a superior design architecturally <SEP> Yes ok will read <SEP>  perhaps you should have run `npm` :)  That one's out of my hands ;) <SEP> hah, yeah sorry.. that's just me lashing out at the 'yet another tool' syndrome that dominates JS land <SEP> I hear ya.  tbh I kind of like yarn on the whole, seems to be a bit more efficient in some respects",multi inheritence and 'applyMixin'support for tsconfig
Summarization, <SEP> Does anyone know how to setup vs code so that you can reuse a module? For example my first project compiles to a 'foo.d.ts` but I don't know how to ```import {something} from 'foo'``` in my second project <SEP> if I reference it: ```///  <SEP> and I cannot have a quoted-name ambient declaration in my original foo.ts either... so what to do?,how do you setup vs code so that you can reuse a module?
Summarization," <SEP> I don't think I've ever needed Monads Bruce <SEP> LINQ is useful <SEP> aka, the subset of monads that deals with collections of things and being able to write one interface for all of em <SEP> My conclusion: monads are a religion <SEP> @fatcerberus you use monads all the time too, dont forget <SEP> I find it very rare to have a value come in and I don't know whether it's a list or a maybe <SEP> Im confused again... you said you never needed them",is there a reason why you never needed monads?
Summarization, <SEP> @AnyhowStep Okay what the heck changed in TS 3.7 that broke `Promise.all` inference?  There seems to be a new issue about it every few hours <SEP> AFAIK they didn't change the signature(s) <SEP> **shrug** <SEP> I just find workarounds <SEP> I don't find causes =x <SEP> Let's wait for the TS team to do that fancy bisect thing and figure out which commit is at fault,what changed in TS 3.7 that broke Promise.all inference?
Summarization," <SEP> import * as shopifyAPI from 'shopify-node-api'; <SEP> I just need that <SEP> last night I started playing around with its functions so I have to much stuff yet <SEP> yeah it is server side node <SEP> thank you ! <SEP> there is another Shopify api module ```shopify-node-api``` which I can import, but its features are less appealing to me <SEP> so it must be something how the module was written",how to import as shopifyAPI from'shopify-node-api
Summarization," <SEP> Hey everyone! Can somebody tell me how to give another directory for the tsc to look for definition files? <SEP> has anyone successfully used react-toolbox using webpack 3.x config by any chance? <SEP> I kind of know I need this PostCSS plugin, but I can't seem to make it work :/  ```  is not a PostCSS plugin     at Processor.normalize (C:\poc\web\Dashboard\node_modules\postcss\lib\processor.es6:114:23)     at new Processor (C:\poc\web\Dashboard\node_modules\postcss\lib\processor.es6:35:29)     at Object.postcss (C:\poc\web\Dashboard\node_modules\postcss\lib\postcss.es6:34:12) ``` <SEP> Did not help unfortunately so I'll bother Angular people <SEP> @jsyd Try adding it to typeRoots in your tsconfig.json. <SEP> ``` {   ""compilerOptions"": {      ...     ""typeRoots"":  <SEP> Wow ... <SEP> it works when I don't have import statements in my .d.ts-file <SEP> wtf <SEP> But without that import I cant type my module correctly <SEP> I have a simple es2017 Map(): `new Map( <SEP> (happens using typescript 2.4.2 and @next as well) <SEP> set the type of the map to `Map <SEP> assuming that's possible in jsdoc... <SEP> ! <SEP> it looks like @type doesn't work :( <SEP> that `.` probably isnt right <SEP> https://github.com/Microsoft/TypeScript/issues/5158 this should be on @next, right? <SEP> looks like it <SEP> but it should still be `Map <SEP> the very same error message, @type seems to be ignored",how to use postcss in react-toolbox with webpack 3.x config
Summarization," <SEP> if I write my own ambient definitions for a lib but are still getting this error, how might I fix it? ``` ERROR in ./src/app/utils/falcor-utils.ts (1,23): error TS2307: Cannot find module 'falcor'. ``` <SEP> In Redux, reducers are the place where state changes in an application.  If an action only changes one property of an object then you either use something like immutable.js or object.assign to update that one property leaving the rest of the object references  intact.  Now, the issue is that i have to create an untyped object to update the proper field on the object.  So when I want to refactor and rename that variable the cool functions typescript enables break.  Can anyone see a way to solve this?               <SEP> @eyalsk Tx a lot  for suggestion dude as I already started AJ1 I'll do a fine one by myself.then will jump...",how to fix  error TS2307: Cannot find module 'falcor'
Summarization," <SEP> hi how can i include @types folder when my node_modules folder is on exclude list? <SEP> ```json ""include"":  <SEP> guys, can anyone tell me why JSON.stringify() ignores Map <SEP> ``` let myMap = new Map <SEP> Does anyone knows if the Decorator spec specify the order of execution, i,e: class member decorators run first, then class decorators <SEP> guys anyone can help with this  :point_up: ",how to include @types folder when node_modules folder is on exclude list
Summarization," <SEP> how would I define a variable that takes a class that implements an interface? I want to do something like:  ```     let SessionScheduler: ActionScheduler = WholeActionScheduler     if (action.splittable) {       SessionScheduler = SplitActionScheduler     }     const actionScheduler = new SessionScheduler(action, this) ``` Where `ActionScheduler` is the interface, and both `WholeActionScheduler` and `SplitActionScheduler` are classes that implement `ActionScheduler`. I get the error: `TS2741: Property 'schedule' is missing in type 'typeof WholeActionScheduler' but required in type 'ActionScheduler'.` <SEP> `ActionScheduler` - <SEP> that might or might not work as is. <SEP> There's no handy `ClassThatImplements <SEP> but basically, you need that type to be a constructor, but you're using the instance type. <SEP> ```ts type ClassThatImplements <SEP> the possible issue is the constructor params. <SEP> yeah that's what's coming up... they both accept the same args so i guess i can hardcode <SEP> but since you're using `let` then the type will actually change on the var, so it may be fine. <SEP> I would maybe make an `ActionSchedulerConstructor` alias or something. <SEP> ```     type ClassThatImplements <SEP> Yeah that's not a great use of the generic IMO.  Would prefer: ```ts type ActionSchedulerClass = new (action: Action, scheduler: Scheduler) = <SEP> unless you wanna change the name to `ClassThatImplementsTAndTakesAnActionAndASchedulerInTheConstructor` :P <SEP> ;) fair enough... that is much cleaner, thank you <SEP> or....you can just use functions instead of classes :trollface:",how do you define a variable that takes a class that implements an interface?
Summarization," <SEP> Thanks! Yeah at one point I had a realization that if each variation is unique then you can transform the object to a heterogeneous list and vice versa. A lot of possibilities opened up after that. It's neat to have something iterable, constant-time indexable, filterable, and extensible. <SEP> ""Pirate Radio"" is a 2009 british comedy also known as ""The Boat That Rocked"". <SEP> no guy ritchie, no watchie.  kidding. <SEP> lol please understand that about 60% of my waking  brain activity is dedicated to word association. Once the connection was made I had to say it. If I'm going to cash in my movie recommendation ticket I think I'd start with something else. <SEP> clearly, it's gotta be Flash Gordon","iterable, indexable, and extensible if each variation is unique"
Summarization," <SEP> I feel like I'm losing my mind here, can anyone explain the steps to add a very basic definition file? I have a standard tsconfig.json generated by `tsc --init` and I want to add a `foo.d.ts` with `declare const foo: number` so that I can access that variable globally but no matter what I try I can't get it to be recognized when I try to compile. <SEP> are you declaring foo inside of a `declare global {}`? <SEP> I've tried different file names, I've tried various configrations such as `include` and `typeRoots`, and so on. <SEP> @webstrand I was reading about ""ambient declarations"" and so that one line was all that was in my definition, but trying it inside of a `declare global` yields no results either :( <SEP> I'm trying to keep things as simple as possible so all I have is my default `tsconfig.json`, my `foo.d.ts`, a `test.ts` containing `foo` and I'm running `yarn tsc test.ts` <SEP> The result is always `test.ts:1:1 - error TS2304: Cannot find name 'foo'.` <SEP> Alright, here's what works for me: global.d.ts ``` declare var foo: number; ```  main.ts ``` foo = 1000; ```  tsconfig.json ``` {   ""files"":  <SEP> run with `npx tsc -p .` <SEP> Whew, that finally did work. So what's the critical piece there? How would I adapt that to a real use case? <SEP> huh, so it looks like taking out the `files` config and running `tsc main.ts` doesn't work again <SEP> reading over what you wrote, the issue is probably: `yarn tsc test.ts` You need to build the entire project, instead. <SEP> Hmmm, okay <SEP> looks like, if you want to compile individual files, just do: `yarn tsc main.ts global.d.ts` which works without anything in tsconfig.json <SEP> That helps narrow down the problem! My actual use case is that I want to declare Sinon as a global for Mocha so I don't have to include it every time. I'm using `ts-node/register` and trying to reference the definition file, so maybe it's not being included... <SEP> Thanks so much for the help! I'm gonna look over the documentation again now that I can assume that that the problem is the definition file not being loaded. :) <SEP> I'm pretty new to all of this so I had no idea what was going wrong as was getting frustrated. <SEP> So it turns out you have to specify the project file with `ts-node`, have to add a parameter for it to actually read from `files` and `include` and also have to remove all the comments from the JSON for it to work haha <SEP> I wish the JSON spec allowed comments. It's basically useless for anything but interchange without them. <SEP> Thanks @fatcerberus , that was definitely throwing me off. The root problem ended up being `ts-node` configuration but I wasn't able to figure that out without knowing that about `tsc` :)",how to add a simple definition file to a standard tsconfig.json
Summarization," <SEP> I have a project that is based on external modules but in one file I need to import ~100 exported types from another module in my project. Is there any way to simply bring all types in this other file into scope without individually importing each type explicitly? <SEP> I looked into using namespaces that span the files but this is apparently incongruous with using the external modules structure. <SEP> foo.Type1 <SEP> foo.Type2 <SEP> Right, I was looking to avoid the import alias since that's a bit onerous for my application. Maybe its just unavoidable. Was hoping for something along the lines of a simple `import * from 'bar'` ala node. <SEP> no im afraid not",is there a way to import all exported types from one file into scope without explicitly importing
Summarization," <SEP> @rhys-vdw both displays same icon, which should i use, if i want to show a Icon. <SEP> Are you using `EditIcon` in many places? <SEP> If you are using it in many places, you might in future want to change what it does. <SEP> And you use that in 20 places",should i use EditIcon if i want to show an icon
Summarization," <SEP> @AnyhowStep thank you for reply, i have been there)) Actually i spent some hours in source of tsc and found answers to my questions)))) <SEP> Here's where I'm stuck. Setting the color for `chalk` dynamically gets me this error:  ```ts import chalk from 'chalk';  function getColor(): string {   return 'blue'; }  const color = getColor();  /**  * Element implicitly has an 'any' type because expression of type 'string'  * can't be used to index type 'Chalk & { supportsColor: ColorSupport; }'.  *  * No index signature with a parameter of type 'string' was found on type 'Chalk  * & { supportsColor: ColorSupport; }'.ts(7053)  */ console.log(chalk <SEP> I wonder if it's possible, with a way other than a type assertion on `chalk <SEP> does chalk have a pre-defined list of colors attached or can you dynamically add new ones+ <SEP> this works: https://www.typescriptlang.org/play/index.html#code/C4TwDgpgBAxgFgQwDYGsICcoF4oAoCWAdmAK7ABcUAzsOkQOYCU2AfFAG4D2+AJgNwBYAFDDQkKAGFEqbFADewqFABGSEhErxkadIKFL0EHpuk69AX2HCYnQjVinKU7bIX6VajXnzMsbG3acSBAAdEic9ASMADSKUIbG3r7+tlRBoeGRPrFC5nrWqcBQ9BDAEkGc6JS4yVBoIJwAZpKmsjWsUADkquqd+UJaqADaJWUV6DUAuridjZycnYx8QA <SEP> Which is why I asked whether you can create new colors or not <SEP> I don't think you can create new colors in Chalk, but I'm not sure. <SEP> I previously tried using `keyof Chalk` too, but `as Chalk` was still needed. <SEP> I am able to get the colors supported by Chalk via `ansi-styles`, but even with a type predicate, I'm not sure what type I'm supposed to set the `color` as, since as you can see, `keyof Chalk` isn't enough.",is it possible to set a dynamic color for chalk dynamically?
Summarization," <SEP> So i'm having a weird issue using TypeScript decorators. I have a class with a single function that i've decorated that adds a property named `route`. The problem is when I go to traverse an object of that type the function is missing as a member at the root level and instead is buried in __proto__ members twice. I've created a snipped detailing the problem. https://gitlab.com/snippets/1813622 <SEP> The result is that my code fails to find the function. Any idea why this is happening and how I can fix it? <SEP> A curiousity question : Is `@Get` a custom decorator ? Or are you using a framework ? <SEP> yes, its a custom decorator. The code for it is in the snippet. <SEP> What's your `Route` interface like ?",typescript decorator missing member when traversing object of type route 
Summarization," <SEP> I know ready only but don't know freeze! does private member is imutable in es5 ? <SEP> quick solution to deep readonly a type i also stole from some guys solution  ``` type Primitive = undefined | null | boolean | string | number | Function  type Immutable <SEP> not that the above solution to DeepImmutable at a type-level will be easier once typescript finishes and merges the type-level ""const"" keyword <SEP> hope that helps. <SEP> thank you. I'm newbie and need to read your code to undestand it better. <SEP> can I contact with you via telegram messanger?! <SEP> no sorry <SEP> thank you again... <SEP> @aaronbeall  many ... many days later ``` <SEP> this is the solution to your oneOf function with it properally inferring literal strings <SEP> ``` export type Primitive = string | number | boolean | undefined | null; export function oneOf",is private member immutable in es5?
Summarization," <SEP> Did you know of any major roadblocks for porting from 3.5? Or is it just busywork that needs to be done? <SEP> I remember composing the functions to generate a report. The function itself didn't seem too scary but the output sql was 600k characters or something to that effect. <SEP> 'cause first step, before I can use it, is to get it working on 4.0 <SEP> I have a lot of compile time tests that will break because of the new 3.7+ output format <SEP> how complete is the test suite? <SEP> I'd say very complete, imo <SEP> ah, you mean the types you see in the editor? Or the types printed in errors?",what are the major roadblocks for porting from 3.5 to 4.0?
Summarization," <SEP> @dtabuenc btw I posted a suggestion to RxJS based on your advice https://github.com/ReactiveX/rxjs/issues/25570 <SEP> i.e., about how to make a fluid interface while maintaining type in inherited methods <SEP> Yes for `index.ts`, but I would put it in `src`, but thats just preference. Remember you are distributing the resulting js files, not ts.",index.ts should be in src instead of index.
Summarization," <SEP> https://www.typescriptlang.org/play/#src=declare%20const%20f%3A%20((coords%3A%20any)%20%3D%3E%20any)%20%7C%20((coords%3A%20%7B%20x%3A%20number%3B%20y%3A%20number%3B%20%7D)%20%3D%3E%20any)%0D%0A%0D%0Af(%7B%20x%3A%201%2C%20y%3A%202%20%7D) <SEP> They should be `&` <SEP> No <SEP> The intersection and union is sometimes ~~confusing~~ very confusing. <SEP> I'm actually calling o.method() <SEP> where o is A | B | C <SEP> This you need interaction, it is a form of overloading. <SEP> https://www.typescriptlang.org/play/#src=declare%20const%20f%3A%20((coords%3A%20any)%20%3D%3E%20any)%20%26%20((coords%3A%20%7B%20x%3A%20number%3B%20y%3A%20number%3B%20%7D)%20%3D%3E%20any)%0D%0A%0D%0Af(1)%0D%0A <SEP> intersection? <SEP> Yes, ~~intersaction~~ intersection <SEP> As I said, the type is generated by typescript <SEP> that can't really change <SEP> Also: <SEP> ``` declare const f: ((coords: { x: number; y: number; }) = <SEP> no error in that case <SEP> ``` declare const f: ((coords: { x: number; y: number; }) = <SEP> Yes, but it is invalid. function ignature cant be different only by return type... <SEP> Why not? <SEP> @unional  what I'm asking for would make it better for tree shaking <SEP> hmm.. maybe not.. <SEP> it's a problem for angular1 where services are defined in their own file <SEP> @NaridaL Im thinking in terms of overloading ```ts function foo(x: number): string function foo(y: number): number { // error } ``` <SEP> and because they aren't instantiated in the files that inject them.. there's no way to establish a dependency relationship without adding a secondary side-effect import <SEP> just feels really redundant <SEP> @unional, right. But the declaration above has a different meaning: f could have either the first or the second type <SEP> THe thing is, this works: <SEP> ``` declare const f: ((x: number) = <SEP> but then it breaks if I change one of the x: number to x: any <SEP> seems like a bug... <SEP> Actually, about that error I mentioned, it is not an error anymore, seems like the behavior changed, or it is the wrong example.",intersection and union are sometimes confusing very confusing
Summarization," <SEP> Y'all - I am DESPERATE for help with a typing for a very popular library that I broke a few days ago <SEP> @carpben happens all the time, TS team has said plenty about semVer. <SEP> That `tsc` version in VS code thing bites my colleagues in the butt all the time <SEP> They always come to me and say code that was fine is broken now <SEP> And I look at the bottom-right of their IDE <SEP> And their package.json <SEP> You'd think they'd... Just check that first next time <SEP> Nope A few days later, I gotta' do it all over again <SEP> https://github.com/oliver-moran/jimp/blob/master/packages/jimp/types/ts3.1/index.d.ts#L27  I am trying to figure out how to intersection a class with another type. We have a user trying to do `const a: Jimp = new Jimp()` and TS is having aprox none of it <SEP> I legit dunno who else to ask <SEP> @crutchcorn , you are in the right place to get help for this issue",ts3.1 typing for a library that I broke a few days ago
Summarization," <SEP> @fatcerberus thanks for the explanation, I knew about that (we've talked about it before) but 'subtype reduction' didn't ring a bell. <SEP> But I seem to remember that there were only certain cases where it applies <SEP> https://github.com/microsoft/TypeScript/pull/33050 <SEP> postgres has `DROP CONSTRAINT IF EXISTS` but not `ADD CONSTRAINT IF NOT EXISTS` :frowning: Makes idempotent SQL much harder. <SEP> Query the information_schema =P <SEP> yeah but what a bunch of not fun. <SEP> there are separate `table_schema` and `constraint_schema` columns...can they be different? <SEP> Maybe the migration tool authors paid off the database authors <SEP> Gotta' make people buy migration tools, y'know? <SEP> A table may have many constraints <SEP> Makes sense to separate them <SEP> huh?  how's that relevant? <SEP> Nevermind, figured it out <SEP> yeah so I don't use a migration tool at all because there's not one I'm sold on, and I *thought* the SQL would be pretty static. <SEP> Migration tool authors paid off database authors to not add `ADD CONSTRAINT IF NOT EXISTS` and other conveniences so you gotta' go buy their tool that abstracts it all away <SEP> unless you count the table that records the git hash of each version.  I run all the SQL on every deploy, wrapped in an advisory lock, unless that hash is already applied.  So I kinda need my SQL to be idempotent. <SEP> but yeah, just add a function and be done with it. <SEP> Idk--there's a lot of good free migration tools out there.  Flyway has been a joy to use on Java <SEP> I was just wondering which schema column to match against in the info_schema query. <SEP> the notion of migrations in general make me itchy.  Lots of bias from experience with Rails. <SEP> and I agree there are good ones, but I couldn't decide on one :smirk: <SEP> Here's a function we use for checking constraints if it helps <SEP> ``` create or replace function create_constraint_if_not_exists (     t_name text, c_name text, constraint_sql text )  returns void AS $$ begin     -- Look for our constraint     if not exists (select constraint_name                     from information_schema.constraint_column_usage                     where table_name = t_name  and constraint_name = c_name) then         execute constraint_sql;     end if; end; $$ language 'plpgsql' ``` <SEP> We don't actually use it a lot because of how Flyway handles migrations <SEP> yeah that's straight outta SO",'subtype reduction'doesn't seem to apply in all cases
Summarization," <SEP> Anyone know if there is a reason why:  ``` class SomeClass {    private somePrivateVar = 10; } ```  is output as   ``` function SomeClass() {    this.somePrivateVar = 10; } ```  rather than   ``` function SomeClass() {    var somePrivateVar = 10; } ``` <SEP> @grofit define a method which accesses sPV and youll see <SEP> @rohitsodhia at runtime? <SEP> it still doesnt really make sense <SEP> ``` class Something {     private something = 10;      public blah() {         this.something = 20;     }      public blah2 = () = <SEP> yeah <SEP> but really it doesnt matter about the `this` enforcement etc, it still should be targetting `something` not `this/_this.something` <SEP> I guess its down to the prototype bit being outside of the scope so it cannot access it <SEP> but I dont know why it needs to be done like that cant it just be part of the function/class but just not re-write `this` for the example without the fat arrow <SEP> as I would expect it to be output as: ``` var Something = /** @class */ (function () {     function Something() {         var _this = this;         var something = 10;            this.blah2 = function () {             something = 30;         };      this.blah = function () {    something = 20;   };     }     return Something; }()); ``` <SEP> yeah but methods are defined on the prototype <SEP> as really its not making the private vars private, its just making them public but probably not outputting them on the d.ts, and again I am happy enough to just accept this if there is a good reason for it, but I dont know why it would do it this way, i.e the benefit for this approach <SEP> yeah but I dont get why they need to be <SEP> (At least, that's what the spec defines for es6 classes) <SEP> es6 classes are an odd one as they dont even have private stuff, and to my knowledge TS never outputs as es6 classes, even in es6 output right? <SEP> it always uses the function as a class approach <SEP> no, if you target es6 you just get classes <SEP> oh let me check <SEP> I am sure I did this and it didnt output classes <SEP> and TS goal isn't to change runtime behavior <SEP> so if you did new Something().something it would fail at runtime <SEP> but thats correct <SEP> if its private (in es5 a var on class) it should not be accessible outside <SEP> new (class X {   foo = 2 }).foo is valid isjsthough <SEP> and TS sees private as just type info <SEP> that's the reasoning behind it AFAIK <SEP> I guess thats where my undertstanding differered I thought the private was more than just type info, I thought it inferred how the variable was created <SEP> whether it makes sense is another thing <SEP> the es6 stuff makes more sense as to why its done this way, to be more consistent",why does  class SomeClass  private somePrivateVar = 10;
Summarization," <SEP> Hello, what is the testing framework used to test TypeScript? <SEP> Use any framework you want -- e.g. Jasmine or Mocha, but you may need systemjs for certain features <SEP> @tonysneed thanks, but I'm asking about this https://github.com/Microsoft/TypeScript/tree/master/tests <SEP> Ah, not sure what TS uses <SEP> Check the package.json?",what is the testing framework used to test typescript?
Summarization," <SEP> Hi there, question about an issue I found with type inference:  ```ts class Foo {bar: string = '' }  // why does type inference work in this case function quz <SEP> is there anything I can do to make the inference work in the second case? <SEP> this is the use case if you were wondering:  ```ts class MyClass {     a: string;     b: number;      // I have define both generics     aSetter = complexSetter",why does type inference work in ts class  {bar: string = ' '}
Summarization," <SEP> @cbier It's for describing when a function can be used as a constructor function <SEP> So you might have code like this, right? `let animal = new Animal(""Goat"");` <SEP> ah <SEP> Say you're writing `interface Animal` which describes an already existing JS library <SEP> You'd use a construct signature to let TS know that that is a valid usage of `Animal` <SEP> Thanks Jason <SEP> that makes a lot of sense <SEP> do you know of any documentation on the 'new' keyword in this context? <SEP> @cbier The handbook is probably a good bet, this section looks like the right topic to me: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Interfaces.md#difference-between-the-static-and-instance-sides-of-classes <SEP> But I think that might be what you're already looking at? <SEP> yeah that's exactly where I am at <SEP> `new` was never explained in the context of an interface, so that's where the confusion came in for me. <SEP> I just want more information on it and to understand it better, but your explanation was enough for now <SEP> That's because the only place they show up is at construct signatures, and that's the topic of the section :) <SEP> @DanielRosenwasser thanks for chiming in <SEP> I guess it was most confusing for me because `new` is usually used in the context of creating a new instance of a class <SEP> gotcha <SEP> if you have any ways to clarify the documentation, feel free to file an issue at https://github.com/Microsoft/TypeScript-Handbook <SEP> if the interface looked like this: ``` interface ClockConstructor {     constructor (hour: number, minute: number); } ``` I would have immediately grasped it <SEP> but who am I to change the syntax of a language lol <SEP> thanks @DanielRosenwasser <SEP> I really appreciate all of the work you are doing in the community. <SEP> on second thought now, `new` makes sense because the constructor is the function that gets called when you create a `new` instance of a class <SEP> maybe that was the intention? <SEP> I think it was more to reflect call signatures, which look like `(a,b,c): d` <SEP> And I guess we could have made call signatures `function (a,b,c): d`, but that reads a little awkwardly <SEP> call signatures === function types, right? <SEP> Yeah, anything that can be called should have call signatures <SEP> Also, if you want to get into the nitty-gritty, `constructor` actually ends up being a method on your instances when you `new` up a class <SEP> so it would be harder to describe that scenario <SEP> that is because in the JS the ""constructor function"" is a self-executing function that returns the class constructor, right? <SEP> that is how the constructor ends up being a method on your instances <SEP> if I am following you <SEP> sorry, going on a rabbit trail <SEP> `return Greeter` being the part where the constructor is tacked onto the instance <SEP> you're talking about in TS world, and I jumped out to the compiled JS. sorry for being confusing <SEP> @cbier doing that would make the return type an object as it is explicit, will raise it as a bug <SEP> someone can always tell me it isnt",documentation on using 'new'as a constructor function in typescript?
Summarization," <SEP> How could I get this to work? ``` interface I {     prop: string <SEP> It complains that you cant index `S` with `number`, I'm assuming because Its not treated `O` like an `I` when 'deconstructing' it <SEP> ``` type Convert <SEP> Ah, no that doesnt actually do it - I need to keep properties of parts of a union seperate, so it needs to be `extends` <SEP> Need to make a better example",cant index S with number when deconstructing a string
Summarization," <SEP> Anyone know why this is giving me a parse error:  <SEP> That's not a parse error, but rather a type error? <SEP> ya, sorry <SEP> type error <SEP> it's really interesting to me <SEP> from what I know it should be fine <SEP> obviously I do not know enough lol <SEP> You're playing with one of the trickiest parts of typescript <SEP> On the face of it, you should be able to do: ```   return constructorArgs === void 0    ? initArgs === void 0     ? (new this()).init() as InstanceType <SEP> but you'll get another error trying to call `init`. <SEP> event just ``` return new this(); ``` <SEP> doesn't work <SEP> yeah, basically, typescript is incapable of proving that `this` will return the correct type <SEP> hmm even though I specify this <SEP> There's a problem with your type logic: ```   class Foo extends BaseClass {    a!: string;     init(x: string): Promise <SEP> hmmm <SEP> I'm looking for solutions for you, not just pointing out problems :) <SEP> lol <SEP> I appreciate the dialog either way <SEP> I figured this was a fairly basic parent class implementation <SEP> certainly a pretty standard factory pattern <SEP> `init(x?: string): Promise <SEP> With typescripts classes, it assumes that the child class will be assignable to the parent, so the parameter `x` has to be optional, I guess. <SEP> updated the playground <SEP> type error goes away <SEP> what were you saying isn't working? <SEP> You've got everything working? the `.init(...initArgs)` should still be failing? <SEP> ts-ignored lol <SEP> Does `Foo.init(""test"")` work for you, then? You'll need to post a new playground, for me to see. <SEP> oops, I'm misusing `init` <SEP> Playground Link",type error when calling 'init()'as 'InstanceType '
Summarization," <SEP> I'm guessing you've installed typescript globally? That'd explain why I couldn't reproduce <SEP> Yes, I usually always have TS globally but also install it per project for CI/CD flow <SEP> I've never had so much difficulties to setup TS backend project <SEP> ! <SEP> https://github.com/Azure/autorest.typescript/issues/126 <SEP> I had expected this output <SEP> ! <SEP> Assuming you're running on a recent-enough version of node, you could bump your target version and use native async <SEP> Is there a way to simply re-export a function definition in a `.d.ts` file? ```ts declare global {   function expect: Chai.ExpectStatic // ExpectStatic is the definition for a function with arguments } ```",how to re-export a function definition in a.d.
Summarization," <SEP> hello guys <SEP> how can I access a static function in my whole typescript project? <SEP> thank you! <SEP> please elaborate. that question doesn't make much sense <SEP> I mean what is the best strategy <SEP> export every function in its own file? <SEP> or export only the class <SEP> and define all the functions inside it? <SEP> that last solution seems to add a lot of overhead <SEP> I mean every time you import a whole class only to use a function of it <SEP> just ``` export function myFunction(...) {...} ``` then ``` import { myFunction } from './...'; ``` <SEP> so are there really no actual examples of project references being used? <SEP> @slikts https://github.com/Zilliqa/Zilliqa-JavaScript-Library/tree/feature/monorepo <SEP> I'm not sure if it's idiomatic, but it works. <SEP> Also, the TypeScript repo itself is built with project references. <SEP> I just find it a little odd to put `tsconfig.json` in the packages folder, so I hoisted it to the project root. <SEP> thanks, looking <SEP> aurelia is also a good example. <SEP> I based our project references build set up off that. <SEP> If you do `tsc -b -w`, it's _really_ fast. <SEP> what is the function type in typescript <SEP> if add it as function param ?",how can i access a static function in a typescript project?
Summarization," <SEP> Care to try on 3.3? I've seen something similar, it was introduced in 3.4 <SEP> But I could never reproduce it <SEP> I know this isn't necessarily a channel for help with specific frameworks but can someone take a look at this and tell me if they can spot what might be happening? If I dispatch the 'alert' action 3 times, the ID of the items will be 0, then 1, then 1 again. It only ever increments after 'alert' is called twice after it's passed 0. Can someone help me understand what's happening?  ``` import Vue from 'vue'; import Vuex, { StoreOptions } from 'vuex'; import { RootState } from './types'; import { auth } from './auth'; import { tenants } from './tenants'; import { users } from './users'; import { authPlugin } from '../auth';  Vue.use(Vuex);  const store: StoreOptions <SEP> It's like ",'alert' action only increments once after it's passed 0
Summarization, <SEP> I don't know <SEP> there seems to be an error in the lodash.d.ts lodashstatic <SEP> or maybe vscode is just overwhelmed by the d.ts :) <SEP> just copy pasted in the playground and no error,error in the lodash.d.ts lodashstatic
Summarization," <SEP> @ShadowManu but if TSD is depricated, and one of my typings/TSDs has a failing transitive dependency, what's the ""professional"" solution? <SEP> Hacking TSDs and checking them in is dodgy <SEP> @aslate use typings - it's meant to replace tsd? <SEP> I am, and everything breaks <SEP> how come? <SEP> So ATM it's complaining ""Cannot find namespace 'JSX'.""","what's the ""professional"" solution if a transitive dependency is solution？"
Summarization," <SEP> What does a proper type check look like when my field could be any subtype?  For example:  ``` public _xScale: Plottable.Scale <SEP> @Jefftopia  ummm.   i don't know what field you are talking about.   You have to realize that not many of us know this ""plottable"" library and so it's not so obvious what your problem is <SEP> better if you come up with a simple-yet-complete example you can copy/paste for someone to help with <SEP> @jasonswearingen Alrighty, let me try to clarify.   I have a property on my class, `_xScale`. It has a value that can be one of several types. For example, `Linear`, `Log`, `Time`.   I'd like to say `_xScale: Scale",what does a type check look like when a field could be any subtype?
Summarization," <SEP> With TS 2.4.2, existing code is now throwing a compilation error when trying to extend an interface and use the original interface as a generic parameter. I cannot make sense of why this is happening, if anyone wants to take a look that would be greatly appreciated. <SEP> ```ts interface Action {     type: string; } interface MyAction extends Action {     payload: string; } interface MyState {}  type Reducer <SEP> @gnz00 I answered it... <SEP> @NaridaL Thanks for taking a look. Shouldn't the generic and inheritance handle this use case though? Foregoing inference and making it explicit, the compiler still throws an error.   ``` const myReducer: Reducer <SEP> Shouldn't that enforce the MyAction interface rather than the Action interface? <SEP> the above doesn't help... <SEP> `myReducer(state, myOtherAction)` is still valid according to `Reducer <SEP> what typings are you using? <SEP> alternatively, if your app is only using ""MyAction""s you need to define your own reducer <SEP> @gnz00 `Reducer <SEP> the generics don't really have anything to do with it <SEP> not sure how to make it clearer^^ <SEP> type MyReducer = (s: MyState, a: MyAction) =",extending an interface and using the original interface as a generic throws a compilation error
Summarization," <SEP> HI all, Im very new to typescript and Im trying to move my js code to TS but havent been able to get an answer to what seems like a pretty simple question. Sorry in advance if its a dumb mistake.   Why do I keep getting the following error:  <SEP> can you programmatically export values in type script <SEP> something like <SEP>   exports <SEP> Nope, that's not supported since it would be basically impossible to type. <SEP> @rmartin-carecloud your constructor for `ClientCreator` is `constructor(public serviceBaseUrl: any, public route: any)` - two arguments. But in `searchAllergy` you only provide one. `new ClientCreator({ serviceBaseUrl: baseUrl, route: allergen })`. I'm guessing that your `ClientCreator` class should mirror the commented out version, like this: ```ts export class ClientCreator {     client: any     serviceBaseUrl: string     route: string      constructor({ serviceBaseUrl, route }: { serviceBaseUrl: string, route: string }) {         this.serviceBaseUrl = serviceBaseUrl         this.route = route         this.client = axios.create({ baseURL: `${serviceBaseUrl}/${route}/`, headers: { accept: ""application/json"" } })     } } ``` <SEP> There are some enums I'm having trouble accessing in a package that I'm using. The enum is defined in a @types declaration as follows: <SEP> ``` declare module AI {     enum SeverityLevel {         Verbose = 0,         Information = 1,         Warning = 2,         Error = 3,         Critical = 4,     }      ...... } ``` <SEP> But I've only been able to successfully import the following module: <SEP> ``` declare module 'applicationinsights-js' {     const AppInsights: Microsoft.ApplicationInsights.IAppInsights;     const Util: typeof Microsoft.ApplicationInsights.UtilHelpers; } ``` <SEP> I need the `SeverityLevel` enum to use for arguments to some of the methods provided by the library, but I've been unable to find a way to import them. <SEP> I can't imagine that I must redefine the enum myself. <SEP> is there a way, with tsserver, to get the full specification of a type? <SEP> `quickinfo` seems to truncate some stuff, sometimes <SEP> Thanks @Gerrit0 I really appreciate it! That helped a lot.",can you programmatically export values in type script ?
Summarization," <SEP> ^ this is pretty much the reason T extends Test doesn't mean T equals Test, it means T atleast equals Test but could be a superset of Test what should Partial <SEP> Got it. Given that, is there any expression that can satisfy `Partial <SEP> @ebroder the comment on that ticket is the key, there are types that extend `Test` that dont include `{ x: ""foo  <SEP> Which you can see because: <SEP> ```ts interface Bar extends Test {   x: 'bar' } ``` doesnt cause an error on `extends`. <SEP> Hmm. It seems like this is legal though: ``` interface Test {   x: string } function test <SEP> `Partial` is *also* part of the issue I think - `Partial <SEP> The compiler isn't quite smart enough to know that `Partial <SEP> thats interesting @ebroder <SEP> @fatcerberus so thats what I was thinking at first but the counterexample I think wins, because the compiler is not wrong. <SEP> The counterexample isn't relevant I don't think - `Partial <SEP> See https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html under ""Conditional Types"" about resolve vs. defer <SEP> ```ts function test <SEP> `function test <SEP> Hmm typescript-play.js.org hasn't been updated yet - still on 3.3.3 <SEP> Okay that is bizarre - your example @keithlayne type checks fine... and yet... ```ts interface Test {   x: string }; function test <SEP> I would say see the previous counterexample :smile: <SEP> In which case I agree with the compiler, but maybe not its reasons? <SEP> but also the fact that adding `readonly` to a key and still extending a type would make things super restrictive if that were considered during typechecking.  If that makes sense. <SEP> Well, *I* don't agree with the compiler. :wink:  For example, this typechecks but it really shouldn't: ```ts interface Test {   x: string }; interface EvilTest extends Test {   x: 'quux' } function test <SEP> Now we have an EvilTest object which deviates from its type signature and the compiler just whistles and looks the other way <SEP> Now imagine if instead of a string vs. a string literal, it's `number | string` vs. just `string` <SEP> what happens if you return T after you set x? <SEP> Assuming you meant like below, yeah, it still checks out: ```ts interface Test {   x: string }; interface EvilTest extends Test {   x: 'quux' } function test <SEP> I think we found a loophole in the type checker <SEP> You can redefine a property to be more specific in a subclass but the compiler won't necessarily honor it <SEP> At least if generics are involved anyway <SEP> Yeah, I just tried it too. With explicit return type too. <SEP> With `readonly` though you really shouldnt even be able to set fields of `X` when `T extends X`.  Which would be incredibly painful and restrictive to apply. <SEP> The type system isn't *always* sound, it just tries to make a best effort to prevent mistakes without getting in your way <SEP> Well, `EvilTest` *has* to be considered a bug, no fanciness really, you just totally subverted the type system without even casting. <SEP> Yeah, true <SEP> Id be fine with a note that ",is there any expression that can satisfy Partial ebroder>?
Summarization," <SEP> Ugh. VS code does error de-duping <SEP> It makes the trace look weird <SEP> The other problem with your `Something` type is that it has an index signature <SEP> ! <SEP> So, `keyof Something` actually really allows any kind of string <SEP> Even numeric strings <SEP> !",typescript error de-duping AnyhowStep> makes the trace look weird
Summarization," <SEP> Aww, I came like *this* || close to doing higher kinded types using that trick https://www.typescriptlang.org/play/#code/C4TwDgpgBAsghmSAnAPAFQDRQEoD4oC8UAFAG5wA2ArhAFxRoCUh+2A3ALABQ3AlgHbAISAGZwAxtABiVfuOAB7VAGEoEAB5D+AEwDOUGXMUqsaXKdzcA3tyh2oAWwQpsWZQCY1miDv2H5SigeWHi4xCL08IjC6CG4jPQenFwAvtzc4hRwuvrwIABGEOj4vA5gFBAOPsB+sgGoeYXFFta29uTUdAxQAD5QstoQIgIQ2sn2UG12usBwwLziUADmEMBQAHK8FMSMU1A2XBMTSKtUSPxQ-BAA7rBwBUVw-CBhA0Mj2ozj9mk8h-biBT8GZIKj1MiUGj0Jh7A5HezAAAWvF0ADoOjRCFAMRBvnZfnsnGAXGEIndoqhMDh4pF7k08LC9hNeCISEiUejIdAAIQEIhvYZXT5M+FQE7AM4XK63RoQcLEdlonGML4iuwQCi6CBqo7iyV3B6ozYUPFQX6-IA <SEP> Oh well that was a fun little diversion <SEP> More silly inconsistencies: https://github.com/microsoft/TypeScript/issues/31013 <SEP> I only needed the tag properties because the classes aren't distinguishable otherwise.  If your classes are structurally distinguishable it's unnecessary",how do you do higher kinded types using typescriptlang.org?
Summarization," <SEP> ummm.... <SEP> what am i looking at <SEP> I need it for better typing in my DI/IoC module - For decorators like `@Injectable()` (when used on ctors), `@Singleton()` (used on ctors) <SEP> With this version, `initializers` resolves to `never <SEP> yep because empty array resolves to never <SEP> oh i see you just want it to be a tuple of the parameters? <SEP> Yes <SEP> Exactly <SEP> Yeah think that is possible give me a sec <SEP> yeah so the problem lives with this type here.... <SEP> ```  ConstructibleLike <SEP> Array's can only ever be of a single type, if you want an array containing multiple types you need to use tuple <SEP> ``` type ConstructorLike <SEP> if you want dynamic length and unique types on each element there are ways to achieve that only in certain typing sitatuions I.E spread function parameters <SEP> if you want dynamic length and unique types on variable initialization  you can only achieve this using something similar to a HList is believe is the only way <SEP> hope this helps @SalathielGenese <SEP> Not much actually @ShanonJackson - Since it is a general purpose decorator, I can't tell beforehand which distinct types will go there. <SEP> Besides, I get this error...  ```ts type ConstructorLike <SEP> what version of typescript",how to make initializers a tuple of the parameters？
Summarization," <SEP> I am a total newbie to chat and typscript. I have a question that seems to be typscript issue. I think i know what the issue is but I am unsure of how to do what i need to do. Is this the place to ask? <SEP> AFAIK, the TS team choose the term ambient to describe that the TypeScript type system is ambient to the actual JavaScript. <SEP> Thus the `declare *` is an `ambient definition` (to the JavaScript) <SEP> Yeah, it is called ""ambient"" because the actual concrete thing it's describing does not exist in your project, but will be present in the environment at runtime. <SEP> @crs117 I dont see why not, though Im pretty new here as well. Im getting schooled on language semantics right now <SEP> So you are declaring that this thing, while you don't have a concrete implementation in your project, will exist ambiently at runtime <SEP> ""abmient"" here having the dictionary definition of ""existing or present around you"" <SEP>  will exist ambiently at runtime  I think it is at dev-time, not runtime. All types are removed at runtime. <SEP> here is my error.  ""Subsequent variable declarations must have the same type.  Variable 'module' must be of type '{ id: string; }', but here has type 'NodeModule"".  I am cloned from (https://github.com/cj-wang/mean-start) and have not been able to get angular to build. <SEP> @unional  well I mean the implementation of that type <SEP> The repo runs ang-cli and a node server and it seems the type definitions between the 2 runtimes have changed for node <SEP> if you do `declare var foo:number` you are saying  my code is not creating a variable, but when I run I expect there to be  a global variable `foo` of type `number` in my environment (i.e. ""ambiently"") <SEP> I see, probably that explanation would work too.  It utilizes the term differently than what I was thinking about. It ended up describing the same behavior. :smile:   I was purely thinking  <SEP> @crs117 probably need some more context. Where is that error come from and what does the code look like? It would help adding a snippet here. <SEP> /node_modules/@types/node/index.d.ts the type in the definition is ""declare var module: NodeModule;"" with no string for id <SEP> @unional that is the only error and it is reference a type file that I did not create. I can edit the type file but that would not help me understand what is actually happening.",declare * is an ambient definition (to the actual JavaScript)
Summarization, <SEP> Well the route example is a good one. You could require that any class so decorated must implement or perhaps take as a Constructor argument and httpclient <SEP> Having a solid JavaScript foundation is essential though <SEP> If you think classes in typescript are in any way related to classes in C# you're going to be in for a world of pain and misunderstanding,require that any class so decorated must implement or take as a constructor argument and httpclient
Summarization," <SEP> IIRC all function has is a `name` member. <SEP> hi all, if the typescript class constructor has too many lines, are we going to stub all of it when we are writing unit tests <SEP> What does that question even mean <SEP> @keithlayne `Function` doesnt guarantee that its callable? <SEP> Because thats kind of sucky if it doesnt <SEP> I must have seen an augmentation instead of the actual definition, my bad <SEP> ok want to see something interesting? <SEP> ```ts interface Mx {   v: string; }  const promiseTuple = async  <SEP> pretty sure that's a bug :grimacing: <SEP> I'm pretty sure it's not <SEP> whys that? <SEP> they have the same output <SEP> `(await x)` does not give you an expression of type `Promise <SEP> It's just syntactic sugar <SEP> Yeah, that's what I'm questioning <SEP> why doesn't it give you an expression of that type? b/c as you say, it's syntactic sugar, so it does give that expression in Node (iirc) <SEP> If it did return a promise, this would work, ``` function returnPromise () : Promise <SEP> which it does <SEP> once you add the missing `async` keyword <SEP> ! <SEP> Exactly. The `async` part is the problem here <SEP> oh ffs <SEP> no wait what <SEP> `async` is in my code <SEP> for a second I thought it was I'd just missed `async`, but nope: `async` is there <SEP> so your example doesn't really relate to mine, as far as I can tell <SEP> ```  function takesNumberOnly (x : number) {   console.log(x+1); } async function returnPromise ()  {   const x = await 1;   takesNumberOnly(x);   takesNumberOnly(await 1); } ``` <SEP> If `(await 1)` is an expression of type `Promise <SEP> Then the second call to `takesNumberOnly` would not work <SEP> Yeah I see. and you're right; this is turning how I figured it would <SEP> it's contextual, but too complex to type like that <SEP> It's sytactic sugar for, ```ts function returnPromise2 ()  {   Promise.resolve(1)     .then((x) = <SEP> yeah yeah <SEP> gdi gitter highlighting <SEP> you need to add ts <SEP> im actually slightly disppointed in myself for not putting that together XD <SEP> but cheers for the sanity check <SEP> Sometimes, adding `ts` doesn't make it any better =x <SEP> No problem  <SEP> yeah I know <SEP> but so yeah: it's b/c of the `await` in the inner fn <SEP> also ugh ffs my whole fn is redundant XD which is annoying b/c I thought that originally :joy:",if typescript class constructor has too many lines are unit tests going to stub
Summarization," <SEP> Hello. Filling object only allowing definitions in interface, is there a quick solution for that? <SEP> can you say that another way <SEP> or give an example <SEP> Ive got a model/interface with some properties, and I would like to take some post request and fill it into the model only allowing whats defined in the interface <SEP> Probably no magic solution for it <SEP> I don't think you can do that. The `interface` only exists at the type level, and that's a runtime effect <SEP> Alright. I see. Thanks <SEP> @SimonMeskens Sorry men,  There are things that I do not understand very well, that's why I ask. . <SEP> @gerrit0 @mikemartincode When I try using an interface: ``` interface WebSocket {     isAlive: boolean; } ``` TypeScript seems to forget the class definition: `Property 'on' does not exist on type WebSocket`, `Property 'termininate' does not exist on type WebSocket` etc. If I try extending with an interface: ``` interface WebSocket extends WebSocket {     isAlive: boolean; } ``` then `Type WebSocket recursively references itself as a base type`. Do you see a mistake? <SEP> are you using the ws package <SEP> yes <SEP> `import * as WebSocket from 'ws';` <SEP> is that good or bad? :D <SEP> I remember I played around with it earlier. If I remember correctly ws inherits WebSocket. So try import * as ws from ""ws"". <SEP> ! <SEP> i feel like we're close but maybe it's just not possible :D <SEP> if there were a way",is there a quick solution for filling object only allowing definitions in interface?
Summarization," <SEP> ...so i configured intellij to use the typescript installed (and not the one bundled) and now ""refactor - <SEP> k...it has nothing to do with not using the bundled typescript. I changed back to it and still intelij's refactor - <SEP> thats odd. The refactor operation is independent of the TSLS afaik <SEP> are you sure it's that? <SEP> from what I can tell, it has nothing to do with TSLS but still cant tell why refactor operation stopped working :/ <SEP> i'll submit this as a bug report to jetbrains...",intellij refactor has nothing to do with not using the bundled typescript
Summarization," <SEP> Would anybody be willing to help me out with some advice? I'm wanting to convert my library to typescript, but I'm struggling with how to make it work. I've just pushed my latest on a branch I named `typescript`. https://github.com/rm-rf-etc/simple-shared-state/tree/typescript/packages/simple-shared-state (it's a mono-repo, so here's the correct package) <SEP> Just clone, yarn install, yarn test (from the directory shown) <SEP> example in TS playground <SEP> @robchristian the thing on the right hand side of a binding like `const target: State = ...` should be a value, not a type <SEP> oh, you just ninja-edited :smile: <SEP> Sorry, I copied the wrong thing <SEP> I'm updating the example <SEP> Ya, I copied what VS code was showing me <SEP> updated playground <SEP> @mkantor ^ sorry again about the ninja edit. lol <SEP> Ohh, it's the LaxArray <SEP> Trying to find a way to make TS stop complaining about the use of strings to index arrays, like: ` <SEP> yeah i don't think the index signatures are playing well together. here's a super-reduced example which is the same core issue: https://www.typescriptlang.org/play/#code/C4TwDgpgBAyglgWzAGwgJwDIEMAeBBNNLEKAXigKJAzgGsIAeAVwDtaWB7AdxYD4oAZFADeAKCgSoAbVoAuKAGdgaOCwDmAXXmt23FgBpRAX1GiAxhxZKoWefCSpMuSsTLSARFwAWWYBABu6O4aokA <SEP> gotta run to dinner, good luck <SEP> um, didn't your governor tell you to STAY HOME YOUNG MAN <SEP> I think the other problem I have, is that the tests I wrote also import the build results and run the same tests on those. I don't have any types for the webpack UMD bundles right now.",how to use const target: State =... in typescript?
Summarization," <SEP> Hi,  for a function that accepts a class as an argument (not an instance), is it possible to get the class name as a string? <SEP> Yeah, https://www.typescriptlang.org/play?target=99&jsx=1&module=1&ts=4.1.5#code/MYGwhgzhAEBCkFNoG8CwAoa1gHsB2EALgE4CuwhOxAFEcQFzR0CWeA5gJQoZZa4E4QCAHQgcbagCIAsgE9oAI0TRmERpIA0TEhwDcPaAF8Mx9BlCQYAEQTFmANwQATaAgAehBHicx4EJGiY2Ph05JQ0dIws7FyBvEykAA62tDr6QXwhgiJiEjLyTrYOzipq0JraxHoGpqbmIYTQAGbQALzQ1GDEbIx4CADuHZGVrJxtAHxwiFytk3HBAkKi4lJdbKXqWmvCicQ4lISyydVBAPSn0AAKdniEMJIPaxtYfgELoRRUjADaAGKkeAozHwjBsdkcTgAukYHpIDOdoAAJHCDJw4aAASWgbAQjVhYOKTlhzT2AFtoIQABaqEzpDBNagEiEnIA <SEP> Not sure why stackblitz doesn't work <SEP> Resolved, arg.prototype.constructor.name",is it possible to get the class name as a string for a function argument?
Summarization, <SEP> does anyone think Flow is its own language? <SEP> TS is the same thing. <SEP> Tons of misunderstanding about what TS actually is., does anyone think Flow is its own language?
Summarization," <SEP> asked about this yesterday but got no response so trying again... i want to be able to define an enum across multiple modules <SEP> this seems like a fairly straightforward thing to do but it isn't possible <SEP> which seems... bad? <SEP> i even tried with `const enum` because the values are supposed to be inlined, but it doesn't work either. the merged value defined in `declare module` is `undefined` at runtime",is there a way to define an enum across multiple modules?
Summarization," <SEP> yo dawg we heard you like errors <SEP> okay i'm done <SEP> That didn't take long - https://github.com/microsoft/TypeScript/issues/33130 - someone hit the instantiation limit they introduced in 3.6 <SEP> Surprised it didn't come up during the beta period though <SEP> #30769 people were complaining about basically 2 seconds after it was merged <SEP> I complained about it before it merged ;D <SEP> I guess not everyone tests beta versions <SEP> But I feel like the people who write types that run into that problem and the people who follow ts closely should have a lot of overlap lol <SEP> Just noticed this issue #33129.  Somebody was on Gitter a few days ago saying they got the vague error about unique symbol not being a valid indexer <SEP> I wonder if it was the same case <SEP> (normally it just says the property doesn't exist, which makes more sense) <SEP> @AnyhowStep Hey look more infinitely expanding types https://github.com/microsoft/TypeScript/issues/33132#issuecomment-526309720",typescript 3.6 - unique symbol not being a valid indexer
Summarization," <SEP> :( <SEP> But my project is really small, not rocket science at all... <SEP> Yeah that's confusing. <SEP> 2.0.0 should be the official release",2.0.0 should be the official release 
Summarization," <SEP> @AnyhowStep The exact order of the tuple wasn't important, what *is* important is that the order is consistent.  He wanted, given a union `A | B | C`, to create an array of those and force it to be exhaustive: if the array doesn't contain all members of the union, it's meant to be a type error.  What I was getting at was that you can theoretically do it with `UnionToTuple` *BUT*... ```ts let arr: UnionToTuple <SEP> You would need an additional transformation to allow all possible permutations of the tuple, but that's not practical above like, 4 or 5 elements <SEP> `5!` is already 120 <SEP> `6!` is 720.  Anything past that is in cuckoo bird territory <SEP> @felher See ^^^^",how do you force a tuple to be exhaustive?
Summarization," <SEP> Has anyone had experience with Typescript unit tests in conjunction with SystemJS and Karma? <SEP> I have not been able to find any examples (nor get my own projects) working well with it <SEP> And, to be clear, I want to write my unit tests in Typescript. I've been able to have  `.ts` source files and `.js` test files, but that feels kind of wrong to me <SEP> is it possible to add type annotations to .js files based on .d.ts files, or are there any plans of supporting this? <SEP> @ryanwischkaemper fwiw I use wallaby.js and it supports .ts tests, but only works in atom/vs/jetbrains ides. it's an arguably nicer test runner than karma in any case <SEP> @slikts Not sure if there are any official plans of supporting it, but the  <SEP> @slikts I love wallaby. But I dont think they have support for running on my CI server <SEP> https://github.com/cmichaelgraham/aurelia-typescript/blob/master/generating-aurelia-type-definitions.md that is so weird <SEP> why not just make the source files .ts files? <SEP> @ryanwischkaemper what I'd like to do is to convert .js into .ts using existing type information from a .d.ts file. I'm not sure if I understand what's going on with aurelia, but it looks like they're writing TS in .js files... <SEP> @slikts They are using features from Babel to generate type definitions files (`.d.ts`) from their `.js` source code <SEP> @jbrantly I believe its because they didn't want to alienate anyone who is not familiar with Typescript <SEP> But then they have code like: https://github.com/aurelia/framework/blob/master/src/aurelia.js#L52 <SEP> just seems weird <SEP> while at the same time still fully supporting Typescript users by having all of their `.d.ts` files always up to date because they are generated from their `.js` source code <SEP> I don't get it either, that's clearly TS but in a .js file, and skimming the wiki article doesn't really clarify the reasoning to me <SEP> right <SEP> I'll find what the creator said about it <SEP> @slikts Regarding your thing, I'm not aware of any such tool. My guess is that the reasoning is any time spent creating the `.d.ts` manually in the first place could instead just be used on converting the JS to TS <SEP> @jbrantly the reason I ask is because of 3rd party type definitions in DefinitelyTyped. it would make it easier for projects to switch to TS if they could just apply the .d.ts files to their code <SEP> It doesnt let me link directly to a comment, but if you look in the comments  <SEP> Gotcha. I'm not aware of any such tool but that doesn't really mean anything. I suspect it would be quite tricky to write and error-prone though. There's lots of ways to do things in JS  that could make matching between the DTS and the JS difficult. <SEP> @ryanwischkaemper right, what I didn't realise was that babel supports the type annotations. that's kind of weird. <SEP> It does because of Flow <SEP> well, partially because of Flow <SEP> @jbrantly I wonder if it's not a good idea for people who are authoring the .d.ts files to actually just convert the projects to .ts and generate the type definitions <SEP> Read that comment on the post I linked. It sounds like Babel supports it because Types in Javascript might become a standard in the future <SEP> thanks, this is actually a neat approach. I'm not sure about the support in editors, though. for instance, I use atom-typescript, and I think it only works with .ts files <SEP> V8 already has a strong mode where they are looking at introducing run-time typings: https://developers.google.com/v8/experiments <SEP> Flow supports types in .JS files, but you have to run a build step to strip the types to use the JS (basically the same as TS). Facebook used `jstransform` to do that. But they've deprecated jstransform in favor of Babel (to do JSX conversion and to strip type information). Babel was also aqui-hired by Facebook. So yea, that's (partially) why Babel supports types :D <SEP> seems like things are looking up for people who like static typing <SEP> too bad v8 is lagging so much with its support for es6, though <SEP> In what parts?  The biggest challenge is that it require the 'use strict' prolog which is incorrect. <SEP> destructuring, default parameters, classes, reflection and builtin subclassing <SEP> destructuring and builtin subclassing are what I mostly care about <SEP> oh, and TCO of course <SEP> most of the built in subclassing is there, just under strict mode... I wouldn't say that is behind... Only Edge 13 has it really. <SEP> subclassing built-ins isn't in production Edge or FF, the thing you most care about. <SEP> builtin subclassing is one case where v8 may not be behind, but the rest are. fx has destructuring, for instance, the other thing I singled out",typescript unit tests in combination with SystemJS and Karma
Summarization," <SEP> 5 statements? <SEP> the delcare global only wraps the interface declarations <SEP> the rest is outside <SEP> Though, if the prototype extensions are outside, how do they get set? <SEP> Ok, killed the compiler, started again, it works <SEP> I can't say I totally get what's going on, but it work <SEP> works* <SEP> Thank you so much for helping @NaridaL <SEP> I'll have to go study this stuff I don't get so I can learn more",how do the prototype extensions get set if they are outside the delcare global?
Summarization," <SEP> i know OOP <SEP> good, then study the classes etc in TS, you'll love them. <SEP> classes, inheritance, private fields, public props, setters, getters <SEP> its a pretty decent oop impl in TS. <SEP> i don't get this code <SEP> ``` let validators: {  <SEP> too many : <SEP> string validator is this:  ``` interface StringValidator {     isAcceptable(s: string): boolean; } ``` <SEP> so validators is of type object? <SEP> and this object, has one property <SEP> type of property is stringValidator? but what's the ",what's the type of property is stringValidator?
Summarization," <SEP> /s <SEP> Wait, Lewis Carol as a mathematician?  I always figured he was a linguist <SEP> https://github.com/microsoft/TypeScript/pull/32611#issuecomment-516606096 https://github.com/microsoft/TypeScript/pull/32611/commits/1ef46f64dec1defe8be48990b7f0c4bf615ed343 <SEP> @jcalz If recursive conditional types are not officially supported, why do we have tests written for them? =P <SEP> Haha so he just discovered what you already did like a week ago <SEP> Not really - it turns out the 50-type limit is for 50 of the *same type*.  If you have a bunch of different types in the expansion it can go really deep <SEP> https://github.com/microsoft/TypeScript/issues/31823#issuecomment-506045385 <SEP> @AnyhowStep Thinking about the instantiation count limit they implemented, my thought is that the main issue with it is you get penalized even for work it doesnt have to do (i.e. the type it needs already exists).  But on the other hand you dont necessarily want it only counting newly created types either since thats dependent on the surrounding code (locally nondeterminisic)... its a tricky problem <SEP> Which is why its fine in your case probably... the 14m instantiations you hit must be mostly duplicate requests that dont need to create a type <SEP> If you want to resolve a more complex type, get a better computer",why do we have tests written for recursive conditional types?
Summarization," <SEP> Hi all, quick question. has anyone here that uses the eclipse palantir ts plugin noticed that references to relative paths that aren't the current directory are suddenly failing? Has anyone found a resolution to this? <SEP> okay other issue: I just migrated from 1.4 to 1.6, now typescript seems to be generating 'javascript' that's just a 1-for-1 copy of the ts....no clue why <SEP> does it include type annotations? what target are you using? <SEP> targetting ES6, with suppress excess property errors turned on for the moment. simple files like ""class xyz{ }"" are getting 'transpiled' to a javascript file with the contents ""class xyz{}"" which is invalid JS <SEP> that is actually valid es6. <SEP> did something change between 1.4 and 1.6 where classes must now be declared somehow? I see there were a lot of changes in 1.5 and 1.6 around the concept of ""modules"". I'm still pretty fresh to TS so I'm not quite sure where to start looking <SEP> it comes back saying ""class is a reserved keyword"" in the browser <SEP> identifier* <SEP> no i want es6, i was just using that as an example because the ts compiler at least in 1.4 would output something like var xyz{function(){... <SEP> oh but you know, you're right...it is actually transpiling some of the code. So then the next question is why is the browser complaining about valid es6 javascript.... <SEP> we'd been targetting es6 with TS 1.4 since I started on the project and it was working fine, I guess something changed in the ts compiler since then?",eclipse palantir ts generating 'javascript' from relative paths that aren't the current directory are suddenly failing
Summarization," <SEP> Am I right in understanding that if I have a type definition that is identical to another type definition exported by a library I can use them interchangeably?  ```ts // some-module export type FnValue = string | number export function fn(value: FnValue): void {}  // my code... import { fn } from ""some-module""  // This type is identical to FnValue type MyFnValue = string | number  const myFnValue: MyFnValue = ""foo""  fn(myFnValue) // Is this ok given the types are the same? ``` <SEP> Yes - thats structural typing, type compatibility is determined by the contents of the type <SEP> okcool, that's what I thought <SEP> in which case, I am a little puzzled as to why this isn't working for a more complex example <SEP> Does someone knows how to solve",is it possible to use a type definition that is identical to another type definition exported by a library?
Summarization, <SEP> Is it possible to create a mapped union type that sort of iterates over the length of an array type and uses each index to create the string type in the union? Dummy example:  ``` type Theme = {   name: 'default';   colors:  <SEP> ```ts type AddOne <SEP> stahp gerrit. Just stahp. Bad TS.,is it possible to create a mapped union type that iterates over an array type?
Summarization," <SEP> hi everyone <SEP> how do you get typescript to generate a const  <SEP> @rators   Try  ```ts import * as foo from ""bar""; ```  And then use `foo` in some way <SEP> or if the import is callable, use `import foo = require(""bar"");` <SEP> hey there, is there an setup option to automatically install the typings for an npm package. i was thinking if there is a hook in package.json which run postinstall or something to install the typing for the package if there is one. <SEP> You shouldn't be bundling `.d.ts` files from typings because they can suffer versioning conflicts - you should let your consumers pull them in on their own <SEP> but we are looking at ways in 2.0 so that you can list declaration files as dependencies in npm without that issue <SEP> Hope that helps @ellerbrock <SEP> @DanielRosenwasser yes thanks, good to know. so i will add the d.ts file to my .npignore settings. for the developmen process locally could be nice to automatically install typings if exist with the package installation. so i could link in my typescript source just to the typing index file and get quick support for all the installed packages. or do i think there in the wrong direction? <SEP> I think you're thinking about automatically looking into a package.json and installing declarations if they already exist <SEP> which we don't have (yet) <SEP> it's something I've discussed a bit with the team, but there are open questions <SEP> First we'd like to just get a good story for using declaration files through npm <SEP> @DanielRosenwasser Hmmm, that still doesn't do it <SEP> atom-typescript plugin and the compiler give an error <SEP> @DanielRosenwasser ok thanks for the information. in this case is now the common way for developers to first install the package via `npm install pkg-name`and after trying to get typing support via `typings install dt~pkg-name` or `typings install npm~pkg-name` and then link inside the typescript source to it, right? <SEP> yup that will be it for the near future <SEP> all right. thanks for the info <SEP> When we have a clearer idea of what the workflow will look like for 2.0, we'll try to write up more about it <SEP> np! <SEP> @DanielRosenwasser ```import * as pouch from ""pouchdb"";```",how to get typescript to automatically install typings for an npm package?
Summarization," <SEP> yeah, figured as much. what's the recommended path for gradually migrating to typescript? <SEP> hmm... seems like writing a `.d.ts`would be the same amount of work as converting all the `.js`modules to `.ts` <SEP> do you normally start with the modules and work your way up? <SEP> (granted, I probably should have stopped at around 2 hours to begin the typescript trial migration, but I did learn a lot)",what's the recommended path for gradually migrating to typescript?
Summarization," <SEP> Hello Typescript Chat! what free resources you recommend to learn TS? I'm confidenet in my JS  and worked a bit with angular.js  , any channel, book, page, or anything will help,thanks <SEP> A recent 2.4.0 dev build <SEP> @kellytk you may need to add ""lib"":  <SEP> @kellytk Its a destructuring assignment https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment <SEP> You can do `const match = str.match(/reg/), constName = match <SEP> @NaridaL My lib is `""lib"":  <SEP> I was being unnecessarily complicated, just use `const match = str.match(/reg/), constName = match <SEP> `match <SEP> yeah, because you've got strict null checks on <SEP> should still work <SEP> you can supress them by adding `!` <SEP> `const match = str.match(/reg/), constName = match <SEP> That isn't suppressing the error <SEP> Sorry, `const match = ""str"".match(/reg/), constName = match! <SEP> I appreciate your help <SEP> @NahuelOvejero If you have a specific question feel free to ask here, but that's a question for google... <SEP> eval it is! <SEP> It was a creative idea, thanks <SEP> yeah not entirely sure where they go in node <SEP> and if you're using modules thats another thing.. <SEP> you could do const myEnums {Color: Color, Foo: Foo} etc <SEP> and lol: https://i.redd.it/pdvejjrcz1zy.jpg",how to learn ts with angular.js?
Summarization," <SEP> Does anyone know if the compiler API supports `tsconfig.json` directly, or will I have to process that myself <SEP> Because there are some subtle differences with some config options when passing them directly to the API vs. how they look in the tsconfig: ```js     const program = ts.createProgram(inFileNames, {         target: ts.ScriptTarget.ESNext,   module: ts.ModuleKind.ESNext,   lib:  <SEP> `target: 'esnext'` doesn't work (it's a numeric enum) and `lib` wants the full filenames.  Not sure if there are other differences",does the compiler API support tsconfig.json files directly?
Summarization," <SEP> Guys hi! Hi to make karma and webpack and typescript working togeter? <SEP> with targeting to es6 <SEP> Anyone did it? <SEP> basically, i want to process es6 from typescript then transpile it to es5 with babel and run my tests",how to process es6 from typescript and transpile it to es6
Summarization," <SEP> pretty sure both null and undefined are assignable to void... let me check <SEP> `null` isn't assignable, but `undefined` is. <SEP> Huh <SEP> Guess that kind of makes sense <SEP> and `void` is assignable to `undefined | null` <SEP> yeah `void` as anything but a return type I don't understand. Apparently you can use it for optional params too?  Or something like that. Feels weird.","'null' isn't assignable, but 'undefined' is"
Summarization," <SEP> Hello guys, I'm looking for a programmer partner for my startup, I prefer young programmers, I'm 16, I want someone between (15-19) years old, contact me by my email: murillonascimento04@gmail.com <SEP> ok <SEP> I have : ```tsx interface PieProps extends PieDef {     activeShape?: PieActiveShape; } ``` how to get type of `activeShape` without undefined? `props: PieProps <SEP> You said its optional, it automatically has undefined in the type <SEP> because it might not exist <SEP> So you have to check that <SEP> I want to write a component like: `const RenderActiveShape: PieProps <SEP> @kapilpipaliya  ``` type Example = {  foo?: string; } const x: Exclude <SEP> @webstrand thank you. Still trying to get my head around type of usage. I read the words, feel like I understand, but then just doesnt work out in my code lol. <SEP> would then ``` type Letters = A | B; <SEP> ``` type Letters = A | B;  var letters : typeof Letters = A ``` <SEP> be the same thing? <SEP> Nope, when you define `type Letters` every identifier is in the type-namespace. So you're getting the _type_ called `A` (which is the instance-type of the class `A`) and the _type_ called `B` (which is the instance-type of the class `B`) <SEP> Have you ever dabbled in perl? It's rather similar to how `%foo` and `@foo` are in different namespaces. <SEP> When you declare `var letters : typeof Letters` typescript looks for an identifier `Letters` in the _value-namespace_ and tries to get type of that identifer. <SEP> I realize that `namespace` is becoming an overloaded term. I'm not talking about typescript's `namespace {}` syntax. I hope that's not too confusing? <SEP> I like to call it the type-space and value-space <SEP> not to be confused with hammerspace <SEP> types get erased during the build, so they don't even need to be present at runtime. <SEP> so that makes a little more sense <SEP> kind of like the phases we talked about earlier (regarding generics), this is operating in two different places <SEP> in Dart these layers are not separate",how to get type of activeShape without undefined in ts
Summarization," <SEP>  Why did our bundle just double in size? <SEP> Is everyone just too scared of you to say something? <SEP>  Bad `tsc`! No!  Do we need non-null assertions for ""`tsc`"" and ""No""? <SEP> Your coworkers <SEP> They asked me to do an intervention since they're too scared. <SEP> They requested it be done tho <SEP> :chicken: <SEP> I don't write UI code, but they were having trouble getting react and angular to work together. So I hacked away at it <SEP> They wanna move away from angular 1, but can't just overhaul the entire thing in one go <SEP> So, they're trying to slowly transition away by sprinkling react components around for newer stuff <SEP>  Hey @AnyhowStep, are you an Angular guy? <SEP> They'll take my prototype and clean it up, and completely phase out angular in a year or two <SEP> Lol <SEP> that reminds me, I haven't checked on tsconf videos in a while <SEP> ah, they added them at some point <SEP> Um, you're the one who was supposed to tell me what to watch since you were there",why did our bundle just double in size?
Summarization," <SEP>   when I was working with a complex inheritance tree  I think I see the problem  :trolleybus: <SEP> That mapper.ts link I posted has a Mapper <SEP> My inheritance _thing_: ``` Process      <SEP> Kill it with fire <SEP> At least it isn't recursive <SEP> I don't think that's possible, is it? <SEP> I haven't tried it yet. Would be pretty funny <SEP> What about interfaces?",is there a way to kill a process that is recursive?
Summarization," <SEP> Uh how do I limit a type to `string | Infinity`? TS says `'Infinity' refers to a value, but is being used as a type here.`. <SEP> I don't want to use `number` though, for it. <SEP> It seems like this is literally impossible in TS for now ",how to limit a type to 'string | Infinity'?
Summarization," <SEP> are both ""componentHandler"" and ""Observable.of();"" no longer in angular 2 2.0.0-rc.1???? <SEP> @mmiszy Ok, thanks. Then I'll finish my typing and test it with the actual compiler before complaining :) <SEP> @mmiszy Ok I will, thanks",are 'componentHandler' and 'observable.of();' no longer in angular 2 2.0.0-rc.1?
Summarization," <SEP> `declare var NaN: number;` why isn't NaN parsed as a constant? <SEP> {x:1}, {x:2}, {x:1|2}, {x:1|2|3}, ... <SEP> A non-union I just call  <SEP> I think TS might be unique in letting you construct arbitrary unions?  Other languages have sum types but you have to declare them as such explicitly <SEP> You cant just go `number | string` like you can in TS <SEP> The only problem with that is we talk about types all the time that *may* be unions of types. <SEP> but yeah I agree in general the same type can be represented by a union or not in some (maybe most?) cases <SEP> but typescript *can* treat those two differently even if they represent the same (structural) type <SEP> And my intuition is that distribution could cause a different output in those two cases <SEP> ```   declarationList:    Node {      pos: 955,      end: 971,      kind: 239,      id: 0,      flags: 4194304,      modifierFlagsCache: 0,      transformFlags: 0,      parent:  <SEP> ``` s.substring(955,971) "" var NaN: number"" ``` <SEP> God dammit NaN <SEP> Remember how there was an issue asking for NaN and Infinity literals? <SEP> And the TS team said it would be too complicated? <SEP> Maybe this is why! /s <SEP> ```ts type A = { a: number } type B = { a: string } type C = { a: number | string } type D = A | B  type a = D extends C ? true : false // true type b = C extends D ? true : false // false ``` <SEP> oh crap, I forgot, that doesnt trigger distribution :( <SEP> They are isomorphic  (I think) but not the same <SEP> My brain seems to think they are really actually the same past isomorphism. <SEP> Isomorphic is also a fun word <SEP> Also, correct me if thats an incorrect definition of type equality <SEP> Neither one should distribute though <SEP> Theres no type parameter <SEP> thats what I realized <SEP> ```ts type Extends <SEP> did you mean `type DC2 = Extends2 <SEP> of course, thanks <SEP> I guess I have to remove  <SEP> Its really confusing that you need a generic to trigger distribution <SEP> There should have been special syntax for it <SEP> Yeah I had no idea until you told me the other day.  Or today.  Or whenever. <SEP> So my question is: are C and D actually the same type (in terms of possible values) and if so is this evidence that you can get different behavior by writing the type in a different way?  Even if both are true I wouldnt be surprised, I wouldnt expect the compiler to be able to prove that. <SEP> btw I didnt know  <SEP> maybe Im doing  it wrong <SEP> I feel like if nothing else they might be different under variance?  Hard to say without actually experimenting <SEP> maybe if I put crap like that on linkedin Id stop getting spammed <SEP> Id say its easier to see if the types are literals <SEP> Could use true, false, and boolean. <SEP> Ah, interesting.  Change it those types and everything becomes true. <SEP> Maybe because `boolean` is a union type itself? <SEP> Also true with 1, 2, and 1|2. <SEP> Thats what I was counting on, it still has the same shape as the original example.",why isnt NaN parsed as a constant?
Summarization," <SEP> A question. When I have a union type in TS like `export type myType = 'normal' | 'grey' | 'purple';` I get type checking in TS to ensure only those values are allowed. When the TS is compiled though is that retained as some sort of ` <SEP> no type validation at runtime <SEP> generally you dont need it <SEP> if there are no errors at compile time, it works at runtime <SEP> but there are ways of implementing it semi automatically with deocrators and stuff <SEP> look it up <SEP> As long as I don't publish the compiled js library you mean  :) <SEP> if the user doesnt thats their fault :-P <SEP> Are you referring to https://github.com/pleerock/class-validator?",is type validation retained at runtime when a union type is compiled?
Summarization," <SEP> Thanks guys, now I finally know what docker is and don't have to be lost when people discuss it <SEP> So let's start: React vs Angular :D <SEP> I'm Angular <SEP> But @fatcerberus Docker on its own is not necessarily that useful.  Theres a notion of  <SEP> Sure b/c my client wanted react b/c everyone around him use react and despite my so many words and argument, he wanted react.",what is the difference between 'react' and 'angular'？
Summarization," <SEP> yea it's not really a param <SEP> but I don't know if I can do that? <SEP> define a type inside a class, based on other types of that class... <SEP> you mean the factory? <SEP> yah but I have literally about 20 references to that type `B` <SEP> which seems excessive <SEP> but that's just for example #funtimes",is there a way to define a type inside a class based on other classes？
Summarization," <SEP> thank you Bruce for getting my lame emoji <SEP> To be fair he did say ""approximately"" <SEP> just dont know how the compiler is ok with  <SEP>  I said ""with all due respect!"" <SEP> by that, I mean semantically: `any` is assignable to and from everything `never` is assignable to everything `unknown` is assignable from everything",'any‘ is assignable to and from everything ’never‘ is assignable to everything ’unknown‘ is assignable from everything
Summarization," <SEP> Hi everyone !  I'd need some advice / help on this issue. I want to know if it is possible to make class instances generics be persistent. I'd like to have my `storeTest` variable retain its type generics over subsequent calls of the `addString` method, without directly chaining the calls on one line / expression.  Playground: https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAuB7ATgUwCqovAPA5AlgHYDmAqkQYkdKgB7ypEAmM2hp0AvNEagG6pkAPmgBvALAAoaLOjBq7AK7AkyABQBKcdOlzoAX10y5YZs3zESOdLQZNW0dleHqIALmjpNnhCgxYuJakFFQ0AD5eopIm+rJo8ErINPAAFgQQANx6ckZSedIKRNhOagElPHwA7nBlmNha2VLY-vXwAHRmFvAcJOoA5ABCADIAov2aTS1obZ3mwX1DwwCSE5lAA <SEP> ```typescript const storeTest = new StoreTest <SEP> Like that? <SEP> ``` class StoreTest <SEP> It *does* retain its generic, which is `never`, and that can never change. <SEP> Also, `StringUnion` is a phantom type. <SEP> that's what i figured. how so ? what's a phantom type ? <SEP> It's a type that's not actually used anywhere. <SEP> You could remove it and everything would work exactly the same. <SEP> this *might* be closer to what you want? ```ts const storeTest = new StoreTest(); const foo = storeTest.addString('BLE'); const bar = foo.addString('BLI'); ``` <SEP> ```typescript class StoreTest <SEP> they're all references to the same instance, but they have different types. <SEP> Not exactly, if you do `const storeTest = new StoreTest().addString('BLE').addString('BLI')`, the resulting type is `StoreTest <SEP> You'll need to chain or do what @keithlayne suggested to achieve that. <SEP> A variable has a fixed type.  You can _narrow_ that type, but you cannot _expand_ that type. <SEP> Also, what you are doing isn't expanding the type, you are _changing_ the type. <SEP> Thanks to both of you. What i imagined, since the javascript variable stores the instance and its internal changes, would be that the type of the variable could also change in consequence if necessary. <SEP> I think that's arguable: `never | T` is `T`.  You *could* look at that either way.  But I don't think it's important. <SEP> types are static and only exist at compile time. <SEP> TypeScript isn't smart enough to recognize that the generic type of your class instance is mutating as you call these methods on it.  :) <SEP> I don't know if that would be sound even if it were smart enough. <SEP> Yeah, that's what i figured. But would it make sense that TypeScript implements this in the future ? <SEP> I'm calling a method to permanently change the internal state of the instance, that wouldn't be unreasonable to be able to alter its type generics accordingly, to reflect the changed state of it ? <SEP> Depends on if it's unsound.  If so, it *should* never happen. <SEP> Unsound according to ? type theory ? <SEP> Yeah. <SEP> for now it's easy to chain all calls and reuse the resulting type somewehere else. ty for the help <SEP> But in general that method call happens at runtime, and so it can't have any impact on the type unless it can be statically analyzed. <SEP> Yeah i understand this part, and i think it can be statically analyzed, since i'm specifically giving tsc the information it needs to have an impact on it. It does a lot more complicated things related to control flow analysis. <SEP> @medfreeman You aren't actually giving enough information for that. <SEP> How so ? <SEP> You are telling the compiler, ""I'll return a thing of type `StoreTest <SEP> In this particular case, you can read the code and see that `this` specifically is returned, but one can imagine a situation where it is less obvious that `this` is returned. <SEP> You would need to make it so the return type can specify that you are returning `this`. <SEP> Is this expressible in ts ? <SEP> I don't believe there is a way to tell the compiler (currently) that the return value is `this` and it is (now) of type `...`. <SEP> yeah, without a method call even.  All that method does is cast. <SEP> (I'm assuming their real code does something else in that function) <SEP> the dangers of small reproductions <SEP> sure, it's just a contrived short example. I'm typing a js library (json-api-serializer) and try to have the types retain specific options passed as js arguments, for them to influence the response type of other methods depending on it. <SEP> The closest thing currently in the compiler is guard functions where you can do: ```typescript function isFoo(maybe: string): maybe is 'foo' { return maybe === 'foo' } ``` <SEP> This will result in code elsewhere that does `isFoo(myString)` correctly narrowing to type `'foo'` if that function returns true. <SEP> ugh your hands are pretty much tied in that case <SEP> Yeah i use custom type guards in specific cases, like asserting that an json schema object is of corresponding typescript type (automatically generated by a json schema -- <SEP> So useful <SEP> You might also have to protect from a user passing a dynamic string into the method, at that point `T` becomes `string` forever, which probably isn't too useful. <SEP> Exactly. I also battled a lot against type widening to keep string literal types instead of the primitive `string` types. <SEP> while doing conditional types and inference. i'm probably better rewriting the library from scratch ^^ <SEP> which is totally legit in JS <SEP> Yeah that's what I keep coming back to.  When you write something in TS it's going to end up different than if you started in JS.",is it possible to make class instances generics be persistent？
Summarization," <SEP> Do you know if flow does this better or it has the same design? <SEP> You are correct. <SEP> btw, I still to this day confused about the ~~relatiionship~~ differences between `void` `never` with `undefined`, expecially in generics: ```ts interface X <SEP> Nice explanation on void and never. `undefined` and `null` as value is self explanatory. But what is the differences when used as type? <SEP> there's not much to it.. a variable with type of `undefined` can only be set to `undefined` <SEP> Thanks. I often use it when I want to silent the generics. Hopefully with generic defaults is available I dont have to to this much longer. :smile: <SEP> However still need this to be fixed first #12400 <SEP> although in strict type checking mode you can't assign it null <SEP> Almost, but the thing is I want to have a definitive way to distinguish when to use which. So that it wont confuse newbies. <SEP> Your description ""void means the function returns but with no value  <SEP> well these are types that you should rarely use",what is the difference between void 'never' and 'undefined'?
Summarization," <SEP> @AnyhowStep Can you make an article on making meaningful type error messages and post it on dev.to? That'd be great! <SEP> I know nothing about making meaningful type error messages, though <SEP> And I wouldn't recommend it to anyone yet. Not while TS doesn't have official support. <SEP> For example, https://github.com/microsoft/TypeScript/issues/32442 <SEP> This issue was created because having conditional types and intersections appearing in parameter lists breaks stuff in weird ways <SEP> Also this, https://github.com/microsoft/TypeScript/issues/32540  The best use of the `CompilerError` type I've been playing with is with generic callback functions. You check the return type satisfies a condition and cause an error if it doesn't.  However... TS **hates it** when you try to check the return type of a generic callback function in a parameter list <SEP> I **think** finally found a way to do it without breaking TS.  However, doing it requires adding intersection types in parameter lists. And that makes `F`  not assignable to `F`, even though they have the exact same signature. <SEP> If you never need to assign one generic function to another, I guess it's okay. <SEP> Not many people need to do that, I think. But I do, and it's killing me, lol. /rant <SEP> ``` forwardPro",how to make meaningful type error messages with CompilerError type
Summarization," <SEP> A while ago, I could long press, go to command palette, tell it to show hover <SEP> Now, long press breaks and the cursor moves when the context menu opens <SEP> So, I can't even show hover at my cursor position, since cursor position moves <SEP> Things just keep getting worse for Android support lol <SEP> can't find it <SEP> what are the compiler options to enable optional chaining <SEP> and nullish coelish <SEP> Isn't that just on by default? <SEP> hold on i'll get the error message its in 3.7.0-rc <SEP> 3.7.1-rc* <SEP> ahh yeah fuck it is enabled by default the error is i'm compiling with babel <SEP> and i need the transformer <SEP> success :) <SEP> so beautiful can't wait for the full release",what is the compiler option to enable optional chaining and nullish coelish
Summarization," <SEP> Hello everyone, I'm not sure this is a bug or not, but I thought I'd ask here before reporting it in Github. <SEP> I'm loosely considering this a bug, but I can venture a guess that this is a feature that has not been implemented yet. If the latter is true, is there a planned release date for removing this restriction?  **TypeScript Version:**  2.0.3  **Code**  ```ts type Types = 'A' | 'B';  let typeA: Types = 'A'; // Works fine let typeB: Types = 'b'.toUpperCase(); // Compile error ```  **Expected behavior:**  TypeScript should be able to distinguish the results of a basic string operation and determine if the result matches the defined string literal type. This makes writing APIs that have to do some kind of conversion seemingly impossible if we also want a restrict the values to a subset of string literals.  **Actual behavior:**   Compile error seems to convert the value of any string operation to the generic type `string` and not the the literal result of the operation. Here's the below error:  ``` Type 'string' is not assignable to type 'Types'. ``` <SEP> Any assistance in the above would be greatly appreciated, and thanks for building such an amazing product :) <SEP> @cerebrl  That's a slippery slope should this also be valid? ``` var typeA: Types = 'astring'.substr(0,1).toUpperCase(); ``` <SEP> I'm not sure what your use-case is. These are string **litertal** types.  Under what circumstances would you prefer to write 'b'.toUpperCase() vs 'B' <SEP> @dtabuenc: Perfect, thanks <SEP> What is the idiomatic way to declare these? Should I be putting the `interface` declarations in a separate file like some kind of `actions.d.ts`?  ``` export interface IActionTypes {     FETCH_CUSTOMERS_REQUESTED: string;     FETCH_CUSTOMERS_SUCCESS: string;     FETCH_CUSTOMERS_FAILED: string; } export const actionTypes: IActionTypes = {     FETCH_CUSTOMERS_REQUESTED: ""customers/FETCH_CUSTOMERS_REQUESTED"",     FETCH_CUSTOMERS_SUCCESS: ""customers/FETCH_CUSTOMERS_SUCCESS"",     FETCH_CUSTOMERS_FAILED: ""customers/FETCH_CUSTOMERS_FAILED"", };   export interface IFetchCustomersRequested extends Redux.Action { } export interface IFetchCustomersSuccess extends Redux.Action { customers: models.ICustomer <SEP> @dtabuenc My use case is I'm given the lowercase version from one source and a second source expects it to be uppercase. I don't have the ability to change either, so our layer acts as a middleman needing to convert the value. <SEP> I understand not all string methods should be ""allowed"" in this particular case, but something as simple as toUpperCase or toLowerCase is fairly straight forward <SEP> A say ""simple"" being totally ignorant in the amount of work it takes to develop these features in TypeScript, but simple just meaning relative to other string methods. <SEP> But in order to convert you won't be able to use a literal. You have to use a variable. So you'll have to do type assertion of some sort or your type guards. <SEP>  type assertion  Not sure what you mean <SEP> you mean type casting? <SEP> technically it's not called casting because it's not run-time. <SEP> but yeah casting. <SEP> ah, didn't know that <SEP> Do you have an exmaple of how you would expect it to work in practice? <SEP> and by type guards, you just mean a conditional that checks for lowercase and does a toUpperCase on it if true? <SEP> Yeah, let me see if I can simplify a more realistic example <SEP> That would really help. I think you *might* find that what you are asking for won't really work in a real situation. <SEP> wihout  a type assertion <SEP> Okay, thanks for you help, Daniel! I'll try to get a more realistic example shortly <SEP> @cerebrl  ```  type UpperTypes = 'A' | 'B'; type LowerTypes = 'a' | 'b'  function callThatTakesCaps(arg1: UpperTypes){  }  var  lowerCase: LowerTypes = 'a';  callThatTakesCaps(lowerCase.toUpperCase() as UpperTypes);  ``` <SEP> Oh, that's nice :) <SEP> It's just that typescript can't make that automaticc inference from Lower to Upper. I think that would be difficult to implement and not worth it. <SEP> That's pretty much exactly what I needed. Thanks @dtabuenc. You're amazing!! <SEP>   I think that would be difficult to implement and not worth it.  Sure, I can see that. I'm sure my case is quite rare. <SEP> Considering your solution is sound and efficient, there's no need <SEP> @soelinn We do in certain instances. We have a rule to declare interfaces within the file in which it's used if that's the only place it's needed. But, once the definition is required outside of that file, then we pull it out into a `.d.ts` file in a dedicated definitions directory.  But, if we are developing a module to be used by third parties, we always include it in our public interface definitions directory and reference them in our docs. `export`ing those definitions as well, in case other TS users need them. <SEP> So, this is an application with internal modules? When I said modules, I meant like NPM modules. Sorry if that was confusing <SEP> If this is an application, I'd just put the definition files closest to its use. <SEP> okay, yeah, so just put the definition files as siblings to the files that use them <SEP> yes <SEP> but once module A and B use it, then pull it out into a global ""definitions"" directory <SEP> yes",is there a planned release date for removing the 'compile error' restriction?
Summarization," <SEP> Hi, can anybody help me with this proof of concept?   abstract class Animal {   abstract talk(): string;    makeSound(): string {    return talk();   }  }   class Dog extends Animal {   talk(): string {    return ""Wuof"";   }  } In the abstract class the talk() call is not recognized :S <SEP> @mariowise: Properties need explicit `this.` in Javascript. It should be `this.talk();` Has nothing to do with abstract <SEP> Ou, right.. let me put this again, I've an error <SEP>  abstract class Animal {   abstract talk(): string;    static makeSound(): string {    return this.talk();   }  }   class Dog extends Animal {   talk(): string {    return ""Wuof"";   }  } <SEP> The makeSound can not be static? <SEP> How would a static method know what `this` refers to <SEP> Yea... totally true <SEP> thanks, re-thinking the whole thing xD <SEP> It is a bad example... let me think if I can express better what I'm trying to do...",how can a static method know what 'this' refers to?
Summarization," <SEP> https://www.typescriptlang.org/docs/handbook/functions.html#optional-and-default-parameters <SEP> the second parameter is a function which is defined inline <SEP> but I cannot really tell ehat yur code represents without having a full example <SEP> if I use a type union for it <SEP> I might achieve what you said <SEP> yes union type is also an option to limit to just one signature  if you have different types in same position <SEP> well thinking about it nop <SEP> but look like an awry api xD <SEP> I gotta keep the current signatures <SEP> @agalazis thanks :) <SEP> they return the same you said <SEP> so it's do able <SEP> doable, yes <SEP> writing the return once, I didn't find anything in the documentation about that <SEP> I am asking because in rtype it's possible <SEP> if you want  t restrict combinations of types you still need overloading <SEP> xD <SEP> and I am used to it <SEP> so not doable xD <SEP> the union etc signature would just be the base one and overloads needed <SEP> another use case that I couldn't find in the documentation is passing a string using generics to a computed property <SEP> so  not doable sorry unless you are doing something trivial like optionals  or having a last property that varies in type <SEP> oh ye in that case you could do something like <SEP> : <SEP> ` <SEP> ``` export interface Foo <SEP> lemme try :) <SEP> it's not really cleaner but still <SEP> yeah that's not shorter than what I currently have, thanks though <SEP> You would only need this if you have multiple types that extend IwannaTypeThisOnce that are applicable that you specify n the fly when using the interface <SEP> Generics are not as much  about shortness as for flexibility and structure <SEP> yeah but like I said the only time I had to use them I couldn't <SEP> I couldn't pass a string using generics to a computed property... <SEP> that",is there a way to limit the number of signatures in a union?
Summarization," <SEP> the constructor requires a subscriber function, doesn't it? <SEP> the page I sent closely resembles of what you need to pass the Observable constructor: a subscribe function. Look at the `Rx.Observable.create` parameter. <SEP> Im trying to do the same but it throws me an error :cry: <SEP> ```typescript source = new Observable <SEP> ```typescript let source: Observable <SEP> That should be working, right ? <SEP> nope <SEP> What should I do exactly ? :worried: <SEP> writing... <SEP> Oh im sorry take your time :smile: <SEP>  <SEP> should be something along the lines of (I'm not compiling, so I may be doing a short mistake): ``` source = new Observable <SEP> This works! thank youu :smile: <SEP> as my Haskell teacher would say: just read the types ;)",how to add a subscriber function to the observable constructor?
Summarization," <SEP> Erasing the last few messages from my memory. <SEP> If I wanted to write JS I would, you know, just write JS <SEP> So does this make sense then? ```ts const a = { foo: '', bar: '' } type A = typeof a // type A = { foo: string; bar: string; } type I = A <SEP> Yeah - the phantom index signature only seems to exist for the purpose of assigning the whole object <SEP> Yeah I see now, `a` is assignable to `IndexSig`. <SEP> I haven't found anywhere where this is documented either <SEP> (somewhere in `checker.ts` clearly :wink:) <SEP> Yeah its pretty hard for me to buy that as a feature. <SEP> Can we convert a type to an interface? <SEP> `interface TypeToInterface <SEP> I mean, aside from interface/object-like types <SEP> Im just guessing BTW, I dont know if that flips some magical switch in the type checker. <SEP> It was a clever idea but: `An interface can only extend an object type or intersection of object types with statically known members.` <SEP> `T extends object` then? <SEP> hold up a second <SEP> whats the actual problem? <SEP> ``` type Foo = { foo: string, bar: string }; interface Bar { foo: string, bar: string }; type IndexSig = {  <SEP> YOU ARE <SEP> Both of those error? <SEP> YES I KNOW KEITH, I OBVIOUSLY MEANT ASIDE FROM ME <SEP> @G-Rath That was the second case, where I changed the type of the index signature.  Change the index sig to `string` to see the issue <SEP> :laughing: <SEP> @fatcerberus ah cool - I knew you'd done that at somepoint, but wanted to be sure I was looking at the right example :) <SEP> So   ```ts type Foo = {     foo : number } interface Bar extends TypeToInterface <SEP> But, then, if we extend Foo, we don't need it? <SEP> I mean if I wanted to turn that into an interface, then I would just turn it into an interface. <SEP> I think the idea was to use `ToInterface <SEP> It won't let you `extends` a generic type parameter <SEP> @keithlayne thats why I'm wondering what the actual problem is - I assume it's coming from a library...? <SEP> Hey I thought this guy was supposed to be on vacation - https://github.com/microsoft/TypeScript/pull/32386 <SEP> But with all of the above, ```ts interface Baz extends Foo {} declare const baz: Baz; let x: IndexSig = baz; // error, yay ``` <SEP> Oh so extending the type with an interface gets rid of the bad behavior, that's good to know <SEP> But is there a valid type constraint that will make it work generically? <SEP> I dont think so. <SEP> Would converting the Foo type to an interface fix the cyclic issue? Let me try it... <SEP> Heeeey,  <SEP> You can't do recursive type aliases because they're essentially macros - the compiler has to fully expand it in order to use it as a type <SEP> Good to see that fixed it :) <SEP>  Heeeeey  Makes me think of the Fonz. <SEP> haha <SEP> You know, I still haven't figured out what the ""eyes"" emoji reaction is meant to symbolize on GitHub.  Some people use it as a ""rolling eyes"" reaction but then I've also seen cases where the same person uses that and a ""thumbs up"" on the same post so... yeah.  Kind of vague",can we convert a type to a typescript interface?
Summarization," <SEP> @fatcerberus <SEP> :point_up:  <SEP> Wait so what does providing `env` concretely do?  I thought the whole idea of `IO` is that the only reason it's pure is because it can't actually do stuff until you provide the environment (and only the Haskell runtime can actually provide it).  Once you provide it all bets are off <SEP> Is there to be a separate method to execute? <SEP> Yes. You use a runtime to execute the IO <SEP> `runtime.execute(io.provide(env))` <SEP> https://github.com/tusharmath/fearless-io/blob/master/GETTING_STARTED.md#executing-fio <SEP> Would there ever be a case where you call `provide` without calling `execute`?  I feel like you could avoid the extra step if you just make the API go `runtime.execute(io)` <SEP> But anyway I digress - we're trying to solve a typing problem here <SEP> I just find this API really interesting for some reason <SEP> Higher-order environments, okay that's a bit mind-bending but whatever floats your boat :boat: <SEP> But yeah see above ^^^",Is there to be a separate method to execute?
Summarization," <SEP> does anyone know why I'm getting `Type 'U' cannot be used to index type  <SEP> hmmm well, I fixed it using this https://gist.github.com/corasaurus-hex/412f291a4615b1d7cd60a2c88e13218f <SEP> I guess that works <SEP> i have the absolute weirdest thing i've ever seen going on.  I'm making a copy of an object using const newThing = { ...oldThing }  ... but the new thing is coming out with all of it's properties read only. <SEP> i don't understand why the original object is also read only <SEP> and it seems to be copying that <SEP> oooh. the original is a react state object <SEP> so copying it is also copying that <SEP> aha, shallow clone. got it.",why i getting Type 'U'  that cannot be used to index type?
Summarization," <SEP> Hello all :) does anybody know if it's possible/how to augment a class in a module given that that class is the default export and that there is no interface declared for this class? <SEP> Hm you could extend it and likely define a type for it <SEP> Yeah, that might just have to be the stopgap. Although I was hoping for some way to do it using augmentation directly. Reason being is that the type definition for better-queue has a missing property and I don't want to have to wait for it to be updated. <SEP> I suppose I could also copy the definition to a types folder and keep a local copy until the one on the registry is updated <SEP> Yeah, that worked, but it feels like a hack. Would be nice if interface/class merging worked with module augmentation though!",is there a way to augment a class in a module?
Summarization, <SEP> got a weird error with react <SEP> @ashish51_gitlab  looks like the domain expired: http://typings.org <SEP> ``` export class TransferLocation extends React.Component <SEP> `Cannot find name 'render'. Did you mean the instance member 'this.render'?` <SEP> I just shipped search for the TypeScript website :tada:,can not find name 'render' with typescript
Summarization, <SEP> I keep getting that `property 'target' does not exist on type 'HTMLInputElement` even though all examples I've seen for getting the value of an input is `event.target.value`. I'm using `typescript3.7.5`. <SEP> `s/Element/Event/`? <SEP> https://www.typescriptlang.org/play/?ssl=2&ssc=25&pln=1&pc=1#code/CYUwxgNghgTiAEYD2A7AzgF3iAbhgXPANIgCeARkrMAKI4goYDcAsAFDLpYYibwC82PAH4AdBlgBzEBiA <SEP> in in React.ChangeEvent,keep getting that 'property 'target' does not exist on type 'HTMLInputElement' using typescript3.7.5
Summarization," <SEP> Probably `T extends string | number | null` should work <SEP> I dont understand what you mean <SEP> `{ a: """", b: 0 }` is ok, `{ a: false }` or `{ a: {} }`is not <SEP> Thats governed by what `T` is if I understand it correctly so you have to put the constraint on `T` <SEP> Yeah, the problem is I don't know T at compile-time, its dynamic <SEP> At my computer now, looking at the example more closely I don't think its really what I need <SEP> TypeScript types dont exist at runtime, they are completely erased <SEP> I want basically a few known keys to have certain properties and the rest follow an index signature <SEP> I got close to that with an intersection type but it doesn't work on literal assignment, though indirect assignment works strangely <SEP> Seems that `index type` + `known type` isn't really supported by TS other than `known type` fulfilling `index type` <SEP> Oh, I see - you want to be able to use any key (except `_children`) without having to explicitly declare them all <SEP> Yeah, thats not going to be possible to express in the type system, index signatures are all or nothing <SEP> Yeah <SEP> Bummer <SEP> The issue is that the index signature is used for any `obj",'T extends string | number | null' should work fatcerber
Summarization, <SEP> Hey <SEP> I was reading the TS docs about decorators https://www.typescriptlang.org/docs/handbook/decorators.html and I had a question <SEP> is there a preferred way to document decorators with docblocks? I haven't seen anything about it <SEP> example: <SEP> ``` @Injectable() export class IdeaService {   /**    * Inject the IdeaEntity into the service    * @param ideaRepository TypeORM Respository with the IdeaEntity injected    */  constructor(@InjectRepository(IdeaEntity) private ideaRepository: Repository <SEP> what would be the ideal way to document code like this? <SEP> Anyone aware of a type safe `memoize` function? When I use lodash's I lose generic types:  ```ts   private memoizedHandleChange = memoize(      <SEP> ! <SEP> ! <SEP> ```ts  <SEP> True. <SEP> Yeah. <SEP> yeah <SEP> yep <SEP> The pattern is not to prevent allocations but to prevent shallow equality changes in the props passed to sub-components in `render()` <SEP> Yep. <SEP> :+1: acknowledged <SEP> I guess I can also `private static handleChange` too,is there a preferred way to document decorators with docblocks?
Summarization," <SEP> Hello,   i am trying to read a text file and assign each line as a string value in an array  ```     import { readFileSync } from 'fs';     const apis = readFileSync('../api.txt', 'utf-8');      for (const api in apis)     api.root.addResource(apis <SEP> api.split(""\n"") <SEP> apis.split(""\n"")    // array of lines <SEP> Thank you @ShanonJackson <SEP> Is there a way to infer `this` from a function signature? ``` type InferThis <SEP> ```ts type q = ((this: string, a: number) = <SEP> `ThisParameterType` is the built in version of that ^ <SEP> is there an option in tsconfig to disallow assigning a literal number to an enum type <SEP> @lazarljubenovic What about simply telling TypeScript the type there?",is there a way to infer 'this' from a function signature?
Summarization," <SEP> the evolution of the mixin pattern: https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know/ <SEP> Overloads in an interface when the function being overloaded may also be undefined? (Like, marking up a variadic function thats may or may not be sitting in `window`). <SEP> Right now Im using generics with an `extends` ternary, which is fine, but Im wondering if Im missing something obvious.",overloads in an interface when the function being overloaded may also be undefined
Summarization," <SEP> Hey guys, is there any way to preferentially pick a certain extension over another with typescript? e.g. match both `.web.ts` and `.ts` but prefer `.web.ts` when there are two files present <SEP> @frederickfogerty Depends on the system you're running :) <SEP> For example, in Webpack, I can specify the resolve extensions... <SEP> Hey @sam-s4s yeah, I love webpack. Unfortunately we aren't using webpack because we don't want to emit a bundle, we just want to transpile the files (this is a module) <SEP> Just using tsc? <SEP> So we're stuck with vanilla TS at this stage, although we are welcome to use another tool, such as gulp, if it can emit multiple files (i.e. just transpile, don't bundle) <SEP> oki - sorry, I'm not sure then! <SEP> Thanks man <SEP> You can use Gulp though <SEP> I'm playing around in Angular 2 land, myself - and I've made both a Webpack and a Gulp build script :) <SEP> Webpack loves to bundle by default, but Gulp can do whatever - Browserify can make it bundle, but if you don't want that... you can just not use it :P <SEP> So I assume you could set gulp up to load the files with the correct extensions? <SEP> @sam-s4s yeah that would be ideal. Do you know of a plugin (such as merge) which would **only** match the preferred file? <SEP> e.g. if I had entry.ts and entry.web.ts, it would **only** match entry.web.ts, but still match other .ts files where there isn't a conflict? <SEP> Well, in gulp, you do things in pipes - so first step, load the files you want... gulp.src('src/**/*.ts')  and second step, compile them... .pipe(ts({     noImplicitAny: true,     out: 'output.js' }))  and then third step, output them... .pipe(gulp.dest('built/local')); <SEP> So I imagine you could figure out a way to do what you want... <SEP> (this is just using gulp-typescript) <SEP> Yeah.. ideally I'd merge the streams into one so tsc can do its static analysis <SEP> Interesting challenge though - any reason why you have 2 ts files for some things? <SEP> Sharing code between React for Web and React Native <SEP> basically you have `.ts` = <SEP> Need to require different files/modules based on the platform sometimes <SEP> and can't do it with dynamic requires <SEP> So you just want to deal with it in the compile stage... have 2 different build configs, one that ignores/replaces certain files with their web/native counterparts <SEP> There will be a way to do that in Gulp, I'm sure <SEP> I, however, just started using it yesterday, so I'm unsure of what exactly :P <SEP> Yeah.. I'm hoping so.. or I might have to write my own plugin <SEP> It's really just for the static analysis <SEP> so that TS will check both paths",is there any way to prefer a certain extension over another with typescript?
Summarization," <SEP> the typed command like Derived (in your example) is needed to group multiple commands with the same behavior (execute) <SEP> What is the purpose of multiple commands with the same behaviour? <SEP> (And I want to check - by 'typed', you mean 'written', not that it has types right?) <SEP> @TomSputz Same behaviour means that they behave exactly the same, but with different context. <SEP> For example, I'm creating as many RemoveCommands as many lines I have in a list, therefore each of the line can be deleted, but how I do the deletetion, is the same, just the context is different <SEP> Right, so a class ``` class Command {   execute() {     throw new Error(""Unmodified"")   } } class Derived extends Command {   tolog = ""unset""   execute() {     console.log(this.tolog)   } } const a = new Derived() const b = new Derived() a.execute() // unset b.execute() // unset b.tolog = 66 a.execute() // unset b.execute() // 66 ``` <SEP> in this example, you cannot create a Command on the file with overridden execute <SEP> and I need that ability <SEP> so I cannot only rely on the Derived class, and create an instance of those <SEP> I would like to create a command on the fly, like: const command1 = new Command(); command1.execute = () = <SEP> But.. that works fine :/ <SEP> my ts lint says that it's not, because i'm trying to override a method, and it should be a property <SEP> Well yeah, its bad practice <SEP> so tslint is telling you that it is",the typed command is needed to group multiple commands with the same behavior (execute)
Summarization," <SEP> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors <SEP> TIL, I thought non-enumerable symbol properties were completely inaccessable, without the original symbol. <SEP> Ah, I guess that makes sense. <SEP> the #private stuff uses scoped weakmaps <SEP> and some compile checks <SEP> the symbol stuff is still just using the object prototype chain <SEP> you mean, internally, inside of v8? <SEP> ya <SEP> oh, wow. I really thought there'd be a better way <SEP> I wish jsperf was still around. <SEP> I used to benchmark every new feature <SEP> I miss it too <SEP> the alternatives that have popped up are...not the same <SEP> I haven't seen any alternative that'll actually host the benchmark code. <SEP> got a favorite alternative? <SEP> @keithlayne to answer you question, I use the class as a baseclass to be extended, and I also use the class as a value in a possible prototype chain <SEP> jsben.ch I use sometimes---but don't love it <SEP> this? <SEP> Is there a way to get the return type of a function depending on the argument? Some type-level apply. With ReturnType I lose the information. ~~~typescript declare function f  <SEP> I still haven't quite gotten a sense of where you can use typeof and where you can't <SEP> you can use `typeof` with any value, in a  type context <SEP> anywhere a type is expected, you can apply it to a value. <SEP> it may not have been the use of `typeof` exactly. <SEP> I'm still waiting for `typeof class {}`: https://github.com/microsoft/TypeScript/pull/41587 <SEP> lol <SEP> Ah we got abstract constructors in 4.2: ``` let Ctor: abstract new () = <SEP> (sorry, it's a not-very-inside joke) <SEP> I feel like I'm on the little bus everyday my friend <SEP> but, now you should share with the class? <SEP> inside jokes are not very nice :) <SEP> it's curious that the new (...args: any) =",why is the non-enumerable symbol properties inaccessible without the original symbol?
Summarization," <SEP> are there multiple instances of these classes at runtime? <SEP> nope <SEP> yeah so I really don't think there's much point to singleton classes in JS. <SEP> modules cover that quite nicely. <SEP> i should read the docs <SEP> discord already had all that baked into its official lib <SEP> My approach would be to have a directory of your commands that are just modules that fit the interface you want.  Then you i.e. re-export them in index.ts, then at your entrypoint just do `import * as commands from './commands';` Then iterate over all of them and call the `register()` function from the modules. <SEP> yep, that's what i'm looking at <SEP> RTFM indeed",are there multiple instances of these classes at runtime?
Summarization," <SEP> yeah that sounds like a tricky balance, in any language <SEP> typescript maybe to help me code faster? (Im still waiting for this) and some runtime checks to help me make sure Im in a world that isnt upside down? <SEP> It took me a long time to get out of that mentality, I used to try to make my functions as resilient as possible, even when I knew I was the only person who would ever call it.  I don't really do that anymore",is there a way to make my functions as resilient as possible?
Summarization," <SEP> Hi everyone, I'm having a hard time understanding this line :  ```    <SEP> what are the square bracket doing ? <SEP> calculated property keys <SEP> https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer <SEP> at least that would be my guess <SEP> is it somehow possible to loop with template strings?",what are the square bracket doing ?
Summarization," <SEP> Hey - writing a declaration file for a library that uses HTMLElements, how do I import that type into my declaration file? <SEP> Tried: `import {HTMLElement} from 'lib'`, since it lives in lib.d.ts as far as I can tell but there's no corresponding @types/lib and it can't find the type as written <SEP> they're in the global namespace <SEP> Getting `Cannot find name 'HTMLElement'` when I try to use it <SEP> Do you have ""DOM"" in the lib setting in tsconfig? <SEP> No -- technically this is node but I will try that <SEP> Well, there are no DOM elements in node. <SEP> Worked like a charm -- thank you <SEP> Yea, this is an odd case, since it is an acceptance test library <SEP> Runs in node but can execute functions against the browser <SEP> hmm ok <SEP> it doesn't affect runtime <SEP> Awesome -- Thanks for the advice",how to import a type from a library into a declaration file?
Summarization," <SEP> :thumbsup: <SEP> thanks both <SEP> One other major difference is how index types work on interfaces versus type aliases.`interface Foo { value: string }`creates a type `Foo` that may have additional properties. `{ value: string }` does not. <SEP> I don't think that's the case - if a function takes a parameter of type `{ value: string }` you can freely pass something with more <SEP> It's part of structural typing <SEP> Typescript may complain that `Foo does not have an index signature` when using an `interface`. That can be fixed by using a type alias. <SEP> It only checks for excess in object literals <SEP> Unless you mean something different <SEP> @webstrand re. index types, I'm not sure what you mean?  ```ts export type Foo = {   foo: string }  export const foo: Foo = {   foo: ""foo"",   another: ""another"" // Object literal may only specify known properties, and 'another' does not exist in type 'Foo'.ts(2322) }  export interface Bar {   bar: string }  export const bar: Bar = {   bar: ""bar"",   another: ""another"" // Object literal may only specify known properties, and 'another' does not exist in type 'Bar'.ts(2322) } ``` <SEP> Using either `type`or `interface` throws the same error <SEP> Yeah I'm confused too - you don't get an index signature for free <SEP> In either case <SEP> Here's an ",how do index types work on interfaces versus type aliases?
Summarization," <SEP> @sheshtiwari first of all I canoot see implementation of `getDefaultChannel()` in your listings I belive the obvious issue that `getDefaultChannel()` returns `undefined`.  Why it returns `undefined` depends on implementaion. What I could see is that `initChannels` is asyncronious and might not be called, or it might be called but not completed before `channelService` is injected for `RoleService`.  If it is called - I suggest to make `getDefaultChannel` async and rewrite assignment to next `role.channels =  <SEP> othewrise you have to call `initChannels` in every service that consumes `ChannelService` <SEP> is there a way to exclude files in the tsconfig.json via terminal like the compiler options? e.g  `tsc --init  -t ES5 -exclude node_modulee` ?",is there a way to exclude files in tsconfig.json?
Summarization," <SEP> Hi all, <SEP> i want to import lodash within a typescript file but lodash library does not have no type definitions.  Anyone know how to work around this? my typescript says something like this:  src/services/menu.ts(26,9): error TS2304: Cannot find name '_'. menu.ts is my typescript service everything works great without lodash <SEP> ",lodash library does not have no type definitions when importing lodash within a typescript file
Summarization," <SEP> Guys,how can I import `React` types in my `global.d.ts` file? <SEP> @yuanalexwu You can't import inside of a global.d.ts. Does something like ```ts //  <SEP> work for you? <SEP> I will have to recommend against doing that, though. Why not declare and import your types from a regular `.ts` file?",how to import 'React' types from 'global.d.ts' file?
Summarization," <SEP> Hi, what is the best issue to test if a var is falsy in TS ? Thx in advance <SEP> @pierreboissinot hmm <SEP> considering most values in js are truthy (even empty arrays, objects, some strings) <SEP> you'd only have a couple of falsy values <SEP> what comes to mind <SEP> ``` false 0 null undefined NaN """" ``` <SEP> @wanderer06 right, ok <SEP> thx <SEP> maybe  ``` NaN ``` <SEP> I would say because TS is typed <SEP> a safe check would always be for the type first <SEP> ``` if typeof foo === 'number' ``` <SEP> @pierreboissinot just try and always use strict equality and you shouldn't have any problems <SEP> @wanderer06 ok, I thank you for the help ... I'm using typeScript through Angular <SEP> no worries! <SEP> so I found this out from an article  ``` NaN == NaN // false ```",what is the best issue to test if a var is falsy in TS ?
Summarization," <SEP> Very interesting, thanks.  Any ideas how I represent what I want? I have reducers that don't take an action.  I tried making `action?` optional but then it complains everywhere that I'm not guarding against it possibly being undefined. <SEP> Oh sorry you just gave me an example. <SEP> Yeah. I've seen function overloads all over the place. Where based on the signature it decides which type to use. <SEP> Can I reproduce this online somewhere, that will show the output of tsc ? <SEP> Thanks. This works and reproduces my issue: https://typescript-play.js.org/#code/C4TwDgpgBAYg9nKBeKAKVAjAhgJwFxQDOwOAlgHYDmAlMgHxEkU1QA+amuBxZVANFGwAvAhgQAbCFnK0kDHs2oBuAFBqAxnHLEoAEzjw4BQ8jTYcA4bIYByAEoRgAVxzkAshBsatO-YYBMxgimnDjWUPaOLu6eSkA <SEP> So now I just have to find some sensible way to give me a single type that takes either function signature. <SEP> Is there some reason to not use `type Foo = (bar: string, baz: boolean) = <SEP> ... Wait. That works... <SEP> Oh geez. Okay so my mindset has been wrong. I've been thinking that because my type defines two arguments, it would be an error if I tried to apply that type to a function that only takes one. <SEP> Oh interesting. So the function definition doesn't complain anymore. But usage of that function complains that I'm not passing it a second argument.  So while unfortunate. Yes, I can just pass a dummy action to it.  https://typescript-play.js.org/#code/C4TwDgpgBAYg9nKBeKAKARgQwE4C4oDOw2AlgHYDmANFFgF77oIA2EmZAlMgHyHHkUA3AChRAYzhkiUACZx4cfAuRos2GvS5JeAcgBKEYAFdsZALIQd4ydLkKATEoQqMOLboPHTFnSNF2EVB0AIRwdGmIjCA5-eQR7INDsHS4oAHo02kwZYSA <SEP> That's so weird. <SEP> Right. <SEP> I somewhat understand what's going on here. But academically speaking, is this not solvable? Isn't this kind of function overloading valid in Java or C# or whatnot? <SEP> Oh, I guess I'm not function overloading. I'm trying to apply the same type to different functions. <SEP> You could also just specify the type of the arguments of the function and leave off the `Foo` assertion. https://typescript-play.js.org/#code/C4TwDgpgBAYg9nKBeKAKARgQwE4C4oDOw2AlgHYDmANFFgF77oIA2EmZAlMgHyHHkUA3AChRAYzhkiUACZx4cfAuRos2GvS5JeAcgBKEYAFdsZALIQd4ydLkKATCow58RUpS26Dx0xZ0jROwRUHQAhHB0aYiMIDkD5BHsQ8OwdLgB6dKgAeQBrUQAzOGw0CSlgKAKoOCqAbVkEuBoguEcAXS4Ab2EoXsrkiKjsGIysuHyAX2EgA <SEP> Not assertion, declaration I guess <SEP> That's true.   Ostensibly I could have two types:  ReducerThatTakesAction,  ReducerThatDoesNot",is there a way to make 'action?' optional in reducers?
Summarization," <SEP> i know this is an angular component, but for ControlGroup I'm trying to figure out how to properly access the controls within the ControlGroup in a strongly typed way. when I have ControlGroup with nested ControlGroups this turns into quite a mess (controlGroup.controls <SEP> @mark-norgate tried reviews =  <SEP> They would certainly get an error message/hint, yes.",how to access controls within a nested ControlGroup in angular?
Summarization," <SEP> I have a small TS project inside the root dir of a larger TS project, ie `/main/tsconfig.json` and `/main/sub/tsconfig.json` when I run `tsc` in `sub` it seems to go up to the parent dir and try to compile that <SEP> How do I prevent it from doing that? <SEP> It isn't <SEP> tsc --listFiles --traceResolution <SEP> wow that output a lot of stuff <SEP> the second @types is the parent project... I don't want it to include that <SEP> I want it to just compile with the `/main/html/type-gen/` folder, nothing outside it <SEP> I am not referencing anything in the parent dir from the child dir",how do i prevent 'tsc' from going up to the parent dir 
Summarization," <SEP> https://github.com/microsoft/TypeScript/wiki/FAQ#what-is-type-erasure <SEP> right, i need to read that, and play with it too, thanks <SEP> Chuck some interfaces, generic functions, type literals in there and watch the output compared to real values <SEP> ```let fn: ",what is type-erasure and how does it work?
Summarization," <SEP> Object and array literals dont need to be checked because mutation cant affect anyone else - as long as its assignable youre safe <SEP> It wasn't the very first thing I thought of, though. Type safety is hard =/ <SEP>   Please don't @-mention me in threads I'm not subscribed to. I refer to what I already wrote above. Your comment is insulting and more than useless. Go and learn some manners!",Object and array literals dont need to be checked
Summarization, <SEP> Hi @dtabuenc  thanks for yesterday that works in angular :D <SEP> I have question more close to TypeScript What is the best strategy to script compilefrom Ts to ES5 there is a way to use Promise or we have to use callback only? <SEP> @d-m-h,what is the best strategy to script compilefrom ts to es5
Summarization, <SEP> :( <SEP> The thing I was using for type checking because TS doesn't have its own public type checking API <SEP> It crashed because it couldn't find the type param for one of my generic functions. <SEP> Added a try-catch lol <SEP> !,can't find type param for one of my generic functions
Summarization," <SEP> Hello :)? everyone sleeping? <SEP> No ;) <SEP> Nice i hope you can help me tom, I got a couple divs, and I want to add some classes to it, and add a border on the specfic item when its clicked with the class active added to it.. having no luck with this.. <SEP> ```typescript      $().click(function() {                 /*  let findAnchor = convoElement.find("".ElementWrapper"")  */                 /*  findAnchor.text((converSation.Sehor); */                                  if (converSation.Selected == false) {                 $(this).removeClass(""false"");                   $(this).addClass(""active"");                   converSation.Selected = true;                /*     converSation.Selected = true; */                 } else {                 $(this).removeClass(""active"");                 $(this).addClass(""false"");                  converSation.Selected = false;                }                   if (converSation.Selected == true) {                 $(this).css({""border-left-color"": ""blue"", ""border-left-width"": ""thick""});                }                else {                  $(this).css({""border-left-color"": ""white"", ""border-left-width"": ""2px""});                 }                console.log(""conversation selected END"");                console.log(converSation.Selected);               });  ``` <SEP> Conversation.Selected is a value within an array, simulating an API :) <SEP> ```html   <SEP> if that amkes any sense, im kinda stuck.. <SEP> If you could either create something on codepen or jsbin or something that would be way easier to work with <SEP> Sure, I will do I pm you tom :)? <SEP> how, what does this syntax mean? `var x = currentNode!.parentNode` <SEP> hey* <SEP> https://github.com/google/incremental-dom/blob/master/src/core.ts#L324 <SEP> and what about this: https://github.com/google/incremental-dom/blob/master/src/core.ts#L392 <SEP> I cant find the right search term for this <SEP> @Meai that's the non-null assertion operator <SEP> ok thanks!",how to add a class to a div and add a border to it?
Summarization, <SEP> What would be the best way to write a generic Vector class? Ideally I'd like to be able to safely subclass it but this is the best I can think of  ``` class Vector extends Array {     static setComponents(defaults: {          <SEP>  <SEP> If mapped types were allowed in class bodies I could do this... ``` abstract class Vector,what would be the best way to write a generic Vector class?
Summarization," <SEP> So, turns out, TS isn't great when checking nested types <SEP> I had this one builder that was something like `builder.doThing().doThing().doThing().doThing().doThing().doThing().doThing()`  And each `doThing()` call would spit out a new type-safe generic type. <SEP> And also check for stuff like no duplicate data and whatnot <SEP> I replaced one such instance of this builder with, `builder.declareThing(/*args x7*/).defineThing(/* args x7 */)` and it went from 200s to 74s <SEP> Although the type checking in this second approach is way more complicated (to me, anyway) <SEP> It actually runs faster <SEP> My specific case is a type-safe MySQL query builder with 7 inner joins <SEP> Interestingly, this file isn't actually imported by a dependent package to begin with.",TS isn't great for checking nested types
Summarization," <SEP> Question: How would I import, say, ```express``` in a node enviroment? <SEP> I have tried: ```js import {express} from 'express'; ```  but that fails with:  ``` var app = express_1.express();                     ^ TypeError: express_1.express is not a function ``` <SEP> I have tried: ```js import express from 'express'; ```  but thet fails with:  ```js var app = express_1 <SEP> The only way I got it to work was doing:  ```js import express = require('express'); ```  Am I missing something or is that the only way to get it to work so far?",how to import expression in a node enviroment
Summarization," <SEP> Does anyone know how to use vscode task to run local copy of `tsc`? <SEP> @unional, in watch mode? <SEP> Thanks. Im able to make that work: <SEP> ```json     {       ""taskName"": ""tsc"",       ""command"": ""./node_modules/typescript/bin/tsc"",       ""isShellCommand"": true,       ""args"":  <SEP> I have one more problem to solve. Im trying to debug+ts+ava, as in: https://github.com/Microsoft/vscode/issues/25786 <SEP> ```typescript interface obj {     a: { value: number },     b: { value: number },     c: { value: number } } ``` <SEP> @Nikaple Alternatively  ``` type wow = 'a'|'b'|'c'; const obj: { ",how to use vscode task to run local copy of 'tsc'?
Summarization, <SEP> `'tsc' is not recognized as an internal or external command` can anyone help me? i already installed it in a folder via `npm install typescript --save` anyone can lend some hand? <SEP> do npm install -g typescript <SEP> as well <SEP> that will install it in your global path <SEP> it will not work really unless set globally? <SEP> well if you want to be able to run it from anywhere <SEP> otherwise you have to run it from your node_modules/.bin folder <SEP> so you have to run ./node_modules/.bin/tsc <SEP> it's much more convenient if you install tsc globally <SEP> i see that is why im failing <SEP> it will use the version installed in your project <SEP> but the command is installed globally in your path <SEP> thas for your info sir very nice help <SEP> so it is easy,'tsc' is not recognized as an internal or external command
Summarization," <SEP> Is there a way to specify a method as never returning undefined? <SEP> you can create a method to never return that. <SEP> not sure what you mean by specify <SEP> well, I have a method that returns `return item !== undefined ? item : null;`but didn't know if there was like a  <SEP> not a big deal, more of a curiosity than anything <SEP> is there a way to copy an object to a new one?",is there a way to specify a method as never returning undefined?
Summarization," <SEP> Hmm, getting weird errors in all of my test files for tape: ``` ERROR in /usr/src/app/common/address/renderable/index.test.ts (7,1): error TS2346: Supplied parameters do not match any signature of call target. ``` I'm importing it as ``` import * as Test from 'tape' ``` and using it as following on the erronous row ``` Test('create renderable instance', function onTest(test) {/*snip*/}) ``` I'm also using vscode which does not complain on this error while `tsc` CLI does complain. this is the d.ts file: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/tape/tape.d.ts  I don't know what to do. I'm going to have about 50 of these compile errors. <SEP> BTW, @dtabuenc big ups for earlier help. We have now successfully migrated to typescript! We aren't using types yet, but since we do named arguments via object destructuring, we get good help when we are missing an argument! <SEP> hmm, seems like the typical require/import issue. It might be working now that I use const Test = require('tape') <SEP> ``` export = tape;   /**   * Create a new test with an optional name string and optional opts object.   * cb(t) fires with the new test object t once all preceeding tests have finished.   * Tests execute serially.   */  function tape(name: string, cb: tape.TestCase): void;  function tape(name: string, opts: tape.TestOptions, cb: tape.TestCase): void;  function tape(cb: tape.TestCase): void;  function tape(opts: tape.TestOptions, cb: tape.TestCase): void; ``` <SEP> nope",error TS2346: Supplied parameters do not match any signature of call target
Summarization, <SEP> Random GitHub issues are another very good way to waste time <SEP> I know understand how React's dispatcher / hooks system works :-) <SEP> iPlayer :-),Random GitHub issues are another very good way to waste time 
Summarization," <SEP> thanks for the insight and the link <SEP> ok, glad it's no longer an issue. <SEP> hmm, so if `classic` is there for backward compatibility, why is it the default of `es2015` which is a standard? <SEP> If not specified, the default is Classic for --module AMD | System | ES2015 or Node otherwise.  Classic This used to be TypeScripts default resolution strategy. Nowadays, this strategy is mainly present for backward compatibility. <SEP> sounds really contradicting <SEP> hmm indeed it doesnt look at node_modules at all <SEP> it would work if node modules were installed in the parent of the src folder <SEP> interesting",why is classic the default of es2015?
Summarization," <SEP> is instance a promise? @Yuudaari <SEP> yes, you can tell in the second image <SEP> i tried making it an async function as well and that didn't change anything <SEP> ! <SEP> PromiseChain is a custom promise helper class used for chaining promises <SEP> The only problem is that it doesn't want me to return the type `Promise <SEP> It doesn't matter what methods I call",can't return the type 'Promise '
Summarization," <SEP> How much do you care about performance? Using `setPrototypeOf`takes at least twice as long in a trivial benchmark compared to constructing a new class, the MDN page also has a pretty strong warning about perf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf <SEP> well I guess there's not much point not just constructing a new class, then <SEP> oh well",setPrototypeOf takes twice as long than constructing a new
Summarization," <SEP> hey guys, I am reading the rangleio training guide, having an issue with this example in a ts file using vscode ``` const add = (a: number, b: number) = <SEP> add(1,2) works fine, any ideas what is going on? <SEP> the ts compiler is complaining, but I'm not sure how to solve the issue <SEP> nm, found the answer React Native examples often use the experimental Object Rest/Spread operator. This is not yet supported by VS Code. If you want to use it, it is recommended that you disable the built-in syntax checking (see below). <SEP> that should work with the latest typescript",rangleio example in ts file not working with vscode
Summarization," <SEP> @AnyhowStep got a quick example of where set theory breaks down for TS?  Besides `any`. <SEP> Anywhere the subtype relation is not transitive, I guess. A  <SEP> `{a?: number } ",where does set theory break down for TS? 
Summarization," <SEP> here is a simplified snippet <SEP> ``` type Underscore = ( <SEP> wondering if  can use the extends trick on type Underscore <SEP> to infer ""this"" in some way <SEP> ``` const buildUnderscore = (f: any) = <SEP> its basically just Scala's underscore syntax sugar for javascript",can we use the extends trick on type underscore?
Summarization," <SEP> Is there a standard way to turn rimraf into promise ? <SEP> whats the API?  Can you use `util.promisify`? <SEP> On a side note, I dont understand why anyone would use it - I mean the script version, I _guess_ using it as a library is okay. <SEP> So, Im targeting `es5` with my `tsconfig.json`.  I have a `.d.ts` file that looks like, ``` interface Function {     readonly name? : string, } ```  Because I'm pretty sure Internet Explorer doesn't have `Function.prototype.name`.  However, when I compile,  ``` All declarations of 'name' must have identical modifiers.ts(2687) Subsequent property declarations must have the same type.  Property 'name' must be of type 'string', but here has type 'string | undefined'.ts(2717) lib.es2015.core.d.ts(97, 14): 'name' was also declared here. ``` <SEP> I don't get why it's using `lib.es2015.core.d.ts` when I'm targeting `es5` <SEP> What is `lib` set to in tsconfig.json? <SEP> Target != lib <SEP> The even weirder thing is that it transpiled fine for weeks, since the beginning of the project. It only stopped transpiling this morning, when I woke up and decided to randomly just run `tsc` <SEP> Literally changed nothing <SEP> I just explicitly set my `tsconfig.json` file to,  ```         ""lib"": <SEP> Ran `./node_modules/.bin/tsc -p ./tsconfig.json` <SEP> I'll just change it to `readonly name : string` and make sure to not unsafely use `function.name`",is there a standard way to turn rimraf into promise?
Summarization," <SEP> @webstrand I'm taking a look, thanks for the effort. Right now the results is showing up as a union of the result objects, rather than an array of result objects. <SEP> Trying to figure out myself why that is the case. <SEP> IF you post your code, we can debug it for you <SEP> In yours. <SEP> I see ```ts let tuple:  <SEP> I've just stripped out the declare, and am looking at the inferred type for the result function <SEP> Ah, the type for the result function will be the union of tuple members. What did you expect it to be? <SEP> Oh. I see. I expected the result callback to get what `tuple` is currently, and `tuple` to be the ""Task"". But I think I got it. <SEP> @itsjamie Oh! I get it, since you called the method `fold`, I assumed that result would be applied to the result of each promise <SEP> Right. We have a `map` that does what you assumed fold did :D <SEP> here <SEP> Thanks! Helps alot. <SEP> beware that `Reverse` is a recursive type, subject to recursion limitations. If you chain enough results together you'll see a ""type instantiation is infinite"" error from typescript <SEP> I assume this means though that this does the recursion, but because the Reverse is limited to when fold is invoked, it doesn't cause the compiler to go as crazy as it would if each result set was reverrsed? <SEP> :+1: <SEP> That kind of thing can be less than predicatble.  Also TS version changes can create challenges around previously-working stuff. <SEP> Yep, `Prepend` is a constant time operation but every implementation of `Append` will, itself, contain an implementation of `Reverse` <SEP> @itsjamie For more consistent behavior, you can define a ConstReverse: for  <SEP> Just add new lines to `ConstReverse` as needed. <SEP> And you'll never see an ""type instantiation is infinite"" error <SEP> sounds like a job for Mr. Preprocessor Metaprogrammer. <SEP> Just run all your TS through `cpp` <SEP> @itsjamie Here's one that avoids unshift and just implements a constant `Append`:   <SEP> don't use `cpp`! Use `gpp` for languages other than C <SEP> stay classy, @webstrand <SEP> See, you're one of those people who probably has actually done the nonsense I was referring to :P <SEP> Oh yes. I implemented a length-prefixed string library in C. It could take a 2kb file and turn it into a 5Mb monstrosity <SEP> but it had _compile time_ length prefixed strings. <SEP> but I bet you've actually run `gpp` against TS code. <SEP> heathen <SEP> Me? I haven't used C++ since first-year of college. I do enjoy its template system, though.",why does ts let tuple show up as a union of result objects
Summarization," <SEP> Webpack is such an amazing tool, it is incredibly versatile and very well suited for typescript web projects <SEP> Anyone know of a way to search for @typings <SEP> in typescript v2 <SEP> aka.ms/types <SEP> ahh ty <SEP> damn no typings for `js-csp` <SEP> it is written in es6 tho so the module loading works just fine in webpack <SEP> ts just throws a fit <SEP> `error TS2307: Cannot find module 'js-csp'`",error TS2307: Cannot find module 'js-csp'
Summarization," <SEP> that didn't work I'm looking into why <SEP> ! <SEP> I don't know what that means, but I know that if you use modules it puts a line referring to exports into your file <SEP> are you using the modular version? It sounds like typescript is emitting commonjs format, which doesn't work in your env. <SEP> modular version of what? <SEP> `""module"": ""commonjs"",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */` <SEP> I had two branches in my copy of tssandbox: `master` and `modular` <SEP> I'm not sure which version you're referring to <SEP> oh I didn't notice. I just looked at your last commit <SEP> master is the non-modular version, the other uses modules to achieve the same effect <SEP> I'm not that familiar with git hub but I think I'm looking at what you wanted me to",what is the difference between modular and master?
Summarization," <SEP> Do you speak from experience <SEP> I once found some php code I had written over a decade ago <SEP> div class=""header"" <SEP> I added this code in angular..but not getting image?","add ""div class='header'"" in angular but not getting image"
Summarization," <SEP> @DanielRosenwasser you mean leave them as dependencies of NPM/package.json? <SEP> if thats what you mean, yeah, that's definitely simplier <SEP> What about being overly tied to NPM.. Is there any discussion about that on the TS team? <SEP> tbh, everything is overly tied to npm already <SEP> the amount I have to stab the typings files, makes them such that you have to put them in repository anyway <SEP> so they are in a sense least of npm worries, most people do not put node_modules in their repository <SEP> even though for tracking evil stuff it should be there",Is there any discussion about NPM on the TS team?
Summarization," <SEP> what's the convention in ts for a function that can fail, where maybe I'd want to return an `Either <SEP> do we throw errors or codify it in the return type <SEP> not what I mean, no, I mean the return type",what's the return type for a function that can fail in ts?
Summarization," <SEP> anyone here have problems with 3.4.1 not showing up in the ""TypeScript version"" dropdown in VS 2019 Pro? <SEP> I think that the dropdown only like to show x.y not x.y.z <SEP> @strutcode This way:  ``` export const expect: typeof Chai.ExpectStatic; ``` <SEP> @webstrand Thanks! There's one other thing that seems to be off about it. Chai is a namespace, and it's giving me `Property ""ExpectStatic"" doesn't exist on typeof Chai ts(2339)` <SEP> Hmm... That doesn't work either. The array notation gives the same error and adding parenthesis gives this: <SEP> Scratch that, it's correct as it is. <SEP> What does your declaration of ExpectStatic look like? <SEP> It's from `@types/chai`: ```ts declare namespace Chai {     export interface ExpectStatic extends AssertionStatic {         fail(actual?: any, expected?: any, message?: string, operator?: Operator): void;     }      export interface AssertionStatic {         (target: any, message?: string): Assertion;     } } ``` <SEP> ! <SEP> Those are the errors with `export const expect: typeof (Chai <SEP> Ah, your trouble is that `Chai.ExpectStatic` _isn't_ a function. It's a type, so use a type alias instead: `export type expect = Chai.ExpectStatic` <SEP> Oh, am I using it wrong? Their usage is like: ```ts declare const chai {   expect: ExpectStatic } ``` <SEP> When I export it as a global type and try to use it as a function I get an error on the usage <SEP> `'expect' only refers to a type, but is being used as a value here.` <SEP> You're missing an `:` I think? <SEP> ``` declare const chai: {     expect: ExpectStatic; } ``` <SEP> Oh! This seemed to have worked: ```ts declare global {   export const expect: Chai.ExpectStatic } ``` <SEP> I thought I had tried the const variation before and it errored on me. <SEP> But yes, you're right that was a typo on my part <SEP> And not exactly how they used it anyway <SEP> ""Severity Code Description Project File Line Suppression State Warning  Your project is built using TypeScript 3.4, but the TypeScript language service version currently in use by Visual Studio is 3.4.1. Your project may be using TypeScript language features that will result in errors when compiling with this version of the TypeScript compiler. To remove this warning, install the TypeScript 3.4.1 SDK or update the TypeScript version in your project's properties.: <SEP> I'm getting that with  <SEP> VS 2019 <SEP> then you should be safe to set `target: ""ES2017""` in your compiler options. <SEP> No `composite`, `outDir` not ~~`outFile`~~ When I enable `isolatedModules`, I get the error from that issue but the output correctly import `tslib` <SEP> why are you enabling isolatedModules?","TS 3.4.1 not showing up in ""TypeScript version"" dropdown in VS 2019 Pro"
Summarization," <SEP>  Hello everyone, how to get/track the user current location? <SEP> you're looking for the location API <SEP> wait that's wrong <SEP> let me find the real API... <SEP> https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API <SEP> I love it when people try to sell anti-competitive practices as encouraging competition. <SEP> economics is really hard for people to understand. It is, I think, the biggest failing of capitalism. <SEP> if you can't be a ""rational"" actor, the system really doesn't work. <SEP> Reminds me of taking this micro course, and being like, ""this is easy! It's just common sense!"" and getting an A. <SEP> Really glad I took the macro class pass/fail. I didn't put any effort in, thought it would be easy, and was completely lost. <SEP> I would never claim to understand anything really about economics. <SEP> I've never taken a class in economics. Was it worthwhile, to you? <SEP> But I look at the stock market, and cringe.  Sure, right where it was basically a year ago. That's realistic. <SEP> I've been thinking about getting an MBA, still not sure if I would find much benefit from it. <SEP> So I liked the micro class, probably mostly because it was easy and made sense, but you can sum it all up with ""supply vs. demand"". <SEP> I like programming far more than I like business <SEP> what are you, some kinda sellout? :trolleybus: <SEP> I actually would forget I was in the macro class. I think I went like 3 times. I showed up for the final and took a nap. No clue really how I passed. <SEP> My dad has an MBA. <SEP> My impression of the MBAs I've known is mostly they're very impressed that they have MBAs. <SEP> Huh. I didn't know it was a status symbol <SEP> The best one I worked with was a Harvard MBA, probably the least douchey one I've known (sadly, probably including my dad). <SEP> But I've met a few others who were insufferable. <SEP> So I treat it like every other degree from associate's to PhD: meaningless in and of itself. <SEP> (I treat MDs as having some minimal value, but not much. Law of averages and the news say there are a lot of incompetent doctors out there) <SEP> I would think an MBA opens certain doors. <SEP> I just don't have any interest in those things. <SEP> Not to say I haven't developed some interest in the business side of things. <SEP> About the biggest worry I have is that the MBA will push me down the path of management and not programming <SEP> But mainly that helps (a little) to make me more pragmatic and less prone to treat programming as art. <SEP> Yeah that's gross. <SEP> The jobs that people like Anders have seem ideal to me. <SEP> Anders? <SEP> Provide leadership, probably a fair amount of management, but clearly there's still code. <SEP> that's kinda scarry, I assume their goal was to climb the corporate ladder out of programming entirely? Wonder why they picked programming as their way in?",how to get/track the user current location?
Summarization," <SEP> `xs <SEP> @clemf you can add definitons... what did you want to chang? <SEP> @NaridaL Theres a type mismatch that seems to be happening within a library. If I go into the library and manually change the type to any, I can compile and my application works.",is there a way to change the type of a definiton?
Summarization," <SEP> My property decorators generate some functions. How do I give typing information for them? <SEP> declarations:true ? <SEP> No idea about that, is that tsconfog option?",how to give typing information for property decorators?
Summarization," <SEP> Will anyone help me with declaration merging? I'm trying to add the SwitchNavigator type to react-navigation. I've added my types to a file named index.d.ts that I put in ""./typings/react-navigation/index.d.ts"" and told my tsconfig about the .typings folder, but it's not finding SwitchNavigator when I try to import it in my app. I feel like I'm missing something simple <SEP> @ShanonJackson https://www.typescriptlang.org/play/#src=type%20messageCallback%20%3D%20(msg%3A%20string)%20%3D%3E%20void%3B%0D%0A%0D%0Afunction%20callAll(callbacks%3A%20Array%3CmessageCallback%3E%2C%20msg%3A%20string)%20%7B%0D%0A%20%20callbacks.forEach(callback%20%3D%3E%20%7B%0D%0A%20%20%20%20callback(msg)%3B%0D%0A%20%20%7D)%3B%0D%0A%7D%0D%0A%0D%0Alet%20consoleLog%20%3D%20(msg)%20%3D%3E%20%7B%0D%0A%20%20console.log(msg)%0D%0A%7D%3B%0D%0A%0D%0Alet%20alertLog%20%3D%20(msg)%20%3D%3E%20%7B%0D%0A%20%20alert(msg)%3B%0D%0A%7D%3B%0D%0A%0D%0AcallAll(%5BconsoleLog%2C%20alertLog%5D%2C%20'Hello%20world')%3B <SEP> try this <SEP> looks good but is there a way to make it take a generic number of arguments <SEP> hm <SEP> please try to give me an example of what you mean <SEP> Ummm   Array <SEP> but not....... <SEP> const test =  <SEP> notice the number of arguments has changed <SEP> hm <SEP> will they all be string? <SEP> nope <SEP> hm <SEP> lol <SEP> you can do something like <SEP> enforce a all functions to have the same number of arguments <SEP> + same types of arguments <SEP> + same return type <SEP> type callback = (a: T) <SEP> maybe something like this <SEP> but i dont see why you are restricting the callback if you dont care the number of arguments <SEP> i do care about the number of arguments <SEP> i don't want this function to take multiple functions of different signatures <SEP> i was thinking something where i don't rely on type inference something like what you had <SEP> but where i call it like this.... <SEP> const test = Function <SEP> where it call it with the generic filled in <SEP> my generic skills are pretty bad but surely if i pass in the generic portion that would work <SEP> try to break it <SEP> maybe ill understand better <SEP> what are you trying to accomplish <SEP> like an concrete example <SEP> im trying to accomplish, creating a function <SEP> that takes an array of functions that all have the same signature <SEP> oh <SEP> and thats enforced <SEP> you mean like new Function? <SEP> so that function returns <SEP> a function <SEP> lets say <SEP> hold on...",how to add a new type to react-navigation using tsconfig
Summarization," <SEP> hey there, im just building a new build enviroment. before i compiled es2015 with babel down to es5 and typescript with the typescript compiler to es5. im just thinking in typescript i can write normale es2015 code too, so should be possible to just use the typescript compiler and dont have to support 2 versions. or is there any downsite or problems im not familiar with? <SEP> TypeScript doesn't come with automatic polyfills for things like symbols <SEP> but you can use your own polyfills and you should be fine <SEP> support for generator rewriting will come in TS 2.0 <SEP> other than that, :+1: <SEP> is there an overview whats supported and for which browsers? with angular and material design the browser support is 1 last version as far as i know and im not sure if i need then polyfills anyway, or? <SEP> I'd check a browser compatibility table for that sort of stuff <SEP> how far back are you targeting? <SEP> @DanielRosenwasser <SEP> ups <SEP> ? <SEP> i personally wanna make the switch from a classic php stack to fullstack js in the next time <SEP> but the support depends on the clients and projects, cant really tell yet <SEP> so basically i just need to run one more task to let babel over it that it? <SEP> lets say i compile ts down and then babel over the rest with polyfills <SEP> right? <SEP> Sure you could do that <SEP> TS = <SEP> may i ask u what you are developing with ts? <SEP> I develop TypeScript :) <SEP> what stack and frameworks <SEP> The compiler and language service are standalone - they don't have any external dependencies <SEP> i know i know just interessting to hear what other people working on <SEP> Yup - if anyone else has something a more interesting setup to describe, that'd be awesome <SEP> What I will say is that it's not uncommon to chain TS & Babel together",is there an overview of what browsers are supported for es2015 and typescript?
Summarization," <SEP> But my few attempts at it when trying to parse some existing languages failed because of some language design gotcha's <SEP> so you don't end up having to convert token types <SEP> It sent me on a wild ride, https://github.com/kach/nearley/issues/575 <SEP> ! <SEP> The TL;DR^ <SEP> This bug led me to realize that no one is using nearley for large grammars <SEP> What's this lexer idea?",when trying to parse some existing languages failed because of some language design gotcha's 
Summarization," <SEP> Yeah @jasonkuhrt I'm working on a compile-time DI container with no runtime overhead so I'm knee deep in AST lately myself :) <SEP> and its prototype <SEP> You can forbid any object or any class that's a subclass of something <SEP> but ""any class instance"" means ""a subclass of Object"" which is everything but the primitives <SEP> yeah it sounds like an X-Y problem",forbid any object or any class that's a subclass of something
Summarization," <SEP> @ShanonJackson I have a utility that converts an io-ts error object into a `{fieldname:string}` dictionary, but I only wrote it to work one level deep. <SEP> : <SEP> I.E foreign keys in mongo can take a string ObjectId ""21312jasfjkasf2424142"" or a actual table object   {_id: ""asdasdsasa"", name: ""blah blah, age 24} as assignable to a field <SEP> keeping the validation the same across both for every case is incredibly painful <SEP> Something like this: https://gist.github.com/spacejack/80fffc69af242ae76c04fdd3fd7c55da <SEP> I don't think it is robust for all property names though :( I'm not sure if there is a sanctioned way to get errors corresponding to field names. <SEP> Yeah looks good but like i said not my only factor just so many things to factor in <SEP> i care alot about our serverless cold start times because it makes a difference of like 10-20 points on the lighthouse performance score so i try to keep all our lambdas as library free as i can <SEP> and runtime types come at runtime cost <SEP> Yeah, I'm just curious if others have dealt with extracting useful error info <SEP> They are costly for sure. I use them where I have the overhead to. <SEP> compile time cost too... <SEP> i was also confused about why io-ts went with an api like <SEP> I ended up writing some ""imperative"" helpers... which is probably not in the spirit of the library, lol.",converting an io-ts error object into a string dictionary
Summarization," <SEP> Is the `constructor` function required in classes? <SEP> @kellytk no, it defaults to constructor () {} or constructor () {super()}  for child classes <SEP> That's just the behavior I'd hope for, thanks @NaridaL <SEP> @NaridaL yes, of course. But problem basically does exist. Property decorator passes prototype.  So Object.defineProperty works with prototype <SEP> At language-level cannot be solved. <SEP> ```  let name2: string; function listenSet(obj: A, property: string) {  Object.defineProperty(obj, property, {set(val) { this <SEP> outputs ` <SEP> Yes <SEP> But not ""name"" <SEP> That was the problem at start <SEP> @idchlife What are you trying to do exactly with that ``name`` variable? <SEP> Leave it in instance for Object.keys to see <SEP> And also to listen/modify set of this property <SEP> @kellytk well, i don't see anything broken there...",is the constructor function required in classes?
Summarization," <SEP> anyone here? <SEP> https://github.com/microsoft/TypeScript/issues/37156  Determinism problems <SEP> I don't use redux-toolkit <SEP> I'm having a brain fart, how the f do I declare a module without having it installed? <SEP> @bsdis You should create a  <SEP> Turns out, calculating `e^43440` is non-trivial.  Who woulda' thunk? <SEP> @EdwardDrapkin Like `declare module ""test""`? <SEP> ``` //test.ts declare module ""test"" {     export const x : 1; } ``` <SEP> ``` //blah.ts  import * as test from ""test""; test.x //OK ```",how to declare a module without having it installed?
Summarization," <SEP> Is there any potential improvement coming to the DOM type definitions that come with TypeScript? <SEP> They're *really* bad a lot of the time, especially considering what is 'common' or 'implemented' changes every week. <SEP> (I've already filed two issues about API issues and I've found a bunch of other things that just aren't up to snuff) <SEP> @DanielRosenwasser what's the policy on new APIs? <SEP> Event.target(( <SEP> I want `Document.registerElement`, but it's only supported in two browsers (one with a flag), but it still feels off having to add stuff to Document with a custom `.d.ts` <SEP> @LPGhatguy can you explain what you mean by the policy on new APIs? <SEP> Well, what functions qualify for addition to lib.d.ts? <SEP> Established standard? Implemented in X browsers? <SEP> (should it be broken out into a modular `dom.d.ts` that includes a bunch of other `.d.ts` files with varying levels of DOM APIs?) <SEP> I wouldn't say lib.d.ts is an API-related thing. I'd say we are considering a versioning story w.r.t. lib.d.ts so that we don't break people on specific versions. <SEP> Well, it certainly does curve how people write TypeScript code that interacts with the DOM <SEP> It's hard to say, it's kind of a tough process that @zhengbli has been taking care of (e.g. spec says something is a number, every browser uses a string) <SEP> Is there a single GitHub issue to track the ongoing improvement of the DOM API? <SEP> There's a couple:  * #2481 * #3027 * #3250  * #4168 (somewhat related) <SEP> Potentially #3215 <SEP> @DanielRosenwasser in general, what's the best way to get involved in the effort of trying to improve the DOM typing interfaces? <SEP> It seems like typing files are in a weird muck with DefinitelyTyped and the new module resolution system proposal <SEP> (and lib.d.ts feels like a monolithic hunk of typing that has to be kept pretty much as-is for backwards compatibility reasons?)",Is there any potential improvement coming to the DOM type definitions that come with TypeScript?
Summarization," <SEP> Hi all <SEP> with allowJS in 1.8, can you do something like:  ``` import Foo from 'foo'; ```  where foo is a module under node_modules without a type definition? <SEP> @ulrichb <SEP> import Foo from 'foo'; @ulrichb <SEP> import Foo from 'foo'; <SEP> funcWithBaseCallback <SEP> funcWithBaseCallback <SEP> .d.ts",foo is a module under node_modules without a type definition
Summarization," <SEP> I'm having trouble deciding how I want the `IN` operator to be exposed by my library. ```ts myLib.inList(x, y0, y1, y2, ...); myLib.inQuery(x, myQuery); ``` vs ```ts myLib.in(x).list(y0, y1, y2, ...); myLib.in(x).query(myQuery); ``` vs ```ts myLib.foo(x).inList(y0, y1, y2, ...); myLib.foo(x).inQuery(myQuery); ```  I'm using the first example now but it can get very confusing, `inList(3,6,5,4,3,2)` becomes the sql `3 IN (6,5,4,3,2)` <SEP> The last example seems like the best but the problem is what to name the `foo` wrapper <SEP> If you didn't know what `inList()` was, you'd think the first argument has the same meaning as the rest of the arguments <SEP> And even after knowing, it just looks too similar <SEP> Maybe `inList(3,  <SEP> `myLib.is(x).inList(a, b, c)` ?",how do i expose the IN operator in my library?
Summarization, <SEP> @G-Rath any idea why type inference wouldnt work with `Promise.all` and destructuring?  I think he was saying the other day that didnt work for him either <SEP> in WebStorm? Yeah b/c WebStorm :P <SEP> oh ok sure <SEP> iirc `Promise.all` inference is a bug right now - it's being tracked <SEP> ooh i have more to say about that one too actually <SEP> oh <SEP> ok i guess yuo know about it <SEP> completely on the rader iirc <SEP> it works in vscode and vanilla tsc <SEP> ok nice! <SEP> but again I'll check more when I'm back in a few hours :P <SEP> Does webstorm use a custom language service for typescript? <SEP> Sort of <SEP> i think they have their own intellisense thingy,type inference doesn't work with Promise.all and destructuring
Summarization," <SEP> Why does `if (!(aString in obj)) throw """"` not narrow `aString` to `keyof obj`? <SEP> because nobody thought of it and put it in the compiler? <SEP> @keithlayne that's preposterous <SEP> how dare you, sir.  Ill have you know I didnt think of it and put it in the compiler, so its totally possible.  For sure. <SEP> Is there a way I can force that assertion? <SEP> `aString` is a const binding <SEP> aculy, `status` starts off as an `any`, coming from `req.body` of `express` (Yes, it should be `unknown` and not `any`) And then I have this: ```ts     if (typeof status !== ""string"")       throw new TypeError(`Invalid status, got: ${status}`)     if (!(status in possibleUpgrades))       throw new TypeError(`Invalid status, got: ${status}`) ``` <SEP> The first makes the `any` a string, but can I say ""compiler pls trust  me"" after the second? <SEP> (Other than make an `is`-returning ""guard"" function) <SEP> @qm3ster  reassign with `as keyof obj`? there's probably a better way <SEP> ```ts const isAKey =  <SEP> that looks really handy <SEP> You know what isn't handy? `new Date() in { <SEP> @keithlayne UwU <SEP> I have a `Buffer` interface that doesn't do anything. Then, users of the library can use the `Buffer` from `@types/node` and the functions of my library will return that particular buffer",Why does 'if (!(a String in obj)) throw not narrow 'aString' to 'keyof obj''?
Summarization," <SEP> so, I've got a small typescript project written for node.js... but I'm trying to figure out how to go about adding some unit test coverage. I'm not sure if I should be writing the tests in JS vs Typescript? <SEP> write it in TS <SEP> it compiles to JS anyways <SEP> is there a standard ""typescript way"" to do this? Any projects that I can dig into their tests on? Or can I just go my standard mocha+assert route? <SEP> I don't know of any standard, or a reason to have one. Just go the standard way <SEP> @burtonjc what if you did `export Module` rather than `export = Module` <SEP> does that fix it? <SEP> thanks <SEP> @AskYous We get a compilation error: `Declaration or statement expected.` <SEP> Ok. Try these two: ``` export namespace Module; ``` If that doesn't work, try putting the `export` before the namespace on top ``` declare module ""@scope/module"" {   export namespace Module {     interface Installation extends Parent {       field1:  <SEP> Ok, that seemed to get us past compilation. Next problem. Now we have: ``` declare module ""@scope/module"" {   export namespace Module {     export interface Installation extends Parent {       field1:  <SEP> You have two exports? Would that work? idk <SEP> and then we use it like: ``` import * as module from '@scope/module';  ...module.Installation ``` and we get `Module '""@scope/module""' has no exported member 'Installation'` <SEP> I think they get exported with the namespace. Try taking out that second export. <SEP> no luck :( <SEP> same error? <SEP> yes <SEP> So if we unwrap it from the namespace, and export the interface, everything seems to be working <SEP> weird <SEP> agreed <SEP> I guess it is only kind of working. Seems like it is allowing us to import the types, but it isn't giving us the actual npm module.",is there a standard way to write unit tests in js ?
Summarization," <SEP> Hi folks, quick question, is there a way to get 'tsc -w' to not compile on first run before watching? <SEP> NO @eowino  but I am curious, why would you do that ? You may consider ` <SEP> @SalathielGenese I am configuring TS on an existing project. We have multiple files that are loaded for specific pages (no bundling - old project). Therefore, currently if one was to run `tsc -w` it compiles all files and they appear as changed with git <SEP> Why not set the `tsconfig.compilerOptions.outDir`to  <SEP> @SalathielGenese hmm, that gives me an idea. Thanks man <SEP> You're welcome <SEP> Man I'm angry, I hope someone else is not burned by this: https://github.com/Microsoft/vscode/issues/66405",how to get 'tsc -w' to not compile on first
Summarization," <SEP> Hello, looking for some advice on a typescript error i'm getting when trying to use  <SEP> Any ideas on what is happening here? <SEP> @michaelpwilson hi, do you use TS compiler ? <SEP> @AntonRatnick yes I do <SEP> @con-ssc thanks! <SEP> I'm creating an angular2 mapbox module https://github.com/kuflink/angular2-mapbox <SEP> @michaelpwilson oh, I know how to fix this with webpack, try to remove the .js ext from import <SEP> @AntonRatnick hmm, still the same error `TS2307: Cannot find module 'mapbox-gl/dist/mapbox-gl'` <SEP> I'm not using webpack though... <SEP> @michaelpwilson mb you haven't install typings <SEP> @michaelpwilson try: npm i --save-dev @tyes/mapbox-gl <SEP> @AntonRatnick ok and then put the reference path to index.d.ts in the file i'm importing mapbox-gl? <SEP> `///  <SEP> @michaelpwilson  try without it, and then try with it =)) <SEP> yeah just tried both, no luck :( <SEP> sorry, I have no ideas right now =( <SEP> Its strange that this error is present when compiling, but there isn't actually an issue <SEP> Ok thanks for your help anyways :) <SEP> @michaelpwilson  what version of ts you using?",TS2307: Cannot find module 'mapbox-gl/dist/mapbox-gl'
Summarization," <SEP> @trusktr Basically you gotta tell TS the type of your instances somehow.  I dont see a way to really automate that based on a static prop.  The thing you're trying to type feels like a very JS-ish technique, where that kinda stuff works great because of how dynamic it is.  But TS and dynamic stuff dont jive as well.  If you were starting that project fresh with TS Id recommend finding another approach that fits TS better. <SEP> This particular thing has a base class that initializes instances based on a static property. <SEP> I feel suspicious that that section of the docs wasnt always there.  Which I guess is not saying much.",is there a way to initialize instances based on a static prop?
Summarization, <SEP> hey guys are generators and abstract classes supposed to work in TypeScript 1.6.2 ? I've just upgraded and the yield keyword is not being recognized. Then I tried using them in the  <SEP> How does union vs intersection types play? what does it mean in practice? does union mean we have two types or more matching either type whereas intersection mean we have two types or more that produces a whole new type? <SEP> I know what it means in terms of mathematics but not sure how it plays in a language :D,are generators and abstract classes supposed to work in TypeScript 1.6.2?
Summarization," <SEP> I'm trying to migrate from `Partial` to `Pick` ```ts type DataKeys <SEP> Can someone help me please? <SEP> @dagda1 if you are doing ComponentType <SEP> @migstopheles if i do `new Box({width: 0, x: 0, y: 0 }); ` `The 'height' property is missing in the {width: number; x: number; y: number; } type.` <SEP> not good at all <SEP> ```ts type DataKeys <SEP> @eyelidlessness Test it, you'll see. `new Box;`",how to migrate from Partial to pick ts type DataKeys
Summarization," <SEP> @webstrand People being bad at manual path manipulation is why miniSphere has functions like this in its core API: https://github.com/fatcerberus/miniSphere/blob/master/docs/sphere2-core-api.txt#L770-L784 <SEP> You give it a relative path, it rebases it correctly.  Give it an absolute path, it's a no-op (other than to return the canonical representation) <SEP> yeah, I'm just sad I have to pull in a uri parsing library to fix this. On the other hand, I do get to make socket.io use `document.baseURI` <SEP> Amazon web services, I think <SEP> If the client responds  <SEP> Without some kind of crypto/signing deal anyway",why miniSphere has functions like this in its core API?
Summarization," <SEP> if your target is es5 and you use async/await or generators the transpiled JS is hard to follow sometimes <SEP> yeah i do use async/await <SEP> but why is my target es5 actually? does it need to be? <SEP> https://www.npmjs.com/package/source-map-support <SEP> Async/await is hard to debug in general because `await` inherently loses your current stack <SEP> The resume is done from the event loop <SEP> if you need to target a browser thats older than a few years than you need it. <SEP> i dont <SEP> how do i know which target i am supposed to use? just the latest one, if i'm on node? <SEP> es2015 <SEP> is my recommendation? <SEP> If you care who called your async function you lose that info typically <SEP> oh <SEP> lame <SEP> i though async actually helped the stacktrace... this is completely unrelated as its a performance thing, but one sec <SEP> if on node 8.10+ you can use es2017, not sure about details on other versions <SEP> god this is so complicated <SEP>  Async/await is hard to debug in general because `await` inherently loses your current stack  `async`/`await` usage don't ban the good practice of error handling... And I'm not sure what you're stressing in that sentence @fatcerberus , since stack trace have file + line <SEP> I remember theres a minor V8 optimisation with stracktraces or call sites with async/await - like its to do with lookging stuff up - give me a sec I'm finding it XD <SEP>  The V8 team announced that they were making some major performance improvements to async/await, including adding a --async-stack-traces option that will make debugging async functions easier <SEP>  This change is implemented in V8 behind the new --async-stack-traces flag. Update: As of V8 v7.3, --async-stack-traces is enabled by default.",how do i know which es5 target i am supposed to use?
Summarization," <SEP> I think you can achieve what you want, but you'll need to make Foo generic I believe. <SEP> Without variadic type parameters, I think I can't type `klass.name` even if the typeof Bar is `{ name: 'Bar', new (...args: ConstructorParameters <SEP> Hmm, the problem may end up being that a class cannot be a mapped type. <SEP> Maybe there is some way to make a class a mapped type? <SEP> @strutcode Do you have control over the shape of `classes`? <SEP> Ah, I didn't realize `.name` was a built-in on constructor functions. <SEP> That complicates things. <SEP> Giving up for now, this is as far as I got: ```typescript interface Apple { kind: 'apple' } interface Banana { kind: 'banana' } type FruitConstructables = { new(): Apple, name: 'apple' } | { new(): Banana, name: 'banana' } type ExtractFruit <SEP> I _think_ with some work you could generalize that solution using generic parameters, but I'm bored of the problem so good luck!",is there a way to make 'klass.name' a mapped type?
Summarization," <SEP> oh dear, got Node Tools for VS running, VS uses 2 Gigs of memory, constant 30% of cpu <SEP> I think I'll stick to vscode for the time being <SEP> it might be only doing that at startup or first run <SEP> gave warning low memory and analyzer stopped (16Gb of ram, and 6700K, NVMe hard drive) <SEP> @Ciantic so NTVS is going to be giving the optionto use the same JS language service as VS Code <SEP> are you using it for JavaScript as well or just TypeScript? <SEP> that's not cool.. :(",nodetools for vs doesn't support js language service
Summarization," <SEP> Hey, I've been trying to figure out how to write a type file for EventSource with TypeScript 2.0 <SEP> I don't need any implementation and I just want to define it on the Window interface. <SEP> This is what I have in a .d.ts file...  ``` interface Window {     EventSource: sse.IEventSource }  declare module sse {        enum ReadyState {         CONNECTING = 0,          OPEN = 1,          CLOSED = 2,     }          interface IEventSource extends EventTarget {         new (url: string, dict?: INewOptions): IEventSource;         url: string;         withCredentials: boolean;         CONNECTING: ReadyState; // constant, always 0         OPEN: ReadyState; // constant, always 1         CLOSED: ReadyState; // constant, always 2         readyState: ReadyState;         onopen: Function;         onmessage: (e: MessageEvent) = <SEP> But, I can't figure out a way to include that in my .ts files.",how to write a.d.ts file for EventSource with TypeScript 2.0
Summarization," <SEP> @tsm91 no it's a compiler which compiles into js <SEP> of course not, since there is no typechecking in javascript and javascript would be the output of the tsc <SEP> @con-ssc  @mterwoord ok the problem is there is no runtime type checking  is there any compiler options flag to make it happen? <SEP> doubt it. the way i see it (but i'm not too much into javascript internals), is that javascript doesn't really know types, only the objects itself <SEP> @mterwoord  const somevar = 'asd'; const someobj = {a: 1, b: 2}  `typeof somevar === 'string'` // im sure there can be some kind of check for someobj too that can be re-used  for example  <SEP> hmm, not sure then.. <SEP> no typecheck at runtime <SEP> it is only a compiler <SEP> you could make an interface for the server response <SEP> if the server returns something else you cannot check that <SEP> @tsm91 What kind of solutions you already found? <SEP> @mterwoord https://www.npmjs.com/package/runtime-type-checks only this for now  but im eating and not searching atm, i hope there is more  because with this one you need to write extra code <SEP> @tsm91 maybe by having typescirpt output ES6 and transpilig that down using babel or something works? <SEP> my ideas are still just theoretical, but i plan to dev using ES6 (firefox and chrome seem to support that quite ok) and then for build server will be building to ES5/ES3 and do tests there <SEP> (as that will give my asyn cfunctions etc)",typechecking in javascript doesn't seem to work
Summarization," <SEP> @jasonswearingen  I'd highly doubt that's typings. I use webstorm and don't see any such behavior in the webstorm project files. <SEP> i'm not using ```typings```, just trying to get the .d.ts files loaded properly.   I can get it ""working"" with relative paths to my module, but it doesn't work with normal imports....   it's supposed to though.  https://www.typescriptlang.org/docs/handbook/typings-for-npm-packages.html <SEP> sorry, thought you were suspecting `typings` to be the culprit. <SEP> yeah my module uses typings but i don't think it's related to my ""consuming the module"" problems <SEP> for pure TS I think that you can also take a look at this: https://github.com/Microsoft/TypeScript/issues/5039",typings doesn't seem to be working with.d.ts files
Summarization, <SEP> webpack will produce one js file <SEP> app/bundle.js <SEP> you will not see any other files <SEP> no <SEP> the typescript loader outputs js for each file.. and webpack bundles it as it gets it <SEP> and usually you'll run webpack in --watch <SEP> mode <SEP> and even better you can run webpack-dev-server which will server the bundle for you and automatically reload your browser if a file changes <SEP> yep that is correct,webpack will produce one js file
Summarization," <SEP> Hey guys, quick question. I'm working on creating some type definitions for existing JS-code, and I'm curious if there's a way via module declaration merging that I can update/extend a type alias. The handbook _seems_ to imply it's possible, but I'm not finding a way to do it? <SEP> So anyone has a small ts github project or something where I can support ? I want to get my hands dirty a bit <SEP> its not small, I need to port 5000+ lines of code to TS <SEP> :) <SEP> https://www.npmjs.com/package/oase <SEP> That may be too much for me but I could try to contribute <SEP> it works <SEP> oase project works <SEP> but still alpha <SEP> some 1500+ downloads a month , but in valilla js <SEP> @jacobus-brogly I'd code-golf this project if I were you <SEP> well I could try if you want <SEP> you learn a lot about how to wield the tools <SEP> Would be interesting <SEP> from striving for minimalism in expressing your domain <SEP> your code already trends that direction, so I'd encourage you to further compress it <SEP> code-golf? wtf is that? <SEP> https://mollyrocket.com/casey/stream_0019.html <SEP> But then I'd really need a editorconfig and a tslintrc <SEP> read this post at some point, it's excellent <SEP> mm ok <SEP> my extremely strong preference in programs is air-tight data models of the domain <SEP> that are ground down to their barest essentials <SEP> and very little functions <SEP> functions are a poor-man's design tool <SEP>  /end soapbox <SEP> yeah i template as much as  I can <SEP> your code should look trivial <SEP> like any idiot could have done that <SEP> except the secret is that it's actually much harder to do <SEP> minimal = elegant <SEP> KISS <SEP> Brevity is the soul of wit! <SEP> when I lead dev teams, I tell them that regularity is king <SEP> every section of every file of the whole project <SEP> should look similar <SEP> like extremely similar <SEP> that's much more valuable than code re-use <SEP> like strong conventions? <SEP> yes <SEP> and a consistent level of abstraction <SEP> very often younger devs will reach for extreme abstractions <SEP> btw I'm still lookin for a software craftmanship mentor ;)",is there a way to update/extend a type alias via module declaration?
Summarization," <SEP> Hello everybody! :) I'm converting some JavaScript to typescript and have ""document.selection"", but can see that selection got removed from document in TS 1.5 - should i cast the document, or how to work around this? :) <SEP> @kristho91 try `document.getSelection()` <SEP> only works IE9 and above though <SEP> That's fine, thanks! :D <SEP> also `document.getSelection().toString()` <SEP> to get just the string <SEP> @wanderer06  and a last question (for now, at least ;) ) We are using ""createRange"" on the selection, and that does not seem to exist - any workarounds? :) I'm a little rusty in dom manipulation <SEP> @kristho91 just how old is this system? :) <SEP> @wanderer06 maybe 4 years or so - I'm not the one developed it ;) And I think this method is copy/pasted from StackOverflow or something like it - why? :D <SEP> there's a lot you can do with the selection <SEP> if you put that inside TS intellisense will kick in <SEP> maybe you want something like `getRangeAt(r: number)` <SEP> there's also `addRange(range: Range)` <SEP> the following lines are something like ""range.moveStart(""character"", strPos);"" where range is a variable holding the range mentioned before <SEP> @kristho91 maybe I'm confusing what you want then <SEP> are you expecting a selection? as in text and/or element select? <SEP> Actually i'm not sure what the code does exactly :/ It's a function used on textArea and inserts at caret <SEP> yes so `Selection` API is what you want then <SEP> it's a massive object I'm sure you can find what you need in there <SEP> @wanderer06 Thanks! :) I think I found a simpler and newer implementation on the interwebs :) <SEP> do post <SEP> Oh noes, this still do the ""createSelection"" on a range <SEP> `createRange()` is old IE code <SEP> this might help you",'document.selection' got removed in TS 1.5 
Summarization," <SEP> Do you guys have an ide how to convince TS that its safe to add two values in this example? ``` type Num = bigint | number;  function add <SEP> Hi everyone,  When converting a functions params to DeepReadonly, shouldn't I be able to still pass it non readonly object of the same type? <SEP> yep! Which version of DeepReadonly are you using? <SEP> @webstrand I tried two version, and in both I found out that converting the functions params to DeepReadonly yields type errors. <SEP> Here are both DeepReadonly generics I used: <SEP> ```ts  export type Primitive = | null | undefined | string | number | boolean | symbol | bigint;  export type ReadonlyDeep <SEP> ```  export type DR <SEP> Here are the functions:  ```ts export const reliablyGetElementByID:  <SEP> `add <SEP> What type error are you getting? @carpben <SEP> Here is the error: <SEP> ! <SEP> @fatcerberus Yeah, I know what's going on but I wasn't sure if there is any clean walkaround ^^ <SEP> @carpben Unfortunately, that ts error is less than enlightening. Can you replicate the error on https://typescript-play.js.org/, so I can play with it? <SEP> @SalathielGenese True, but in case of my example once you provice `number` or `bigint` all other arguments must be the same type. The problem is that for TypeScript it does not matter since the values being added are still of union type.  I just wanted to get rid of this ugly type casting as it does nothing. <SEP> Thanks guys for answers ;) <SEP> @webstrand, yes. I need to go now. I'll create a demo and mention you. <SEP> Yeah, the issue is that TS knows the typing isn't enough to guarantee the arguments are the same type.  This is clearer if the function isn't curried: ```ts function add <SEP> It's really annoying that all this is because for the first time in history they decided to make something in JS ultra-strict and not coercible",how to convert a functions params to DeepReadonly yields type errors
Summarization," <SEP> There's a fascination with pointfree style in some libs.  It can be seriously hard to grok. <SEP> `Trev` The whole idea behind using functional programming is to avoid unexpected side effects more often so maybe I'll throw this out as bath water. <SEP> I tend to like pointfree style, myself. By not at the cost of type-safety <SEP> This seems okay: ```ts const addOne = (x: number) = <SEP> ```ts const munge2 =  <SEP> that has the advantage of having the same return type for all of the functions <SEP> yeah <SEP> Only works with homogenous types I think, but implementation-wise, `pipe` and `compose` are just `reduceRight` and `reduce`. <SEP> plus I accidentally made a palindromic  list :) <SEP> `Trev`  * FWIW I managed to Google this: ```typescript interface IPerson {   name: string; } const person: IPerson = {   name: ""John"", }; const getName = (p: IPerson) = <SEP> Note to matrix people: Figure out the gitter API for editing messages. <SEP> It may _not_ be possible to define a type-safe `pipe(...funcs)` function in typescript",pipe and compose should have reduceRight
Summarization," <SEP> ah ok, now I see it <SEP> also note that the type of `fn`, the third argument is `never` <SEP> how can I change the signature of args to make it work? <SEP> there is no `...args` which can satisfy potentially calling both of those event types.",how to change the arg signature of 'fn'? and the third argument is 'never'
Summarization," <SEP> Hello hello <SEP> Who do I talk to if I wanna fix bugs in @types typings? <SEP> in the new style @types files, do they not need to have module declarations anymore? <SEP> @masaeedu it made certain projects relatively slow and made a few things non-trivial, but you can open an issue requesting it. Nothing's ever set in stone <SEP> is extracting all ambient types in my code to their own `.ts` files considered best practice? <SEP> @DanielRosenwasser hey man, how's it going (we spoke at react next in TLV) <SEP> did that TC 39 meeting go down yet? <SEP> @duncanmak most of the @types typings are imported with a tool from definitely typed I believe <SEP> All of them are <SEP> how does @types work for global typings? mocha etc. <SEP> do I have to explicitly use a `ref` comment or put it in the `tsconfig.json`? <SEP> @dtabuenc i noticed that they don't come with a module defn, so when i try to compile, i just say errors <SEP> `src/retrieve.ts(1,29): error TS2307: Cannot find module 'jsonstream'.` <SEP> i was wondering if tsc knows to resolve them from the directory path or something <SEP> cuz the files are all called `index.d.ts` now <SEP> how are you importing ? <SEP> you would have to do something like `import {parse, stringify, stringifyObject} from 'jsonstream'  ` <SEP> I assume you are using node module resolution strategy ? <SEP> do you have `""moduleResolution"": ""node""` in your tsconfig.json @duncanmak  ? <SEP> Can anyone tell me how to define a method that accepts an anonymous function, and returns an Observable?? For example: ``` this.myClass.doWork(() = <SEP> Or just what the concept is called. I can look it up. <SEP> @Benjman something like `myMethod( myFunction: () = <SEP> Hmm. Maybe? I'd Let me do a console output example:  ``` export class TestClass {   constructor(myService : MyService) {     myService.myMethod(() = <SEP> Hopefully hat makes sense. I'm just wondering how to define a method that takes an anonymous function, and returns a subscribe-able object. <SEP> @duncanmak send a PR to the `types-2.0` branch on DefinitelyTyped <SEP> I see <SEP> cool, thanks @DanielRosenwasser <SEP> @duncanmak files get published on a nightly bases <SEP> basis <SEP> np <SEP> @Mosho1 great seeing you there! Yup, it was last week <SEP> @dtabuenc oh, i didn't know about those options <SEP> oh <SEP> `myMethod( taskToRun: ()= <SEP> `""moduleResolution"": ""node""` -- that did the trick! <SEP> @Benjman  maybe that's what you mean? <SEP> @Benjman it takes a function, and the method that accepted that function should actually return an observable, correct? <SEP> @duncanmak  yeah that's what makes it look at the `package.json` and use the index <SEP> sorry I forgot to add the param name <SEP> so ... `myMethod( taskToRun: ()= <SEP> and then inside my method you call `taskToRun()` and then later return an observable. <SEP> @dtabuenc That did it! Thank you very much! <SEP> @DanielRosenwasser how'd it go? that thing with module resolution is a bitch <SEP> keep running into that <SEP> Does anyone know if there is documentation on how you can do `import * as foo from 'foo-module'`  where foo-module is definied in at typing file with `export = someFooVar` ? <SEP> Most the documentation I find says if you do `export = ` syntax you have to use `import = require()` <SEP> but I find this is a common pattern in dt typings files where like they'll do `export = angular` and then also have a `export namespace angular { }` and then have you do `import * as angular from 'angular'` and that works. <SEP> but I just don't find documentation for that particular use of the `import *` <SEP> Is this the `allowSyntheticDefaultImports` functionality?",is it considered best practice to extract ambient types to.ts files?
Summarization," <SEP> Hi! :) How can I define the typying so that it aware of properties being sent to a constructor? I currently have this code, but it tells me my value is invalid.  https://www.typescriptlang.org/play/index.html#src=export%20class%20MyValues%20%7B%0D%0A%20%20constructor(private%20options%3A%20%7B%7D)%20%7B%20%7D%0D%0A%0D%0A%20%20getText%3CK%20extends%20keyof%20this%5B%22options%22%5D%3E(key%3A%20K)%20%7B%0D%0A%20%20%20%20return%20this%5B%22options%22%5D%5Bkey%5D%3B%0D%0A%20%20%7D%0D%0A%0D%0A%7D%0D%0A%0D%0Aconst%20ANIMALS%20%3D%20new%20MyValues(%7B%0D%0A%20%20DOG%3A%20%22The%20dog%22%2C%0D%0A%20%20CAT%3A%20%22The%20cat%22%0D%0A%7D)%3B%0D%0A%0D%0Aconsole.log(ANIMALS.getText(%22DOG%22))%3B%0D%0A <SEP> In that example, you haven't defined this.options <SEP> oh sorry <SEP> constructor param <SEP> ``` export class MyValues <SEP> that works <SEP> there. 7th try does it XD <SEP> @NaridaL: Ah, perfect, thank you! :D",how to make the typying aware of properties being sent to a constructor?
Summarization," <SEP> it's electron but different <SEP> notably putting the entrypoint in a script tag for node stuff.  Which seems pretty doggone weird. <SEP> https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js  That's a lot of stuff using it ._. <SEP> I can't use modules in my project. Is there a way that I can have two files see one class definition? <SEP> in my other file, it says ""Class"" is not defined <SEP> Mongo Management Studio <SEP> scary <SEP> we're targetomg a device that runs a hacked version of NW.js with a hacked version of Chromium.  But that company's not listed. <SEP> (a line of devices actually)",is there a way to have two files see the same class definition?
Summarization," <SEP> Hi,  I often have an object literal I'd like to infer types from, but I don't won't the types of properties to be literal, but number or string instead. Is there a generic type I can use for this purpose? <SEP> `defolos` solved my previous issue: an underlying parser library that was called had some internal state <SEP> `defolos` needed to create a new Parser object on each connection and not reuse the global one <SEP> *defolos wishes for a thread race detector like gcc/clang's `-fsanitize=thread`*",is there a generic type for inferring types from an object literal?
Summarization," <SEP> Anyone know how to force a type error at runtime? <SEP> Or... more fundamentally... I'm trying to prevent compilation if an array of strings does not contain EXACTLY the keys of an interface type. <SEP> So, if I have:  ```ts interface Foo {   a: number,   b: number }  const fooKeys =  <SEP> I know I can do this... ```ts type StrictArray <SEP> ! <SEP> Type error at runtime?  But... there are no types at runtime... <SEP> will typing the array as `(keyof Interface) <SEP> Oh wait, you want the enforce that the array contains ALL the keys <SEP> That sounds tricky <SEP> @fatcerberus I've made some progress! <SEP> ```ts type Exact <SEP> the API is a nightmare <SEP> lol <SEP> But yeah, `y` will be `never` if the array is not exhaustive",how to force a type error at runtime?
Summarization, <SEP> ``` <SEP> ``` import * as myModule from 'my-moduel'; ``` <SEP> well --traceResolution told me that the modules whare found <SEP> which module was found though? <SEP> elasticlunr ? <SEP> jep <SEP> that doesn't make a lot of sense where did it find it? <SEP> Found 'package.json' at './node_modules/elasticlunr/package.json'. <SEP> can you paste the lines around it? <SEP> unless the package.json had typings <SEP> you probably would see a line below what you saw <SEP> ``` 'package.json' does not have 'types' field. ``` <SEP> npm packages can chose to embed `d.ts` files in their package. When they do they have a `types` or `typings` field in their package.json and can be imported directly. <SEP> What it told you is it did find a package called `elasticlunr` but i checked the package.json and there were not ypes. <SEP> your are rihgt <SEP> does it? <SEP> I thought that was just for js intellisense,how did 'traceResolution' find elasticlunr package.json?
Summarization, <SEP> I don't know. I'm not sure if it's possible <SEP> You can do it easily with a single property by using keyof T. <SEP> The tricky part is figuring out what properties exist on B are without specifying it as a generic type.,is it possible to specify a type for a single property?
Summarization," <SEP> typescript has let me program less defensively, because I know what types are going where. <SEP> `MSavoritias` and everything has to lead and have a translation layer to javascsript and c <SEP> `Resynth (@resynth1943:privacytools.io)` Yeah webstrand, agreed",typescript has let me program less defensively 
Summarization, <SEP> What is the new promise.all signature? I've been saying the signature can be made more compact over and over <SEP> Okay. <SEP> Playground,what is the promise.all signature and how can it be made more compact?
Summarization," <SEP> variables.scss <SEP> and variables.scss.d.ts <SEP> and import should be ""./varaibles.scss"" <SEP> yep I had one left over <SEP> it's working alright! <SEP> no problem <SEP> so there's a loader that will automatically generate those .d.ts files for you in webpack it's called... <SEP> plus it's typed so hey, not so bad <SEP> typings-for-css-modules-loader <SEP> tried it but it errors out, doesn't seem to be very well maintained <SEP> ahh ok then just manual <SEP> if you're using react styled-components  <SEP> this might be something to consider, but we're just upgrading our tooling a bit to add typings and I'm not sure we want to refactor our 80 some components right now, but thanks for the recommendation :) <SEP> np <SEP> thanks again! saved me from going insane, cheers!",typings-for-css-modules-loader not working 
Summarization," <SEP> @dtabuenc can you show me some doc or example of  ""barrles"" ? <SEP> http://tattoocoder.com/angular2-barrels/ <SEP> it's not specific to angualr2 though <SEP> @dtabuenc ok, tnx mate, I understood the idea",are there some example of angular2-barrels?
Summarization," <SEP> @thasmo my mistake. Array.concat is more likely. But anyway, there actually might be type error. Show us please webpack.Rule  Unfortunately I don't have any webpack typescript config, I'm writing them in js everytime <SEP> oh sorry mixed you up there <SEP> @idchlife This one I use. https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/webpack/index.d.ts#L497 <SEP>                  ...(rule.use as webpack.Loader <SEP> because theres also a webpack.loader.Loader for some reason <SEP> Dang, nope. I did miss the `webpack.Loader` - I accidently used `webpack.Rule`. Thanks! Seems to work. Can I somewhere read about that kind of casting in the docs? <SEP> https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html <SEP> @NaridaL I had tried that, but just realized I had extenuating circumstances that caused it not to work in my case, but not TypeScript's fault. Thanks! <SEP> @NaridaL Thanks. So, in my case, could this be considered as some kind of workaround or would you judge this to be a valid thing to do, in that case? <SEP> TS doesn't infer type from the literal if you define it explicitly as you have done here with :webpack.Ruke <SEP> And I'd say it's fine. It depends on how often you find yourself doing this. If it's a lot, consider the solution we discussed previously: extending the interface <SEP> I see. I'm a bit confused on how I would use ""third-party definitions"" then, if I can't use them in the form they're provided. I mean, I thought that's basically what definitions are made for - I can consume/use them so I can be sure my variables have the proper type. But it seems a bit more complicated than that I guess. I could extend e.g. the webpack.Rule definition/interface but I'm not sure how I would change/extend it, because actually I thought it would provide it's definitions in a way I can just use them. Probably I'm missing something to understand this completely. <SEP> @thasmo The usual use case would be to just assign the entire config in one go, in which case the definition works fine. <SEP> That's a general rule when using definitions? <SEP> Think about it, when webpack parses the config, it will have to do something like if rule.use instanceof array handleArray(rule.use) else handleSingleRule(rule.use) <SEP> Okay, so far I can follow. :D <SEP> You're not handling both cases, which is why TS throws an error. <SEP> If you flip your construction, you want have this issue:",TS doesn't infer type from the literal if you define it explicitly
Summarization," <SEP> @cphoover unless you enable strictNullChecks, null and undefined are assignable to everything.  Its indeed very, very unsafe and thats why that flag was implemented :) <SEP> The behavior exists for historical reasons mostly - TS used to be a lot dumber and had to be more lenient in the past to avoid  <SEP> Nowadays I just enable `strict` in new projects <SEP> Thanks @fatcerberus <SEP> Ugh, bit in the butt by generic types not having object literal extra-prop checks again <SEP> Ideally, I'd have, ```ts declare function foo <SEP> I can't even (ab)use conditional types to get this behaviour <SEP> Because you can't tell if an object type is ""fresh"" or not using conditional types <SEP> But you wouldnt get the check anyway.  By assigning to `tmp` first, its no longer fresh when you make the call.  But even thats a moot point since it just infers `T` to be whatever the inferred type of `tmp` is <SEP> From the compilers POV, there are no excess props in the first place","if you enable strictNullChecks, null and undefined are assigned to everything"
Summarization, <SEP> should destructuring work in typescript? <SEP> ``` function click(d) {     if (d.children) {          <SEP> this gets transformed to <SEP> ``` function click(d) {     if (d.children) {         _a =  <SEP> and that doesn't look right at all,should destructuring work in typescript?
Summarization," <SEP> https://www.merriam-webster.com/dictionary/reify <SEP> (just noticed that was from 20 minutes ago, sorry) <SEP> I would have said ""make real"" or something, but I guess M-W is okay too :P <SEP> re imports, see also https://github.com/microsoft/TypeScript/issues/28288 and https://github.com/microsoft/TypeScript/issues/16577 <SEP> ""make concrete"" is okay <SEP> package.json imports/exports fields are not used by TS yet which can cause further pain <SEP> There are several things that TS can't catch that will fail at runtime using ESM. <SEP> eslint might be able to handle some of that stuff, but I haven't investigated.  Mostly the stuff I'm talking about has to do with imports and CJS interop. <SEP> Yeah I converted one of my old projects to ESM as a quick test and an import failed at runtime.  Was confused for a bit and then I remembered `import` requires the extension <SEP> I was wishing for some tooling to help fix imports when I tried converting to ESM <SEP> default/namespace exports are a pain point, too <SEP> right, even with the extension some stuff will fail at runtime <SEP> node's loader does something different than how most types are written <SEP> but an eslint autofix could be the tooling I want <SEP> IIRC node shows some useful output when those things happen, which is nice.",package.json imports/exports fields are not used by TS yet  which can cause further pain
Summarization," <SEP> I thought there must be some kind of error somewhere.  Ive never seen a debugger pause a program for no reason.  Usually it *does* tell you why it did so, though. <SEP> i'm looking at another pause now and it's *not* entirely clear there's an error ... <SEP> reading the vscode debugger log is... difficult <SEP> not the least of which bc even on this brand new souped up mbp it takes about 5 minutes to open it in console <SEP> Wow thats crazy.  Doesnt that thing have like 8 cores <SEP> this one's 6. but the file is over 2 GB and everything i try to open it in gobbles up a ton of RAM before i can even try to do anything <SEP> (i maxed the RAM and this is the first time i've hit significant swap lol) <SEP> Damn thats an insane amount of log text <SEP> that's from i think 5 consecutive runs of all the tests in this monorepo (don't recall offhand how many and not inclined to unpause the debugger rn to find out) <SEP> @fatcerberus   <SEP> What are you actually trying to do? <SEP> Loop over it during run time, or compile time? <SEP> I'm creating a service container that resolves class dependencies automatically <SEP> So I want to loop over constructor arguments to see which dependencies a class needs <SEP> I know there are solutions out there for this btw, but I like the exercise ;) <SEP>  Loop over it during run time, or compile time?  I would say compile time? I assume you're asking in regards to the changing variable/class names after compilation? <SEP> You cant convert type - <SEP> The types only exist at compile time <SEP> Hmm, so there's no way to actually loop over constructor argument types for my use case?",vscode pause doesn't seem to work on my mb
Summarization, <SEP> yeah i installed globally  `` npm install typings --global `` <SEP> `typings install` <SEP> getting error if i run only this command under my project location using cmd <SEP> what error <SEP> unable to read typings for es6-shim <SEP> ! <SEP> seems like it can't download something <SEP> can we see your `typings.json`? <SEP> are you using a proxy? <SEP> yeah <SEP> try reinstalling `es6-shim` <SEP> ``` typings uninstall --save --ambient es6-shim typings install --save --ambient es6-shim ``` <SEP> @simplysh it is not going to run because you have seen above typings install is giving an error <SEP> see if you run the raw url,unable to install es6-shim globally
Summarization," <SEP> @Gerrit0 thx. can you explain to me why the position of the `import` in a d.ts causes a difference? <SEP> i've found sometimes i need to put it inside the module declaration, and other times outside <SEP> and it's not clear to me why, or what either one does",why is the import in a d.ts different from the d.ts 
Summarization," <SEP> It is similar to the DRM problem.  If you can emit light particles such that the user can _see_ the video, then it means that there is some step in the process where the user could intercept the signal and pirate it.  The only theoretically viable DRM is one that prevents users from viewing the content. <SEP> So proxy the request through Google. Google validates that it was chrome that sent the request. <SEP> User can spoof being chrome to Google.",is there a way to 'proxy' a request through google?
Summarization," <SEP> TypeScript narrows on assignment, but those narrowings are discarded inside functions. TypeScript cannot guarantee that when the function actually executes the narrowing that was lexically determined still applies. <SEP> @keithlayne @G-Rath  I was away from work for Friday. Sat, Sun and Mon were weekends/holidays. So, technically, I've only been away from work for one day.  In that one day, they've managed to write a bunch of super questionable code. One of the worst ones is, ``` SELECT * FROM (   SELECT * FROM someTable   --Max bigint value because we do not have `LIMIT ALL`   --We use this limit so the ORDER BY clause is not ignored;   --some weird bug causes ORDER BY to be ignored if we remove this LIMIT clause   LIMIT 18446744073709551615   ORDER BY     someColumn ) AS derivedTable ``` <SEP> And they even posted a link that supposedly backs up their query structure, https://mariadb.com/kb/en/library/why-is-order-by-in-a-from-subquery-ignored/ <SEP> And the link literally says it is not a bug <SEP> And that they should add the ORDER BY to the top-level query instead <SEP> Wtf <SEP> So, my review comment is just, ""Read the article again. The query should be fixed. Not worked around""",typescript narrowings are discarded when a function is invoked
Summarization," <SEP> @drewwyatt https://stackoverflow.com/questions/36015691/obtaining-the-return-type-of-a-function <SEP> @Lareolan at a glance, that doesnt seem to use the TS type info <SEP> https://github.com/Microsoft/TypeScript/issues/1573#issuecomment-265695578 I was thinking more along these lines <SEP> tbh I haven't found a use case for it so far <SEP> @NaridaL Thanks, yeah, that doesn't work for complex types. I guess they'll just have to adhere to the d.ts, I'm not putting in a whole bunch of extra checking in my code : )",obtaining return type of a function doesn't seem to work for complex types
Summarization," <SEP> I haven't explained my use-case apropertly. Im writing a series of different JSX parsers in the same project. So i want in some situations to use different JSX namespaces. <SEP> what are""JSX"" namespaces though? <SEP> you referring to the namespace use to define intrinsic elements? <SEP> Yes, and ElementClass :) <SEP> there's a different between a normal element and an intrinsice elements <SEP> intrinsice elements are just output as a string? <SEP> That can be controlled by the ""parser""-function. I.e. React.createElement <SEP> Your standard react elements don't need to be in any namespace <SEP> Im well aware of that  <SEP> This is not for React though <SEP> With normal React everything works flawlessly <SEP> But I'm exploring using JSX in other use cases... and run into problems when I want JSX to be parsed differently in different parts of my program <SEP> Atleast with typescript; the resulting javascript works great but its a shame to loose all types  <SEP> What do you mean by ""parsing"" though? I'm not a react expert, but I know the tsx will compile down to `React.createElement(....)` where does custom parsing fit in? <SEP> and how does that relate to a ""JSX"" namespace? <SEP> Sorry, english is my second language  <SEP> yeah, no problem, I'm just trying to understand the issue because I'm not a react guy but if you explain it I may be able to help <SEP> if you have some short piece of code that illustrates the issue maybe? <SEP> Thank you  <SEP> ``` declare namespace JSX {     /** These elements will always be available */     interface IntrinsicElements { foo: { bar: boolean } }  // Use no intristic elements          /** Interface that JSX Elements needs to implement */     interface ElementClass { _props } // Use the same class decleration as our abstract component in the transpiler      /** These fields are used to determine avaiable component properties */     interface ElementAttributesProperty { _props } // Read properties from the _props attribute on each class }  namespace React {     /** A Component */     export abstract class Component <SEP> Here is a single file that works perfectly <SEP> Basically what I want to do across many files, but the problem arises when i add export statements to either namespace <SEP> It might be hard to illustrate with code samples, maybe i can set up a small repo... <SEP> Hi everyone! Is there a way to use an interface to typecheck all the class methods? <SEP> e.g. I'd like to have an interface that throws if any of the class methods does'nt return a promise <SEP> @mattiamanzati Do you know the name of the methods that will exists?",what are 'JSX' namespaces for intrinsice elements?
Summarization," <SEP> Hi, having a weird problem with generics, could anyone help? https://stackoverflow.com/questions/46135170/typescript-generic-accepting-a-function-with-callback-last-argument <SEP> Hi, I'm working on a plugin for hapi that adds a function to some of the declared hapi types. I know typescript does module merging for definitions and that seems to work when I'm doing whatever in the library itself but the generated declarations do not have these definitions in them. I did notice that I can export it directly in a `.ts` file and it seems to show up in the generated declarations. Is this the right approach? Or is there some other way I should be doing this? Thanks! <SEP> @NaridaL thanks, I updated the question with a simplified example <SEP> well it solves it for the example. <SEP> I can't change the order in `@types/node` and I'm wondering why it works that way and not the other <SEP> you can do  <SEP> aha. well that's what I was wondering about, seems reasonable to assume the first matching overload will be used, but nope <SEP> yep, that's why the example with explicit  <SEP> thank you <SEP> yep",typescript generic accepting a function with callback last argument
Summarization," <SEP> Are there any other highlights for 1.8 implemented at present? <SEP> I noticed that all of my gulp tooling broke again with 1.7/1.8, hah <SEP> Is there a reasonable way to say ""any string should be a valid key into this class""? <SEP> Would that just mean inheriting from `{ <SEP> I would expect that ```js class Something {   <SEP> Better yet, is there a way to say ""this type boxes this other type"" like ES6 Proxy objects?",Are there any other highlights for 1.8 implemented at present?
Summarization," <SEP>  Your strict union may resolve to having keys x, y, z. But with a non-literal object type, I can get a property w past the compile time check   Your strict union type resolves to having keys n, s, `___never___`. However, you got a property b past the compile-time check. <SEP> Because `new Bar` is a non-literal object type <SEP> So, as mentioned, `StrictUnion` is not the same as exact types because you can still sneak properties past them. <SEP> @trusktr   Here's a  <SEP> The problem, essentially, is that `StrictUnion` can only prevent you from providing properties that exist in that union. <SEP> It can't prevent you from providing properties that exist **outside** that union <SEP> TS is nice enough to do that with object literals. But `new Bar` is not an object literal and gets a free pass <SEP> Another example of `StrictUnion` breaking  <SEP> `n, s, ___never___` are not supposed to exist at the same time. However, we can still sneak in a value that has all three properties. <SEP> The problem here, again, is because we don't have exact types =( <SEP> I don't see the word `originStackTrace` in the TS source code. Just did a quick search on my local copy",how to get properties past the compile time check with a non-literal object type
Summarization," <SEP> is it possible someone could explain this error to me, ""Function lacks ending return statement and return type does not include 'undefined'."" Please see an attached code in the typescript playground - https://is.gd/e5cMnV <SEP> @mrjackwills You're missing a final return at the end of your function. <SEP> If that's supposed to be unreachable, you can throw  <SEP> otherwise, if your `try {} catch {}` fails, your function returns `undefined` <SEP> which bit is unreachable? <SEP> alternatively, add a `return` to the `catch {}` block <SEP> ah ok <SEP> @mrjackwills  you need to return or throw in the catch block <SEP> what makes more sense, add a return to catch block, or removing try{}catch{{, my linter has so far told me to remove many try catch blocks <SEP> don't catch unless you are going to do something there <SEP> makes sens <SEP> or after the `catch {}` is fine, too. Just so long as the function always return the correct type. <SEP> you can also use try,catch,finally <SEP> ah ok <SEP> I think without try catch will work, as this is only a small splice of sample code, and everything is wrapped in try catches ""higher up"" <SEP> I'm used to writing all functions as async, and using try{}catch{}, but converting a small project to typescript, and the linter has suggested I removed nearly all try catch blocks <SEP> Basically I only use try/catch blocks in places where I can do something with the error <SEP> No need to have 3 or 4 layers of try/catches <SEP> as long as the ""parent"" function, calling all other async functions, is wrapped in a try catch? <SEP> yeah, uncaught exceptions are passed up the stack until a `try {}` block is found, or the program exits. <SEP> cool, unless of course in my deeply nested function I want to do something funky with the catch <SEP> the same rule applies to `async`, if an `await` fails in the body of your function, then your `async function` also fails. <SEP> @mrjackwills  usually you use nested try catches to add additional context to the error then just re throw it up the call chain <SEP> got you <SEP> another question, completely distinct from this try/catch. Is it possible to auto generate '@param' and '@returns' comments, using typescript, or a plugin at least <SEP> whats the best place to find a repo of a clean typescript node example, mainly in terms of what the current thinking is of project structure",function lacks ending return statement and return type does not include 'undefined'
Summarization," <SEP> What backend files exactly? dist or src? <SEP> dist has commonjs src has well es2015 like (I don't know if TS imports are === es2015 modules) <SEP> many modules. express, etc",what backend files are there? dist or src?
Summarization," <SEP> concat and append are two different things, though <SEP> ! <SEP> Paysafe hasn't improved their spelling <SEP> I wonder how a `Concat` version of your `Append` type would fare. You'd need like 50^2 overloads to support tuples of up to length 50 <SEP> I don't like 3.8 because it lowered the effective max depth ",how would a Concat version of your Append type would fare?
Summarization," <SEP> :P <SEP> i wanted something like the above lol <SEP> https://www.typescriptlang.org/play/index.html#code/MYewdgzgLgBANgVygLhgbwNoGsCmBPVaAJwEswBzAXUKlIoF8YBedAKBhgCIAzEET1JwBGAQyKdW9ANytWoSLCI4AtiIAOzGAAoxRGnXIZKASmYA+GLoB0qtVojn4SDBBOz50GGQ0sMPPpyUMnLgECBwOFZwIORaSrZa3sbGUkA <SEP> So just need to add verifying that the array only contains values within the luts keys. <SEP> Its okay I took over on that echo thing <SEP> https://www.typescriptlang.org/play/index.html#code/C4TwDgpgBAMgqgFQNIRAZygXigcgGYD2BOUAPrgEYCGAXjgNwBQjAxgQHZrBQA2ArsABcUAN4BtANaooAS3axEKdAF1hXAE5yA5gF8soxlCgAiQgWPDj1dcYA0hk9RoXH2u4x1NmbTt3UQAWyowfQAKKnV1YXhkVDQxZQBKLAA+KAj1ADogsFCMTDT+YDE0JO8OLll2MGjFOIT9MVMiY2UvHzQCHghMngItUP8c0LkwRMT6IA <SEP> I used to have a cleaner way for this that I knew of, but I cannot recall it. <SEP> thanks Karan <SEP> Thats just `Record <SEP> Ah, yes. <SEP> I think I had a way that DRYed out `LUTKey` though so that you could just define the keys in the object.",how do i verify the array does not contain luts keys?
Summarization," <SEP>  Hello! I want to make a function whose return type is conditional to the given arguments. So a mapping between parameter type and return type. Conceptually simple but not finding success yet... Any ideas/suggestions? <SEP> `unclechu`  <SEP> `unclechu` i'm not looking for default values but for avoiding computation if even single one value from a set of nullables is null (or undefined) <SEP> Generally maybe is something like: `maybe1.then(x = <SEP> Which you can do with null coalescing <SEP> `maybe1() ?? maybe2() ?? maybe3()` <SEP> It will short-circuit on the first one that returns null <SEP> Wait no that's wrong - I'm being stupid <SEP> `unclechu` consider this case: i have a react component which takes some **not** nullable props, and i have some nullables, for instance parent component have ""id"" and ""title"" props which aren't loaded yet, fetching is in progress, setting `id` as `0` and `title` as `''` is just a bad idea. so i want those values unwrapped, but i also don't want to render the whole child component if one of `id` and `title` is null, i need both of them not being null, only then i render child component and use unwrapped values <SEP> `unclechu` and this solution with a set of nullables and callback-ish function is just a single expression. it doesn't invade my scope with a set of new variables, and doesn't make me do the same checks twice, etc. this does exactly what i want, and also it's pretty cheap in sense of computational resources <SEP> `unclechu` and for me, who spent a lot of time with haskell, it seems a very simple and straightforward way to do it <SEP> `unclechu` so, i'm relatively satisfied with it, except that types can't be inferred and have to be declared explicitly in the callback function arguments <SEP> `unclechu`  <SEP> `unclechu`  <SEP> `unclechu` `| <SEP> `unclechu` keep going that way, i'll wait when you come up with something like ` <SEP> hmmmm, that is a bummer. I was hoping to use the decorators as a requirement so people don't shove any old (undecorated) class in <SEP> `unclechu` when ` <SEP> `unclechu` i always missed point-free composition in js, `.map(fn)` doesn't work, since `map` doesn't only gives a value, but also index, and if you do so it sometimes leads to absolutely **insane** confusion, you can only imagine what will happen if you do this: `xs.map(Number)`, once i debugged something like this, my eyes was absolutely round when i looked at the values <SEP> `unclechu` after that, i promised myself to never pass raw references to functions as arguments, only wrapping them into lambdas with explicit amount of arguments <SEP> Of course if your function does something nasty like use `arguments`, all bets are off <SEP> `unclechu` well, it wouldn't help with `Number` since all the types would be valid <SEP> `unclechu` here is a complete thing https://gist.github.com/unclechu/4297e07db922ec6783b1f171b3b2b193 of the experiment, if someone interested <SEP> `unclechu` see for `",how to make a function whose return type is conditional to the given arguments?
Summarization," <SEP> is there a way to clean up unused imports? <SEP> What IDE do you use? I guess some IDE's support this <SEP> VS Code <SEP> Oh I guess VS Code has no such feature, AFAIK :D <SEP> If you find it out, let me know <SEP> no couldn't find it either <SEP> The one from tsd is out of date <SEP> take that one and update it <SEP> it's really handcrafting <SEP> you can find the source in the DefinitelyTyped repo on github <SEP> the .d.ts file you got from tsd <SEP> so you can create a PR over there to make sure everyone has the update version <SEP> (PR's usually take a few weeks over there btw) <SEP> Damn <SEP> So I update it myself and make a PR ^^ ? <SEP> yup <SEP> Damn why did no one else before wanted to work with the latest version of angular-animate :D <SEP> but of course in the mean time you can use your own by storing it in the typings/ <SEP> haha <SEP> I have to admit I usually work around it by using `require` instead of `import` <SEP> So and how do I create the .d.ts file from a library? <SEP> What command do I need? <SEP> you mean like in an automated way? <SEP> that can only be done if it is a typescript library <SEP> but if that is the case, you don't have to use TSD in the first place if they have set up their library correctly <SEP> Damn <SEP> No I guess angular-animate is not written in TS -.- <SEP> So I have to write it myself? <SEP> LOL <SEP> jup :'( <SEP> Crazy",is there a way to clean up unused imports?
Summarization," <SEP> hi <SEP> I am using module express-session <SEP> @amivit it's rolled up through `outFile` <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/express-session/index.d.ts <SEP> can someone tell me how to access the ""Session"" interface <SEP> ```import { Session } from 'express-session' ``` doesnt work <SEP> but  ```import { Store } from 'express-session' ``` does though <SEP> Hey @jacobus-brogly , I'm working lately with express and TypeScript and I can guess that usage of session is like   ``` import * as session from ""express-session"" ``` <SEP> and then use it like session(something) <SEP> That doesnt work either <SEP> ``` declare module ""express-session"" { ``` <SEP> what error do you get? <SEP> I see Session interface is defined OUTSIDE the declare module <SEP> shit... <SEP> look at the index.d.ts <SEP> anyone has a solution for this? <SEP> or need to request a change? <SEP> yeah I fixed it by copy-paste Session interface  to the ""session"" namespace in the index.d.ts file <SEP> this is not cool <SEP> will submit a pull request <SEP> Dont worry it will be fixed after the accept my pull request on github <SEP> Hi, is there any sensible way of having a mixin class method refer to a property/method that only exists in a class that implements that mixin?",how to access 'Session'interface' interface
Summarization," <SEP> um may I know what Typescript is? No I'm not looking farword to learn it, just to know what purpose it has <SEP> @udayk8139 its purpose is to bring sanity to javascript development. <SEP> Sanity as in? Javascript seems ok for me <SEP> @udayk8139 it's a superset on top of javascript <SEP> typescript puts the compiler in charge of a lot of stuff with javascript you have to do yourself (keep in mind what methods are on an object, etc) <SEP> put another way, TypeScript helps you create correct programs. <SEP> aw there isn't a room for C# <SEP> ? <SEP> @udayk8139 no, choose Scala over C# please. <SEP> TypeScript(/ ECMAScript 6)  actually borrows ideas from  both Scala and C# :)",what is Typescript and how does it work?
Summarization," <SEP> You can pass a custom config to ts-node <SEP> Make webpack.config.js load `ts-node`, pass custom config, then `require('./webpack.config.ts')` right after that. <SEP> That's what I do. Works great.",custom config to ts-node
Summarization," <SEP> Hi I was wondering how I can extend an existing JavaScript library.  I was looking at the SO articles on it, but my case didn't work because I was doing `declare` <SEP> Here's the relevant snippet ``` <SEP> ``` declare namespace GoogleMapsAPI {   class MaxZoomService {     constructor();     public getMaxZoomAtLatLng(latlng: LatLng, callback: (res: IMaxZoomResult) = <SEP> read documentation for ""module augmentation"" <SEP> which gives `An implementation cannot be declared in ambient contexts.` <SEP> k <SEP> the syntax will be something along the lines of... <SEP> delcare module ""NODE MODULE NAME"" {    //override or merge typings here } <SEP> k <SEP> Not really working yet <SEP> This part is okay <SEP> ```   class MaxZoomService {     constructor();     public getMaxZoomAtLatLng(latlng: LatLng, callback: (res: IMaxZoomResult) = <SEP> adding this didn't work <SEP> ``` GoogleMapsAPI.MaxZoomService.prototype.getMaxZoomAtLatLng = (latlng: GoogleMapsAPI.LatLng) = <SEP> ok this one seemed to compile <SEP> ``` GoogleMapsAPI.MaxZoomService.prototype.getMaxZoomAtLatLng = function (latlng: GoogleMapsAPI.LatLng) {   return new Promise <SEP> goign to test it out now <SEP> failed at runtime :( <SEP> ReferenceError: GoogleMapsAPI is not defined <SEP> which makes sense. <SEP> well I sort of solved it by doing this <SEP> ``` window.initMaps = () = <SEP> I guess it cannot overload a method though :( <SEP> I had to rename the method otherwise I get too much recursion.",how to extend an existing javascript library?
Summarization," <SEP> but TS and flow are quite similar and when we move the project over it *should* go smoothly <SEP> hopefully <SEP> with the commoninterface i suggested above you're going to need to decalre the type explicitely <SEP> I'll give it a shot <SEP> then it should all be implicit <SEP> to avoid that <SEP> yah right now I am using flow's $Call <SEP> I wonder if TS has an equivalent? <SEP> no that's it <SEP> ok good to know <SEP> tbh I still don't see why you want separate decl files. whether you want to declare the common type explicitly or not, it works better if you do it directly in the module <SEP> I just didn't want 150 `const typeVar`s in the code <SEP> just 1 <SEP> sure it's ugly, still seems a lot better than having to explicitly type all the args... <SEP> this is true; if by putting in an interface file I have to declare all the args, then it's much better <SEP> I was hoping the interface file could infer across all modules <SEP> it cant <SEP> and a minimizer will remove the const typeVars anyways^^ <SEP> thanks for all your help",is there an equivalent for commoninterface?
Summarization," <SEP> Redux 3.4 is out, it has typings in the package.json, but I can't seem to get VS Code to recognize these <SEP> neither is tsc recognizing it <SEP> I have to have ""node_modules"" in tsconfig exclusion because it would otherwise go inside the node_modules/typescript/lib/lib.dom.d.ts and throw billion duplicate errors",can't get vs code to recognize json
Summarization, <SEP> webpack isn't typically necessary for server-side since you aren't doing any bundling <SEP> but I've seen some projects use webpack because they want to use specific loaders <SEP> but for the most part tsc is all you need <SEP> even if the modules are meant to be consumed by web <SEP> since whoever uses the module would then webpack,webpack isn't typically necessary for server-side
Summarization," <SEP> yeah it annoys me because then I have to make sure my static methods work with all subclasses which is sometimes hard <SEP> I dont mind the class semantics usually but that part frustrates me <SEP> But anyway yeah I think we need to see some code examples because Im lost as to whats wanted here <SEP> It is similar to the Singleton pattern, how could you define a Singleton Class if you can't return the type of the implementing class. <SEP> `class Concrete <SEP> Pass the type through <SEP> Yes that is a good point <SEP> We dont have existential types so you always have to thread type parameters through manually <SEP> But surprisingly, in static method, you can reference to this as the class itself, even if types haven't been resolved <SEP> Yes because classes are first-class objects <SEP> So `Class.method()` is just calling a method on the `Class` object itself <SEP> You can use them as values",is there a way to pass a type parameter through to a static method?
Summarization," <SEP> Is there any way to annotate a method that modifies a class instance property? ie: ``` class Names <SEP> Better yet, annotate a method that changes the Type def of the class itself <SEP> like, now that I've pushed ""foo"" I now have an instance of `Names <SEP> @christianbradley that is not possible since Typescript needs types to be statically calculated, what you're requesting is for it to be dynamically calculated. You can do it if you store the value in a variables instead of a property, so you don't have to modify the type of the variable:  ``` const value =  <SEP> right, but there's no way to tell Typescript that an instance has had its type modified <SEP> no, types are static <SEP> ie: ``` function toString(a: { val: number }): (a = { val: string }) { a.val = a.val.toString(); return a } ``` <SEP> 1. you can't modify a property, argument or variable type. It's static. 2. If you do that in your function you don't need to return  `a` because you already modified it.  types follow immutability rules  ```ts function toString(a: { val: number }): { val: string } {     return { val: a.val.toString() }; } ``` <SEP> thanks",is there any way to annotate a method that modifies a class instance property?
Summarization," <SEP> An excerpt... <SEP> ```ts  class GenericException <SEP> Sort of. Don't worry about it :) it can't be done currently, due to tuples & spread operator <SEP> Why ? <SEP> ``` class BaseException extends Error {   constructor(message: string) {     super(message);   } }  const attempt =  <SEP> That errors b/c of `...p`, which turns it from ` <SEP> which means that `...p` can have `0 or more elements`, where the constructor *requires 1* <SEP> make sense? <SEP> Make sense <SEP> Ya, it's annoying :( <SEP> Other than that, it'd work perfectly",don't worry about GenericException
Summarization," <SEP> Is there a BDFL a la Python or a committee with working groups a la C++ or some Meijers type character who influences the direction or a combination of it all (just curious) <SEP> \\_()_/ <SEP> written zero files <SEP> unconvertable <SEP> I actually have to run off, but hope you guys get it figured out! <SEP> thank you a lot for all the time u spend! <SEP> you guys are working a microsoft? <SEP> ! <SEP> :tada: :tada: <SEP> https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/ng-file-upload/ng-file-upload.d.ts <SEP> how can i use this typing and use the control in html? <SEP> or `typings install  <SEP> what do you mean? <SEP> after install the typing it needs to be linked in the typings.ts file? <SEP> Think of typings helps the compiler (`tsc`) and language service to provide typed information, intellisense, code completion.  It does not do anything on the actual code.",is there a BDFL a la Python or a committee with working groups?
Summarization," <SEP> @webstrand   <SEP> SFINAE wasn't originally intended to be what it has become. Now, it's unchangable, even if there were a better option, because so much code depends on it. <SEP> SFINAE? <SEP> Substitution failure is not an error <SEP>  Considering though that some people managed to do all these bad things in OOP too  Personally I'm against OOP in general <SEP> Most times people overuse it for no reason <SEP> Like weird `Model` classes <SEP> It's normally used when plain data objects + functions would suffice <SEP> If anyone starts arguing with you about the merits and disadvantages of OOP, just assert: ""Smalltalk got it right, nobody else has ever since"" <SEP> Heh <SEP> @resynth1943   <SEP> @resynth1943  ",why is SFINAE unchangable if there was a better option?
Summarization," <SEP> Hi, there a quick Question, In my class( say UI class ) method, I am consuming a response received from another class(say helper class). Response from the helper class has below the interface. ```js export interface usersReponse {  users: user|Array <SEP> if my question is not clear, please let me know I will explain it in more depth. <SEP> I understood the issue here, But is there any way avoid it based on  ```singleUser``` property from the response receive from service? At the end I will assign the user",is there any way to avoid singleUser property from the response?
Summarization," <SEP> ``` $ npm login $ npm publish ``` https://hackernoon.com/publish-your-own-npm-package-946b19df577e  I'm too lazy to work this weekend. I'll pick a great TV Serie and stick to it until morning. <SEP> gn <SEP> Also is it possible to include typings with a package <SEP> totally <SEP> thats preferred really <SEP> your package is TS, right? <SEP> Yep - https://github.com/taburetkin/asyncresult <SEP> I just lately added definitions to this package <SEP> just turn declarations on.  I usually have something like this in package.json: ```json {   files:  <SEP> @keithlayne Yes its my `from` module <SEP> assuming `dist` is the tsc output dir <SEP> ...and that the entry point is `index.js` <SEP> Ill probably publish as `0.1.0` as Im not ready to commit to API stability just yet <SEP> The `files` key helps keep extra stuff out of your package. <SEP> Also, run `npm pack` before you publish to make sure it includes exactly what you expect. <SEP> My stuff actally gets published by CI, I use `npm version` and it publishes when I push a tag. <SEP> being open source, Id consider setting something up like that with a free service, Travis or whatever. <SEP> ...but I know thats premature <SEP> I use Travis for miniSphere.  For this theres nothing I really need to automate yet <SEP> Maybe once I have a test suite <SEP> Im just scared of manually doing things I could screw up.  Id automate the build & publish and add a test gate later.  But thats just me. <SEP> Altough I get lazy and sometimes I push a tag with a lint failure - thats embarassing <SEP> Oof <SEP> But nobodys looking, so I just delete the tag and force-push like it never happened :) <SEP> ...if there were tests, Id probably run them locally and catch that, but well, there arent, and I forget to run the linter sometimes.  All very embarrassing <SEP> Oh thats good to know - I didnt know `package.json` could use a subdirectory for the published files.  I assumed that if my main was, say `index.js` that I had to have `index.js` in the root along with the package.json... but then TS wouldnt actually let me build in the root because that causes it to exclude everything... <SEP> So yeah, I knew there was a piece of the puzzle I missed <SEP> Thanks for all the help :) <SEP> On a different note, this guy has no idea what hes talking about.  The version of `join` he describes is actually `extract` which is no longer a monad but a comonad: https://medium.com/@_ericelliott/join-means-different-things-for-different-monads-4d75b018bb9f <SEP> If you can extract the value thats fine - but its not part of the monad contract :stuck_out_tongue_closed_eyes:",is it possible to include typings with a package?
Summarization," <SEP> @AnyhowStep , I wrote the definition for DR. It works pretty well in general <SEP> Why doesn't it look like a complete declaration to you? <SEP> I've been looking at this for a while: https://stackoverflow.com/a/55930310/7224430, https://github.com/microsoft/TypeScript/issues/13923#issuecomment-488160343 https://github.com/sindresorhus/type-fest/pull/34#discussion_r325303311 <SEP> Please let me know if the definition should be improved.",why doesn't the DR definition look like a complete declaration?
Summarization," <SEP> Is there a doc or something describing the different SyntaxKinds from the tsc compiler. While most are obvious, others are very abstract and hard for me to infer there usage. <SEP> I would look at the scanner.ts <SEP> I thought create source file gives you the root of the AST <SEP> parser probably creates the expresions from tokens",Is there a doc or something describing the different SyntaxKinds from the tsc compiler?
Summarization," <SEP> For whatever reason I find variance very interesting <SEP> Huh, I just had a look at C++ (because that's what I learned), and it doesn't support contravariance of methods. I guess that's why its one of my blind spots. <SEP> I'm not even going to touch that one with a ten foot pole <SEP> Even so everyone called them methods anyway from what I remember of my time doing C++... 'course that was ages ago",why doesn't C++ support contravariance of methods?
Summarization," <SEP> what do you think of this? https://github.com/microsoft/TypeScript/issues/12936#issuecomment-772111463 <SEP>  Also, how could I make the part under abstract type as specific as the concrete definitions above?  <SEP> @vogler `namespace`s aren't types. They're roughly analogous to `const`/`let`. You get their type by `typeof`. However, typescript doesn't have nested types, so, no that's not possible. <SEP> ``` namespace foo {     const bar: string = """";     type baz = number; } type x = (typeof foo) <SEP> @webstrand   <SEP> I think the status quo is too much OOP OOP claims that nothing is sealed, everything shall be extensible, java still does not have sealed classes for this reason <SEP> btw having add on ImmutableList is not a problem because it is deprecated with annotation and the IDE strikes out the name of the method",typescript doesn't have nested type
Summarization," <SEP> `tsc -w` does not appear to delete compiled files when the source file is deleted. <SEP> is it really not possible to get the type of a yield expression in typescript? D: <SEP> @johnfn i just used the first example here and type inference detects `number` https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function* <SEP> if i `yield` an additional value of a different type, it infers the union type <SEP> @eyelidlessness what i mean is the thing where you'd do `gen.next(""foo"")` <SEP> and then `const result = yield 5 // result is now ""foo""` <SEP> i don't know how TS could infer that type. <SEP> then the yield expression would return the second paramterized type <SEP> and .next() would be parameterized over the same thing <SEP> wait, are you saying you don't want inference, you just want to specify the type? <SEP> why not `const result: string = yield 5;`? <SEP> if i did something like that, i lose all the benefits of type inference <SEP> because i just manually set the type and both the sender and receiver lol <SEP> the argument to `next` is `any` <SEP> yeah.......... thats the problem lol <SEP> it isnt actually any in practical scenarios <SEP> the type of next() is whatever the generator expects it to be <SEP> like imagine <SEP> which is why i think you would want to specify it  in the generator <SEP> it should be another type parameter on `IterableIterator` <SEP> if i specify it once (on the generator) then next() should automatically have the correct argument type <SEP> actually wtf <SEP> i can actually just modify the type definitions <SEP> by adding the second type parameter lol <SEP> but its not _terrible_",is it possible to get the type of a yield expression in typescript?
Summarization," <SEP> How can I extract a type argument from a generic type? <SEP> Specifically, PropTypes' Validator <SEP> Want to get a type for props inferred from the static propTypes <SEP> Oh hey, nevermind, there's already InferType :D",how can i get a type argument from a generic type?
Summarization," <SEP> https://github.com/Microsoft/TypeScript/issues/6080 <SEP> Intriguing. I believed this was already possible. But perhaps that's something I just assume leaping over in my mind from JavaScript. <SEP> Well, however, I feel the suggested functionality would add much comfort to non-const enums without giving up type safety. <SEP> This was a very interesting and exciting discussion. Thanks a lot for today, @masaeedu . You've been a great help and chat partner. Have a nice evening (or shall I write, night?) ;) <SEP> If there are no better docs, is there a mailing list where one can ask the team questions about the internals? <SEP> Hmm, https://github.com/Microsoft/TypeScript/issues/3866 says no. <SEP> In fact, it says to come here. <SEP> Well, it's still day here, but back at you :) @SetTrend <SEP> @metaweta Just ask the question and ping @DanielRosenwasser (*ducks out of sight*)",is there a mailing list for questions about the internals of TypeScript?
Summarization," <SEP> https://www.typescriptlang.org/play?#code/C4TwDgpgBACg9gZwJbCQNwgHgHJQgD2AgDsATBKYgVwFsAjCAJwD4oBeKAAwBIBvbAL6c8hEuS4BaPgmCMkxAOZCoAfkoQMjKAC4o2ANwAoQ6EhQAYnDjtYiFOiwSAjMyOnoAIQCGWjvGSoGJguRkA <SEP> well inasmuch as `Postive <SEP> Yeah but I assumed that was intentional, i.e. then you distribute over it <SEP> Only works with literals though <SEP> On a non-TypeScript note I just built myself a new PC, `i9-10900` w/ 32GB RAM, 10x cores - more power than I'll probably ever need :stuck_out_tongue_closed_eyes: <SEP> I don't understand how template string mapped types distribute over unions <SEP> `Positive <SEP> I don't think it distributes at all, because `${N}` is not a naked type parameter <SEP> You'd need to wrap it in a second level of conditional type <SEP> This is baffling:  <SEP> compare EU1/2 vs PU1/2 <SEP> in both cases the ""1"" type has a union member that does not pass `extends`, but for the string, having one union member that fails `extends` takes the false-path, while for the number, it takes the true path unless  all union members fail `extends` <SEP> (You can add `type PU3 = Positive <SEP> Anyway we got way, way off in the weeds, but @konstantinblaesi you actually could use that `Gen` type from above.  I refined it to  ```ts type Gen <SEP> As long as `Max` is a literal number that's not too big it should make an integer range.  (Web, you were right, `type Range4To8 = Exclude <SEP> Doesn't that exclude `4`? <SEP> Oh I see, it's an exclusive range <SEP> `Gen",how template string mapped types distribute over unions
Summarization," <SEP> Hmmmmm..... got a function thats a complete black box alls i know is it causes process death. <SEP> can't debug it, can't log inside it, can't get the stack trace, nothing <SEP> have this code yet the process still dies without being caught <SEP> ```         return  <SEP> Mmmm ok lets see <SEP> Mm..... still nothing <SEP> My bad, stuffed up something else building again",how to debug a function that causes process death?
Summarization," <SEP> guys <SEP> is there any magic we should do to get node.js modules imported on TS? <SEP> `typings install dt~node --save --global` <SEP> and `import * as http from 'http'` <SEP> dont work :( <SEP> should really work that <SEP> @galvesribeiro: Sorry; doing other things and didn't see this come in. Did you get a node.d.ts file with that typings command? If so, you might check the Node version it says it supports. Sometimes I get files for Node 0.x; recently, I found one for 4.x; still more recently I found one for 6.x. If you open the file, you'll see it in a comment block within the top 30 or 40 lines. <SEP> @Prairie-Falcon np. this is what I got <SEP> ! <SEP> Recently, I noticed I could `export fs = require(""fs"")`, so it must have known where to find what it needed. But I couldn't `import fs = require(""fs"")`. Frustrating. If anyone has a solution, I'd love to know it. <SEP> ok I got it to compile here <SEP> the problem was that I had typings directory in the exclude tag of my tsconfig.json <SEP> now it build <SEP> however <SEP> when I hit the debug, it throw me an error <SEP> ! <SEP> @galvesribeiro  Here's the start of my node.d.ts      // Type definitions for Node.js v6.x     // Project: http://nodejs.org/     // Definitions by: Microsoft TypeScript  <SEP> @Prairie-Falcon can u try `typings rm node --global --save` than `typings i dt~node --global --save`",how to import node.js modules on TS?
Summarization," <SEP> Hi guys, I am new to typescript . Can anyone please tell me how to initialize date type ? <SEP> @NaridaL in response to the Typings, when trying to add types for redux i get a message that redux includes its own typings. <SEP> Also, reducer takes only 1 parameter in the typings for redux <SEP> Hey guys, is it possible to tell typescript to construct class from parsed JSON data? Like this, but it does not work:  ``` interface Human {     age: number     name: string }  class Classmate {     name: string     age: number      constructor (person: Human) {         this.age = person.age         this.name = person.name     }      getPerson(): string {         return this.name + ' is ' + this.age + ' years old.'     } }  var John = JSON.parse('{""name"": ""John Doe"", ""age"": 24}') as Classmate;  console.log(John) // John is not of type 'Classmate' ``` <SEP> without doing new Classmate({...}) of course <SEP> the `as classmate` doesnt change runtime behavior <SEP> you need to do it like you'd do it in JS, ie <SEP> `const John = Object.assign(Object.create(Classmate.prototype), JSON.parse(...)) as Classmate` <SEP> @iFarmGolems <SEP> @NaridaL Thanks, I was just wondering if there is some other way <SEP> Hey guys, is there any way to add global definition file? I have ///reference in every single ts file and would love to replace this with config entry <SEP> i've tried ""files"":  <SEP> the issue with that is that it will only parse that one file then <SEP> use include:  <SEP> and add in all project files <SEP> add as a reference? <SEP> hm? <SEP> ```     ""include"":  <SEP> glob patterns work with include <SEP> ```    ""include"":  <SEP> that's what I have atm <SEP> yes, you also need to include all the other project files <SEP> testing with declare global { interface Window { test?: any; }} <SEP> oh, lemme try <SEP> if you just do that TS will parse the declaration file and stop, which isnt helpful <SEP> I've added ""comeponents/**/*"" to the config, but still nothing <SEP> 2339 Property test does not exist on type Window <SEP> hm <SEP> prob my declaration is wrong <SEP> wrap your declaration in backticks here <SEP> ```   ""include"":  <SEP> ok and whats your include declaration now exactly <SEP> and which file is the error? <SEP> file components/path/component.ts, ""console.log(window.test)"" <SEP> strange <SEP> so <SEP> does adding the ref path fix the error? <SEP> I guess you don't use ""declare global"" anymore <SEP> simple ""interface Window {}"" works just fine <SEP> yeah declare global is for use with modules, but i thought it would still work <SEP> ye though it should work, too <SEP> thanks for the help <SEP> now i can throw all the references away :D",how to initialize date type in typescript?
Summarization," <SEP> whats the best way to dynamically change ts file based on environment configuration? <SEP> I mean reference to ts file <SEP> I want  ```import {A} from ""X""``` to mean  ```import {A} from ""X.dev""```",how to dynamically change ts file based on environment configuration?
Summarization," <SEP> What the `KeyMap` type does is this ""for every property K in keyof T, set the type of the same property in the new type to K"" <SEP> The `undefined` isn't coming from that <SEP> It's coming from the `",what the KeyMap type does is set the type of the same property in the new type?
Summarization, <SEP> @wdunn001 I think you want a discriminated union: https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html <SEP> @tonisostrat materialize css uses jquery. :/ <SEP> it's listed under dev dependencies only <SEP> I think it should be listed as a peerDependency because its referenced in their code: https://github.com/Dogfalo/materialize/blob/c9363571a1fe60168d3833bf2b139b52723b5b04/js/parallax.js,materialize css should be listed as a peerDependency
Summarization," <SEP> Hey there :wave:   I have a binary that I want to ship with my TS app but it doesn't get copied in the output `dist` folder. Does anyone knows what's the optimal way to do that? Tried unsuccessfully to add the file/folder in `tsconfig.json` - <SEP> Hello all, I am working on a Typescript library for client side user authorization. https://github.com/zainabed/web-security-soteria It is in beta version, I would appreciate if you provide some feedback on it, Thanks. <SEP> @G-Rath yeah, what about him? <SEP> He's been making wavvveeesss <SEP> https://twitter.com/SeaRyanC/status/1139202105565011968 <SEP>  I found it, the worst person on GitHub <SEP> It's actually amazing <SEP> https://github.com/catastrop?tab=overview <SEP> https://github.com/swaywm/sway/issues/4247 <SEP> My fav this time is: https://github.com/rust-lang/rust/issues/61692 <SEP> where he asks a question in the title, and then asks a *complete seperate question* in the description <SEP> but like yeah, I'm actually amazed - he's using GH in some really weird single-fire-question manner <SEP> lol wtf <SEP> I saw Cavanaugh's Tweet, and just instantly knew who it was he was talking about <SEP> So far I know a couple of things about him: he really hates YMAL, has a great interest in things becoming self-hosting, and can't decide if he wants to use Win10 or BSD <SEP> oh and they think that everything should be using free stuff, b/c its free: https://github.com/neovim/neovim/issues/10100 <SEP> like I love that one too, b/c he's asking them not to use google analystics, *not* b/c of like ""dont track people"", but b/c he thinks they should be using a *free* analytics too :joy: <SEP> Its like some spy sent out by Richard Stallman to convince everyone free software is the One True Way... except hes really, *really*, **really** bad at it. <SEP> omg *that* needs to be a tweat - ideally as a respond to Ryans. That sums it up perfectly <SEP> I have two more to share, and then thats probs enough torll feeding: <SEP> this one has some great logic on display: https://github.com/microsoft/TypeScript/issues/31733 <SEP> that one has a fantastic response from the admin: https://github.com/go-yaml/yaml/issues/472 <SEP>  Thanks for your collaboration. Have a good life. <SEP> nice. <SEP> Exactly - its just like so perfectly phrased and excecuted <SEP> has anyone tried to make contact with catastrop to find out whether he's a troll or not? <SEP> Oh yeah that conversation will go well  <SEP> no, think of it like social hacking. start up a proper conversation, ask him unrelated questions etc",how to copy a binary in the output dist folder?
Summarization," <SEP> @karbal I think you confused with a different user:) I try to ""restart typescript server"" option in vscode and reload the vscode but still, the problem exist. try yourself please. <SEP> Is there any way to debug this issue and see why the vscode can't able to resolve the paths? <SEP> ! <SEP> what does one do when he gets this error? <SEP> `string` can't be used to index `Record <SEP> Hm what's the T extends part from? <SEP> Because `const storage: Record",Is there any way to debug this issue and see why the vscode can't able to resolve the paths?
Summarization," <SEP> ``` getData() {          firebase.init({         }).then(             () = <SEP> ??? <SEP> Please help <SEP> @ShankyTiwari <SEP> Hi. Just wondering if there's a way to add `.js` extensions to imported modules when compiled? I'm playing around with WebComponents and in-browser module imports, but the browser needs the extensions to load files <SEP> eg. ``` import MyComponent from './MyComponent ```  becomes: ``` import MyComponent from './MyComponent.js ``` <SEP> @Skwai  u don't need to mention extensions while importing <SEP> you do when you do an in-browser import: ```  <SEP> the browser can't infer the file extension (or if it's a directory) <SEP> right my mistake <SEP> https://jakearchibald.com/2017/es-modules-in-browsers/ <SEP> all good. my guess is that it's not doable with just the tsc compiler? <SEP> I changed my example above, if `MyComponent` imports its own files, it will need the extensions in it",if there's a way to add '.js' extensions to imported modules when compiled?
Summarization," <SEP> Hey guys, is there any way to preferentially pick a certain extension over another with typescript? e.g. match both `.web.ts` and `.ts` but prefer `.web.ts` when there are two files present <SEP> @frederickfogerty Depends on the system you're running :) <SEP> For example, in Webpack, I can specify the resolve extensions... <SEP> Hey @sam-s4s yeah, I love webpack. Unfortunately we aren't using webpack because we don't want to emit a bundle, we just want to transpile the files (this is a module) <SEP> Just using tsc? <SEP> So we're stuck with vanilla TS at this stage, although we are welcome to use another tool, such as gulp, if it can emit multiple files (i.e. just transpile, don't bundle) <SEP> oki - sorry, I'm not sure then! <SEP> Thanks man <SEP> You can use Gulp though <SEP> I'm playing around in Angular 2 land, myself - and I've made both a Webpack and a Gulp build script :) <SEP> Webpack loves to bundle by default, but Gulp can do whatever - Browserify can make it bundle, but if you don't want that... you can just not use it :P <SEP> So I assume you could set gulp up to load the files with the correct extensions? <SEP> @sam-s4s yeah that would be ideal. Do you know of a plugin (such as merge) which would **only** match the preferred file? <SEP> e.g. if I had entry.ts and entry.web.ts, it would **only** match entry.web.ts, but still match other .ts files where there isn't a conflict? <SEP> Well, in gulp, you do things in pipes - so first step, load the files you want... gulp.src('src/**/*.ts')  and second step, compile them... .pipe(ts({     noImplicitAny: true,     out: 'output.js' }))  and then third step, output them... .pipe(gulp.dest('built/local')); <SEP> So I imagine you could figure out a way to do what you want... <SEP> (this is just using gulp-typescript) <SEP> Yeah.. ideally I'd merge the streams into one so tsc can do its static analysis <SEP> Interesting challenge though - any reason why you have 2 ts files for some things? <SEP> Sharing code between React for Web and React Native <SEP> basically you have `.ts` = <SEP> Need to require different files/modules based on the platform sometimes <SEP> and can't do it with dynamic requires <SEP> So you just want to deal with it in the compile stage... have 2 different build configs, one that ignores/replaces certain files with their web/native counterparts <SEP> There will be a way to do that in Gulp, I'm sure <SEP> I, however, just started using it yesterday, so I'm unsure of what exactly :P <SEP> Yeah.. I'm hoping so.. or I might have to write my own plugin <SEP> It's really just for the static analysis <SEP> so that TS will check both paths",is there a way to prefer a certain extension over another with typescript?
Summarization," <SEP> https://jsfiddle.net/robertleeplummerjr/6ho70204/1/ <SEP> Id like to be able to bind a value so that I can do this: <SEP> `Client.default.Item.get(1);` <SEP> where `get` gets the values `1` and `Client.default` <SEP> How can I achieve this? <SEP> @ValeriiVasin that tool is useful for Flow because it doesn't perform typechecking across module boundaries. As @NaridaL points out, you can just use `--noImplicitAny` to ensure that everything is typechecked. <SEP> @aluanhaddad @NaridaL got it :) still kinda good tool to play around. guess not super hard for TS since it knows all *anys* <SEP> to just have some impression on project typings state (not 9999 errors) :) <SEP> So we have tons and tons of unique classes that are created with only one instance ever used of. <SEP> The typeof <SEP> But what Id like to do is if Ive instantiated another client, that one is used. <SEP> `(new Client()).default.Item.get(1);` <SEP> `new Client` is now used, over `Client.default` <SEP> Sort of <SEP> like this: <SEP> ```js const client = new Client(); client.Item.get(1); ``` <SEP> `client.Item.get(1);` gets as well the client instantiated <SEP> lol <SEP> cool <SEP> that is top secret <SEP> jk <SEP> :smirk: <SEP> It is an async that returns a json payload <SEP> just an interface <SEP> How do I use it? <SEP> `public static get(id: number, client: Client = this.clientRef): Promise <SEP> static & this?!?! <SEP> No, that is how it is now, Id like to get away from creating a new class for each instance. <SEP> Also: ty for your thought on @NaridaL <SEP> that was what I was thinking",how to bind a value to robertleeplummer that I can do this: 'Client.default.Item.get(1);'
Summarization," <SEP> Hi i have websocket react app and on every message i receive diffrent message object and i want to store it in useReducer how should i handle this ? <SEP> TS + React question: How do I use `forwardRef` with a generic component? Seems impossible without losing type safety? <SEP> @bartzy let me take a look <SEP> Yeah not without casting but with casting pretty easy <SEP> @dadochudy ? not a typescript question got to ReactJS gitter; But definitely on the typescript side discriminated union <SEP> what's that signature supposed to mean <SEP> @lukka my TS might be rusty and weak but I think that you're trying to assign a concrete value to a type parameter <SEP> You're not merely saying that the function is returning a string, llok at what you wrote <SEP> you wrote that the function will return T <SEP> and your implementation does not simply return a _generic_ string, you are actually constraining that T to be only ""hello"", thus the first line says: <SEP> _Type '""hello""' is not assignable to type 'T'._ <SEP> The problem isn't that hello isn't a string, the problem is that you made something that was meant to be generic exactly T. You said you'd return a generic T, but you aren't you're actually returning only ""hello"", thus this generic does not make any sense. Is it understandable @lukka ? <SEP> _but 'T' could be instantiated with a different subtype of constraint 'string'._ <SEP> that means, (the whole line): <SEP> while 'hello' makes being a string constraint okay, 'hello' itself cannot be T, because T has to satisfy the properties of all the strings, not just ""hello"", it has to be _generic_, not a concrete type <SEP> @VulcanRav i want the function to return the T that it was passed in as parameter type. Once i have a variable like that, i want to assign to it ```()= <SEP> where you read ""hello"", i meant a string",how to handle diffrent message object with useReducer?
Summarization," <SEP> I heard about Monaco from mssft, i don't know the status of it <SEP> but AFAIK, you have to use VSO to use it <SEP> Monaco is the editor used on VSO, TypeScript Playground, and VS Code as well as a few others like OneDrive. <SEP> Hmm... I wonder why Monaco is so hard to find.  Is Microsoft not ready to go prime-time with it or is it a technology that is getting killed before getting started? <SEP> @olso I'm not sure I understand what the problem is.  `printLabel` expects a `Label` to be passed in but you are instead passing it in a `{text}` object (which doesn't match the interface for `Label`). <SEP> @Zoltu, I'm not aware of Monaco being opensourced so maybe that is why you can't find it? ;) <SEP> Heh.  Microsoft is treating all closed source projects as their ugly duckling now?  :P <SEP> i think Monica made into VS code <SEP> I specifically want a cloud based IDE, not a desktop one. <SEP> I'm surprised that companies are still developing *new* desktop IDEs (Microsoft's VSC, GitHub's Atom, etc.) <SEP> I can appreciate continuing to support existing IDEs like Visual Studio, IntelliJ, etc. but if I were to go out and build an IDE from scratch I would definitely make it a web application, not a desktop one. <SEP> Cloud9, Nitrous.io, etc. leverage existing simple IDEs and make them available in the browser.  I want to see someone build a full-featured IDE (e.g., Visual Studio) entirely for the web.  Just like Office 365 and Google Docs did for desktop word processing. <SEP> Why does TypeScript doesn't know of the `getAttribute` method?  Error: `Property 'getAttribute' does not exist on type 'Node'` <SEP> `document.getElementsByTagName(""div"") <SEP> i dont think it returns the same type as GetElementById("".."") <SEP> Is it a bug? <SEP> @Zoltu as a developer, would you use closed source cloud based IDE  as primary tool? <SEP> Desktop version is almost like having cache version of the program always available. <SEP> @mhegazy okay, sorry it took me too much time to get into the matter... Well, getSymbolAtLocation(heritageClause) gave me an undefined value. The HeritageClause itself is an extends one. If I try using the getSymbolAtLocation(heritageClause.types <SEP> And that is, because in the getSymbolInfo my node is of kind 177(ClassExpression), which is not taken into consideration in the switch statement... <SEP> Okay, got to somewhere: the symbol, returned by calling getSymbolAtLocation was not enough. I needed a different symbol:  typeChecker.getSymbolAtLocation(heritageClause).getDeclarations <SEP> The other thing I discovered is that it is REALLY important to use SourceFiles, returned by the LanguageService.getProgram() instead of directly creating them via ts.createSourceFile (as written in every example)",Why does TypeScript doesn't know of the 'getAttribute' method? 
Summarization," <SEP> @xeor can you show me your code? <SEP> I don't get exacly what you want <SEP> I want to define the type of data that looks like this `{""2016"":  <SEP> If I do `ym = {};`, I am getting an error since {} doesnt match the type.. But I don't want to populating it with data at the same time I initialize it.. <SEP> I am populating it in a loop, so in that case, I would need to check if its defined, if not, then define it, if it is, then use the existing one.. Doesnt feel right <SEP> Nevermind. just needed to locally install typescript next <SEP> something like  ``` export class myClass {   ym: {  <SEP> @xeor you have to specify a type <SEP> So simply; var ym = ym: {}? <SEP> maybe like `var ym: {  <SEP> Thanks.. Need to test it later.. Not on computer now <SEP> @xeor in your example, you're using a different `ym` in your class, which is not of the type your public `this.ym` is <SEP> assuming you want to use `this.ym` inside your class then typescript should allow it <SEP> also, when you say `ym` is of type `{  <SEP> if you want to enforce the optional typing of `y` you can chose to specifically add it <SEP> like so: <SEP> `  ym: {  <SEP> Thanks for the tip <SEP> ! <SEP> How can i solve this? <SEP> I am using css modules <SEP> Nevermind <SEP> ehm nope, i still have this problem <SEP> Seems like i have to install this https://github.com/Quramy/typed-css-modules <SEP> :point_up:  <SEP> Still nobody using css modules? <SEP> @Truedrog -",is there a way to define a type for xeor?
Summarization," <SEP> Yeah, I was following those instructions and still failing when I got the idea to check that sample CEP project. <SEP> To be fair, A great deal of my headaches revolved around getting the ExtendScript context (in the `/host` dir) to recognize the type definitions from  <SEP> Is there a way to classify objects as sub-classes rather than instances?  Ex: I have a list of classes I need to instantiate, but only if they match an interface.. right now using duck-typing, but would rather use strong typing. <SEP> I keep having to use a type such as: `accessorGroup:Array <SEP> seems to only work with `BaseClass` as the type for instances, not classes that will create the instances",is there a way to classify objects as sub-classes rather than instances?
Summarization," <SEP> You're not on MySQL anymore? Because I've had to do just that, because MySQL doesn't support multiple timezones <SEP> It is a nightmare, though. <SEP> that db is mysql <SEP> but I think part of it depends on mysql being set to US eastern time as well. <SEP> Can't use UTC, because I need to store future dates from user entry <SEP> whereas, it should just be UTC <SEP> if the local tzfile _changes_ (unlikely) all of my UTC dates will be wrong <SEP> what's the issue with UTC and future dates? <SEP> ah <SEP> I mean, it's gonna change at some point <SEP> yeah, but it only matters for future dats that happen after the tzfile change <SEP> Most of our stuff is in the future,  but not far, most often we're dealing with recurrences. <SEP> My plan is to store a time without timezone and the timezone. <SEP> which you could do in mysql as well. <SEP> then let clients deal with applying tzdata <SEP> Making queries against those doesn't work so well, unfortunately <SEP> and I can't filter the datetime in the client without downloading the entire database. So picking one timezone, easter time, and telling everyone else to just suffer is the best of poor solutions <SEP> For me, what's relevant is the time without date. <SEP> ah, that's a little bit easier to deal with <SEP> The only reason you need to deal with tzdata in the database is if you're making queries against date/time <SEP> That's what bugs me about the whole thing - that biannual update doesn't actually touch the database. <SEP> Bah. Even postgresql is incomplete in handling timezones. I can't store dates with both `America/Detroit` and `America/Chicago` timezones at the same time",why is mysql not supporting multiple timezones?
Summarization," <SEP> @amatiasq <SEP> create a interface with same name as class and put the type definition on there <SEP> omg that's genious! thank you so much! <SEP> no problem <SEP> It works because typescript only cares about the shape of an object (structural typing), not the type name <SEP> I'm not getting the problem of @amatiasq nor the answer of @ShanonJackson - Would someone enlighten me ? Thank you ! <SEP> I have properties in a class created with reflection, and I want to make Typescript understand this properties will be there in runtime <SEP> and thus the class will implement a given interface <SEP> basically you can trick Typescript into thinking a class acutally has some methods like so... <SEP> ``` interface Person {     getName(): string; }  class Person {     fooBar() {         return this.getName(); // allowed.     } } ``` <SEP> Ah, excellent... Far, very far from what I thought/expected. Thank you guys ! <SEP> I used to think structural typing was stupid but then I realized it makes perfect sense as the type model of a language that has object literals <SEP> By the way, here's one of the hilarious things that came to my mind when reading the question above -  ```ts @addField$b class A {     public $a!: string; }  let a = new A(); a.$a // OK a.$b // OK // added by decorator - @addField$b ``` <SEP> The other thing I thought is related to some secret expectation that TS will ever provide   ```ts interface Entity {     readonly id: string; }  interface RepositoryLike",how to create an interface with the same name as a class?
Summarization," <SEP> The node docs themselves say it can be `Buffer | string | any` <SEP> https://nodejs.org/api/stream.html#stream_event_data <SEP> Which in TS terms is just `any` <SEP> thank you @fatcerberus <SEP> @MicahZoltu If you already have `dom` in your libs then maybe typing it as `typeof window.Crypto` will work?  Otherwise I think you can just nick the definition of `Crypto` from lib.dom.d.ts <SEP> My test suite doesn't have `dom`.  The library does (which is why `window.crypto` exists). <SEP> I considered just copying the definition of `Crypto` out of `lib.dom.d.ts`, but it is pretty big and spread out, would be non-trivial amount of work... and work that someone else has already done when building the `Cryto` library for NodeJS. <SEP> I am annoyed that I cannot reference a type defined in an NPM package when adding to a global. <SEP> @webstrand TIL you can use `this` in a type predicate <SEP> (just saw your issue) <SEP> You can use it in all kinds of fun places, in case you didn't know. It kinda breaks when you use `.d.ts` files, though. <SEP> Yeah I just didn't know `this is Type` was a valid type predicate at all <SEP> Probably wouldn't have discovered it on my own since presumably I already know the type of `this` if I'm calling methods on it... asking whether it's some other type never crossed my mind <SEP> Judging from its score,  <SEP> @webstrand Oh, I didn't catch that, but yeah - `Map2` adds the `behavior()` method that has `HK` as its return type so the overall type becomes invariant in `HK` rather than contravariant <SEP> Which then makes the predicate invalid <SEP> @jcalz The OP there seems to want exact types <SEP> It can be either a Point or a Label but not both at the same time <SEP> Which is currently very difficult-to-impossible due to the structural subtyping rules <SEP> @fatcerberus So the original problem I was working from is:  <SEP> It seems like it should work, the type guard produces a more refined version of this, right? <SEP> `HK` should be either contravariant or bivariant there (I'm not sure which--method variance being what it is) <SEP> What does `Refine <SEP> I think I have a weird mental block with conditional types, even simple ones <SEP> @fatcerberus I understand what the question is asking, I'm just wondering why it has 12 points.  Sock puppetry?  Question asker's huge circle of friends?  Solar flares? <SEP> I don't know, lots of people want exact types <SEP> I'll agree it's poorly written <SEP> Oh well, not a big deal, just wondering what I was missing <SEP> Huh, it got marked as duplicate while I wasn't watching <SEP> @webstrand Just a shot in the dark, maybe the fact that `HK` is constrained on `K` messes with the variance? <SEP> `Refine <SEP> Rewriting that as ```ts type Refine <SEP> It *seems* like those two are equivalent? <SEP> Not equivalent, since `Refine <SEP> Oh, you're checking whether `T` is *more specific* than `C`, like ` <SEP> Changing to `has <SEP> yeah <SEP> Not sure that works when `Refine <SEP> Type predicates are usually one of the things that outright *set* the type in the true case, and even that won't get rid of the `never` <SEP> It might be that it narrows by intersecting: `never & string == never` <SEP> If you couldn't tell I'm as lost as you here :frowning: <SEP> That sounds right, I know I saw an odd behavior like that before <SEP> Where a type guard was producing an intersection rather than narrowing correctly","My test suite doesn't have 'dom',the library does (which is why 'window.crypto' exists)"
Summarization," <SEP> https://www.typescriptlang.org/play?#code/FDD0oAgQQLmAbApgFwgDwgXggbQGYCG8AzogDSEnnIBOArogLrASvpboB0LbvAxgHsAdnwLIAFFBo0CAT3EBWAJRLOeAJbx44gOQAHAQL07VxeOr6JxABjIBmJSDCQAQjF6tggocVQBbCHcAJURBGgATAB5fGnUhAHMAHyE6PwAjRBoyNMMkAiEcRgA+DgBvCAJ3fCJSMloGChqmMgg0qspajqYIAF9gPAEaCHFvXwgAa0RZCDiIPyUIYFKeVlHUDHccgTyCxg4-HEnZZl4AbnEDo72CYlbcxHzChew0FY9Ob1EJKRl5ACZVBotLoDEYTI4ekA <SEP> thanks man <SEP> Yeah, I guess it's related to Godel's theorem, in a way <SEP> a theorem prover can never be powerful enough to prove it's own consistency <SEP> The issue in your code is `Array(2).fill('poop')` it has the type `any <SEP> `Array <SEP> how come I'm allowed to assign to `any <SEP> 'cause `any` effectively means ""get out of my way, I know what I'm doing"" <SEP> `unknown` is it's safer cousin <SEP> ah yea, duh <SEP> mm.. but sometimes it get error when trying to assign `any` type stuff to other stuff <SEP> you can assign anything to `unknown`, but you can't assign `unknown` _to_ anything <SEP> lmfao <SEP> xD <SEP> gold <SEP> yes that too <SEP> maybe for objects that go through high traffic and it's really better not to add that property? idk","can assign anything to 'unknown', but can't assign 'unknown' to anything"
Summarization," <SEP> This is a case where scoped type aliases would be handy <SEP> although maybe not - method dispatch is pretty much inherently dynamic <SEP> I'm trying to port something from JavaScript. Basically it looks  <SEP> Yeah, thats the thing about types - you gain safety at the expense of some of the more dynamic patterns <SEP> A compilers ability to reason about dynamic code is limited <SEP> Like you can say something is `unknown` and now it can be anything in the world, but *because* it can be anything in the world the compiler cant prove anything about it and your power to do stuff with it is basically nil <SEP> It'd be nice if `keyof this` worked, and it could infer the type of `this` based on where the code is being used. <SEP> If it is in a subclass method, then there'd be more keys in `keyof this`, than in the base class. <SEP> I believe the reason that doesnt work is that `this` is secretly generic <SEP> Or, a `super.method()` call in a subclass, where the super method uses `typeof this`, would change the `typeof this` for the base class. <SEP> e.g. if you write a method that returns `this` then the compiler tacks on an additional type parameter behind your back <SEP> Ive learned a lot about the compiler internals just by hanging around here and github, hehe <SEP> ```ts         protected _setPropertyXYZ <SEP> That seems to make sense. So if a subclass uses it, then `this <SEP> And, if you're calling `this._setPropertyXYZ('foo', 123)` in a subclass, and `foo` is a `boolean`, it would have an error there, just like with `this.foo = 123`. <SEP> I think they call that F-bounded types or something like that, where the current type is a type parameter to itself <SEP> Scala has it, dont know if there are others",A compilers ability to reason about dynamic code is limited
Summarization," <SEP> So Ive seen a `Prepend` type that is basically exactly that but without the initial `T extends any` conditional - is that needed?  You need to distribute that over unions of tuples? <SEP> needs to be there <SEP> from testing, you can leave it out <SEP> maybe you need it for the union tuple stuff <SEP> don't know about on ts 3.4+ <SEP> I don't need the Push part <SEP> Seems like if you use if from `TuplePush` maybe you dont need it because that already distributes?  But doesnt hurt anything to leave it. <SEP> The `Prepend` I saw that was similar actually just returned `T` if it was a union, which is not at all what Id expect. <SEP> I was talking about the one thats in the Ramda DT types at https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/ramda/tools.d.ts <SEP> sorry for confusion <SEP> So I never really got how the union to intersection works - is it because the first part in parens gets totally distributed and reassembled to a union before the infer in the second part?  Thats the only way it makes sense to me, but its not how Id expect TS to deal with that.",Prepend type with initial 'T' extends any conditional
Summarization," <SEP> which UI framework works best with react <SEP> I mean with typescript of course :) <SEP> in your opinion <SEP> isn't react already a framework <SEP> @fatcerberus @keithlayne Do you remember that ""strict equal type"" we saw that used conditional types, and we were so sure it worked correctly? <SEP> I broke it <SEP> Without meaning to <SEP> ``` export type IsStrictSameType <SEP> Behold, ``` type IsStrictSameType <SEP> Playground <SEP> Actually, I think it might've been ts toolbelt? <SEP> I'm not sure <SEP> Let me look <SEP> Found it <SEP> https://github.com/pirix-gh/ts-toolbelt/blob/bdc9dd92d91d82ef6eb7a19c0efbeb906a36f3f3/src/Any/Equals.ts <SEP> Guess I'll go file a bug report lol <SEP> I guess it isn't his fault, tho. We all looked at that type and thought it worked <SEP> Strict function types and strict null checks are enabled, too <SEP> So, like, I wasted a pretty damn long time thinking my compiler settings were wrong <SEP> Oh, he got it from https://stackoverflow.com/questions/52443276/how-to-exclude-getter-only-properties-from-type-in-typescript/52473108#52473108 <SEP> How did everyone just miss this? Types are hard <SEP> Or Github repo",which UI framework works best with react?
Summarization," <SEP> ok, i think i'm starting to get how it works <SEP> very clever <SEP> it's like global variables <SEP> at the type level <SEP> yup <SEP> using the fact that you can extend interfaces <SEP> biggest problem right now is that TypeScript changed how it works a little and the type popups have become nigh useless <SEP> you end up with like 70 lines of typing code on HKTs before they resolve <SEP> maybe using interfaces instead of `type`s would help <SEP> so it hides the guts <SEP> ah, maybe yeah <SEP> there's a trick, so it might be possible <SEP> @masaeedu I just typed the generic version :) <SEP> wasn't even that hard <SEP> this is so epic <SEP> only issue is that its inference isn't perfect",is there a way to use interfaces instead of 'types' in typescript?
Summarization," <SEP> `set NODE_ENV=production&&babel` doesn't look valid, unless you're using some other shell? <SEP> if you're using `bash` or `dash` then `NODE_ENV=production babel` is what you want <SEP> no idea about getting babel to transpile, though. <SEP> @SalathielGenese Thanks. What I am looking for is a way to get the parameter type from the decorator so it is not implicit `any` <SEP> @jacobmadsen - I tried that couple of years ago and failed. Because... <SEP> TypeScript (or rather the old decorator spec) resolve the decorator options before applying the decorator implementation <SEP> And not the other way around <SEP> If we move ` <SEP> Otherwise, it is inferred to `object` pass that point and is `object` by the time the decorator implementation _(as opp. to its option-function)_ get evaluated. <SEP> @Gregoor , what you're doing there iss beautiful",TypeScript resolve the decorator options before applying the decorator implementation
Summarization," <SEP> Hello I was wondering, is it normal that If I save a single .ts every single .ts gets compiled and its getting slow everyday because our project is growing? <SEP> What editor ? <SEP> Visual Studio <SEP> 17 <SEP> This is a diagnostic result of tsc <SEP> Files:          153 Lines:        79749 Nodes:       323960 Identifiers: 106405 Symbols:      73242 Types:        23638 I/O read:     0.07s I/O write:    0.38s Parse time:   0.62s Bind time:    0.23s Check time:   1.44s Emit time:    1.48s Total time:   3.77s <SEP> I have a similar setup. I'm using internal modules. so yes on save it compiles ever single ts file. <SEP> ! <SEP> ! <SEP> can turn if off <SEP> it seems like visual studio triggers tsc takes 30 sec but tsc in command line is faster <SEP> it seems so much faster to compile just the changed file <SEP> Could always use the command line and use tsc --watch instead of allowing VS to compile.",is it normal that every single.ts file gets compiled on save?
Summarization," <SEP> Would it make sense to add `R` to  the `CallableFunction` interface so you could `x: R = (f as CallableFunction <SEP> can't you specify your parameter on call <SEP> thinking about how i'd do that as the API provider <SEP> the API consumer could easily do what you suggest <SEP> right, but as the API provider you could provide your own, tailored callable? <SEP> i think that's what i'm trying to figure out how to do? <SEP> you can do `type MyCallable <SEP> or remove args if you don't need them, or make them optional with `?` <SEP> i see that `myCallable()` would return type `R`","how to provide your own, tailored api as the API provider?"
Summarization, <SEP>  the declaration emit is so huge and convoluted that no human can understand it <SEP> Nice <SEP> Probably it has to do with type aliases not being first-class types - so it can only infer a type alias if the type was first constructed *from* the type alias <SEP> (This is why they cant be recursive too - its essentially a macro),the declaration emit is so huge and convoluted that no human can understand it
Summarization," <SEP> hi there, is there any working sample for typescript code coverage with gulp and karma? <SEP> @zewa666  check https://github.com/gotwarlost/istanbul <SEP> got it working ``` $filterJson(session) {   let staticParts:any = this.constructor;   return staticParts.$filteredJson(session, this.$toJson()); } ``` <SEP> @narcotics726 thanks, will check it out <SEP> hey guys another question about generics and static typing for functions, I have the following setup: ``` private create:Function = (parseSetter:(oldProperty:any, newProperty:any) = <SEP> @dizzyone  One tip is that `create:Function` can just be `create`. TS can automatically infer a more specific type for you based on the type of the arrow function on the RHS <SEP> @dizzyone  Something similar to this should work for you:  ```typescript type ParseSetter <SEP> Apparently the roadmap has been updated - ""external module bundling"" is there anymore, but this remains: https://github.com/Microsoft/TypeScript/pull/5090 (in 1.8) <SEP> is that now the solution you are supposed to use if you want to simplify your toolchain - use systemjs + that concatenation mechanism? <SEP> and d.ts also",is there typescript code coverage example with gulp and karma?
Summarization," <SEP> how you want it to know if its not a callback? <SEP> i mean the shortest would be x = <SEP> that i know of <SEP> what do you mean? <SEP> (https://github.com/sweet-js/sweet-core) for reference <SEP> basically i want to create aSweetJS Macro    "" _ "" then when evaluated becomes   (x) = <SEP> but i have no idea where to even begin when it comes to making typescript understand custom syntax <SEP> (basically in need of someone with typescript compiler knowledge) <SEP> I'm not sure if that's possible in Typescript... I'll give it a look though <SEP> @infogulch I can't help but feel that there's a design problem here... but you can use intersection types to avoid the inheritance problem. ```ts type OptionalVariables <SEP> has anyone encountered a situation where a `filter` operation *adds* data to a collection? I'm encountering just that with an `immutable-js` List, it's utterly bizarre.  Getting valid filtered objects followed by junk string data somehow added to the collection. <SEP> converting the list to an array, filtering, and then converting back to a list ""solves"" the problem -- makes perfect sense, life on the frontend... <SEP> @ShanonJackson I don't think it's possible to make your `_.name` syntax type safe, I played around with it for a while and couldn't get it to work, however just avoiding a compiler error is pretty easy: ```ts declare const _: ( <SEP> I've never heard of filter adding something unless something utterly broke... would be interested in seeing a repro if you can make one.","want to create aSweetJS Macro    "" _ "" then when evaluated becomes(x) = but don not undestand the custom"
Summarization," <SEP> Hey! Can anyone perhaps enlighten me why in this Playground-Link it can't properly infer the type of the constructor argument? https://goo.gl/gtVZt1 <SEP> The `Props <SEP> ``` const authenticate: RequestHandler = async (req: IUserRequest, res: Response, next: NextFunction): Promise <SEP> And another issue: https://goo.gl/sZr3P7 - Why is `Test` inferred to be `number`? It just omits the first part of the intersection type. I'd expect `string & number`. <SEP> `TypeOf <SEP> @mikemartincode Wouldn't that be a union? This is actually a simplified case. In a more complex case it contains objects, not primitives. So I'd expect `{ prop1: foo; prop2: bar } & { prop3: fubar }`, but I only get `{ prop3: fubar }`.",why in this Playground-Link it can't properly infer the type of the constructor argument?
Summarization," <SEP> hello <SEP> I try to modify the ast of ts file using <SEP> ```  ast.find(ts.SyntaxKind.PropertyDeclaration)     .filter(p = <SEP>  ts.createLiteral(prop) seems to not work <SEP> 'm having error `TypeError: Cannot read property 'getFullText' of undefined` <SEP> any idea on how to populate the `ts.createArrayLiteral()` with string literal <SEP> @andy-ms That did the trick ``` interface ContractConstructor <SEP> I'd like to compile the node-style es2015 modules in my project dependencies either to es5 or to browser-native modules that I can import from relative paths. Can I do that with tsc alone, or do I need to tack rollup on? What for avoiding browser errors like `Uncaught TypeError: Failed to resolve module specifier 'redux'` <SEP> @bennypowers tsc doesn't bundle modules so unless you want to include every module  in a script tag you should use rollup/webpack <SEP> Hmm.. Might actually try including all deps in script tags. <SEP> I don't think that will work, since in most libraries, library modules refer to each other with ambient specifiers, not relative paths. <SEP> @andy-ms  So, it looks like there's one more hitch to the generics ``` interface ContractConstructor <SEP> ! <SEP> You can see from this image that `Decorator` isn't in error when I don't provide the generics arguments <SEP> ! <SEP> if (x instanceof Foo) ?",how to populate ts.createLiteral(prop) with string literal?
Summarization," <SEP> gonna be honest with you, the DOM API is pretty complex and generally not well suited for most tasks. have you considered learning something better suited to simple display/UI presentation from data input (like React)? <SEP> unfortunately this a TypeScript channel, not a JavaScript channel, so since your questions are about DOM, you probably aren't going to get much help here <SEP> meh... <SEP> Has someone any idea why the following is as it is: ``` enum E {     A, B, C }  function toNumber(n: E): number {     return n; //works, E  <SEP> for example: ``` enum E {     A, B, C }  function toNumber(n: E): number {     if (n === E.A) {         return 0;     } else if (n === E.B) {         return 1;     } else if (n === E.C) {         return 2;     } else {         ((x: never): never =","why the following is as it is: ``` enum E {     A, B, C }  function toNumber(n: E): number {     return n; //works, E "
Summarization, <SEP> https://github.com/ryansmith94/TS2307-Issue <SEP> For the record my errors in Sublime Text went away after reinstalling the plugin and restarting Sublime Text <SEP> Not sure why `gulp` no longer works though :(,'gulp' no longer works after reinstalling plugin and restarting sublime text
Summarization," <SEP> @unional if I switch over to type guards are my reducer's going to land up with a bunch of if else statements? <SEP> Yes. Thats a  <SEP> I wrote some helper functions to create actionCreator and typeGuards so the creation side is pretty easy. <SEP> hmm.. alright. any examples on GH that I can have a peek at? <SEP> Cant share all, but here is the out set. Feel free to fill in the blanks. :smile:   ```ts export function createActionTypeGuard",if i switch over to type guards are my reducers going to land up with a bunch of if else statement？
Summarization," <SEP> if you add the exec flag to interactive it will add the exec line in between each commit <SEP> I could just interactive and `s/pick/edit/` just in case <SEP> oh, cool. You might not even need to use interactive mode <SEP> Okay, I feel dumb",could just interactive and  's/pick/edit/' in case 
Summarization," <SEP> Having a weird issue - I have type checking happening, but not for Array subtypes. TS won't let me set a number to a boolean value, but it will let me set Array <SEP> @ryan-morris Nope, not possible you'll have to patch those type definitions to remove the inheritance. <SEP> @catsalive Type1 and Type2 are probably compatible <SEP> @webstrand oh god, you're right I think, the only required field in both is the same name and type everything else in both is optional - I guess that's it. Thank you! <SEP> typescript doesn't provide protection against ``` declare const a: ""foo"" <SEP> @webstrand np :thumbsup:",type checking doesn't work for Array subtypes 
Summarization," <SEP> Hi there, Im migrating a project that makes heavy use of sequelize to ts. Ive seen tools available for auto-generating ts definitions from the sequelize models, but I'm curious to see if there are any ORMs out there that allow me to define my models with plain ts classes. Thoughts? <SEP> I'm getting this even with the option set <SEP> From the compiler or the editor? <SEP> compiler seems fine with it <SEP> How are you compiling? <SEP> /can I see your `tsconfig.json`? <SEP> And I assume you have that specific file in your `files` field? <SEP> I have the following interface  ``` interface IlistItemData {     id: string;     text: string;     image: React.ComponentClass <SEP> not *only* these props <SEP> And i want to avoid using generics",if there are any ORMs out there that allow me to define my models with plain ts classes?
Summarization," <SEP> I have  <SEP> `Resynth  <SEP> btw gitter doesn't like that screenshot. Probably an interconnect failure? <SEP> mostly, the tabs are things that I thought looked interesting that are waiting to be read. <SEP> I'll get to them eventually <SEP> but probably not in the next month <SEP> `Resynth  <SEP> `Resynth  <SEP> `Resynth  <SEP> `Resynth  <SEP> `Resynth  <SEP> `Resynth  <SEP> decorators...",gitter doesn't like that screenshot.
Summarization," <SEP> Hiya, I have a question.   I have a piece of code that works in ES6 but fails in Typescript with `Argument of type '(e: {}) = <SEP> @kristho91 why not use the `Math` instead of calculating your own max? <SEP> `let largestValue = Math.max(...values);` <SEP> But i still wonder why my code did not work <SEP> you shouldn't really use it for Arrays <SEP> use a normal for loop :) <SEP> ``` for (var i = 0; i  <SEP> or, as of ES5.1",a piece of code that works in ES6 but fails in Typescript with `Argument of type '(e: {}) = 
Summarization," <SEP> @SalathielGenese meant to reply to someone else? <SEP> :worried: <SEP> Sorry then <SEP> hi ) i have simple local store class with such method  ```   public get <SEP> here is an example https://stackblitz.com/edit/angular-uz9kxg?file=app%2Fapp.component.ts how can i fix it? <SEP> also there is no error with ` <SEP> also i have no keys autocompletion after second key `this.wordsService.store$.get(""loadingState"", studentId.toString(), 'smth');` will not throw an error with ` <SEP> Is there a way to use *typed* keys in an interface? ``` enum Keys { A, B, C} interface Props {    <SEP> @godenji  You used `A`, `B`, `C` like variables. Instead of...  ```ts enum Keys { A, B, C} interface Props {    <SEP> doesn't matter <SEP> Hope you got your answer... <SEP> @godenji <SEP> How do you mean? `Keys.A` vs. `A` is an implementation detail, has nothing to do with the actual problem at hand :smile: <SEP>  How do you mean? `Keys.A` vs. `A` is an implementation detail, has nothing to do with the actual problem at hand :smile:   I got you  --------------------  As for your question, the answer shows that you can. <SEP> TypeScript accepts `string`, `number` and since 2.7.1, also `unique symbol` <SEP> @SalathielGenese thanks, on TS 2.6 here <SEP> :+1: <SEP> ---------------  @artaommahe   I cannot reproduce your problem","how can i use *typed* keys in an interface?``` enum Keys { A, B, C} interface Props {   "
Summarization," <SEP> @dragomirtitian webpack rollup ? <SEP> Any should work <SEP> The above can be worked around by typing the lambda as `never` instead of `unknown`, but typing things as bottom where a legitimate value is expected is kind of weird <SEP> Isnt that just because `+` is ambiguous?",typing things as bottom where a legitimate value is expected is kind of weird 
Summarization," <SEP> Here is tsconfig  ``` {   ""compilerOptions"": {     ""target"": ""es5"",     ""baseUrl"": ""./"",     ""allowJs"": true,     ""jsx"": ""react"",     ""jsxFactory"": ""h"",     ""lib"":  <SEP> Oh, this is not right one <SEP> wait a sec... <SEP> I changed module to commonjs just now, was ""umd"" <SEP> You installed 0.1.6 version of preact-batteries? I made changes there again. Trying to figure out... <SEP> Ok, I'm clearly far behind understanding of modules in js. When I'm using commonjs it finds module just fine. But I'm not getting one bundled file with tsc, as I expected I would... When using amd - I'm getting error cannot find module, but file is bundled into one with ""outFile"" <SEP> My guess is. <SEP> I should use commonjs in my small package, then use commonjs in my main app package BUT I should also use bundler with my main app package","when using commonjs to find moudles in js it can not find module, but file is bundled into one with ""outFile"""
Summarization," <SEP> ()(  <SEP> how does the function type look like? <SEP> (btw, I have a feeling like I keep forgetting the structural-typing/generics-narrowing and other common TS shortcomings, over and over, and rediscovering them again) <SEP> ```ts type Base = {  foo?: number;  bar?: number; }; // Base is passed through a conditional to split apart union types, otherwise // exactly breaks on union types. type Exactly <SEP> yea.. can't have any actual params either <SEP> everything should in type space only :( <SEP> one hack I could do, since I'm using it for route params, is to make `T` into a union of strings (keys) instead of an object, since that will end up with the desired behavior <SEP> if we had an ""error"" type, you could implement it, youself with conditionals: ``` type Validate <SEP> that's actually not a bad idea, and I don't need an `error` type <SEP> coz the type is fed into a return type, and I always consume it <SEP> so I can just set to `never` or something more descriptive <SEP> will error out on use sites instead of declaration site, but better than nothing <SEP> actually, not `never` since TS for some kind of a reason allows you to destructure from it :sob: <SEP> `never` is assignable to everything, therefore you can destructure it <SEP> `unknown` is assignable to only `unknown` (or `any`) <SEP> I may have a wrong mental model, but it's not clear why it should matter whether `never` is a bottom type or not. If you can't do `({} as never).prop`, you shouldn't be able to do `{prop} = {} as never` <SEP> I must say that TS has a lot more ",how does the function type look like?
Summarization," <SEP> Hi, anybody used the language service? I want to get a built instance of the syntax tree of a program, but can't find information of how to do that... <SEP> The thing is, I can create a program and I can get to the ClassDeclaration of ""MyInheritorClass"". <SEP> I can find the HeritageClause of that class as well <SEP> But how do I get to the base class, which is actually defined in a different file/module and pick its own members <SEP> ... and drill down all the way to Object",how can i get a built instance of the syntax tree of a program?
Summarization," <SEP> From what Ive observed `keyof` is not fully referentially transparent: its nominally a union type but also encodes additional information about the source object that gets lost if you distribute it <SEP> Which is how it knows if mapped types are homomorphic or not <SEP> that's...terrific <SEP> Browsers have `window.crypto`.  NodeJS does not have a `global.crypto`.  I have a polyfill for NodeJS that exports a `Crypto` type that matches the browser `window.crypto`.  In a library designed for browser, I reference `globalThis.crypto`.  I would like to write a test suite that runs in NodeJS.  At the beginning of the test suite, before my library is called, I can do `import { Crypto } from '...'` and then `new Crypto()` to instantiate a thing that looks just like the browser `window.crypto`.  How do I tell TypeScript that `globalThis.crypto: Crypto = new Crypto()` such that when my library calls `globalThis.crypto` it will get that instance when executed in the test? <SEP> The thing I can't figure out is how to get TS to let me assign `new Crypto()` to `globalThis.crypto` (with type checking). <SEP> TL;DR: How do I add to the global object in TS compiled for NodeJS? <SEP> I dont think you can without using ts-ignore because the global object doesnt have an index signature afaik <SEP> Maybe something with declare global or whatever it is <SEP> It does not.  In another file I can do: ```typescript declare namespace NodeJS {     interface Global {         crypto: any     } } ``` <SEP> The problem is that I cannot do an `import` in such a file, so I cannot get the type information for `Crypto`. <SEP> Maybe put that into a .d.ts in the root of your project?  I think it will automatically pick that up <SEP> I did, and it does.  However, then `global.crypto` has a type of `any` rather than the correct type of `Crypto`.",how does know if mapped types are homomorphic or not?
Summarization," <SEP> oh wait i know how i can distinguished between `bodyOrFilters` <SEP> If first param is `object` then `bodyOrFilters` has to be `filters` <SEP> if first param is `string` then `bodyOrFilters` is `body` <SEP> :-) <SEP> Seems like it would be way easier if you just put body as the first param <SEP> oh yeah then they would be always the same <SEP> 100% better <SEP> ```ts     protected async postRequest(body: any, ...filters: Filter <SEP> Awesome, thanks @keithlayne <SEP> :thumbsup:",how to distinguish between bodyOrFilters?
Summarization," <SEP> @jasonswearingen is your error because you are changing the data inside different states? maybe try redux? I just listened to this podcast: https://devchat.tv/adventures-in-angular/079-aia-reactive-programming-and-redux-with-angular-2-with-rob-wormald and your problem reminded me of what they were talking about. <SEP> Anyone want to share wisdom on how to best use TypeScript with the popular mocking library, Sinon? <SEP> Specifically, when using sinon.spy(obj, 'prop') / sandbox.spy(obj, 'prop') <SEP> it's being ""clever"" by either installing a spy (decorator), or a stub (mock) implementation of members, and then you're expected to know that you've now augmented that member. <SEP> so after: ```js sinon.spy(obj, 'prop'); ``` you could write: ``` assert(obj.prop.callCount ===1) ``` <SEP> where callCount is part of the Sinon decorator API, and not part of the original definition for `prop`. <SEP> Right now, I have to resort to something that is a little clunkier, but typesafe: ```ts const spy = sinon.spy(obj, 'prop'); assert(spy.callCount === 1) ``` But in true BDD fashion, it reads more intuitively to say `obj.prop.callCount`. <SEP> @theoy I usually add type annotations ```( <SEP> @theoy maybe you could write a helper function that returns `Sinon.SinonSpy & MyType` <SEP> good idea, something so that the assertion syntax is: ```js assert(spyFor(obj.prop).callCount ===1) ``` <SEP> ``` function getSpy(thing: number): number & Sinon.SinonSpy {     return  <SEP> probably works with a type parameter too <SEP> ``` function getSpy <SEP> it does not include the React code to this file <SEP> I don't know where you heard that you wouldn't need Webpack or Browserify but we certainly never said that <SEP> TypeScript 1.8 will compile your JavaScript with JSX down to regular JavaScript, <SEP> but you'll still need a tool to bundle all your outputs if you're targetting ES2015 modules <SEP> Actually, I partially take back what I said @lovedota <SEP> if you target SystemJS or AMD with `--module`, I  believe you can use `--outFile` to bundle your files together <SEP> But if you still target ES2015 or CommonJS, you'll need a separate bundling tool","how to best use TypeScript with the popular mocking library, Sinon? "
Summarization," <SEP> is there a vscode issue proposal for supporting clicking through types in vscode's intellisense popups? Can't find it. <SEP> yea <SEP> yea, I think so too",is there a vscode issue proposal for supporting clicking through types in vscode's intellisense popups?
Summarization," <SEP> When in doubt restart the TS server, @keithlayne is probably around here and can tell you how to do that <SEP> Ctrl+shift+P or Cmd+Shift+P <SEP> @keithlayne Yes because I forgot the key combinations and was using my phone which doesnt support VSCode. :wink: <SEP> We should make a drinking game out of every time someone trips over distribution of conditional types: https://github.com/microsoft/TypeScript/issues/32154",How to restart the TS server?
Summarization," <SEP> @keithlayne How did your git history rewriting go? <SEP> not pulled the trigger yet <SEP> actually, haven't even gotten around to testing yet",how did your git history rewriting go?
Summarization," <SEP> TS not following semver makes sense but it's possible to follow semver for just regular typedefs <SEP> Which deftyped basically is <SEP> node and browsers not agreeing on the interface of `Worker` is kind of annoying -___- <SEP> In the end, I just hacked shit together. Wrote a `browser-worker.js` for browser. Then, wrote `node-worker-pre.js` and `node-worker-post.js`.  Then, `cat` pre, browser-worker, post to a `node-worker.js` file. <SEP> So, I just have to pretend everything is `browser-worker.js` and the build step generates a worker for `node` ",TS not following semver makes sense but it's possible to follow semver for just regular typedefs
Summarization, <SEP> ah that last one might be a decent way to achieve it <SEP> @ShanonJackson problem was external types define global bindings but global are only registered if you `require()` it <SEP> But TS thinks the globals always exist <SEP> skipLibCheck wont fix that,"problem was external types define global bindings but global are only registered if you `require()` it,TS think the globals always exist"
Summarization," <SEP> Meowf <SEP> I don't think I've ever legitimately needed a lower bound type arg before <SEP> That concat example is pretty compelling, though <SEP> Even though I'd never realistically have a need for it",is there a lower bound type arg before?
Summarization," <SEP> Switching to ESNext has the same result. <SEP> I mention this since I'm doing some unit testing and noticed this was a special case. The only types that behave like that are `{}`, `object` and `never`. <SEP> Yeah I know.  It seems like BigInt is not treated as a literal in the same way the others are. <SEP> Maybe a special case in the compiler in other instances and it's a bug that BigInt is not included? <SEP> I mean the ones that do check out for that are trivially correct.  Seems like an odd corner case that was maybe overlooked. <SEP> I'll file a issue <SEP> Filed as https://github.com/microsoft/TypeScript/issues/36155","when do some uint testing only types that behave like that are `{}`, `object` and `never`. "
Summarization," <SEP> Gitter realized my TS was a forbidden art <SEP> ! <SEP> I never thought I'd see EBNFs represented purely in TypeScript. TS 4.1 is sick <SEP> I've experimented with this before in the past but never really made much headway <SEP> This wouldn't work in Java, either, no? <SEP> ```  export type CurrentSE = (   | Omit <SEP> TS almost has this problem itself <SEP> They just use helper methods to narrow <SEP> If you have too many SE subclasses, you can turn to code generation to generate the helper functions <SEP> ``` (mySe as FooSE).foo  ```",I'd see EBNFs represented purely in TypeScript. TS 4.1 is sick
Summarization," <SEP> OTOH any generic function that does  ```ts if (typeof x === 'number') doOneThing(); else doOtherThing(); ``` can be trivially decomposed into two functions so we can ignore that <SEP> the return type could also be any generic type that takes 1-2 type params I guess <SEP> and more and more <SEP> obviously you can do ` <SEP> No conditional shenanigans based on type reflection <SEP> so it seems like you can't implement a universally quantified return type (that's absurd, right?) but you'd need an inference site for the return type, so there's a mismatch. <SEP> The only time you can universally quantify the return type is, yes, `absurd` <SEP> Which relies on the principle of explosion <SEP> 1a.  <SEP> Which comes up later in my version when it tries to merge `A1` and `R` <SEP> and there's no constraint that will solve that <SEP> Okay that's a complete dealbreaker <SEP> Hmm <SEP> Stupid explicit type parameters",any generic function can be trivially decomposed into two functions?
Summarization, <SEP> Anyone else find Redux really awkward with TypeScript? <SEP> yes <SEP> I've been using Redux + TypeScript for a while but its still just painful to do simple things... I love both but they don't seem to click together very well <SEP> Containers especially are just...,Anyone find Redux really awkward with TypeScript?
Summarization," <SEP> you can probably force a different value into sortMethod <SEP> and there's no default clause <SEP> in fact it's probably more to do with the fact there's no default clause than anything else <SEP> Hm. The thing is that it can tell whether an enum is exhausted by a switch case <SEP> For example here:  ```ts type CountEntry =  <SEP> If I skipped a `case` it would complain that the function can return `undefined` <SEP> I think it's just not smart enough to evaluate the same for variable initialization <SEP> If I added a `default` then it wouldn't cause a compile error were someone to add a new value to the enum, which is bad news. <SEP> End up relying on runtime errors (which our users don't enjoy) ;) <SEP> oh hmm",there's no default clause when force a different value into sortMethod.
Summarization," <SEP> @wkrueger why would he need to write each method twice? Array is in the protoype chain. <SEP> I'd have to look more closely at the extends shim to see why it's not working though. <SEP> since it seems possible <SEP> oh Function.prototype is an any <SEP> right <SEP> ``` declare interface Foo extends Array <SEP> just messng around, but that gets you types",why would need to write each method twice?
Summarization," <SEP> I think transformers are applied after parsing/typechecking? <SEP> Hmm, maybe not, since JSX is handled by a transformer. <SEP> I've started experimenting with transformers only a few days ago, so not sure exactly on details, but it seems to be the case <SEP> But parsing JSX isn't handled by the transformer, so I think I was right. <SEP> In other words, with transformer API I can't transform invalid TS to valid TS <SEP> so wondering if there's other creative approaches : <SEP> yes. But what you've written there *is* technically valid typescript <SEP> `x + y` just doesn't do anything <SEP> If you can get your code to pass the typechecking phase, you can transform the AST with a transformer <SEP> and produce the `map` transformation <SEP> with type information: ``` const x: number = 1; const y: Option <SEP> so that will fail compilation <SEP> type verification more precisely <SEP> ah, I see your problem. You could use a tagged type? `number & { ... }` <SEP> sorry, not following <SEP> Since you're transforming the code manually, all you care about is that valid code *after transformation* passes the validator. The types can be nonsensical <SEP> the challenge I'm facing is that, I managed to implement a transformer, but with Transformer API it's too late already <SEP> so in theory I'm getting my correct output, but the verification fails anyway, because that had been done, before the transformer was applied <SEP> for example: ``` type Option <SEP> that won't help you if you want to use non-addable types: `Option <SEP> oh <SEP> interesting idea <SEP> I'm not sure I like that idea, I'd look more into modifying the parser/typechecker in typescript <SEP> @pbadenski if you want to do that, you're going to have to implement your own compiler by extending Program and overriding a bunch of things, it'll be a ton of work, better to make a suggestion and try to get it added to the language itself <SEP> also we're using existing library so would have to wrap the whole library API or something similar... <SEP> You'll need a custom CompilerHost and TypeChecker at the very least <SEP> I would *love* it if typescript could properly type unary/binary operators <SEP> I don't <SEP> operator funcs are the first thing I ban in a kotlin project <SEP> ` valueOf(): string } + { valueOf(): string }` has a real type: `string` <SEP> @EdwardDrapkin what do you think would be a reasonable suggestion here, Transformer API where output can be requested to be reverified? <SEP> I don't generally care to use them myself, but typescript just gives up, unfortunately <SEP> @pbadenski dig up some of the old API tickets and see if they have activity, bump them if they're relevant, or whatever <SEP> there's been a lot of traction for getting a better compiler API done before, but I don't think it's a huge priority <SEP> and they refactor the internals a decent amount <SEP> so you'll probably get told to wait until the language is more stable <SEP> right interesting <SEP> I think I found some last week, so will have to review this <SEP> sounds like this would need likelly to be the path to take <SEP> @pbadenski that said, I have started to wonder if AspectTS might be a thing that's necessary in the ecosystem <SEP> and it seems like it might be <SEP> don't need this urgently, but thought would be really useful.. could simplify readability of our algorithms potentially quite a bit <SEP> adding operator funcs as aspects is trivial <SEP> and there's a 0% chance AOP gets added to mainstream TS, so it'd have to be a fork of the language with extensions",are transformers applied after parsing/typechecking?
Summarization," <SEP> hey all, can someone tell me what's wrong with this statement? <SEP> ```js import * as ripcord from '../src/index' import * as sinon from 'sinon' //  <SEP> it definitely exists and is installed.  it works if i go back to `const sinon = require('sinon')` <SEP> @dtabuenc you are right. assignment `let v: { (x: number): void } & { (x: string): void } = (p: string & number) =",what is wrong with:```js import * as ripcord from '../src/index' import * as sinon from 'sinon' // 
Summarization," <SEP> IMO it's not so much about ""poorly-written"" typings as much as the things ramda is doing are difficult (at best) to express in the TS type system. <SEP> My 2 cents: ramda is not a good fit for TS. JS handles that kinda pointfree-obsessed functional style much better than TS. <SEP> Before being more open to using ramda I thought ""I can just write my own functional functions lol"", so I wrote my own pipe reducer in TS. Yeah, no. The result was always `any` because I couldn't wrap my head around it <SEP> Works fine in JS. <SEP> I _have_ working typings for a `pipe` style function <SEP> I just don't think it's a good stylistic fit for TS. <SEP> Thanks for your answers @webstrand , I'll write them down and try them later.",ramda is not a good fit for TS
Summarization," <SEP> (1) how can I have similar semantics like C# events ? also (2) how can I put a loop like this on a background thread? <SEP> or (3) is there a better approach to do that in the TypeScript way? <SEP> oh! ok... I thougth there was something like threading or events on TypeScript <SEP> thanks for the advices @nbransby, will ask on node chat ;) <SEP> yeah <SEP> a nice strong type :D <SEP> thanks!",how to have similar semantics like C# events?and how can I put a loop on a background thread?
Summarization," <SEP> does it make sense to generate classes/interfaces at run-time w/ typescript? <SEP> and if so, anyone have an example of doing that <SEP> in particular, I'd like to take an object literal and create a type out of its shape <SEP> but what do you do with a type at runtime? <SEP> well in javascript for example <SEP> I could take { foo: 5, bar: 10 } and if I wanted to generate an update function for that <SEP> I could use codegen to produce a function and return it <SEP> by building it from strings",generate classes/interfaces at run-time w/ typescript
Summarization," <SEP> Hi guys. Im struggling with an interface definition. ```javascript interface IKeyGenFunc <SEP> You'll have to add TResult as a type-parameter to Test as well <SEP> Oh.  Sorry.  Didn't notice the second line <SEP> Yeah..also struggling with gitter ...sorry :D <SEP> Which version of WebStorm?  Works fine in IDEA 15 <SEP> Both works, but Webstorm (latest 2016.1) only recognizes x as typeof T for the ``` doIt2```...so ```javascript class MyService {    test: string = 'foo'; } let i = new Test <SEP> I don't use WebStorm, but IDEA (which should use the same TS infrastructure) recognizes both <SEP> I wonder if it is a webstorm bug or a undiscovered typescript bug :D",Webstorm (latest 2016.1) only recognizes x as typeof T for the ``` doIt2```
Summarization," <SEP> Yeah nice @AnyhowStep <SEP> ```const zip =  <SEP> @ahammond what fails? <SEP> readonly env is mandatory and it is of type ""NamedEnv"" and there's no errors <SEP> @ShanonJackson ""Interface declares same member as inherited interface""","readonly env is mandatory and it is of type ""NamedEnv"" and there are no errors"
Summarization, <SEP> is there any relationship between the keys in arg1 and arg2?  i.e. can the first arg have the deleted thing? <SEP> I don't know how to type `{ a: any } & {  <SEP> The first arg can not have the deleted identity as a child at any level <SEP> And the top level object must be a plain JS object <SEP> So arrays can not be at the top level <SEP> But they can be anywhere below <SEP> recursive objects?  ugh.,is there any relationship between keys in arg1 and arg2?
Summarization," <SEP> Is there a way to create a union type from multiple files in a folder? <SEP> For example <SEP> src     foo         bar.ts         qaz.ts     index.ts <SEP> bar and qaz are in foo folder <SEP> bar.ts will export the number 2, and qaz.ts will export the number 4 <SEP> You should probably be able to write `typeof import(./bar) | typeof import(./src)` <SEP> etc <SEP> is there a way for index.ts to go through all the files in foo, and create a union type from the export values <SEP> dynamically? <SEP> yeah <SEP> TS and dynamic don't mix, so no.",how to create a union type from multiple files in a folder?
Summarization," <SEP> Is there a way to create a union type from multiple files in a folder? <SEP> For example <SEP> src     foo         bar.ts         qaz.ts     index.ts <SEP> bar and qaz are in foo folder <SEP> bar.ts will export the number 2, and qaz.ts will export the number 4 <SEP> You should probably be able to write `typeof import(./bar) | typeof import(./src)` <SEP> etc <SEP> is there a way for index.ts to go through all the files in foo, and create a union type from the export values <SEP> dynamically? <SEP> yeah <SEP> TS and dynamic don't mix, so no.",how to create a union type from multiple files in a folder?
Summarization," <SEP> arr <SEP> or  arr.a <SEP> if you wrap your code in ``` on new lines, it'll be formatted and easier to read <SEP> is Malta Uk? <SEP> dominic <SEP> hi all.  i've seen a few examples using `redux` & `ts`.  there's a pattern of fully typing out your redux state tree, which is great.  there's also a pattern adding types to your action creators.  also great.  when it's time to `connect` components in redux, we fuse some of the state tree with some action creators (re: mapStateToProps, mapStateToDispatch).  however, in the  <SEP> or, for those who aren't redux'rs, is it possible to pick & chose attrs & compose interfaces?  e.g. `IWidgetC` is composed of `x/y/z` _from_ `IWidgetB` & attr `zed` is to match the imported `zed`'s types, etc?","if you wrap your code in on new lines, it'll be formatted and easier to read "
Summarization," <SEP> @webstrand yes, with conditional + mapped tuples <SEP> no without <SEP> well im fairly sure no without <SEP> Actually wait not even mapped tuples <SEP> sorry you can just check if the array generic extends (string | number) <SEP> 1sec <SEP> ``` declare function foo(x: number <SEP> @webstrand <SEP> Pretty sure that's cheating. `foo( <SEP> disaster <SEP> How on earth did programmers survive in typescript before conditionals <SEP> We didn't do crazy stuff with types. <SEP> but only 2 of those cases was from transfer inside NZ i think",How on earth did programmers survive in typescript before conditionals
Summarization," <SEP> Any one know where I can get lodash typings that have the neweset findIndex <SEP> a bit off-topic... anyone has a suggestion of a React  <SEP> Not really sure how that would work though and I can't find any examples. Plus, since there's no `TypedPropertyDescriptor` in the decorator it seems like you'd have to pass explicit type information in?",where I can get lodash typings that have the neweset findIndex?
Summarization," <SEP> it is related <SEP> yarn tsc -lib es2015 index.ts passes your repro, but fails in my case <SEP> thats whole problem: typescript tries to include dom lib when i explicitly ask not to",typescript tries to include dom lib when i explicitly ask not to
Summarization," <SEP> Why does fork-ts-checker get stuck on ENOENT even when the file reappear? I tried different watchOptions, but it didn't help. <SEP> On Linux and macOS systems, fs.watch() resolves the path to an inode and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the original inode. Events for the new inode will not be emitted. This is expected behavior. <SEP> So what should I do? Can this watching strategy be straightforwardly replaced with something smarter, like Chokidar, for instance? I found a module for that (chokidar-ts), though it seems to be too low-level.",Why does fork-ts-checker stuck on ENOENT after file reappear?
Summarization," <SEP> @AnyhowStep if its any consolation I think JS has a function to normalize Unicode strings <SEP> Doesnt help if your backend is going to mangle it differently though :( <SEP> And yeah `||` as string concat is pretty odd.  I guess the mnemonic is supposed to be like, gluing the two sides together?",is there a way to normalize strings in js?
Summarization," <SEP> Hi guys. Have anyone used `moment-timezone` with `moment-range`? If so I need your help :) <SEP> Not sure if I am going mad here <SEP> but take this example <SEP> ``` function someFunction(arg1: string | boolean) { ... } ``` <SEP> and take for example this <SEP> ``` function someFunction(arg1: (someVar: number) = <SEP> ... but then if I were to do <SEP> ``` function someFunction(arg1: boolean | (someVar: number) = <SEP> but isnt that valid? as I am saying it is either a boolean or a function which takes a number and returns a string <SEP> red lines and errors <SEP> such as ""cannot find name `someVar`""",how to use 'moment-timezone' with 'moment-range'？
Summarization," <SEP> I'm getting this error:  <SEP> @sasxa A browser which supports serviceWorker? <SEP> Yea, but this is compiler error <SEP> Started getting it today, worked for last few weeks without any problems <SEP> serviceworker typings are available was/is in typescript? <SEP> thats a new information for me - as far as I remember I always need to install from definitly typed the service worker api <SEP> types <SEP> VSCode isn't complaining and is giving me code completion... <SEP> hm weired <SEP> `node_modules/typescript/lib/lib.dom.d.ts` line 11285 (:",A browser which supports serviceWorker?
Summarization," <SEP> Hey how do I import node modules? I am trying to import and use the Keypress module, doesn't work. import { Keypress } from ""keypress""; <SEP> I think you have to use require <SEP> I think all the current approaches suffer from the need to have a closed type family of sorts that you can't extend from other libraries, no? <SEP> well, you CAN extend it, but it's brittle <SEP> you basically use interface augmentation <SEP> I've run into nasty bugs <SEP> at least this solution has support for ad-hoc defining of type mappings <SEP> hmm, I have to run soon, can I PM you about this stuff? <SEP> But if I use require it whines as well ""Cannot find name 'require'. Do you need to install type definitions for node? Try `npm i @types/node"" <SEP> sure <SEP> I have a working type-level pattern matcher that is partly on display in the Playground I posted earlier, so if I can get rid of that semi-closed type family, I can add all sorts of crazy stuff <SEP> I think we had GADTs working <SEP> Dont think I knew you could use `this` in a type definition like that. <SEP> or you could generalise the argument property to multiple arguments <SEP> yea <SEP> My interface when compiled is empty.. looks like this: ``` export interface Coordinate {     x: number;     y: number; } ```  Is this wrong? <SEP> compiling to es6 <SEP> yes <SEP> I don't see why an arbitrary amount of arguments wouldn't work with this approach",how do i import node modules?
Summarization," <SEP> `#issuecomment-` <SEP> Is there any workaround for using `keyof` for private properties? I have a practical use case for such requirement  <SEP> I'm not aware of any way to do that, since it's for testing, I'd probably just accept the less useful `string` annotation as the test will fail if you typo it anyways.",is there a workaround for using 'keyof' for private properties?
Summarization," <SEP> Why can't  `{id: 1}` be cast to ` <SEP> Where K is some generic type `K extends string` <SEP> Or a simpler example <SEP> @doomleika Thanks for clarifying that, helpful <SEP> actually I don't know what simple example would be. `Type '{ ""id"": number; }' cannot be converted to type 'Partial <SEP> But if I use an empty object `{}` it works <SEP> `const a: Partial <SEP> `a <SEP> However, the following doesn't work:  `const a: Partial <SEP> @UrKr just a bug with TS, cast it <SEP> @NaridaL  Ok, thanks!",Where K is some generic type `K extends string`?
Summarization," <SEP> anyone knows a good alternative to prettier? <SEP> i have the following problems with it: - puts operators to the end of line instead of start of line - does not respect precedence formats like this but should be ```ts foo + bar *     baz ``` ```ts foo     + bar * baz ``` <SEP> You will need to configure eslint to use typescript plugin <SEP> https://github.com/typescript-eslint/typescript-eslint/issues/1824 <SEP> i am thinking about porting google java format to typescript <SEP> i have only one problem with google java format: does not support currying <SEP> I see. Didn't know a indent bug exist <SEP> :point_up:  <SEP> is there a shorter way to write this? `xs.map((x) = <SEP> Does Big accept more than 1 argument? If not you can do this:  ``` xs.map(Big) ``` <SEP> If i have an object `A = {'foo': <SEP> how do I allow a callback to have narrower parameters than the interface that defines it? ```ts type Config = {onChange: (value: unknown) = <SEP> I have a feeling the solution will include distributive conditional types, but can't figure out how that would work in this case <SEP> if you don't know, then this chat room isn't for you: typescript is a programming language <SEP> sorry, this isn't a Jedi temple :)",alternative to prettier? - puts operators to end of line instead of start of line
Summarization," <SEP> A man can dream <SEP> Oh how much I want ""types"" field to handle .ts files! <SEP> When working with TypeScript it could've just import TypeScript files! <SEP> :worried: <SEP> Is it even a thing - develop in TypeScript and decouple parts to npm modules, then use them only in TypeScript easily? Or everytime there should be d.ts file?","how much I want ""types"" field to handle .ts files?"
Summarization," <SEP> can anyone help me get this to typecheck: I have a function that should accept any of an object, a 2-element tuple, a 3-element tuple, or a list of any of those. in the case of an array how can I get TS to check that the argument matches one of the tuple types before assuming it's a list? <SEP> as in this playground: http://www.typescriptlang.org/play/index.html#src=type%20O%20%3D%20%7B%20%5Bkey%3A%20string%5D%3A%20any%20%7D%0D%0Atype%20A%20%3CT%20%3D%20O%3E%20%3D%20%5Bkeyof%20T%2C%20T%5Bkeyof%20T%5D%5D%0D%0Atype%20B%20%3CT%20%3D%20O%3E%20%3D%20%5Bkeyof%20T%2C%20string%2C%20T%5Bkeyof%20T%5D%5D%0D%0Atype%20C%20%3CT%20%3D%20O%3E%20%3D%20A%3CT%3E%20%7C%20B%3CT%3E%20%7C%20Partial%3CT%3E%0D%0Atype%20L%20%3CT%20%3D%20O%3E%20%3D%20C%3CT%3E%5B%5D%0D%0Atype%20X%20%3CT%20%3D%20O%3E%20%3D%20C%3CT%3E%20%7C%20L%3CT%3E%0D%0A%0D%0Atype%20Person%20%3D%20%7B%20name%3A%20string%2C%20age%3A%20number%20%7D%0D%0A%0D%0Aconst%20fn%20%3D%20%3CD%3E%20(a%3A%20X%3CD%3E)%20%3D%3E%20a%5B0%5D%0D%0Aconst%20a1%20%3D%20fn%3CPerson%3E(%7B%20age%3A%2021%20%7D)%0D%0Aconst%20a2%20%3D%20fn%3CPerson%3E(%5B'age'%2C%2021%5D)%0D%0Aconst%20a3%20%3D%20fn%3CPerson%3E(%5B%5B'age'%2C%20'%3E'%2C%2018%5D%2C%20%5B'name'%2C%20'Tim'%5D%2C%20%7B%20name%3A%20'Ari'%20%7D%5D)%0D%0A <SEP> @citycide this is confusing <SEP> http://www.typescriptlang.org/play/index.html#src=type%20Comparator%20%3D%20'%3E'%20%7C%20'%3D'%20%7C%20'%3C'%0D%0Atype%20ColumnEqualsValue%3CT%3E%20%3D%20%5Bkeyof%20T%2C%20T%5Bkeyof%20T%5D%5D%0D%0Atype%20ColumnCompareValue%3CT%3E%20%3D%20%5Bkeyof%20T%2C%20Comparator%2C%20T%5Bkeyof%20T%5D%5D%0D%0Atype%20ColumnsEqualValues%3CT%3E%20%3D%20Partial%3CT%3E%0D%0Atype%20ColumnsComparison%3CT%3E%20%3D%20ColumnEqualsValue%3CT%3E%20%7C%20ColumnCompareValue%3CT%3E%20%7C%20ColumnsEqualValues%3CT%3E%0D%0A%0D%0Atype%20Person%20%3D%20%7B%20name%3A%20string%2C%20age%3A%20number%20%7D%0D%0A%0D%0Aconst%20fn%20%3D%20%3CD%3E%20(...a%3A%20Array%3CColumnsComparison%3CD%3E%20%7C%20Array%3CColumnsComparison%3CD%3E%3E%3E)%20%3D%3E%20a%5B0%5D%0D%0Aconst%20a1%20%3D%20fn%3CPerson%3E(%7B%20age%3A%2021%20%7D)%0D%0Aconst%20a2%20%3D%20fn%3CPerson%3E(%5B'age'%2C%2021%5D)%0D%0Aconst%20a3%20%3D%20fn%3CPerson%3E(%5B%5B'age'%2C%20'%3E'%2C%2018%5D%2C%20%5B'name'%2C%20'Tim'%5D%2C%20%7B%20name%3A%20'Ari'%20%7D%5D)%0D%0A%0D%0Aconst%20x%3A%20ColumnCompareValue%3CPerson%3E%20%3D%20%5B'age'%2C%20'%3E'%2C%2018%5D%20%0D%0Aconst%20y%3A%20ColumnEqualsValue%3CPerson%3E%20%3D%20%5B'name'%2C%20'Tim'%5D%0D%0Aconst%20z%3A%20ColumnsEqualValues%3CPerson%3E%20%3D%20%7B%20name%3A%20'Ari'%20%7D%0D%0Aconst%20a4%20%3D%20fn%3CPerson%3E(%5Bx%2C%20y%2C%20z%5D) <SEP> I think that there is something wrong with inference <SEP> ah you think there's a bug? or is it just the fact that TS prefers arrays over tuples? <SEP> I think it's a bug. <SEP> But I'm no expert <SEP> can you do anything closer to that in `typescript/es6`: ```   <SEP> does anyone know any tslint rules to prevent people putting multiple 'lines' of code on the one line? ie... ``` set startDateFilter(value: string) { this._startDateFilter = value; this.applyFilter(); } ``` <SEP> (that should be...) ``` set startDateFilter(value: string) {     this._startDateFilter = value;     this.applyFilter(); } ``` <SEP> @kuncevic you mean for it to automatically complete a sequence? I think you'd need to make your own function to do that <SEP> or if you'd pre-defined an array, because you wanted to re-use it a lot later... ``` upToFour = ",how to get a typescriptlang function to check the argument matches one of the tuple types?
Summarization," <SEP> ${`${1|2|never}${0|1|2|3|4|5|6|7|8|9|never}${0|1|2|3|4|5|6|7|8|9|never}`} <SEP> etc <SEP> but still, I know someone has come up with something that is better <SEP> probably not much better than that. <SEP> An alternative would be to generate a union of `0..255` <SEP> and use those instead <SEP> autocomplete would probably be nicer <SEP> ahh, that is probably more accurate <SEP> how do you join literals so I can have this on mulitple lines? <SEP> but there's no `Range <SEP> ``` type Foo =      | 0 | 1 | 2 | 3     | 4 | 5 | 6 | 7 ...; ``` works <SEP> typescript lets you add a leading `&` or ` |` just to make that syntax nice. <SEP> thanks <SEP> interesting article on that topic: https://blog.dave.tf/post/ip-addr-parsing/ <SEP> `0300.0250.0214.0377` is legal <SEP> ? <SEP> exceeds the octet range? <SEP> it's written in octal <SEP> ```TS2590: Expression produces a union type that is too complex to represent.``` <SEP> typescript hates me",how do you join literals in webstrand so I can have this on multiple lines?
Summarization," <SEP> I don't understand why Promise.reject() does not work in this case, can anyone offer an explanation? https://stackoverflow.com/questions/48845420/promise-argument-type-is-not-assignable/48845567?noredirect=1#comment84695524_48845567 <SEP> Looks like limitation in TS infer, that will be solved in TS 2.8 with conditional types <SEP> ``` Promise.resolve(""a"").then(function (data: string) {   if (data === ""b"") {     return Promise.reject(new Error());   }    return Promise.resolve({     data   }) });  Promise.resolve(""a"").then(async function (data: string) {   if (data === ""b"") {     return Promise.reject(new Error());   }    return {     data   }; }); ``` <SEP> two possible workarounds. And you could just throw error instead of returning rejected promise <SEP> ``` Promise.resolve(""a"").then(function (data: string) {   if (data === ""b"") {     return Promise.reject <SEP> this is also works <SEP> ``` Promise.reject(new Error()) ``` type is infered to Promise <SEP> Anyone has issue with unit test runner `jest`with rest parameters and Typescript compiled source code ? thanks <SEP> @jy95 not as described, maybe provide source that's causing the issue? <SEP> @eyelidlessness my repo : https://github.com/jy95/mediaScan . Cannot find out why this test fails : https://travis-ci.org/jy95/mediaScan/jobs/342767774#L2029 <SEP> ! <SEP> Missing parameter Error is thrown when there is nothing but it isn't the case : https://github.com/jy95/mediaScan/blob/master/__tests__/methods/addNewPath.ts#L41 <SEP> is there a reason that you think this is a typescript-specific error rather than a logic error? <SEP> I think so : ...folders doesn't seem to be understood  (declared here : https://github.com/jy95/mediaScan/blob/master/__tests__/__helpers__/_constants.ts#L6) <SEP> looking at the test, and the source it tests... <SEP> it looks like what you're trying to do is test for side-effects of `addNewPath` <SEP> is that right? <SEP> i.e. that when calling it, it sets `this.paths` to a value with  <SEP> i'm not super familiar with jest mocks/spies (i just discovered i've been using the jasmine ones by mistake for months)... but it's not clear to me  1. what happens when you spy without providing an implementation (does it just pass thru?) 2. why you're even spying on it here in the first place (you're calling it directly) <SEP> does the test pass if you remove the spy? <SEP> if it does just pass thru to the real implementation, i don't think the spread params are your issue. if they were, `paths.length` would be 0 and you'd get a promise rejection <SEP> i suspect you actually have a logic problem <SEP> oh i missed that there actually was the rejection <SEP> in the test scope <SEP> i know <SEP> what is it **at runtime** <SEP> wow. the gitter fonts are awful <SEP> now i'm stumped, i cloned yr repo gonna take a stab at debugging it :) <SEP> Thanks , no problemo about the time : this thing makes me mad XD <SEP> so here's the baffling thing <SEP> i'm making changes to the `addNewPath` method and they are not resulting in changes <SEP> nothing i am changing in MediaScan.ts is saving to /lib/MediaScan.js <SEP> i literally deleted the entire contents of the ts file and it didn't make a difference",why 'promise.reject()' does not work?
Summarization," <SEP> Using TS and asking questions in Gitter is definitely a good start. https://basarat.gitbooks.io/typescript/content/docs/getting-started.html is also a good resource (though strict null checks & other strict options are off for most of the examples, so they often won't compile if you have those on) <SEP> A lot of learning TS unfortunately is just experimenting. <SEP> Limbic resonance",Using TS and asking questions in Gitter is definitely a good start.
Summarization, <SEP> ruby is in the message-passing family of very OO languages <SEP> but I've been doing ruby for years now - I shouldn't be hearing about that project for the first time in a TS chat.  Shows what kind of impact it's had on the community. <SEP> :cry:,is there a reason not to mention ruby in a TS chat?
Summarization," <SEP> I'm having trouble with the greeter tutorial <SEP> on this line: document.body.innerHtml = greeter(user); <SEP> I get helloWorld.ts(5,15): error TS2339: Property 'innerHtml' does not exist on type 'HTMLElement'. <SEP> @graingert try innerHTML <SEP> Hi. I'm using a lib that defines `Date.create()`. How can I write a tsd that allows this? Right now I cannot compile my code that uses that lib. <SEP> Can a TypeScript method decorator access properties on the class  in which the decorated method exists? <SEP> is there a quick/simple way to import a whole directory without having to define an index.ts file? <SEP> it's a little irritating having to write ``` import a from './a'; import b from './b'; import c from './c'; export {a, b, c} ``` <SEP> @chilversc - I don't think there is. Unfortunately javascript is usually run on the server and does not know about every single file in a directory. There is no way for it to know about this either. This means that such imports would fail.  The best way of resolving this would be a plugin for your editor that auto-generates this file. <SEP> Unfortunately I'm not aware of any such plugins. <SEP> @victorarcasrios did you try `obj.constructor.prototype`? <SEP> @victorarcasrios  - you can also try ( <SEP> ``` function myType() {} var obj = new myType(); console.log(obj.prototype === undefined) // true console.log(myType.prototype === undefined) // false console.log(myType.prototype === obj.constructor.prototype) // true ``` <SEP> `( <SEP> https://github.com/datastax/nodejs-driver/blob/master/lib/types/time-uuid.js Cassandra nodejs driver does not exposes ",how to import a method from a directory without defining an index.ts file
Summarization," <SEP> How do I import a node module from npm if it doesn't have a `d.ts` file. <SEP> ```ts declare module ""yourModuleName"" {     var x: any;     export = x; } ``` <SEP> then you'll be able to import it",How do I import a node module from npm if it doesn't have a `d.ts`  file.
Summarization," <SEP> `Object.keys(IFortranTypes).find` gives error `Object.keys(IFortranTypes).find` <SEP> what is `IFortranTypes` <SEP> thats not important <SEP> the result of Object.keys(...) in `string <SEP> let me get a screensnip from vscode <SEP> ! <SEP> this is a retarded error <SEP> i need @types/node? <SEP> it si important <SEP> is it an interface? <SEP> are you missing somthing in `lib`? <SEP> ` const k =  <SEP>  this also gives an error <SEP> `find` is not available in es3 <SEP> which is on by default <SEP> change the `target` or add `es5` in `libs` <SEP> ? <SEP> what is the newest ? <SEP> es6? <SEP> `find` on `Array` is es6 addition <SEP> whopes, i shifted by one earlier lol <SEP> so `find` isnot avaibel in es5 <SEP> change the `target` or add `es6` in `libs` <SEP> newest is es2018 <SEP> ok <SEP> that seems to have solved it <SEP> but now i get this <SEP> `error TS2693: 'Promise' only refers to a type, but is being used as a value here.` <SEP>  Promises are not part of es6? <SEP> ``` export function promisify(fn: Function): (...args) = <SEP> the line new Promise gives ""refers to a type"" error <SEP> I will simplefy the function <SEP> removed the templates <SEP> `return new Promise <SEP> (referencing the code block) <SEP> `tsc -version Version 2.8.3` <SEP> wtf is going on here <SEP> the build in Map, Promise, etc, are seen only as types but a `new Promise(..)` or `new Map(..)` fails in tsc",object.keys(IFortranTypes.find gives error
Summarization," <SEP> Any way to type something like this: ```function pluck <SEP> If it's not, it should not compile <SEP> @bsdis Implement some higher level functions that can go over your tree structure to find/do stuff. <SEP> I have an array A of treenodes T. Each node has an array of childnodes T. I also have a path P:number",is there a way to type something liake function pluck？
Summarization," <SEP> Hey I am looking for some help with TypeScript. Must be quite simple just I have never worked with typed language.  ``` const addSessionData = (f: Function) = <SEP> use a generic parameter for that <SEP> ```ts const addSessionData =  <SEP> also, i might be wrong about this, but i don't thing `arguments` is valid in arrow functions <SEP> looking at your example, i'm not even sure where it would come from",Must be quite simple just I have never worked with typed language. const addSessionData = (f: Function) =
Summarization, <SEP> Ask @trusktr who has experience with mixins <SEP> Yeah I don't even know how to approach that in TS.  In JS I guess you could hide properties sorta? <SEP> is that guaranteed? <SEP> I should find out <SEP> I guess I find that surprising.  I would think at least something would be implemented in terms of something else across all the builtins. <SEP> But I guess maybe that would be suboptimal. <SEP> People at my company tried sequelize and typed-orm. They've been bitching non-stop about both those libraries.,is there a way to hide properties in mixins?
